# Based on the file created by David Abrahams for Boost.

import python ;

if ! [ python.configured ]
{
    ECHO "notice: no Python configured in user-config.jam" ;
    ECHO "notice: will use default configuration" ;
    using python ;
}

# Specify the path to the Boost project.  If you move this project,
# adjust this path to refer to the Boost root directory.
#use-project boost
#  : /usr/local/boost_1_60_0 ;

lib z3 : : <name>z3 ;
explicit z3 ;

lib boost_python : : <name>boost_python ;
explicit boost_python ;

import feature ;

feature.feature cpp11 :
    on :
    composite optional propagated
    ;

feature.compose <cpp11>on :
        <cxxflags>"-std=c++11 -Wno-unused-local-typedefs"
        <define>BOOST_NO_CXX11_NUMERIC_LIMITS=1
        <define>DISABLE_ICE_DEPRECATION_WARNINGS
    ;

# Set up the project-wide requirements that everything uses the
# boost_python library from the project whose global ID is
# /boost/python.
project
  : requirements <library>boost_python 
                 <library>z3
                 <cpp11>on
  : 
  ;

# Declare the three extension modules.  You can specify multiple
# source files after the colon separated by spaces.
python-extension ila : src/abstraction.cpp
                       src/ast/bitvec.cpp 
                       src/ast/bool.cpp
                       src/ast/bvinrange.cpp
                       src/ast/choice.cpp
                       src/ast.cpp 
                       src/ast/func.cpp
                       src/ast/mem.cpp
                       src/ast/node.cpp 
                       src/exception.cpp 
                       src/ext.cpp 
                       src/logging.cpp
                       src/memvalues.cpp
                       src/rewriter.cpp
                       src/simplify.cpp
                       src/smt.cpp
                       src/synthesizer.cpp
                       src/synrewriter.cpp
                       src/imexport.cpp
                       src/cppsimgen.cpp
                       src/type.cpp 
                       src/util.cpp 
                     : <include>./include ;

# Put the extension and Boost.Python DLL in the current directory, so
# that running script by hand works.
install convenient_copy 
  : ila 
  : <install-dependencies>on <install-type>SHARED_LIB <install-type>PYTHON_EXTENSION 
    <location>./build 
  ;

import testing ;

testing.make-test run-pyd : ila test/sanity.py : : test_sanity ;

testing.make-test run-pyd : ila test/types.py : : test_types ;

testing.make-test run-pyd : ila test/synthesize.py : : test_synthesize ;

testing.make-test run-pyd : ila test/equality.py : : test_equality ;

testing.make-test run-pyd : ila test/smtequal.py : : test_smtequal ;

testing.make-test run-pyd : ila test/operatorOP.py : : test_operator ;

testing.make-test run-pyd : ila test/mem.py : : test_mem ;

testing.make-test run-pyd : ila test/export.py : : test_export ;

testing.make-test run-pyd : ila test/alu.py : : test_alu ;

testing.make-test run-pyd : ila test/func.py : : test_func ;

testing.make-test run-pyd : ila test/simgen.py : : test_simgen ;


# A little "rule" (function) to clean up the syntax of declaring tests
# of these extension modules.
# local rule run-test ( test-name : sources + )
# {
#     import testing ;
#     testing.make-test run-pyd : $(sources) : : $(test-name) ;
# }

# Declare test targets
# run-test ila_synthesis : ila test/sanity.py ;


