#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_P3()
{
	BIT_VEC cppVar_36193 = ROM.rd(PC);
	bool cppVar_36195 = (cppVar_36193 == 210);
	BIT_VEC cppVar_36197 = PC + 1;
	cppVar_36197 = (cppVar_36197 & cppMask_un_16_);
	BIT_VEC cppVar_36198 = ROM.rd(cppVar_36197);
	BIT_VEC cppVar_36199 = (cppVar_36198 >> 7) & cppMask_un_1_;
	bool cppVar_36201 = (cppVar_36199 == 1);
	BIT_VEC cppVar_36202 = PC + 1;
	cppVar_36202 = (cppVar_36202 & cppMask_un_16_);
	BIT_VEC cppVar_36203 = ROM.rd(cppVar_36202);
	BIT_VEC cppVar_36204 = (cppVar_36203 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36206 = (cppVar_36204 << 3) | 0;
	cppVar_36206 = (cppVar_36206 & cppMask_un_8_);
	BIT_VEC cppVar_36207 = PC + 1;
	cppVar_36207 = (cppVar_36207 & cppMask_un_16_);
	BIT_VEC cppVar_36208 = ROM.rd(cppVar_36207);
	BIT_VEC cppVar_36209 = (cppVar_36208 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36210 = (cppVar_36209 & cppMask_un_5_);
	BIT_VEC cppVar_36212 = cppVar_36210 + 32;
	cppVar_36212 = (cppVar_36212 & cppMask_un_8_);
	BIT_VEC cppVar_36213 = (cppVar_36201) ? cppVar_36206 : cppVar_36212;
	bool cppVar_36215 = (cppVar_36213 == 176);
	BIT_VEC cppVar_36217 = PC + 1;
	cppVar_36217 = (cppVar_36217 & cppMask_un_16_);
	BIT_VEC cppVar_36218 = ROM.rd(cppVar_36217);
	BIT_VEC cppVar_36219 = (cppVar_36218 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_36220 = (cppVar_36219 & cppMask_un_3_);
	BIT_VEC cppVar_36221 = 1 << static_cast<unsigned>(cppVar_36220);
	cppVar_36221 = (cppVar_36221 & cppMask_un_8_);
	BIT_VEC cppVar_36222 = ~cppVar_36221;
	BIT_VEC cppVar_36223 = PC + 1;
	cppVar_36223 = (cppVar_36223 & cppMask_un_16_);
	BIT_VEC cppVar_36224 = ROM.rd(cppVar_36223);
	BIT_VEC cppVar_36225 = (cppVar_36224 >> 7) & cppMask_un_1_;
	bool cppVar_36226 = (cppVar_36225 == 1);
	BIT_VEC cppVar_36227 = PC + 1;
	cppVar_36227 = (cppVar_36227 & cppMask_un_16_);
	BIT_VEC cppVar_36228 = ROM.rd(cppVar_36227);
	BIT_VEC cppVar_36229 = (cppVar_36228 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36230 = (cppVar_36229 << 3) | 0;
	cppVar_36230 = (cppVar_36230 & cppMask_un_8_);
	BIT_VEC cppVar_36231 = PC + 1;
	cppVar_36231 = (cppVar_36231 & cppMask_un_16_);
	BIT_VEC cppVar_36232 = ROM.rd(cppVar_36231);
	BIT_VEC cppVar_36233 = (cppVar_36232 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36234 = (cppVar_36233 & cppMask_un_5_);
	BIT_VEC cppVar_36235 = cppVar_36234 + 32;
	cppVar_36235 = (cppVar_36235 & cppMask_un_8_);
	BIT_VEC cppVar_36236 = (cppVar_36226) ? cppVar_36230 : cppVar_36235;
	BIT_VEC cppVar_36237 = (cppVar_36236 >> 7) & cppMask_un_1_;
	bool cppVar_36239 = (cppVar_36237 == 0);
	BIT_VEC cppVar_36240 = PC + 1;
	cppVar_36240 = (cppVar_36240 & cppMask_un_16_);
	BIT_VEC cppVar_36241 = ROM.rd(cppVar_36240);
	BIT_VEC cppVar_36242 = (cppVar_36241 >> 7) & cppMask_un_1_;
	bool cppVar_36243 = (cppVar_36242 == 1);
	BIT_VEC cppVar_36244 = PC + 1;
	cppVar_36244 = (cppVar_36244 & cppMask_un_16_);
	BIT_VEC cppVar_36245 = ROM.rd(cppVar_36244);
	BIT_VEC cppVar_36246 = (cppVar_36245 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36247 = (cppVar_36246 << 3) | 0;
	cppVar_36247 = (cppVar_36247 & cppMask_un_8_);
	BIT_VEC cppVar_36248 = PC + 1;
	cppVar_36248 = (cppVar_36248 & cppMask_un_16_);
	BIT_VEC cppVar_36249 = ROM.rd(cppVar_36248);
	BIT_VEC cppVar_36250 = (cppVar_36249 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36251 = (cppVar_36250 & cppMask_un_5_);
	BIT_VEC cppVar_36252 = cppVar_36251 + 32;
	cppVar_36252 = (cppVar_36252 & cppMask_un_8_);
	BIT_VEC cppVar_36253 = (cppVar_36243) ? cppVar_36247 : cppVar_36252;
	BIT_VEC cppVar_36254 = IRAM.rd(cppVar_36253);
	BIT_VEC cppVar_36255 = PC + 1;
	cppVar_36255 = (cppVar_36255 & cppMask_un_16_);
	BIT_VEC cppVar_36256 = ROM.rd(cppVar_36255);
	BIT_VEC cppVar_36257 = (cppVar_36256 >> 7) & cppMask_un_1_;
	bool cppVar_36258 = (cppVar_36257 == 1);
	BIT_VEC cppVar_36259 = PC + 1;
	cppVar_36259 = (cppVar_36259 & cppMask_un_16_);
	BIT_VEC cppVar_36260 = ROM.rd(cppVar_36259);
	BIT_VEC cppVar_36261 = (cppVar_36260 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36262 = (cppVar_36261 << 3) | 0;
	cppVar_36262 = (cppVar_36262 & cppMask_un_8_);
	BIT_VEC cppVar_36263 = PC + 1;
	cppVar_36263 = (cppVar_36263 & cppMask_un_16_);
	BIT_VEC cppVar_36264 = ROM.rd(cppVar_36263);
	BIT_VEC cppVar_36265 = (cppVar_36264 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36266 = (cppVar_36265 & cppMask_un_5_);
	BIT_VEC cppVar_36267 = cppVar_36266 + 32;
	cppVar_36267 = (cppVar_36267 & cppMask_un_8_);
	BIT_VEC cppVar_36268 = (cppVar_36258) ? cppVar_36262 : cppVar_36267;
	bool cppVar_36270 = (cppVar_36268 == 128);
	BIT_VEC cppVar_36271 = PC + 1;
	cppVar_36271 = (cppVar_36271 & cppMask_un_16_);
	BIT_VEC cppVar_36272 = ROM.rd(cppVar_36271);
	BIT_VEC cppVar_36273 = (cppVar_36272 >> 7) & cppMask_un_1_;
	bool cppVar_36274 = (cppVar_36273 == 1);
	BIT_VEC cppVar_36275 = PC + 1;
	cppVar_36275 = (cppVar_36275 & cppMask_un_16_);
	BIT_VEC cppVar_36276 = ROM.rd(cppVar_36275);
	BIT_VEC cppVar_36277 = (cppVar_36276 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36278 = (cppVar_36277 << 3) | 0;
	cppVar_36278 = (cppVar_36278 & cppMask_un_8_);
	BIT_VEC cppVar_36279 = PC + 1;
	cppVar_36279 = (cppVar_36279 & cppMask_un_16_);
	BIT_VEC cppVar_36280 = ROM.rd(cppVar_36279);
	BIT_VEC cppVar_36281 = (cppVar_36280 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36282 = (cppVar_36281 & cppMask_un_5_);
	BIT_VEC cppVar_36283 = cppVar_36282 + 32;
	cppVar_36283 = (cppVar_36283 & cppMask_un_8_);
	BIT_VEC cppVar_36284 = (cppVar_36274) ? cppVar_36278 : cppVar_36283;
	bool cppVar_36286 = (cppVar_36284 == 129);
	BIT_VEC cppVar_36287 = PC + 1;
	cppVar_36287 = (cppVar_36287 & cppMask_un_16_);
	BIT_VEC cppVar_36288 = ROM.rd(cppVar_36287);
	BIT_VEC cppVar_36289 = (cppVar_36288 >> 7) & cppMask_un_1_;
	bool cppVar_36290 = (cppVar_36289 == 1);
	BIT_VEC cppVar_36291 = PC + 1;
	cppVar_36291 = (cppVar_36291 & cppMask_un_16_);
	BIT_VEC cppVar_36292 = ROM.rd(cppVar_36291);
	BIT_VEC cppVar_36293 = (cppVar_36292 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36294 = (cppVar_36293 << 3) | 0;
	cppVar_36294 = (cppVar_36294 & cppMask_un_8_);
	BIT_VEC cppVar_36295 = PC + 1;
	cppVar_36295 = (cppVar_36295 & cppMask_un_16_);
	BIT_VEC cppVar_36296 = ROM.rd(cppVar_36295);
	BIT_VEC cppVar_36297 = (cppVar_36296 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36298 = (cppVar_36297 & cppMask_un_5_);
	BIT_VEC cppVar_36299 = cppVar_36298 + 32;
	cppVar_36299 = (cppVar_36299 & cppMask_un_8_);
	BIT_VEC cppVar_36300 = (cppVar_36290) ? cppVar_36294 : cppVar_36299;
	bool cppVar_36302 = (cppVar_36300 == 130);
	BIT_VEC cppVar_36303 = PC + 1;
	cppVar_36303 = (cppVar_36303 & cppMask_un_16_);
	BIT_VEC cppVar_36304 = ROM.rd(cppVar_36303);
	BIT_VEC cppVar_36305 = (cppVar_36304 >> 7) & cppMask_un_1_;
	bool cppVar_36306 = (cppVar_36305 == 1);
	BIT_VEC cppVar_36307 = PC + 1;
	cppVar_36307 = (cppVar_36307 & cppMask_un_16_);
	BIT_VEC cppVar_36308 = ROM.rd(cppVar_36307);
	BIT_VEC cppVar_36309 = (cppVar_36308 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36310 = (cppVar_36309 << 3) | 0;
	cppVar_36310 = (cppVar_36310 & cppMask_un_8_);
	BIT_VEC cppVar_36311 = PC + 1;
	cppVar_36311 = (cppVar_36311 & cppMask_un_16_);
	BIT_VEC cppVar_36312 = ROM.rd(cppVar_36311);
	BIT_VEC cppVar_36313 = (cppVar_36312 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36314 = (cppVar_36313 & cppMask_un_5_);
	BIT_VEC cppVar_36315 = cppVar_36314 + 32;
	cppVar_36315 = (cppVar_36315 & cppMask_un_8_);
	BIT_VEC cppVar_36316 = (cppVar_36306) ? cppVar_36310 : cppVar_36315;
	bool cppVar_36318 = (cppVar_36316 == 131);
	BIT_VEC cppVar_36319 = PC + 1;
	cppVar_36319 = (cppVar_36319 & cppMask_un_16_);
	BIT_VEC cppVar_36320 = ROM.rd(cppVar_36319);
	BIT_VEC cppVar_36321 = (cppVar_36320 >> 7) & cppMask_un_1_;
	bool cppVar_36322 = (cppVar_36321 == 1);
	BIT_VEC cppVar_36323 = PC + 1;
	cppVar_36323 = (cppVar_36323 & cppMask_un_16_);
	BIT_VEC cppVar_36324 = ROM.rd(cppVar_36323);
	BIT_VEC cppVar_36325 = (cppVar_36324 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36326 = (cppVar_36325 << 3) | 0;
	cppVar_36326 = (cppVar_36326 & cppMask_un_8_);
	BIT_VEC cppVar_36327 = PC + 1;
	cppVar_36327 = (cppVar_36327 & cppMask_un_16_);
	BIT_VEC cppVar_36328 = ROM.rd(cppVar_36327);
	BIT_VEC cppVar_36329 = (cppVar_36328 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36330 = (cppVar_36329 & cppMask_un_5_);
	BIT_VEC cppVar_36331 = cppVar_36330 + 32;
	cppVar_36331 = (cppVar_36331 & cppMask_un_8_);
	BIT_VEC cppVar_36332 = (cppVar_36322) ? cppVar_36326 : cppVar_36331;
	bool cppVar_36334 = (cppVar_36332 == 135);
	BIT_VEC cppVar_36335 = PC + 1;
	cppVar_36335 = (cppVar_36335 & cppMask_un_16_);
	BIT_VEC cppVar_36336 = ROM.rd(cppVar_36335);
	BIT_VEC cppVar_36337 = (cppVar_36336 >> 7) & cppMask_un_1_;
	bool cppVar_36338 = (cppVar_36337 == 1);
	BIT_VEC cppVar_36339 = PC + 1;
	cppVar_36339 = (cppVar_36339 & cppMask_un_16_);
	BIT_VEC cppVar_36340 = ROM.rd(cppVar_36339);
	BIT_VEC cppVar_36341 = (cppVar_36340 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36342 = (cppVar_36341 << 3) | 0;
	cppVar_36342 = (cppVar_36342 & cppMask_un_8_);
	BIT_VEC cppVar_36343 = PC + 1;
	cppVar_36343 = (cppVar_36343 & cppMask_un_16_);
	BIT_VEC cppVar_36344 = ROM.rd(cppVar_36343);
	BIT_VEC cppVar_36345 = (cppVar_36344 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36346 = (cppVar_36345 & cppMask_un_5_);
	BIT_VEC cppVar_36347 = cppVar_36346 + 32;
	cppVar_36347 = (cppVar_36347 & cppMask_un_8_);
	BIT_VEC cppVar_36348 = (cppVar_36338) ? cppVar_36342 : cppVar_36347;
	bool cppVar_36350 = (cppVar_36348 == 136);
	BIT_VEC cppVar_36351 = PC + 1;
	cppVar_36351 = (cppVar_36351 & cppMask_un_16_);
	BIT_VEC cppVar_36352 = ROM.rd(cppVar_36351);
	BIT_VEC cppVar_36353 = (cppVar_36352 >> 7) & cppMask_un_1_;
	bool cppVar_36354 = (cppVar_36353 == 1);
	BIT_VEC cppVar_36355 = PC + 1;
	cppVar_36355 = (cppVar_36355 & cppMask_un_16_);
	BIT_VEC cppVar_36356 = ROM.rd(cppVar_36355);
	BIT_VEC cppVar_36357 = (cppVar_36356 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36358 = (cppVar_36357 << 3) | 0;
	cppVar_36358 = (cppVar_36358 & cppMask_un_8_);
	BIT_VEC cppVar_36359 = PC + 1;
	cppVar_36359 = (cppVar_36359 & cppMask_un_16_);
	BIT_VEC cppVar_36360 = ROM.rd(cppVar_36359);
	BIT_VEC cppVar_36361 = (cppVar_36360 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36362 = (cppVar_36361 & cppMask_un_5_);
	BIT_VEC cppVar_36363 = cppVar_36362 + 32;
	cppVar_36363 = (cppVar_36363 & cppMask_un_8_);
	BIT_VEC cppVar_36364 = (cppVar_36354) ? cppVar_36358 : cppVar_36363;
	bool cppVar_36366 = (cppVar_36364 == 137);
	BIT_VEC cppVar_36367 = PC + 1;
	cppVar_36367 = (cppVar_36367 & cppMask_un_16_);
	BIT_VEC cppVar_36368 = ROM.rd(cppVar_36367);
	BIT_VEC cppVar_36369 = (cppVar_36368 >> 7) & cppMask_un_1_;
	bool cppVar_36370 = (cppVar_36369 == 1);
	BIT_VEC cppVar_36371 = PC + 1;
	cppVar_36371 = (cppVar_36371 & cppMask_un_16_);
	BIT_VEC cppVar_36372 = ROM.rd(cppVar_36371);
	BIT_VEC cppVar_36373 = (cppVar_36372 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36374 = (cppVar_36373 << 3) | 0;
	cppVar_36374 = (cppVar_36374 & cppMask_un_8_);
	BIT_VEC cppVar_36375 = PC + 1;
	cppVar_36375 = (cppVar_36375 & cppMask_un_16_);
	BIT_VEC cppVar_36376 = ROM.rd(cppVar_36375);
	BIT_VEC cppVar_36377 = (cppVar_36376 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36378 = (cppVar_36377 & cppMask_un_5_);
	BIT_VEC cppVar_36379 = cppVar_36378 + 32;
	cppVar_36379 = (cppVar_36379 & cppMask_un_8_);
	BIT_VEC cppVar_36380 = (cppVar_36370) ? cppVar_36374 : cppVar_36379;
	bool cppVar_36382 = (cppVar_36380 == 138);
	BIT_VEC cppVar_36383 = PC + 1;
	cppVar_36383 = (cppVar_36383 & cppMask_un_16_);
	BIT_VEC cppVar_36384 = ROM.rd(cppVar_36383);
	BIT_VEC cppVar_36385 = (cppVar_36384 >> 7) & cppMask_un_1_;
	bool cppVar_36386 = (cppVar_36385 == 1);
	BIT_VEC cppVar_36387 = PC + 1;
	cppVar_36387 = (cppVar_36387 & cppMask_un_16_);
	BIT_VEC cppVar_36388 = ROM.rd(cppVar_36387);
	BIT_VEC cppVar_36389 = (cppVar_36388 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36390 = (cppVar_36389 << 3) | 0;
	cppVar_36390 = (cppVar_36390 & cppMask_un_8_);
	BIT_VEC cppVar_36391 = PC + 1;
	cppVar_36391 = (cppVar_36391 & cppMask_un_16_);
	BIT_VEC cppVar_36392 = ROM.rd(cppVar_36391);
	BIT_VEC cppVar_36393 = (cppVar_36392 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36394 = (cppVar_36393 & cppMask_un_5_);
	BIT_VEC cppVar_36395 = cppVar_36394 + 32;
	cppVar_36395 = (cppVar_36395 & cppMask_un_8_);
	BIT_VEC cppVar_36396 = (cppVar_36386) ? cppVar_36390 : cppVar_36395;
	bool cppVar_36398 = (cppVar_36396 == 140);
	BIT_VEC cppVar_36399 = PC + 1;
	cppVar_36399 = (cppVar_36399 & cppMask_un_16_);
	BIT_VEC cppVar_36400 = ROM.rd(cppVar_36399);
	BIT_VEC cppVar_36401 = (cppVar_36400 >> 7) & cppMask_un_1_;
	bool cppVar_36402 = (cppVar_36401 == 1);
	BIT_VEC cppVar_36403 = PC + 1;
	cppVar_36403 = (cppVar_36403 & cppMask_un_16_);
	BIT_VEC cppVar_36404 = ROM.rd(cppVar_36403);
	BIT_VEC cppVar_36405 = (cppVar_36404 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36406 = (cppVar_36405 << 3) | 0;
	cppVar_36406 = (cppVar_36406 & cppMask_un_8_);
	BIT_VEC cppVar_36407 = PC + 1;
	cppVar_36407 = (cppVar_36407 & cppMask_un_16_);
	BIT_VEC cppVar_36408 = ROM.rd(cppVar_36407);
	BIT_VEC cppVar_36409 = (cppVar_36408 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36410 = (cppVar_36409 & cppMask_un_5_);
	BIT_VEC cppVar_36411 = cppVar_36410 + 32;
	cppVar_36411 = (cppVar_36411 & cppMask_un_8_);
	BIT_VEC cppVar_36412 = (cppVar_36402) ? cppVar_36406 : cppVar_36411;
	bool cppVar_36414 = (cppVar_36412 == 139);
	BIT_VEC cppVar_36415 = PC + 1;
	cppVar_36415 = (cppVar_36415 & cppMask_un_16_);
	BIT_VEC cppVar_36416 = ROM.rd(cppVar_36415);
	BIT_VEC cppVar_36417 = (cppVar_36416 >> 7) & cppMask_un_1_;
	bool cppVar_36418 = (cppVar_36417 == 1);
	BIT_VEC cppVar_36419 = PC + 1;
	cppVar_36419 = (cppVar_36419 & cppMask_un_16_);
	BIT_VEC cppVar_36420 = ROM.rd(cppVar_36419);
	BIT_VEC cppVar_36421 = (cppVar_36420 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36422 = (cppVar_36421 << 3) | 0;
	cppVar_36422 = (cppVar_36422 & cppMask_un_8_);
	BIT_VEC cppVar_36423 = PC + 1;
	cppVar_36423 = (cppVar_36423 & cppMask_un_16_);
	BIT_VEC cppVar_36424 = ROM.rd(cppVar_36423);
	BIT_VEC cppVar_36425 = (cppVar_36424 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36426 = (cppVar_36425 & cppMask_un_5_);
	BIT_VEC cppVar_36427 = cppVar_36426 + 32;
	cppVar_36427 = (cppVar_36427 & cppMask_un_8_);
	BIT_VEC cppVar_36428 = (cppVar_36418) ? cppVar_36422 : cppVar_36427;
	bool cppVar_36430 = (cppVar_36428 == 141);
	BIT_VEC cppVar_36431 = PC + 1;
	cppVar_36431 = (cppVar_36431 & cppMask_un_16_);
	BIT_VEC cppVar_36432 = ROM.rd(cppVar_36431);
	BIT_VEC cppVar_36433 = (cppVar_36432 >> 7) & cppMask_un_1_;
	bool cppVar_36434 = (cppVar_36433 == 1);
	BIT_VEC cppVar_36435 = PC + 1;
	cppVar_36435 = (cppVar_36435 & cppMask_un_16_);
	BIT_VEC cppVar_36436 = ROM.rd(cppVar_36435);
	BIT_VEC cppVar_36437 = (cppVar_36436 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36438 = (cppVar_36437 << 3) | 0;
	cppVar_36438 = (cppVar_36438 & cppMask_un_8_);
	BIT_VEC cppVar_36439 = PC + 1;
	cppVar_36439 = (cppVar_36439 & cppMask_un_16_);
	BIT_VEC cppVar_36440 = ROM.rd(cppVar_36439);
	BIT_VEC cppVar_36441 = (cppVar_36440 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36442 = (cppVar_36441 & cppMask_un_5_);
	BIT_VEC cppVar_36443 = cppVar_36442 + 32;
	cppVar_36443 = (cppVar_36443 & cppMask_un_8_);
	BIT_VEC cppVar_36444 = (cppVar_36434) ? cppVar_36438 : cppVar_36443;
	bool cppVar_36446 = (cppVar_36444 == 144);
	BIT_VEC cppVar_36447 = PC + 1;
	cppVar_36447 = (cppVar_36447 & cppMask_un_16_);
	BIT_VEC cppVar_36448 = ROM.rd(cppVar_36447);
	BIT_VEC cppVar_36449 = (cppVar_36448 >> 7) & cppMask_un_1_;
	bool cppVar_36450 = (cppVar_36449 == 1);
	BIT_VEC cppVar_36451 = PC + 1;
	cppVar_36451 = (cppVar_36451 & cppMask_un_16_);
	BIT_VEC cppVar_36452 = ROM.rd(cppVar_36451);
	BIT_VEC cppVar_36453 = (cppVar_36452 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36454 = (cppVar_36453 << 3) | 0;
	cppVar_36454 = (cppVar_36454 & cppMask_un_8_);
	BIT_VEC cppVar_36455 = PC + 1;
	cppVar_36455 = (cppVar_36455 & cppMask_un_16_);
	BIT_VEC cppVar_36456 = ROM.rd(cppVar_36455);
	BIT_VEC cppVar_36457 = (cppVar_36456 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36458 = (cppVar_36457 & cppMask_un_5_);
	BIT_VEC cppVar_36459 = cppVar_36458 + 32;
	cppVar_36459 = (cppVar_36459 & cppMask_un_8_);
	BIT_VEC cppVar_36460 = (cppVar_36450) ? cppVar_36454 : cppVar_36459;
	bool cppVar_36462 = (cppVar_36460 == 152);
	BIT_VEC cppVar_36463 = PC + 1;
	cppVar_36463 = (cppVar_36463 & cppMask_un_16_);
	BIT_VEC cppVar_36464 = ROM.rd(cppVar_36463);
	BIT_VEC cppVar_36465 = (cppVar_36464 >> 7) & cppMask_un_1_;
	bool cppVar_36466 = (cppVar_36465 == 1);
	BIT_VEC cppVar_36467 = PC + 1;
	cppVar_36467 = (cppVar_36467 & cppMask_un_16_);
	BIT_VEC cppVar_36468 = ROM.rd(cppVar_36467);
	BIT_VEC cppVar_36469 = (cppVar_36468 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36470 = (cppVar_36469 << 3) | 0;
	cppVar_36470 = (cppVar_36470 & cppMask_un_8_);
	BIT_VEC cppVar_36471 = PC + 1;
	cppVar_36471 = (cppVar_36471 & cppMask_un_16_);
	BIT_VEC cppVar_36472 = ROM.rd(cppVar_36471);
	BIT_VEC cppVar_36473 = (cppVar_36472 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36474 = (cppVar_36473 & cppMask_un_5_);
	BIT_VEC cppVar_36475 = cppVar_36474 + 32;
	cppVar_36475 = (cppVar_36475 & cppMask_un_8_);
	BIT_VEC cppVar_36476 = (cppVar_36466) ? cppVar_36470 : cppVar_36475;
	bool cppVar_36478 = (cppVar_36476 == 153);
	BIT_VEC cppVar_36479 = PC + 1;
	cppVar_36479 = (cppVar_36479 & cppMask_un_16_);
	BIT_VEC cppVar_36480 = ROM.rd(cppVar_36479);
	BIT_VEC cppVar_36481 = (cppVar_36480 >> 7) & cppMask_un_1_;
	bool cppVar_36482 = (cppVar_36481 == 1);
	BIT_VEC cppVar_36483 = PC + 1;
	cppVar_36483 = (cppVar_36483 & cppMask_un_16_);
	BIT_VEC cppVar_36484 = ROM.rd(cppVar_36483);
	BIT_VEC cppVar_36485 = (cppVar_36484 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36486 = (cppVar_36485 << 3) | 0;
	cppVar_36486 = (cppVar_36486 & cppMask_un_8_);
	BIT_VEC cppVar_36487 = PC + 1;
	cppVar_36487 = (cppVar_36487 & cppMask_un_16_);
	BIT_VEC cppVar_36488 = ROM.rd(cppVar_36487);
	BIT_VEC cppVar_36489 = (cppVar_36488 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36490 = (cppVar_36489 & cppMask_un_5_);
	BIT_VEC cppVar_36491 = cppVar_36490 + 32;
	cppVar_36491 = (cppVar_36491 & cppMask_un_8_);
	BIT_VEC cppVar_36492 = (cppVar_36482) ? cppVar_36486 : cppVar_36491;
	bool cppVar_36494 = (cppVar_36492 == 160);
	BIT_VEC cppVar_36495 = PC + 1;
	cppVar_36495 = (cppVar_36495 & cppMask_un_16_);
	BIT_VEC cppVar_36496 = ROM.rd(cppVar_36495);
	BIT_VEC cppVar_36497 = (cppVar_36496 >> 7) & cppMask_un_1_;
	bool cppVar_36498 = (cppVar_36497 == 1);
	BIT_VEC cppVar_36499 = PC + 1;
	cppVar_36499 = (cppVar_36499 & cppMask_un_16_);
	BIT_VEC cppVar_36500 = ROM.rd(cppVar_36499);
	BIT_VEC cppVar_36501 = (cppVar_36500 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36502 = (cppVar_36501 << 3) | 0;
	cppVar_36502 = (cppVar_36502 & cppMask_un_8_);
	BIT_VEC cppVar_36503 = PC + 1;
	cppVar_36503 = (cppVar_36503 & cppMask_un_16_);
	BIT_VEC cppVar_36504 = ROM.rd(cppVar_36503);
	BIT_VEC cppVar_36505 = (cppVar_36504 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36506 = (cppVar_36505 & cppMask_un_5_);
	BIT_VEC cppVar_36507 = cppVar_36506 + 32;
	cppVar_36507 = (cppVar_36507 & cppMask_un_8_);
	BIT_VEC cppVar_36508 = (cppVar_36498) ? cppVar_36502 : cppVar_36507;
	bool cppVar_36510 = (cppVar_36508 == 168);
	BIT_VEC cppVar_36511 = PC + 1;
	cppVar_36511 = (cppVar_36511 & cppMask_un_16_);
	BIT_VEC cppVar_36512 = ROM.rd(cppVar_36511);
	BIT_VEC cppVar_36513 = (cppVar_36512 >> 7) & cppMask_un_1_;
	bool cppVar_36514 = (cppVar_36513 == 1);
	BIT_VEC cppVar_36515 = PC + 1;
	cppVar_36515 = (cppVar_36515 & cppMask_un_16_);
	BIT_VEC cppVar_36516 = ROM.rd(cppVar_36515);
	BIT_VEC cppVar_36517 = (cppVar_36516 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36518 = (cppVar_36517 << 3) | 0;
	cppVar_36518 = (cppVar_36518 & cppMask_un_8_);
	BIT_VEC cppVar_36519 = PC + 1;
	cppVar_36519 = (cppVar_36519 & cppMask_un_16_);
	BIT_VEC cppVar_36520 = ROM.rd(cppVar_36519);
	BIT_VEC cppVar_36521 = (cppVar_36520 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36522 = (cppVar_36521 & cppMask_un_5_);
	BIT_VEC cppVar_36523 = cppVar_36522 + 32;
	cppVar_36523 = (cppVar_36523 & cppMask_un_8_);
	BIT_VEC cppVar_36524 = (cppVar_36514) ? cppVar_36518 : cppVar_36523;
	bool cppVar_36526 = (cppVar_36524 == 176);
	BIT_VEC cppVar_36527 = PC + 1;
	cppVar_36527 = (cppVar_36527 & cppMask_un_16_);
	BIT_VEC cppVar_36528 = ROM.rd(cppVar_36527);
	BIT_VEC cppVar_36529 = (cppVar_36528 >> 7) & cppMask_un_1_;
	bool cppVar_36530 = (cppVar_36529 == 1);
	BIT_VEC cppVar_36531 = PC + 1;
	cppVar_36531 = (cppVar_36531 & cppMask_un_16_);
	BIT_VEC cppVar_36532 = ROM.rd(cppVar_36531);
	BIT_VEC cppVar_36533 = (cppVar_36532 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36534 = (cppVar_36533 << 3) | 0;
	cppVar_36534 = (cppVar_36534 & cppMask_un_8_);
	BIT_VEC cppVar_36535 = PC + 1;
	cppVar_36535 = (cppVar_36535 & cppMask_un_16_);
	BIT_VEC cppVar_36536 = ROM.rd(cppVar_36535);
	BIT_VEC cppVar_36537 = (cppVar_36536 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36538 = (cppVar_36537 & cppMask_un_5_);
	BIT_VEC cppVar_36539 = cppVar_36538 + 32;
	cppVar_36539 = (cppVar_36539 & cppMask_un_8_);
	BIT_VEC cppVar_36540 = (cppVar_36530) ? cppVar_36534 : cppVar_36539;
	bool cppVar_36542 = (cppVar_36540 == 184);
	BIT_VEC cppVar_36543 = PC + 1;
	cppVar_36543 = (cppVar_36543 & cppMask_un_16_);
	BIT_VEC cppVar_36544 = ROM.rd(cppVar_36543);
	BIT_VEC cppVar_36545 = (cppVar_36544 >> 7) & cppMask_un_1_;
	bool cppVar_36546 = (cppVar_36545 == 1);
	BIT_VEC cppVar_36547 = PC + 1;
	cppVar_36547 = (cppVar_36547 & cppMask_un_16_);
	BIT_VEC cppVar_36548 = ROM.rd(cppVar_36547);
	BIT_VEC cppVar_36549 = (cppVar_36548 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36550 = (cppVar_36549 << 3) | 0;
	cppVar_36550 = (cppVar_36550 & cppMask_un_8_);
	BIT_VEC cppVar_36551 = PC + 1;
	cppVar_36551 = (cppVar_36551 & cppMask_un_16_);
	BIT_VEC cppVar_36552 = ROM.rd(cppVar_36551);
	BIT_VEC cppVar_36553 = (cppVar_36552 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36554 = (cppVar_36553 & cppMask_un_5_);
	BIT_VEC cppVar_36555 = cppVar_36554 + 32;
	cppVar_36555 = (cppVar_36555 & cppMask_un_8_);
	BIT_VEC cppVar_36556 = (cppVar_36546) ? cppVar_36550 : cppVar_36555;
	bool cppVar_36558 = (cppVar_36556 == 208);
	BIT_VEC cppVar_36559 = PC + 1;
	cppVar_36559 = (cppVar_36559 & cppMask_un_16_);
	BIT_VEC cppVar_36560 = ROM.rd(cppVar_36559);
	BIT_VEC cppVar_36561 = (cppVar_36560 >> 7) & cppMask_un_1_;
	bool cppVar_36562 = (cppVar_36561 == 1);
	BIT_VEC cppVar_36563 = PC + 1;
	cppVar_36563 = (cppVar_36563 & cppMask_un_16_);
	BIT_VEC cppVar_36564 = ROM.rd(cppVar_36563);
	BIT_VEC cppVar_36565 = (cppVar_36564 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36566 = (cppVar_36565 << 3) | 0;
	cppVar_36566 = (cppVar_36566 & cppMask_un_8_);
	BIT_VEC cppVar_36567 = PC + 1;
	cppVar_36567 = (cppVar_36567 & cppMask_un_16_);
	BIT_VEC cppVar_36568 = ROM.rd(cppVar_36567);
	BIT_VEC cppVar_36569 = (cppVar_36568 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36570 = (cppVar_36569 & cppMask_un_5_);
	BIT_VEC cppVar_36571 = cppVar_36570 + 32;
	cppVar_36571 = (cppVar_36571 & cppMask_un_8_);
	BIT_VEC cppVar_36572 = (cppVar_36562) ? cppVar_36566 : cppVar_36571;
	bool cppVar_36574 = (cppVar_36572 == 224);
	BIT_VEC cppVar_36575 = PC + 1;
	cppVar_36575 = (cppVar_36575 & cppMask_un_16_);
	BIT_VEC cppVar_36576 = ROM.rd(cppVar_36575);
	BIT_VEC cppVar_36577 = (cppVar_36576 >> 7) & cppMask_un_1_;
	bool cppVar_36578 = (cppVar_36577 == 1);
	BIT_VEC cppVar_36579 = PC + 1;
	cppVar_36579 = (cppVar_36579 & cppMask_un_16_);
	BIT_VEC cppVar_36580 = ROM.rd(cppVar_36579);
	BIT_VEC cppVar_36581 = (cppVar_36580 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36582 = (cppVar_36581 << 3) | 0;
	cppVar_36582 = (cppVar_36582 & cppMask_un_8_);
	BIT_VEC cppVar_36583 = PC + 1;
	cppVar_36583 = (cppVar_36583 & cppMask_un_16_);
	BIT_VEC cppVar_36584 = ROM.rd(cppVar_36583);
	BIT_VEC cppVar_36585 = (cppVar_36584 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36586 = (cppVar_36585 & cppMask_un_5_);
	BIT_VEC cppVar_36587 = cppVar_36586 + 32;
	cppVar_36587 = (cppVar_36587 & cppMask_un_8_);
	BIT_VEC cppVar_36588 = (cppVar_36578) ? cppVar_36582 : cppVar_36587;
	bool cppVar_36590 = (cppVar_36588 == 240);
	BIT_VEC cppVar_36592 = (cppVar_36590) ? B : 0;
	BIT_VEC cppVar_36593 = (cppVar_36574) ? ACC : cppVar_36592;
	BIT_VEC cppVar_36594 = (cppVar_36558) ? PSW : cppVar_36593;
	BIT_VEC cppVar_36595 = (cppVar_36542) ? IP : cppVar_36594;
	BIT_VEC cppVar_36596 = (cppVar_36526) ? P3 : cppVar_36595;
	BIT_VEC cppVar_36597 = (cppVar_36510) ? IE : cppVar_36596;
	BIT_VEC cppVar_36598 = (cppVar_36494) ? P2 : cppVar_36597;
	BIT_VEC cppVar_36599 = (cppVar_36478) ? SBUF : cppVar_36598;
	BIT_VEC cppVar_36600 = (cppVar_36462) ? SCON : cppVar_36599;
	BIT_VEC cppVar_36601 = (cppVar_36446) ? P1 : cppVar_36600;
	BIT_VEC cppVar_36602 = (cppVar_36430) ? TH1 : cppVar_36601;
	BIT_VEC cppVar_36603 = (cppVar_36414) ? TL1 : cppVar_36602;
	BIT_VEC cppVar_36604 = (cppVar_36398) ? TH0 : cppVar_36603;
	BIT_VEC cppVar_36605 = (cppVar_36382) ? TL0 : cppVar_36604;
	BIT_VEC cppVar_36606 = (cppVar_36366) ? TMOD : cppVar_36605;
	BIT_VEC cppVar_36607 = (cppVar_36350) ? TCON : cppVar_36606;
	BIT_VEC cppVar_36608 = (cppVar_36334) ? PCON : cppVar_36607;
	BIT_VEC cppVar_36609 = (cppVar_36318) ? DPH : cppVar_36608;
	BIT_VEC cppVar_36610 = (cppVar_36302) ? DPL : cppVar_36609;
	BIT_VEC cppVar_36611 = (cppVar_36286) ? SP : cppVar_36610;
	BIT_VEC cppVar_36612 = (cppVar_36270) ? P0 : cppVar_36611;
	BIT_VEC cppVar_36613 = (cppVar_36239) ? cppVar_36254 : cppVar_36612;
	BIT_VEC cppVar_36614 = cppVar_36222 & cppVar_36613;
	BIT_VEC cppVar_36616 = 1;
	BIT_VEC cppVar_36617 = PC + 1;
	cppVar_36617 = (cppVar_36617 & cppMask_un_16_);
	BIT_VEC cppVar_36618 = ROM.rd(cppVar_36617);
	BIT_VEC cppVar_36619 = (cppVar_36618 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_36620 = (cppVar_36619 & cppMask_un_3_);
	BIT_VEC cppVar_36621 = cppVar_36616 << static_cast<unsigned>(cppVar_36620);
	cppVar_36621 = (cppVar_36621 & cppMask_un_8_);
	BIT_VEC cppVar_36622 = cppVar_36614 | cppVar_36621;
	BIT_VEC cppVar_36623 = (cppVar_36215) ? cppVar_36622 : P3;
	BIT_VEC cppVar_36624 = ROM.rd(PC);
	bool cppVar_36626 = (cppVar_36624 == 208);
	BIT_VEC cppVar_36628 = PC + 1;
	cppVar_36628 = (cppVar_36628 & cppMask_un_16_);
	BIT_VEC cppVar_36629 = ROM.rd(cppVar_36628);
	bool cppVar_36631 = (cppVar_36629 == 176);
	BIT_VEC cppVar_36632 = IRAM.rd(SP);
	BIT_VEC cppVar_36633 = (cppVar_36631) ? cppVar_36632 : P3;
	BIT_VEC cppVar_36634 = ROM.rd(PC);
	bool cppVar_36636 = (cppVar_36634 == 245);
	BIT_VEC cppVar_36637 = ROM.rd(PC);
	bool cppVar_36639 = (cppVar_36637 == 197);
	bool cppVar_36640 = cppVar_36636 || cppVar_36639;
	BIT_VEC cppVar_36642 = PC + 1;
	cppVar_36642 = (cppVar_36642 & cppMask_un_16_);
	BIT_VEC cppVar_36643 = ROM.rd(cppVar_36642);
	bool cppVar_36645 = (cppVar_36643 == 176);
	BIT_VEC cppVar_36646 = (cppVar_36645) ? ACC : P3;
	BIT_VEC cppVar_36647 = ROM.rd(PC);
	bool cppVar_36649 = (cppVar_36647 == 178);
	BIT_VEC cppVar_36651 = PC + 1;
	cppVar_36651 = (cppVar_36651 & cppMask_un_16_);
	BIT_VEC cppVar_36652 = ROM.rd(cppVar_36651);
	BIT_VEC cppVar_36653 = (cppVar_36652 >> 7) & cppMask_un_1_;
	bool cppVar_36655 = (cppVar_36653 == 1);
	BIT_VEC cppVar_36656 = PC + 1;
	cppVar_36656 = (cppVar_36656 & cppMask_un_16_);
	BIT_VEC cppVar_36657 = ROM.rd(cppVar_36656);
	BIT_VEC cppVar_36658 = (cppVar_36657 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36660 = (cppVar_36658 << 3) | 0;
	cppVar_36660 = (cppVar_36660 & cppMask_un_8_);
	BIT_VEC cppVar_36661 = PC + 1;
	cppVar_36661 = (cppVar_36661 & cppMask_un_16_);
	BIT_VEC cppVar_36662 = ROM.rd(cppVar_36661);
	BIT_VEC cppVar_36663 = (cppVar_36662 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36664 = (cppVar_36663 & cppMask_un_5_);
	BIT_VEC cppVar_36666 = cppVar_36664 + 32;
	cppVar_36666 = (cppVar_36666 & cppMask_un_8_);
	BIT_VEC cppVar_36667 = (cppVar_36655) ? cppVar_36660 : cppVar_36666;
	bool cppVar_36669 = (cppVar_36667 == 176);
	BIT_VEC cppVar_36671 = PC + 1;
	cppVar_36671 = (cppVar_36671 & cppMask_un_16_);
	BIT_VEC cppVar_36672 = ROM.rd(cppVar_36671);
	BIT_VEC cppVar_36673 = (cppVar_36672 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_36674 = (cppVar_36673 & cppMask_un_3_);
	BIT_VEC cppVar_36675 = 1 << static_cast<unsigned>(cppVar_36674);
	cppVar_36675 = (cppVar_36675 & cppMask_un_8_);
	BIT_VEC cppVar_36676 = ~cppVar_36675;
	BIT_VEC cppVar_36677 = PC + 1;
	cppVar_36677 = (cppVar_36677 & cppMask_un_16_);
	BIT_VEC cppVar_36678 = ROM.rd(cppVar_36677);
	BIT_VEC cppVar_36679 = (cppVar_36678 >> 7) & cppMask_un_1_;
	bool cppVar_36680 = (cppVar_36679 == 1);
	BIT_VEC cppVar_36681 = PC + 1;
	cppVar_36681 = (cppVar_36681 & cppMask_un_16_);
	BIT_VEC cppVar_36682 = ROM.rd(cppVar_36681);
	BIT_VEC cppVar_36683 = (cppVar_36682 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36684 = (cppVar_36683 << 3) | 0;
	cppVar_36684 = (cppVar_36684 & cppMask_un_8_);
	BIT_VEC cppVar_36685 = PC + 1;
	cppVar_36685 = (cppVar_36685 & cppMask_un_16_);
	BIT_VEC cppVar_36686 = ROM.rd(cppVar_36685);
	BIT_VEC cppVar_36687 = (cppVar_36686 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36688 = (cppVar_36687 & cppMask_un_5_);
	BIT_VEC cppVar_36689 = cppVar_36688 + 32;
	cppVar_36689 = (cppVar_36689 & cppMask_un_8_);
	BIT_VEC cppVar_36690 = (cppVar_36680) ? cppVar_36684 : cppVar_36689;
	BIT_VEC cppVar_36691 = (cppVar_36690 >> 7) & cppMask_un_1_;
	bool cppVar_36693 = (cppVar_36691 == 0);
	BIT_VEC cppVar_36694 = PC + 1;
	cppVar_36694 = (cppVar_36694 & cppMask_un_16_);
	BIT_VEC cppVar_36695 = ROM.rd(cppVar_36694);
	BIT_VEC cppVar_36696 = (cppVar_36695 >> 7) & cppMask_un_1_;
	bool cppVar_36697 = (cppVar_36696 == 1);
	BIT_VEC cppVar_36698 = PC + 1;
	cppVar_36698 = (cppVar_36698 & cppMask_un_16_);
	BIT_VEC cppVar_36699 = ROM.rd(cppVar_36698);
	BIT_VEC cppVar_36700 = (cppVar_36699 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36701 = (cppVar_36700 << 3) | 0;
	cppVar_36701 = (cppVar_36701 & cppMask_un_8_);
	BIT_VEC cppVar_36702 = PC + 1;
	cppVar_36702 = (cppVar_36702 & cppMask_un_16_);
	BIT_VEC cppVar_36703 = ROM.rd(cppVar_36702);
	BIT_VEC cppVar_36704 = (cppVar_36703 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36705 = (cppVar_36704 & cppMask_un_5_);
	BIT_VEC cppVar_36706 = cppVar_36705 + 32;
	cppVar_36706 = (cppVar_36706 & cppMask_un_8_);
	BIT_VEC cppVar_36707 = (cppVar_36697) ? cppVar_36701 : cppVar_36706;
	BIT_VEC cppVar_36708 = IRAM.rd(cppVar_36707);
	BIT_VEC cppVar_36709 = PC + 1;
	cppVar_36709 = (cppVar_36709 & cppMask_un_16_);
	BIT_VEC cppVar_36710 = ROM.rd(cppVar_36709);
	BIT_VEC cppVar_36711 = (cppVar_36710 >> 7) & cppMask_un_1_;
	bool cppVar_36712 = (cppVar_36711 == 1);
	BIT_VEC cppVar_36713 = PC + 1;
	cppVar_36713 = (cppVar_36713 & cppMask_un_16_);
	BIT_VEC cppVar_36714 = ROM.rd(cppVar_36713);
	BIT_VEC cppVar_36715 = (cppVar_36714 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36716 = (cppVar_36715 << 3) | 0;
	cppVar_36716 = (cppVar_36716 & cppMask_un_8_);
	BIT_VEC cppVar_36717 = PC + 1;
	cppVar_36717 = (cppVar_36717 & cppMask_un_16_);
	BIT_VEC cppVar_36718 = ROM.rd(cppVar_36717);
	BIT_VEC cppVar_36719 = (cppVar_36718 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36720 = (cppVar_36719 & cppMask_un_5_);
	BIT_VEC cppVar_36721 = cppVar_36720 + 32;
	cppVar_36721 = (cppVar_36721 & cppMask_un_8_);
	BIT_VEC cppVar_36722 = (cppVar_36712) ? cppVar_36716 : cppVar_36721;
	bool cppVar_36724 = (cppVar_36722 == 128);
	BIT_VEC cppVar_36725 = PC + 1;
	cppVar_36725 = (cppVar_36725 & cppMask_un_16_);
	BIT_VEC cppVar_36726 = ROM.rd(cppVar_36725);
	BIT_VEC cppVar_36727 = (cppVar_36726 >> 7) & cppMask_un_1_;
	bool cppVar_36728 = (cppVar_36727 == 1);
	BIT_VEC cppVar_36729 = PC + 1;
	cppVar_36729 = (cppVar_36729 & cppMask_un_16_);
	BIT_VEC cppVar_36730 = ROM.rd(cppVar_36729);
	BIT_VEC cppVar_36731 = (cppVar_36730 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36732 = (cppVar_36731 << 3) | 0;
	cppVar_36732 = (cppVar_36732 & cppMask_un_8_);
	BIT_VEC cppVar_36733 = PC + 1;
	cppVar_36733 = (cppVar_36733 & cppMask_un_16_);
	BIT_VEC cppVar_36734 = ROM.rd(cppVar_36733);
	BIT_VEC cppVar_36735 = (cppVar_36734 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36736 = (cppVar_36735 & cppMask_un_5_);
	BIT_VEC cppVar_36737 = cppVar_36736 + 32;
	cppVar_36737 = (cppVar_36737 & cppMask_un_8_);
	BIT_VEC cppVar_36738 = (cppVar_36728) ? cppVar_36732 : cppVar_36737;
	bool cppVar_36740 = (cppVar_36738 == 129);
	BIT_VEC cppVar_36741 = PC + 1;
	cppVar_36741 = (cppVar_36741 & cppMask_un_16_);
	BIT_VEC cppVar_36742 = ROM.rd(cppVar_36741);
	BIT_VEC cppVar_36743 = (cppVar_36742 >> 7) & cppMask_un_1_;
	bool cppVar_36744 = (cppVar_36743 == 1);
	BIT_VEC cppVar_36745 = PC + 1;
	cppVar_36745 = (cppVar_36745 & cppMask_un_16_);
	BIT_VEC cppVar_36746 = ROM.rd(cppVar_36745);
	BIT_VEC cppVar_36747 = (cppVar_36746 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36748 = (cppVar_36747 << 3) | 0;
	cppVar_36748 = (cppVar_36748 & cppMask_un_8_);
	BIT_VEC cppVar_36749 = PC + 1;
	cppVar_36749 = (cppVar_36749 & cppMask_un_16_);
	BIT_VEC cppVar_36750 = ROM.rd(cppVar_36749);
	BIT_VEC cppVar_36751 = (cppVar_36750 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36752 = (cppVar_36751 & cppMask_un_5_);
	BIT_VEC cppVar_36753 = cppVar_36752 + 32;
	cppVar_36753 = (cppVar_36753 & cppMask_un_8_);
	BIT_VEC cppVar_36754 = (cppVar_36744) ? cppVar_36748 : cppVar_36753;
	bool cppVar_36756 = (cppVar_36754 == 130);
	BIT_VEC cppVar_36757 = PC + 1;
	cppVar_36757 = (cppVar_36757 & cppMask_un_16_);
	BIT_VEC cppVar_36758 = ROM.rd(cppVar_36757);
	BIT_VEC cppVar_36759 = (cppVar_36758 >> 7) & cppMask_un_1_;
	bool cppVar_36760 = (cppVar_36759 == 1);
	BIT_VEC cppVar_36761 = PC + 1;
	cppVar_36761 = (cppVar_36761 & cppMask_un_16_);
	BIT_VEC cppVar_36762 = ROM.rd(cppVar_36761);
	BIT_VEC cppVar_36763 = (cppVar_36762 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36764 = (cppVar_36763 << 3) | 0;
	cppVar_36764 = (cppVar_36764 & cppMask_un_8_);
	BIT_VEC cppVar_36765 = PC + 1;
	cppVar_36765 = (cppVar_36765 & cppMask_un_16_);
	BIT_VEC cppVar_36766 = ROM.rd(cppVar_36765);
	BIT_VEC cppVar_36767 = (cppVar_36766 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36768 = (cppVar_36767 & cppMask_un_5_);
	BIT_VEC cppVar_36769 = cppVar_36768 + 32;
	cppVar_36769 = (cppVar_36769 & cppMask_un_8_);
	BIT_VEC cppVar_36770 = (cppVar_36760) ? cppVar_36764 : cppVar_36769;
	bool cppVar_36772 = (cppVar_36770 == 131);
	BIT_VEC cppVar_36773 = PC + 1;
	cppVar_36773 = (cppVar_36773 & cppMask_un_16_);
	BIT_VEC cppVar_36774 = ROM.rd(cppVar_36773);
	BIT_VEC cppVar_36775 = (cppVar_36774 >> 7) & cppMask_un_1_;
	bool cppVar_36776 = (cppVar_36775 == 1);
	BIT_VEC cppVar_36777 = PC + 1;
	cppVar_36777 = (cppVar_36777 & cppMask_un_16_);
	BIT_VEC cppVar_36778 = ROM.rd(cppVar_36777);
	BIT_VEC cppVar_36779 = (cppVar_36778 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36780 = (cppVar_36779 << 3) | 0;
	cppVar_36780 = (cppVar_36780 & cppMask_un_8_);
	BIT_VEC cppVar_36781 = PC + 1;
	cppVar_36781 = (cppVar_36781 & cppMask_un_16_);
	BIT_VEC cppVar_36782 = ROM.rd(cppVar_36781);
	BIT_VEC cppVar_36783 = (cppVar_36782 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36784 = (cppVar_36783 & cppMask_un_5_);
	BIT_VEC cppVar_36785 = cppVar_36784 + 32;
	cppVar_36785 = (cppVar_36785 & cppMask_un_8_);
	BIT_VEC cppVar_36786 = (cppVar_36776) ? cppVar_36780 : cppVar_36785;
	bool cppVar_36788 = (cppVar_36786 == 135);
	BIT_VEC cppVar_36789 = PC + 1;
	cppVar_36789 = (cppVar_36789 & cppMask_un_16_);
	BIT_VEC cppVar_36790 = ROM.rd(cppVar_36789);
	BIT_VEC cppVar_36791 = (cppVar_36790 >> 7) & cppMask_un_1_;
	bool cppVar_36792 = (cppVar_36791 == 1);
	BIT_VEC cppVar_36793 = PC + 1;
	cppVar_36793 = (cppVar_36793 & cppMask_un_16_);
	BIT_VEC cppVar_36794 = ROM.rd(cppVar_36793);
	BIT_VEC cppVar_36795 = (cppVar_36794 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36796 = (cppVar_36795 << 3) | 0;
	cppVar_36796 = (cppVar_36796 & cppMask_un_8_);
	BIT_VEC cppVar_36797 = PC + 1;
	cppVar_36797 = (cppVar_36797 & cppMask_un_16_);
	BIT_VEC cppVar_36798 = ROM.rd(cppVar_36797);
	BIT_VEC cppVar_36799 = (cppVar_36798 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36800 = (cppVar_36799 & cppMask_un_5_);
	BIT_VEC cppVar_36801 = cppVar_36800 + 32;
	cppVar_36801 = (cppVar_36801 & cppMask_un_8_);
	BIT_VEC cppVar_36802 = (cppVar_36792) ? cppVar_36796 : cppVar_36801;
	bool cppVar_36804 = (cppVar_36802 == 136);
	BIT_VEC cppVar_36805 = PC + 1;
	cppVar_36805 = (cppVar_36805 & cppMask_un_16_);
	BIT_VEC cppVar_36806 = ROM.rd(cppVar_36805);
	BIT_VEC cppVar_36807 = (cppVar_36806 >> 7) & cppMask_un_1_;
	bool cppVar_36808 = (cppVar_36807 == 1);
	BIT_VEC cppVar_36809 = PC + 1;
	cppVar_36809 = (cppVar_36809 & cppMask_un_16_);
	BIT_VEC cppVar_36810 = ROM.rd(cppVar_36809);
	BIT_VEC cppVar_36811 = (cppVar_36810 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36812 = (cppVar_36811 << 3) | 0;
	cppVar_36812 = (cppVar_36812 & cppMask_un_8_);
	BIT_VEC cppVar_36813 = PC + 1;
	cppVar_36813 = (cppVar_36813 & cppMask_un_16_);
	BIT_VEC cppVar_36814 = ROM.rd(cppVar_36813);
	BIT_VEC cppVar_36815 = (cppVar_36814 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36816 = (cppVar_36815 & cppMask_un_5_);
	BIT_VEC cppVar_36817 = cppVar_36816 + 32;
	cppVar_36817 = (cppVar_36817 & cppMask_un_8_);
	BIT_VEC cppVar_36818 = (cppVar_36808) ? cppVar_36812 : cppVar_36817;
	bool cppVar_36820 = (cppVar_36818 == 137);
	BIT_VEC cppVar_36821 = PC + 1;
	cppVar_36821 = (cppVar_36821 & cppMask_un_16_);
	BIT_VEC cppVar_36822 = ROM.rd(cppVar_36821);
	BIT_VEC cppVar_36823 = (cppVar_36822 >> 7) & cppMask_un_1_;
	bool cppVar_36824 = (cppVar_36823 == 1);
	BIT_VEC cppVar_36825 = PC + 1;
	cppVar_36825 = (cppVar_36825 & cppMask_un_16_);
	BIT_VEC cppVar_36826 = ROM.rd(cppVar_36825);
	BIT_VEC cppVar_36827 = (cppVar_36826 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36828 = (cppVar_36827 << 3) | 0;
	cppVar_36828 = (cppVar_36828 & cppMask_un_8_);
	BIT_VEC cppVar_36829 = PC + 1;
	cppVar_36829 = (cppVar_36829 & cppMask_un_16_);
	BIT_VEC cppVar_36830 = ROM.rd(cppVar_36829);
	BIT_VEC cppVar_36831 = (cppVar_36830 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36832 = (cppVar_36831 & cppMask_un_5_);
	BIT_VEC cppVar_36833 = cppVar_36832 + 32;
	cppVar_36833 = (cppVar_36833 & cppMask_un_8_);
	BIT_VEC cppVar_36834 = (cppVar_36824) ? cppVar_36828 : cppVar_36833;
	bool cppVar_36836 = (cppVar_36834 == 138);
	BIT_VEC cppVar_36837 = PC + 1;
	cppVar_36837 = (cppVar_36837 & cppMask_un_16_);
	BIT_VEC cppVar_36838 = ROM.rd(cppVar_36837);
	BIT_VEC cppVar_36839 = (cppVar_36838 >> 7) & cppMask_un_1_;
	bool cppVar_36840 = (cppVar_36839 == 1);
	BIT_VEC cppVar_36841 = PC + 1;
	cppVar_36841 = (cppVar_36841 & cppMask_un_16_);
	BIT_VEC cppVar_36842 = ROM.rd(cppVar_36841);
	BIT_VEC cppVar_36843 = (cppVar_36842 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36844 = (cppVar_36843 << 3) | 0;
	cppVar_36844 = (cppVar_36844 & cppMask_un_8_);
	BIT_VEC cppVar_36845 = PC + 1;
	cppVar_36845 = (cppVar_36845 & cppMask_un_16_);
	BIT_VEC cppVar_36846 = ROM.rd(cppVar_36845);
	BIT_VEC cppVar_36847 = (cppVar_36846 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36848 = (cppVar_36847 & cppMask_un_5_);
	BIT_VEC cppVar_36849 = cppVar_36848 + 32;
	cppVar_36849 = (cppVar_36849 & cppMask_un_8_);
	BIT_VEC cppVar_36850 = (cppVar_36840) ? cppVar_36844 : cppVar_36849;
	bool cppVar_36852 = (cppVar_36850 == 140);
	BIT_VEC cppVar_36853 = PC + 1;
	cppVar_36853 = (cppVar_36853 & cppMask_un_16_);
	BIT_VEC cppVar_36854 = ROM.rd(cppVar_36853);
	BIT_VEC cppVar_36855 = (cppVar_36854 >> 7) & cppMask_un_1_;
	bool cppVar_36856 = (cppVar_36855 == 1);
	BIT_VEC cppVar_36857 = PC + 1;
	cppVar_36857 = (cppVar_36857 & cppMask_un_16_);
	BIT_VEC cppVar_36858 = ROM.rd(cppVar_36857);
	BIT_VEC cppVar_36859 = (cppVar_36858 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36860 = (cppVar_36859 << 3) | 0;
	cppVar_36860 = (cppVar_36860 & cppMask_un_8_);
	BIT_VEC cppVar_36861 = PC + 1;
	cppVar_36861 = (cppVar_36861 & cppMask_un_16_);
	BIT_VEC cppVar_36862 = ROM.rd(cppVar_36861);
	BIT_VEC cppVar_36863 = (cppVar_36862 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36864 = (cppVar_36863 & cppMask_un_5_);
	BIT_VEC cppVar_36865 = cppVar_36864 + 32;
	cppVar_36865 = (cppVar_36865 & cppMask_un_8_);
	BIT_VEC cppVar_36866 = (cppVar_36856) ? cppVar_36860 : cppVar_36865;
	bool cppVar_36868 = (cppVar_36866 == 139);
	BIT_VEC cppVar_36869 = PC + 1;
	cppVar_36869 = (cppVar_36869 & cppMask_un_16_);
	BIT_VEC cppVar_36870 = ROM.rd(cppVar_36869);
	BIT_VEC cppVar_36871 = (cppVar_36870 >> 7) & cppMask_un_1_;
	bool cppVar_36872 = (cppVar_36871 == 1);
	BIT_VEC cppVar_36873 = PC + 1;
	cppVar_36873 = (cppVar_36873 & cppMask_un_16_);
	BIT_VEC cppVar_36874 = ROM.rd(cppVar_36873);
	BIT_VEC cppVar_36875 = (cppVar_36874 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36876 = (cppVar_36875 << 3) | 0;
	cppVar_36876 = (cppVar_36876 & cppMask_un_8_);
	BIT_VEC cppVar_36877 = PC + 1;
	cppVar_36877 = (cppVar_36877 & cppMask_un_16_);
	BIT_VEC cppVar_36878 = ROM.rd(cppVar_36877);
	BIT_VEC cppVar_36879 = (cppVar_36878 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36880 = (cppVar_36879 & cppMask_un_5_);
	BIT_VEC cppVar_36881 = cppVar_36880 + 32;
	cppVar_36881 = (cppVar_36881 & cppMask_un_8_);
	BIT_VEC cppVar_36882 = (cppVar_36872) ? cppVar_36876 : cppVar_36881;
	bool cppVar_36884 = (cppVar_36882 == 141);
	BIT_VEC cppVar_36885 = PC + 1;
	cppVar_36885 = (cppVar_36885 & cppMask_un_16_);
	BIT_VEC cppVar_36886 = ROM.rd(cppVar_36885);
	BIT_VEC cppVar_36887 = (cppVar_36886 >> 7) & cppMask_un_1_;
	bool cppVar_36888 = (cppVar_36887 == 1);
	BIT_VEC cppVar_36889 = PC + 1;
	cppVar_36889 = (cppVar_36889 & cppMask_un_16_);
	BIT_VEC cppVar_36890 = ROM.rd(cppVar_36889);
	BIT_VEC cppVar_36891 = (cppVar_36890 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36892 = (cppVar_36891 << 3) | 0;
	cppVar_36892 = (cppVar_36892 & cppMask_un_8_);
	BIT_VEC cppVar_36893 = PC + 1;
	cppVar_36893 = (cppVar_36893 & cppMask_un_16_);
	BIT_VEC cppVar_36894 = ROM.rd(cppVar_36893);
	BIT_VEC cppVar_36895 = (cppVar_36894 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36896 = (cppVar_36895 & cppMask_un_5_);
	BIT_VEC cppVar_36897 = cppVar_36896 + 32;
	cppVar_36897 = (cppVar_36897 & cppMask_un_8_);
	BIT_VEC cppVar_36898 = (cppVar_36888) ? cppVar_36892 : cppVar_36897;
	bool cppVar_36900 = (cppVar_36898 == 144);
	BIT_VEC cppVar_36901 = PC + 1;
	cppVar_36901 = (cppVar_36901 & cppMask_un_16_);
	BIT_VEC cppVar_36902 = ROM.rd(cppVar_36901);
	BIT_VEC cppVar_36903 = (cppVar_36902 >> 7) & cppMask_un_1_;
	bool cppVar_36904 = (cppVar_36903 == 1);
	BIT_VEC cppVar_36905 = PC + 1;
	cppVar_36905 = (cppVar_36905 & cppMask_un_16_);
	BIT_VEC cppVar_36906 = ROM.rd(cppVar_36905);
	BIT_VEC cppVar_36907 = (cppVar_36906 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36908 = (cppVar_36907 << 3) | 0;
	cppVar_36908 = (cppVar_36908 & cppMask_un_8_);
	BIT_VEC cppVar_36909 = PC + 1;
	cppVar_36909 = (cppVar_36909 & cppMask_un_16_);
	BIT_VEC cppVar_36910 = ROM.rd(cppVar_36909);
	BIT_VEC cppVar_36911 = (cppVar_36910 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36912 = (cppVar_36911 & cppMask_un_5_);
	BIT_VEC cppVar_36913 = cppVar_36912 + 32;
	cppVar_36913 = (cppVar_36913 & cppMask_un_8_);
	BIT_VEC cppVar_36914 = (cppVar_36904) ? cppVar_36908 : cppVar_36913;
	bool cppVar_36916 = (cppVar_36914 == 152);
	BIT_VEC cppVar_36917 = PC + 1;
	cppVar_36917 = (cppVar_36917 & cppMask_un_16_);
	BIT_VEC cppVar_36918 = ROM.rd(cppVar_36917);
	BIT_VEC cppVar_36919 = (cppVar_36918 >> 7) & cppMask_un_1_;
	bool cppVar_36920 = (cppVar_36919 == 1);
	BIT_VEC cppVar_36921 = PC + 1;
	cppVar_36921 = (cppVar_36921 & cppMask_un_16_);
	BIT_VEC cppVar_36922 = ROM.rd(cppVar_36921);
	BIT_VEC cppVar_36923 = (cppVar_36922 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36924 = (cppVar_36923 << 3) | 0;
	cppVar_36924 = (cppVar_36924 & cppMask_un_8_);
	BIT_VEC cppVar_36925 = PC + 1;
	cppVar_36925 = (cppVar_36925 & cppMask_un_16_);
	BIT_VEC cppVar_36926 = ROM.rd(cppVar_36925);
	BIT_VEC cppVar_36927 = (cppVar_36926 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36928 = (cppVar_36927 & cppMask_un_5_);
	BIT_VEC cppVar_36929 = cppVar_36928 + 32;
	cppVar_36929 = (cppVar_36929 & cppMask_un_8_);
	BIT_VEC cppVar_36930 = (cppVar_36920) ? cppVar_36924 : cppVar_36929;
	bool cppVar_36932 = (cppVar_36930 == 153);
	BIT_VEC cppVar_36933 = PC + 1;
	cppVar_36933 = (cppVar_36933 & cppMask_un_16_);
	BIT_VEC cppVar_36934 = ROM.rd(cppVar_36933);
	BIT_VEC cppVar_36935 = (cppVar_36934 >> 7) & cppMask_un_1_;
	bool cppVar_36936 = (cppVar_36935 == 1);
	BIT_VEC cppVar_36937 = PC + 1;
	cppVar_36937 = (cppVar_36937 & cppMask_un_16_);
	BIT_VEC cppVar_36938 = ROM.rd(cppVar_36937);
	BIT_VEC cppVar_36939 = (cppVar_36938 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36940 = (cppVar_36939 << 3) | 0;
	cppVar_36940 = (cppVar_36940 & cppMask_un_8_);
	BIT_VEC cppVar_36941 = PC + 1;
	cppVar_36941 = (cppVar_36941 & cppMask_un_16_);
	BIT_VEC cppVar_36942 = ROM.rd(cppVar_36941);
	BIT_VEC cppVar_36943 = (cppVar_36942 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36944 = (cppVar_36943 & cppMask_un_5_);
	BIT_VEC cppVar_36945 = cppVar_36944 + 32;
	cppVar_36945 = (cppVar_36945 & cppMask_un_8_);
	BIT_VEC cppVar_36946 = (cppVar_36936) ? cppVar_36940 : cppVar_36945;
	bool cppVar_36948 = (cppVar_36946 == 160);
	BIT_VEC cppVar_36949 = PC + 1;
	cppVar_36949 = (cppVar_36949 & cppMask_un_16_);
	BIT_VEC cppVar_36950 = ROM.rd(cppVar_36949);
	BIT_VEC cppVar_36951 = (cppVar_36950 >> 7) & cppMask_un_1_;
	bool cppVar_36952 = (cppVar_36951 == 1);
	BIT_VEC cppVar_36953 = PC + 1;
	cppVar_36953 = (cppVar_36953 & cppMask_un_16_);
	BIT_VEC cppVar_36954 = ROM.rd(cppVar_36953);
	BIT_VEC cppVar_36955 = (cppVar_36954 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36956 = (cppVar_36955 << 3) | 0;
	cppVar_36956 = (cppVar_36956 & cppMask_un_8_);
	BIT_VEC cppVar_36957 = PC + 1;
	cppVar_36957 = (cppVar_36957 & cppMask_un_16_);
	BIT_VEC cppVar_36958 = ROM.rd(cppVar_36957);
	BIT_VEC cppVar_36959 = (cppVar_36958 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36960 = (cppVar_36959 & cppMask_un_5_);
	BIT_VEC cppVar_36961 = cppVar_36960 + 32;
	cppVar_36961 = (cppVar_36961 & cppMask_un_8_);
	BIT_VEC cppVar_36962 = (cppVar_36952) ? cppVar_36956 : cppVar_36961;
	bool cppVar_36964 = (cppVar_36962 == 168);
	BIT_VEC cppVar_36965 = PC + 1;
	cppVar_36965 = (cppVar_36965 & cppMask_un_16_);
	BIT_VEC cppVar_36966 = ROM.rd(cppVar_36965);
	BIT_VEC cppVar_36967 = (cppVar_36966 >> 7) & cppMask_un_1_;
	bool cppVar_36968 = (cppVar_36967 == 1);
	BIT_VEC cppVar_36969 = PC + 1;
	cppVar_36969 = (cppVar_36969 & cppMask_un_16_);
	BIT_VEC cppVar_36970 = ROM.rd(cppVar_36969);
	BIT_VEC cppVar_36971 = (cppVar_36970 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36972 = (cppVar_36971 << 3) | 0;
	cppVar_36972 = (cppVar_36972 & cppMask_un_8_);
	BIT_VEC cppVar_36973 = PC + 1;
	cppVar_36973 = (cppVar_36973 & cppMask_un_16_);
	BIT_VEC cppVar_36974 = ROM.rd(cppVar_36973);
	BIT_VEC cppVar_36975 = (cppVar_36974 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36976 = (cppVar_36975 & cppMask_un_5_);
	BIT_VEC cppVar_36977 = cppVar_36976 + 32;
	cppVar_36977 = (cppVar_36977 & cppMask_un_8_);
	BIT_VEC cppVar_36978 = (cppVar_36968) ? cppVar_36972 : cppVar_36977;
	bool cppVar_36980 = (cppVar_36978 == 176);
	BIT_VEC cppVar_36981 = PC + 1;
	cppVar_36981 = (cppVar_36981 & cppMask_un_16_);
	BIT_VEC cppVar_36982 = ROM.rd(cppVar_36981);
	BIT_VEC cppVar_36983 = (cppVar_36982 >> 7) & cppMask_un_1_;
	bool cppVar_36984 = (cppVar_36983 == 1);
	BIT_VEC cppVar_36985 = PC + 1;
	cppVar_36985 = (cppVar_36985 & cppMask_un_16_);
	BIT_VEC cppVar_36986 = ROM.rd(cppVar_36985);
	BIT_VEC cppVar_36987 = (cppVar_36986 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36988 = (cppVar_36987 << 3) | 0;
	cppVar_36988 = (cppVar_36988 & cppMask_un_8_);
	BIT_VEC cppVar_36989 = PC + 1;
	cppVar_36989 = (cppVar_36989 & cppMask_un_16_);
	BIT_VEC cppVar_36990 = ROM.rd(cppVar_36989);
	BIT_VEC cppVar_36991 = (cppVar_36990 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36992 = (cppVar_36991 & cppMask_un_5_);
	BIT_VEC cppVar_36993 = cppVar_36992 + 32;
	cppVar_36993 = (cppVar_36993 & cppMask_un_8_);
	BIT_VEC cppVar_36994 = (cppVar_36984) ? cppVar_36988 : cppVar_36993;
	bool cppVar_36996 = (cppVar_36994 == 184);
	BIT_VEC cppVar_36997 = PC + 1;
	cppVar_36997 = (cppVar_36997 & cppMask_un_16_);
	BIT_VEC cppVar_36998 = ROM.rd(cppVar_36997);
	BIT_VEC cppVar_36999 = (cppVar_36998 >> 7) & cppMask_un_1_;
	bool cppVar_37000 = (cppVar_36999 == 1);
	BIT_VEC cppVar_37001 = PC + 1;
	cppVar_37001 = (cppVar_37001 & cppMask_un_16_);
	BIT_VEC cppVar_37002 = ROM.rd(cppVar_37001);
	BIT_VEC cppVar_37003 = (cppVar_37002 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37004 = (cppVar_37003 << 3) | 0;
	cppVar_37004 = (cppVar_37004 & cppMask_un_8_);
	BIT_VEC cppVar_37005 = PC + 1;
	cppVar_37005 = (cppVar_37005 & cppMask_un_16_);
	BIT_VEC cppVar_37006 = ROM.rd(cppVar_37005);
	BIT_VEC cppVar_37007 = (cppVar_37006 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37008 = (cppVar_37007 & cppMask_un_5_);
	BIT_VEC cppVar_37009 = cppVar_37008 + 32;
	cppVar_37009 = (cppVar_37009 & cppMask_un_8_);
	BIT_VEC cppVar_37010 = (cppVar_37000) ? cppVar_37004 : cppVar_37009;
	bool cppVar_37012 = (cppVar_37010 == 208);
	BIT_VEC cppVar_37013 = PC + 1;
	cppVar_37013 = (cppVar_37013 & cppMask_un_16_);
	BIT_VEC cppVar_37014 = ROM.rd(cppVar_37013);
	BIT_VEC cppVar_37015 = (cppVar_37014 >> 7) & cppMask_un_1_;
	bool cppVar_37016 = (cppVar_37015 == 1);
	BIT_VEC cppVar_37017 = PC + 1;
	cppVar_37017 = (cppVar_37017 & cppMask_un_16_);
	BIT_VEC cppVar_37018 = ROM.rd(cppVar_37017);
	BIT_VEC cppVar_37019 = (cppVar_37018 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37020 = (cppVar_37019 << 3) | 0;
	cppVar_37020 = (cppVar_37020 & cppMask_un_8_);
	BIT_VEC cppVar_37021 = PC + 1;
	cppVar_37021 = (cppVar_37021 & cppMask_un_16_);
	BIT_VEC cppVar_37022 = ROM.rd(cppVar_37021);
	BIT_VEC cppVar_37023 = (cppVar_37022 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37024 = (cppVar_37023 & cppMask_un_5_);
	BIT_VEC cppVar_37025 = cppVar_37024 + 32;
	cppVar_37025 = (cppVar_37025 & cppMask_un_8_);
	BIT_VEC cppVar_37026 = (cppVar_37016) ? cppVar_37020 : cppVar_37025;
	bool cppVar_37028 = (cppVar_37026 == 224);
	BIT_VEC cppVar_37029 = PC + 1;
	cppVar_37029 = (cppVar_37029 & cppMask_un_16_);
	BIT_VEC cppVar_37030 = ROM.rd(cppVar_37029);
	BIT_VEC cppVar_37031 = (cppVar_37030 >> 7) & cppMask_un_1_;
	bool cppVar_37032 = (cppVar_37031 == 1);
	BIT_VEC cppVar_37033 = PC + 1;
	cppVar_37033 = (cppVar_37033 & cppMask_un_16_);
	BIT_VEC cppVar_37034 = ROM.rd(cppVar_37033);
	BIT_VEC cppVar_37035 = (cppVar_37034 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37036 = (cppVar_37035 << 3) | 0;
	cppVar_37036 = (cppVar_37036 & cppMask_un_8_);
	BIT_VEC cppVar_37037 = PC + 1;
	cppVar_37037 = (cppVar_37037 & cppMask_un_16_);
	BIT_VEC cppVar_37038 = ROM.rd(cppVar_37037);
	BIT_VEC cppVar_37039 = (cppVar_37038 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37040 = (cppVar_37039 & cppMask_un_5_);
	BIT_VEC cppVar_37041 = cppVar_37040 + 32;
	cppVar_37041 = (cppVar_37041 & cppMask_un_8_);
	BIT_VEC cppVar_37042 = (cppVar_37032) ? cppVar_37036 : cppVar_37041;
	bool cppVar_37044 = (cppVar_37042 == 240);
	BIT_VEC cppVar_37046 = (cppVar_37044) ? B : 0;
	BIT_VEC cppVar_37047 = (cppVar_37028) ? ACC : cppVar_37046;
	BIT_VEC cppVar_37048 = (cppVar_37012) ? PSW : cppVar_37047;
	BIT_VEC cppVar_37049 = (cppVar_36996) ? IP : cppVar_37048;
	BIT_VEC cppVar_37050 = (cppVar_36980) ? P3 : cppVar_37049;
	BIT_VEC cppVar_37051 = (cppVar_36964) ? IE : cppVar_37050;
	BIT_VEC cppVar_37052 = (cppVar_36948) ? P2 : cppVar_37051;
	BIT_VEC cppVar_37053 = (cppVar_36932) ? SBUF : cppVar_37052;
	BIT_VEC cppVar_37054 = (cppVar_36916) ? SCON : cppVar_37053;
	BIT_VEC cppVar_37055 = (cppVar_36900) ? P1 : cppVar_37054;
	BIT_VEC cppVar_37056 = (cppVar_36884) ? TH1 : cppVar_37055;
	BIT_VEC cppVar_37057 = (cppVar_36868) ? TL1 : cppVar_37056;
	BIT_VEC cppVar_37058 = (cppVar_36852) ? TH0 : cppVar_37057;
	BIT_VEC cppVar_37059 = (cppVar_36836) ? TL0 : cppVar_37058;
	BIT_VEC cppVar_37060 = (cppVar_36820) ? TMOD : cppVar_37059;
	BIT_VEC cppVar_37061 = (cppVar_36804) ? TCON : cppVar_37060;
	BIT_VEC cppVar_37062 = (cppVar_36788) ? PCON : cppVar_37061;
	BIT_VEC cppVar_37063 = (cppVar_36772) ? DPH : cppVar_37062;
	BIT_VEC cppVar_37064 = (cppVar_36756) ? DPL : cppVar_37063;
	BIT_VEC cppVar_37065 = (cppVar_36740) ? SP : cppVar_37064;
	BIT_VEC cppVar_37066 = (cppVar_36724) ? P0 : cppVar_37065;
	BIT_VEC cppVar_37067 = (cppVar_36693) ? cppVar_36708 : cppVar_37066;
	BIT_VEC cppVar_37068 = cppVar_36676 & cppVar_37067;
	BIT_VEC cppVar_37069 = PC + 1;
	cppVar_37069 = (cppVar_37069 & cppMask_un_16_);
	BIT_VEC cppVar_37070 = ROM.rd(cppVar_37069);
	BIT_VEC cppVar_37071 = (cppVar_37070 >> 7) & cppMask_un_1_;
	bool cppVar_37073 = (cppVar_37071 == 1);
	BIT_VEC cppVar_37074 = PC + 1;
	cppVar_37074 = (cppVar_37074 & cppMask_un_16_);
	BIT_VEC cppVar_37075 = ROM.rd(cppVar_37074);
	BIT_VEC cppVar_37076 = (cppVar_37075 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37078 = (cppVar_37076 << 3) | 0;
	cppVar_37078 = (cppVar_37078 & cppMask_un_8_);
	BIT_VEC cppVar_37079 = PC + 1;
	cppVar_37079 = (cppVar_37079 & cppMask_un_16_);
	BIT_VEC cppVar_37080 = ROM.rd(cppVar_37079);
	BIT_VEC cppVar_37081 = (cppVar_37080 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37082 = (cppVar_37081 & cppMask_un_5_);
	BIT_VEC cppVar_37084 = cppVar_37082 + 32;
	cppVar_37084 = (cppVar_37084 & cppMask_un_8_);
	BIT_VEC cppVar_37085 = (cppVar_37073) ? cppVar_37078 : cppVar_37084;
	BIT_VEC cppVar_37086 = (cppVar_37085 >> 7) & cppMask_un_1_;
	bool cppVar_37088 = (cppVar_37086 == 0);
	BIT_VEC cppVar_37089 = PC + 1;
	cppVar_37089 = (cppVar_37089 & cppMask_un_16_);
	BIT_VEC cppVar_37090 = ROM.rd(cppVar_37089);
	BIT_VEC cppVar_37091 = (cppVar_37090 >> 7) & cppMask_un_1_;
	bool cppVar_37092 = (cppVar_37091 == 1);
	BIT_VEC cppVar_37093 = PC + 1;
	cppVar_37093 = (cppVar_37093 & cppMask_un_16_);
	BIT_VEC cppVar_37094 = ROM.rd(cppVar_37093);
	BIT_VEC cppVar_37095 = (cppVar_37094 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37096 = (cppVar_37095 << 3) | 0;
	cppVar_37096 = (cppVar_37096 & cppMask_un_8_);
	BIT_VEC cppVar_37097 = PC + 1;
	cppVar_37097 = (cppVar_37097 & cppMask_un_16_);
	BIT_VEC cppVar_37098 = ROM.rd(cppVar_37097);
	BIT_VEC cppVar_37099 = (cppVar_37098 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37100 = (cppVar_37099 & cppMask_un_5_);
	BIT_VEC cppVar_37101 = cppVar_37100 + 32;
	cppVar_37101 = (cppVar_37101 & cppMask_un_8_);
	BIT_VEC cppVar_37102 = (cppVar_37092) ? cppVar_37096 : cppVar_37101;
	BIT_VEC cppVar_37103 = IRAM.rd(cppVar_37102);
	BIT_VEC cppVar_37104 = PC + 1;
	cppVar_37104 = (cppVar_37104 & cppMask_un_16_);
	BIT_VEC cppVar_37105 = ROM.rd(cppVar_37104);
	BIT_VEC cppVar_37106 = (cppVar_37105 >> 7) & cppMask_un_1_;
	bool cppVar_37107 = (cppVar_37106 == 1);
	BIT_VEC cppVar_37108 = PC + 1;
	cppVar_37108 = (cppVar_37108 & cppMask_un_16_);
	BIT_VEC cppVar_37109 = ROM.rd(cppVar_37108);
	BIT_VEC cppVar_37110 = (cppVar_37109 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37111 = (cppVar_37110 << 3) | 0;
	cppVar_37111 = (cppVar_37111 & cppMask_un_8_);
	BIT_VEC cppVar_37112 = PC + 1;
	cppVar_37112 = (cppVar_37112 & cppMask_un_16_);
	BIT_VEC cppVar_37113 = ROM.rd(cppVar_37112);
	BIT_VEC cppVar_37114 = (cppVar_37113 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37115 = (cppVar_37114 & cppMask_un_5_);
	BIT_VEC cppVar_37116 = cppVar_37115 + 32;
	cppVar_37116 = (cppVar_37116 & cppMask_un_8_);
	BIT_VEC cppVar_37117 = (cppVar_37107) ? cppVar_37111 : cppVar_37116;
	bool cppVar_37119 = (cppVar_37117 == 128);
	BIT_VEC cppVar_37120 = PC + 1;
	cppVar_37120 = (cppVar_37120 & cppMask_un_16_);
	BIT_VEC cppVar_37121 = ROM.rd(cppVar_37120);
	BIT_VEC cppVar_37122 = (cppVar_37121 >> 7) & cppMask_un_1_;
	bool cppVar_37123 = (cppVar_37122 == 1);
	BIT_VEC cppVar_37124 = PC + 1;
	cppVar_37124 = (cppVar_37124 & cppMask_un_16_);
	BIT_VEC cppVar_37125 = ROM.rd(cppVar_37124);
	BIT_VEC cppVar_37126 = (cppVar_37125 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37127 = (cppVar_37126 << 3) | 0;
	cppVar_37127 = (cppVar_37127 & cppMask_un_8_);
	BIT_VEC cppVar_37128 = PC + 1;
	cppVar_37128 = (cppVar_37128 & cppMask_un_16_);
	BIT_VEC cppVar_37129 = ROM.rd(cppVar_37128);
	BIT_VEC cppVar_37130 = (cppVar_37129 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37131 = (cppVar_37130 & cppMask_un_5_);
	BIT_VEC cppVar_37132 = cppVar_37131 + 32;
	cppVar_37132 = (cppVar_37132 & cppMask_un_8_);
	BIT_VEC cppVar_37133 = (cppVar_37123) ? cppVar_37127 : cppVar_37132;
	bool cppVar_37135 = (cppVar_37133 == 129);
	BIT_VEC cppVar_37136 = PC + 1;
	cppVar_37136 = (cppVar_37136 & cppMask_un_16_);
	BIT_VEC cppVar_37137 = ROM.rd(cppVar_37136);
	BIT_VEC cppVar_37138 = (cppVar_37137 >> 7) & cppMask_un_1_;
	bool cppVar_37139 = (cppVar_37138 == 1);
	BIT_VEC cppVar_37140 = PC + 1;
	cppVar_37140 = (cppVar_37140 & cppMask_un_16_);
	BIT_VEC cppVar_37141 = ROM.rd(cppVar_37140);
	BIT_VEC cppVar_37142 = (cppVar_37141 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37143 = (cppVar_37142 << 3) | 0;
	cppVar_37143 = (cppVar_37143 & cppMask_un_8_);
	BIT_VEC cppVar_37144 = PC + 1;
	cppVar_37144 = (cppVar_37144 & cppMask_un_16_);
	BIT_VEC cppVar_37145 = ROM.rd(cppVar_37144);
	BIT_VEC cppVar_37146 = (cppVar_37145 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37147 = (cppVar_37146 & cppMask_un_5_);
	BIT_VEC cppVar_37148 = cppVar_37147 + 32;
	cppVar_37148 = (cppVar_37148 & cppMask_un_8_);
	BIT_VEC cppVar_37149 = (cppVar_37139) ? cppVar_37143 : cppVar_37148;
	bool cppVar_37151 = (cppVar_37149 == 130);
	BIT_VEC cppVar_37152 = PC + 1;
	cppVar_37152 = (cppVar_37152 & cppMask_un_16_);
	BIT_VEC cppVar_37153 = ROM.rd(cppVar_37152);
	BIT_VEC cppVar_37154 = (cppVar_37153 >> 7) & cppMask_un_1_;
	bool cppVar_37155 = (cppVar_37154 == 1);
	BIT_VEC cppVar_37156 = PC + 1;
	cppVar_37156 = (cppVar_37156 & cppMask_un_16_);
	BIT_VEC cppVar_37157 = ROM.rd(cppVar_37156);
	BIT_VEC cppVar_37158 = (cppVar_37157 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37159 = (cppVar_37158 << 3) | 0;
	cppVar_37159 = (cppVar_37159 & cppMask_un_8_);
	BIT_VEC cppVar_37160 = PC + 1;
	cppVar_37160 = (cppVar_37160 & cppMask_un_16_);
	BIT_VEC cppVar_37161 = ROM.rd(cppVar_37160);
	BIT_VEC cppVar_37162 = (cppVar_37161 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37163 = (cppVar_37162 & cppMask_un_5_);
	BIT_VEC cppVar_37164 = cppVar_37163 + 32;
	cppVar_37164 = (cppVar_37164 & cppMask_un_8_);
	BIT_VEC cppVar_37165 = (cppVar_37155) ? cppVar_37159 : cppVar_37164;
	bool cppVar_37167 = (cppVar_37165 == 131);
	BIT_VEC cppVar_37168 = PC + 1;
	cppVar_37168 = (cppVar_37168 & cppMask_un_16_);
	BIT_VEC cppVar_37169 = ROM.rd(cppVar_37168);
	BIT_VEC cppVar_37170 = (cppVar_37169 >> 7) & cppMask_un_1_;
	bool cppVar_37171 = (cppVar_37170 == 1);
	BIT_VEC cppVar_37172 = PC + 1;
	cppVar_37172 = (cppVar_37172 & cppMask_un_16_);
	BIT_VEC cppVar_37173 = ROM.rd(cppVar_37172);
	BIT_VEC cppVar_37174 = (cppVar_37173 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37175 = (cppVar_37174 << 3) | 0;
	cppVar_37175 = (cppVar_37175 & cppMask_un_8_);
	BIT_VEC cppVar_37176 = PC + 1;
	cppVar_37176 = (cppVar_37176 & cppMask_un_16_);
	BIT_VEC cppVar_37177 = ROM.rd(cppVar_37176);
	BIT_VEC cppVar_37178 = (cppVar_37177 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37179 = (cppVar_37178 & cppMask_un_5_);
	BIT_VEC cppVar_37180 = cppVar_37179 + 32;
	cppVar_37180 = (cppVar_37180 & cppMask_un_8_);
	BIT_VEC cppVar_37181 = (cppVar_37171) ? cppVar_37175 : cppVar_37180;
	bool cppVar_37183 = (cppVar_37181 == 135);
	BIT_VEC cppVar_37184 = PC + 1;
	cppVar_37184 = (cppVar_37184 & cppMask_un_16_);
	BIT_VEC cppVar_37185 = ROM.rd(cppVar_37184);
	BIT_VEC cppVar_37186 = (cppVar_37185 >> 7) & cppMask_un_1_;
	bool cppVar_37187 = (cppVar_37186 == 1);
	BIT_VEC cppVar_37188 = PC + 1;
	cppVar_37188 = (cppVar_37188 & cppMask_un_16_);
	BIT_VEC cppVar_37189 = ROM.rd(cppVar_37188);
	BIT_VEC cppVar_37190 = (cppVar_37189 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37191 = (cppVar_37190 << 3) | 0;
	cppVar_37191 = (cppVar_37191 & cppMask_un_8_);
	BIT_VEC cppVar_37192 = PC + 1;
	cppVar_37192 = (cppVar_37192 & cppMask_un_16_);
	BIT_VEC cppVar_37193 = ROM.rd(cppVar_37192);
	BIT_VEC cppVar_37194 = (cppVar_37193 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37195 = (cppVar_37194 & cppMask_un_5_);
	BIT_VEC cppVar_37196 = cppVar_37195 + 32;
	cppVar_37196 = (cppVar_37196 & cppMask_un_8_);
	BIT_VEC cppVar_37197 = (cppVar_37187) ? cppVar_37191 : cppVar_37196;
	bool cppVar_37199 = (cppVar_37197 == 136);
	BIT_VEC cppVar_37200 = PC + 1;
	cppVar_37200 = (cppVar_37200 & cppMask_un_16_);
	BIT_VEC cppVar_37201 = ROM.rd(cppVar_37200);
	BIT_VEC cppVar_37202 = (cppVar_37201 >> 7) & cppMask_un_1_;
	bool cppVar_37203 = (cppVar_37202 == 1);
	BIT_VEC cppVar_37204 = PC + 1;
	cppVar_37204 = (cppVar_37204 & cppMask_un_16_);
	BIT_VEC cppVar_37205 = ROM.rd(cppVar_37204);
	BIT_VEC cppVar_37206 = (cppVar_37205 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37207 = (cppVar_37206 << 3) | 0;
	cppVar_37207 = (cppVar_37207 & cppMask_un_8_);
	BIT_VEC cppVar_37208 = PC + 1;
	cppVar_37208 = (cppVar_37208 & cppMask_un_16_);
	BIT_VEC cppVar_37209 = ROM.rd(cppVar_37208);
	BIT_VEC cppVar_37210 = (cppVar_37209 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37211 = (cppVar_37210 & cppMask_un_5_);
	BIT_VEC cppVar_37212 = cppVar_37211 + 32;
	cppVar_37212 = (cppVar_37212 & cppMask_un_8_);
	BIT_VEC cppVar_37213 = (cppVar_37203) ? cppVar_37207 : cppVar_37212;
	bool cppVar_37215 = (cppVar_37213 == 137);
	BIT_VEC cppVar_37216 = PC + 1;
	cppVar_37216 = (cppVar_37216 & cppMask_un_16_);
	BIT_VEC cppVar_37217 = ROM.rd(cppVar_37216);
	BIT_VEC cppVar_37218 = (cppVar_37217 >> 7) & cppMask_un_1_;
	bool cppVar_37219 = (cppVar_37218 == 1);
	BIT_VEC cppVar_37220 = PC + 1;
	cppVar_37220 = (cppVar_37220 & cppMask_un_16_);
	BIT_VEC cppVar_37221 = ROM.rd(cppVar_37220);
	BIT_VEC cppVar_37222 = (cppVar_37221 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37223 = (cppVar_37222 << 3) | 0;
	cppVar_37223 = (cppVar_37223 & cppMask_un_8_);
	BIT_VEC cppVar_37224 = PC + 1;
	cppVar_37224 = (cppVar_37224 & cppMask_un_16_);
	BIT_VEC cppVar_37225 = ROM.rd(cppVar_37224);
	BIT_VEC cppVar_37226 = (cppVar_37225 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37227 = (cppVar_37226 & cppMask_un_5_);
	BIT_VEC cppVar_37228 = cppVar_37227 + 32;
	cppVar_37228 = (cppVar_37228 & cppMask_un_8_);
	BIT_VEC cppVar_37229 = (cppVar_37219) ? cppVar_37223 : cppVar_37228;
	bool cppVar_37231 = (cppVar_37229 == 138);
	BIT_VEC cppVar_37232 = PC + 1;
	cppVar_37232 = (cppVar_37232 & cppMask_un_16_);
	BIT_VEC cppVar_37233 = ROM.rd(cppVar_37232);
	BIT_VEC cppVar_37234 = (cppVar_37233 >> 7) & cppMask_un_1_;
	bool cppVar_37235 = (cppVar_37234 == 1);
	BIT_VEC cppVar_37236 = PC + 1;
	cppVar_37236 = (cppVar_37236 & cppMask_un_16_);
	BIT_VEC cppVar_37237 = ROM.rd(cppVar_37236);
	BIT_VEC cppVar_37238 = (cppVar_37237 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37239 = (cppVar_37238 << 3) | 0;
	cppVar_37239 = (cppVar_37239 & cppMask_un_8_);
	BIT_VEC cppVar_37240 = PC + 1;
	cppVar_37240 = (cppVar_37240 & cppMask_un_16_);
	BIT_VEC cppVar_37241 = ROM.rd(cppVar_37240);
	BIT_VEC cppVar_37242 = (cppVar_37241 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37243 = (cppVar_37242 & cppMask_un_5_);
	BIT_VEC cppVar_37244 = cppVar_37243 + 32;
	cppVar_37244 = (cppVar_37244 & cppMask_un_8_);
	BIT_VEC cppVar_37245 = (cppVar_37235) ? cppVar_37239 : cppVar_37244;
	bool cppVar_37247 = (cppVar_37245 == 140);
	BIT_VEC cppVar_37248 = PC + 1;
	cppVar_37248 = (cppVar_37248 & cppMask_un_16_);
	BIT_VEC cppVar_37249 = ROM.rd(cppVar_37248);
	BIT_VEC cppVar_37250 = (cppVar_37249 >> 7) & cppMask_un_1_;
	bool cppVar_37251 = (cppVar_37250 == 1);
	BIT_VEC cppVar_37252 = PC + 1;
	cppVar_37252 = (cppVar_37252 & cppMask_un_16_);
	BIT_VEC cppVar_37253 = ROM.rd(cppVar_37252);
	BIT_VEC cppVar_37254 = (cppVar_37253 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37255 = (cppVar_37254 << 3) | 0;
	cppVar_37255 = (cppVar_37255 & cppMask_un_8_);
	BIT_VEC cppVar_37256 = PC + 1;
	cppVar_37256 = (cppVar_37256 & cppMask_un_16_);
	BIT_VEC cppVar_37257 = ROM.rd(cppVar_37256);
	BIT_VEC cppVar_37258 = (cppVar_37257 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37259 = (cppVar_37258 & cppMask_un_5_);
	BIT_VEC cppVar_37260 = cppVar_37259 + 32;
	cppVar_37260 = (cppVar_37260 & cppMask_un_8_);
	BIT_VEC cppVar_37261 = (cppVar_37251) ? cppVar_37255 : cppVar_37260;
	bool cppVar_37263 = (cppVar_37261 == 139);
	BIT_VEC cppVar_37264 = PC + 1;
	cppVar_37264 = (cppVar_37264 & cppMask_un_16_);
	BIT_VEC cppVar_37265 = ROM.rd(cppVar_37264);
	BIT_VEC cppVar_37266 = (cppVar_37265 >> 7) & cppMask_un_1_;
	bool cppVar_37267 = (cppVar_37266 == 1);
	BIT_VEC cppVar_37268 = PC + 1;
	cppVar_37268 = (cppVar_37268 & cppMask_un_16_);
	BIT_VEC cppVar_37269 = ROM.rd(cppVar_37268);
	BIT_VEC cppVar_37270 = (cppVar_37269 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37271 = (cppVar_37270 << 3) | 0;
	cppVar_37271 = (cppVar_37271 & cppMask_un_8_);
	BIT_VEC cppVar_37272 = PC + 1;
	cppVar_37272 = (cppVar_37272 & cppMask_un_16_);
	BIT_VEC cppVar_37273 = ROM.rd(cppVar_37272);
	BIT_VEC cppVar_37274 = (cppVar_37273 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37275 = (cppVar_37274 & cppMask_un_5_);
	BIT_VEC cppVar_37276 = cppVar_37275 + 32;
	cppVar_37276 = (cppVar_37276 & cppMask_un_8_);
	BIT_VEC cppVar_37277 = (cppVar_37267) ? cppVar_37271 : cppVar_37276;
	bool cppVar_37279 = (cppVar_37277 == 141);
	BIT_VEC cppVar_37280 = PC + 1;
	cppVar_37280 = (cppVar_37280 & cppMask_un_16_);
	BIT_VEC cppVar_37281 = ROM.rd(cppVar_37280);
	BIT_VEC cppVar_37282 = (cppVar_37281 >> 7) & cppMask_un_1_;
	bool cppVar_37283 = (cppVar_37282 == 1);
	BIT_VEC cppVar_37284 = PC + 1;
	cppVar_37284 = (cppVar_37284 & cppMask_un_16_);
	BIT_VEC cppVar_37285 = ROM.rd(cppVar_37284);
	BIT_VEC cppVar_37286 = (cppVar_37285 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37287 = (cppVar_37286 << 3) | 0;
	cppVar_37287 = (cppVar_37287 & cppMask_un_8_);
	BIT_VEC cppVar_37288 = PC + 1;
	cppVar_37288 = (cppVar_37288 & cppMask_un_16_);
	BIT_VEC cppVar_37289 = ROM.rd(cppVar_37288);
	BIT_VEC cppVar_37290 = (cppVar_37289 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37291 = (cppVar_37290 & cppMask_un_5_);
	BIT_VEC cppVar_37292 = cppVar_37291 + 32;
	cppVar_37292 = (cppVar_37292 & cppMask_un_8_);
	BIT_VEC cppVar_37293 = (cppVar_37283) ? cppVar_37287 : cppVar_37292;
	bool cppVar_37295 = (cppVar_37293 == 144);
	BIT_VEC cppVar_37296 = PC + 1;
	cppVar_37296 = (cppVar_37296 & cppMask_un_16_);
	BIT_VEC cppVar_37297 = ROM.rd(cppVar_37296);
	BIT_VEC cppVar_37298 = (cppVar_37297 >> 7) & cppMask_un_1_;
	bool cppVar_37299 = (cppVar_37298 == 1);
	BIT_VEC cppVar_37300 = PC + 1;
	cppVar_37300 = (cppVar_37300 & cppMask_un_16_);
	BIT_VEC cppVar_37301 = ROM.rd(cppVar_37300);
	BIT_VEC cppVar_37302 = (cppVar_37301 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37303 = (cppVar_37302 << 3) | 0;
	cppVar_37303 = (cppVar_37303 & cppMask_un_8_);
	BIT_VEC cppVar_37304 = PC + 1;
	cppVar_37304 = (cppVar_37304 & cppMask_un_16_);
	BIT_VEC cppVar_37305 = ROM.rd(cppVar_37304);
	BIT_VEC cppVar_37306 = (cppVar_37305 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37307 = (cppVar_37306 & cppMask_un_5_);
	BIT_VEC cppVar_37308 = cppVar_37307 + 32;
	cppVar_37308 = (cppVar_37308 & cppMask_un_8_);
	BIT_VEC cppVar_37309 = (cppVar_37299) ? cppVar_37303 : cppVar_37308;
	bool cppVar_37311 = (cppVar_37309 == 152);
	BIT_VEC cppVar_37312 = PC + 1;
	cppVar_37312 = (cppVar_37312 & cppMask_un_16_);
	BIT_VEC cppVar_37313 = ROM.rd(cppVar_37312);
	BIT_VEC cppVar_37314 = (cppVar_37313 >> 7) & cppMask_un_1_;
	bool cppVar_37315 = (cppVar_37314 == 1);
	BIT_VEC cppVar_37316 = PC + 1;
	cppVar_37316 = (cppVar_37316 & cppMask_un_16_);
	BIT_VEC cppVar_37317 = ROM.rd(cppVar_37316);
	BIT_VEC cppVar_37318 = (cppVar_37317 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37319 = (cppVar_37318 << 3) | 0;
	cppVar_37319 = (cppVar_37319 & cppMask_un_8_);
	BIT_VEC cppVar_37320 = PC + 1;
	cppVar_37320 = (cppVar_37320 & cppMask_un_16_);
	BIT_VEC cppVar_37321 = ROM.rd(cppVar_37320);
	BIT_VEC cppVar_37322 = (cppVar_37321 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37323 = (cppVar_37322 & cppMask_un_5_);
	BIT_VEC cppVar_37324 = cppVar_37323 + 32;
	cppVar_37324 = (cppVar_37324 & cppMask_un_8_);
	BIT_VEC cppVar_37325 = (cppVar_37315) ? cppVar_37319 : cppVar_37324;
	bool cppVar_37327 = (cppVar_37325 == 153);
	BIT_VEC cppVar_37328 = PC + 1;
	cppVar_37328 = (cppVar_37328 & cppMask_un_16_);
	BIT_VEC cppVar_37329 = ROM.rd(cppVar_37328);
	BIT_VEC cppVar_37330 = (cppVar_37329 >> 7) & cppMask_un_1_;
	bool cppVar_37331 = (cppVar_37330 == 1);
	BIT_VEC cppVar_37332 = PC + 1;
	cppVar_37332 = (cppVar_37332 & cppMask_un_16_);
	BIT_VEC cppVar_37333 = ROM.rd(cppVar_37332);
	BIT_VEC cppVar_37334 = (cppVar_37333 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37335 = (cppVar_37334 << 3) | 0;
	cppVar_37335 = (cppVar_37335 & cppMask_un_8_);
	BIT_VEC cppVar_37336 = PC + 1;
	cppVar_37336 = (cppVar_37336 & cppMask_un_16_);
	BIT_VEC cppVar_37337 = ROM.rd(cppVar_37336);
	BIT_VEC cppVar_37338 = (cppVar_37337 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37339 = (cppVar_37338 & cppMask_un_5_);
	BIT_VEC cppVar_37340 = cppVar_37339 + 32;
	cppVar_37340 = (cppVar_37340 & cppMask_un_8_);
	BIT_VEC cppVar_37341 = (cppVar_37331) ? cppVar_37335 : cppVar_37340;
	bool cppVar_37343 = (cppVar_37341 == 160);
	BIT_VEC cppVar_37344 = PC + 1;
	cppVar_37344 = (cppVar_37344 & cppMask_un_16_);
	BIT_VEC cppVar_37345 = ROM.rd(cppVar_37344);
	BIT_VEC cppVar_37346 = (cppVar_37345 >> 7) & cppMask_un_1_;
	bool cppVar_37347 = (cppVar_37346 == 1);
	BIT_VEC cppVar_37348 = PC + 1;
	cppVar_37348 = (cppVar_37348 & cppMask_un_16_);
	BIT_VEC cppVar_37349 = ROM.rd(cppVar_37348);
	BIT_VEC cppVar_37350 = (cppVar_37349 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37351 = (cppVar_37350 << 3) | 0;
	cppVar_37351 = (cppVar_37351 & cppMask_un_8_);
	BIT_VEC cppVar_37352 = PC + 1;
	cppVar_37352 = (cppVar_37352 & cppMask_un_16_);
	BIT_VEC cppVar_37353 = ROM.rd(cppVar_37352);
	BIT_VEC cppVar_37354 = (cppVar_37353 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37355 = (cppVar_37354 & cppMask_un_5_);
	BIT_VEC cppVar_37356 = cppVar_37355 + 32;
	cppVar_37356 = (cppVar_37356 & cppMask_un_8_);
	BIT_VEC cppVar_37357 = (cppVar_37347) ? cppVar_37351 : cppVar_37356;
	bool cppVar_37359 = (cppVar_37357 == 168);
	BIT_VEC cppVar_37360 = PC + 1;
	cppVar_37360 = (cppVar_37360 & cppMask_un_16_);
	BIT_VEC cppVar_37361 = ROM.rd(cppVar_37360);
	BIT_VEC cppVar_37362 = (cppVar_37361 >> 7) & cppMask_un_1_;
	bool cppVar_37363 = (cppVar_37362 == 1);
	BIT_VEC cppVar_37364 = PC + 1;
	cppVar_37364 = (cppVar_37364 & cppMask_un_16_);
	BIT_VEC cppVar_37365 = ROM.rd(cppVar_37364);
	BIT_VEC cppVar_37366 = (cppVar_37365 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37367 = (cppVar_37366 << 3) | 0;
	cppVar_37367 = (cppVar_37367 & cppMask_un_8_);
	BIT_VEC cppVar_37368 = PC + 1;
	cppVar_37368 = (cppVar_37368 & cppMask_un_16_);
	BIT_VEC cppVar_37369 = ROM.rd(cppVar_37368);
	BIT_VEC cppVar_37370 = (cppVar_37369 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37371 = (cppVar_37370 & cppMask_un_5_);
	BIT_VEC cppVar_37372 = cppVar_37371 + 32;
	cppVar_37372 = (cppVar_37372 & cppMask_un_8_);
	BIT_VEC cppVar_37373 = (cppVar_37363) ? cppVar_37367 : cppVar_37372;
	bool cppVar_37375 = (cppVar_37373 == 176);
	BIT_VEC cppVar_37376 = PC + 1;
	cppVar_37376 = (cppVar_37376 & cppMask_un_16_);
	BIT_VEC cppVar_37377 = ROM.rd(cppVar_37376);
	BIT_VEC cppVar_37378 = (cppVar_37377 >> 7) & cppMask_un_1_;
	bool cppVar_37379 = (cppVar_37378 == 1);
	BIT_VEC cppVar_37380 = PC + 1;
	cppVar_37380 = (cppVar_37380 & cppMask_un_16_);
	BIT_VEC cppVar_37381 = ROM.rd(cppVar_37380);
	BIT_VEC cppVar_37382 = (cppVar_37381 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37383 = (cppVar_37382 << 3) | 0;
	cppVar_37383 = (cppVar_37383 & cppMask_un_8_);
	BIT_VEC cppVar_37384 = PC + 1;
	cppVar_37384 = (cppVar_37384 & cppMask_un_16_);
	BIT_VEC cppVar_37385 = ROM.rd(cppVar_37384);
	BIT_VEC cppVar_37386 = (cppVar_37385 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37387 = (cppVar_37386 & cppMask_un_5_);
	BIT_VEC cppVar_37388 = cppVar_37387 + 32;
	cppVar_37388 = (cppVar_37388 & cppMask_un_8_);
	BIT_VEC cppVar_37389 = (cppVar_37379) ? cppVar_37383 : cppVar_37388;
	bool cppVar_37391 = (cppVar_37389 == 184);
	BIT_VEC cppVar_37392 = PC + 1;
	cppVar_37392 = (cppVar_37392 & cppMask_un_16_);
	BIT_VEC cppVar_37393 = ROM.rd(cppVar_37392);
	BIT_VEC cppVar_37394 = (cppVar_37393 >> 7) & cppMask_un_1_;
	bool cppVar_37395 = (cppVar_37394 == 1);
	BIT_VEC cppVar_37396 = PC + 1;
	cppVar_37396 = (cppVar_37396 & cppMask_un_16_);
	BIT_VEC cppVar_37397 = ROM.rd(cppVar_37396);
	BIT_VEC cppVar_37398 = (cppVar_37397 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37399 = (cppVar_37398 << 3) | 0;
	cppVar_37399 = (cppVar_37399 & cppMask_un_8_);
	BIT_VEC cppVar_37400 = PC + 1;
	cppVar_37400 = (cppVar_37400 & cppMask_un_16_);
	BIT_VEC cppVar_37401 = ROM.rd(cppVar_37400);
	BIT_VEC cppVar_37402 = (cppVar_37401 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37403 = (cppVar_37402 & cppMask_un_5_);
	BIT_VEC cppVar_37404 = cppVar_37403 + 32;
	cppVar_37404 = (cppVar_37404 & cppMask_un_8_);
	BIT_VEC cppVar_37405 = (cppVar_37395) ? cppVar_37399 : cppVar_37404;
	bool cppVar_37407 = (cppVar_37405 == 208);
	BIT_VEC cppVar_37408 = PC + 1;
	cppVar_37408 = (cppVar_37408 & cppMask_un_16_);
	BIT_VEC cppVar_37409 = ROM.rd(cppVar_37408);
	BIT_VEC cppVar_37410 = (cppVar_37409 >> 7) & cppMask_un_1_;
	bool cppVar_37411 = (cppVar_37410 == 1);
	BIT_VEC cppVar_37412 = PC + 1;
	cppVar_37412 = (cppVar_37412 & cppMask_un_16_);
	BIT_VEC cppVar_37413 = ROM.rd(cppVar_37412);
	BIT_VEC cppVar_37414 = (cppVar_37413 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37415 = (cppVar_37414 << 3) | 0;
	cppVar_37415 = (cppVar_37415 & cppMask_un_8_);
	BIT_VEC cppVar_37416 = PC + 1;
	cppVar_37416 = (cppVar_37416 & cppMask_un_16_);
	BIT_VEC cppVar_37417 = ROM.rd(cppVar_37416);
	BIT_VEC cppVar_37418 = (cppVar_37417 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37419 = (cppVar_37418 & cppMask_un_5_);
	BIT_VEC cppVar_37420 = cppVar_37419 + 32;
	cppVar_37420 = (cppVar_37420 & cppMask_un_8_);
	BIT_VEC cppVar_37421 = (cppVar_37411) ? cppVar_37415 : cppVar_37420;
	bool cppVar_37423 = (cppVar_37421 == 224);
	BIT_VEC cppVar_37424 = PC + 1;
	cppVar_37424 = (cppVar_37424 & cppMask_un_16_);
	BIT_VEC cppVar_37425 = ROM.rd(cppVar_37424);
	BIT_VEC cppVar_37426 = (cppVar_37425 >> 7) & cppMask_un_1_;
	bool cppVar_37427 = (cppVar_37426 == 1);
	BIT_VEC cppVar_37428 = PC + 1;
	cppVar_37428 = (cppVar_37428 & cppMask_un_16_);
	BIT_VEC cppVar_37429 = ROM.rd(cppVar_37428);
	BIT_VEC cppVar_37430 = (cppVar_37429 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37431 = (cppVar_37430 << 3) | 0;
	cppVar_37431 = (cppVar_37431 & cppMask_un_8_);
	BIT_VEC cppVar_37432 = PC + 1;
	cppVar_37432 = (cppVar_37432 & cppMask_un_16_);
	BIT_VEC cppVar_37433 = ROM.rd(cppVar_37432);
	BIT_VEC cppVar_37434 = (cppVar_37433 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37435 = (cppVar_37434 & cppMask_un_5_);
	BIT_VEC cppVar_37436 = cppVar_37435 + 32;
	cppVar_37436 = (cppVar_37436 & cppMask_un_8_);
	BIT_VEC cppVar_37437 = (cppVar_37427) ? cppVar_37431 : cppVar_37436;
	bool cppVar_37439 = (cppVar_37437 == 240);
	BIT_VEC cppVar_37441 = (cppVar_37439) ? B : 0;
	BIT_VEC cppVar_37442 = (cppVar_37423) ? ACC : cppVar_37441;
	BIT_VEC cppVar_37443 = (cppVar_37407) ? PSW : cppVar_37442;
	BIT_VEC cppVar_37444 = (cppVar_37391) ? IP : cppVar_37443;
	BIT_VEC cppVar_37445 = (cppVar_37375) ? P3 : cppVar_37444;
	BIT_VEC cppVar_37446 = (cppVar_37359) ? IE : cppVar_37445;
	BIT_VEC cppVar_37447 = (cppVar_37343) ? P2 : cppVar_37446;
	BIT_VEC cppVar_37448 = (cppVar_37327) ? SBUF : cppVar_37447;
	BIT_VEC cppVar_37449 = (cppVar_37311) ? SCON : cppVar_37448;
	BIT_VEC cppVar_37450 = (cppVar_37295) ? P1 : cppVar_37449;
	BIT_VEC cppVar_37451 = (cppVar_37279) ? TH1 : cppVar_37450;
	BIT_VEC cppVar_37452 = (cppVar_37263) ? TL1 : cppVar_37451;
	BIT_VEC cppVar_37453 = (cppVar_37247) ? TH0 : cppVar_37452;
	BIT_VEC cppVar_37454 = (cppVar_37231) ? TL0 : cppVar_37453;
	BIT_VEC cppVar_37455 = (cppVar_37215) ? TMOD : cppVar_37454;
	BIT_VEC cppVar_37456 = (cppVar_37199) ? TCON : cppVar_37455;
	BIT_VEC cppVar_37457 = (cppVar_37183) ? PCON : cppVar_37456;
	BIT_VEC cppVar_37458 = (cppVar_37167) ? DPH : cppVar_37457;
	BIT_VEC cppVar_37459 = (cppVar_37151) ? DPL : cppVar_37458;
	BIT_VEC cppVar_37460 = (cppVar_37135) ? SP : cppVar_37459;
	BIT_VEC cppVar_37461 = (cppVar_37119) ? P0 : cppVar_37460;
	BIT_VEC cppVar_37462 = (cppVar_37088) ? cppVar_37103 : cppVar_37461;
	BIT_VEC cppVar_37463 = PC + 1;
	cppVar_37463 = (cppVar_37463 & cppMask_un_16_);
	BIT_VEC cppVar_37464 = ROM.rd(cppVar_37463);
	BIT_VEC cppVar_37465 = (cppVar_37464 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_37466 = (cppVar_37462 >> static_cast<unsigned>(cppVar_37465)) & 0x1;
	BIT_VEC cppVar_37467 = ~cppVar_37466;
	BIT_VEC cppVar_37468 = (cppVar_37467 & cppMask_un_1_);
	BIT_VEC cppVar_37469 = PC + 1;
	cppVar_37469 = (cppVar_37469 & cppMask_un_16_);
	BIT_VEC cppVar_37470 = ROM.rd(cppVar_37469);
	BIT_VEC cppVar_37471 = (cppVar_37470 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_37472 = (cppVar_37471 & cppMask_un_3_);
	BIT_VEC cppVar_37473 = cppVar_37468 << static_cast<unsigned>(cppVar_37472);
	cppVar_37473 = (cppVar_37473 & cppMask_un_8_);
	BIT_VEC cppVar_37474 = cppVar_37068 | cppVar_37473;
	BIT_VEC cppVar_37475 = (cppVar_36669) ? cppVar_37474 : P3;
	BIT_VEC cppVar_37476 = ROM.rd(PC);
	bool cppVar_37478 = (cppVar_37476 == 146);
	BIT_VEC cppVar_37480 = PC + 1;
	cppVar_37480 = (cppVar_37480 & cppMask_un_16_);
	BIT_VEC cppVar_37481 = ROM.rd(cppVar_37480);
	BIT_VEC cppVar_37482 = (cppVar_37481 >> 7) & cppMask_un_1_;
	bool cppVar_37484 = (cppVar_37482 == 1);
	BIT_VEC cppVar_37485 = PC + 1;
	cppVar_37485 = (cppVar_37485 & cppMask_un_16_);
	BIT_VEC cppVar_37486 = ROM.rd(cppVar_37485);
	BIT_VEC cppVar_37487 = (cppVar_37486 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37489 = (cppVar_37487 << 3) | 0;
	cppVar_37489 = (cppVar_37489 & cppMask_un_8_);
	BIT_VEC cppVar_37490 = PC + 1;
	cppVar_37490 = (cppVar_37490 & cppMask_un_16_);
	BIT_VEC cppVar_37491 = ROM.rd(cppVar_37490);
	BIT_VEC cppVar_37492 = (cppVar_37491 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37493 = (cppVar_37492 & cppMask_un_5_);
	BIT_VEC cppVar_37495 = cppVar_37493 + 32;
	cppVar_37495 = (cppVar_37495 & cppMask_un_8_);
	BIT_VEC cppVar_37496 = (cppVar_37484) ? cppVar_37489 : cppVar_37495;
	bool cppVar_37498 = (cppVar_37496 == 176);
	BIT_VEC cppVar_37500 = PC + 1;
	cppVar_37500 = (cppVar_37500 & cppMask_un_16_);
	BIT_VEC cppVar_37501 = ROM.rd(cppVar_37500);
	BIT_VEC cppVar_37502 = (cppVar_37501 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_37503 = (cppVar_37502 & cppMask_un_3_);
	BIT_VEC cppVar_37504 = 1 << static_cast<unsigned>(cppVar_37503);
	cppVar_37504 = (cppVar_37504 & cppMask_un_8_);
	BIT_VEC cppVar_37505 = ~cppVar_37504;
	BIT_VEC cppVar_37506 = PC + 1;
	cppVar_37506 = (cppVar_37506 & cppMask_un_16_);
	BIT_VEC cppVar_37507 = ROM.rd(cppVar_37506);
	BIT_VEC cppVar_37508 = (cppVar_37507 >> 7) & cppMask_un_1_;
	bool cppVar_37509 = (cppVar_37508 == 1);
	BIT_VEC cppVar_37510 = PC + 1;
	cppVar_37510 = (cppVar_37510 & cppMask_un_16_);
	BIT_VEC cppVar_37511 = ROM.rd(cppVar_37510);
	BIT_VEC cppVar_37512 = (cppVar_37511 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37513 = (cppVar_37512 << 3) | 0;
	cppVar_37513 = (cppVar_37513 & cppMask_un_8_);
	BIT_VEC cppVar_37514 = PC + 1;
	cppVar_37514 = (cppVar_37514 & cppMask_un_16_);
	BIT_VEC cppVar_37515 = ROM.rd(cppVar_37514);
	BIT_VEC cppVar_37516 = (cppVar_37515 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37517 = (cppVar_37516 & cppMask_un_5_);
	BIT_VEC cppVar_37518 = cppVar_37517 + 32;
	cppVar_37518 = (cppVar_37518 & cppMask_un_8_);
	BIT_VEC cppVar_37519 = (cppVar_37509) ? cppVar_37513 : cppVar_37518;
	BIT_VEC cppVar_37520 = (cppVar_37519 >> 7) & cppMask_un_1_;
	bool cppVar_37522 = (cppVar_37520 == 0);
	BIT_VEC cppVar_37523 = PC + 1;
	cppVar_37523 = (cppVar_37523 & cppMask_un_16_);
	BIT_VEC cppVar_37524 = ROM.rd(cppVar_37523);
	BIT_VEC cppVar_37525 = (cppVar_37524 >> 7) & cppMask_un_1_;
	bool cppVar_37526 = (cppVar_37525 == 1);
	BIT_VEC cppVar_37527 = PC + 1;
	cppVar_37527 = (cppVar_37527 & cppMask_un_16_);
	BIT_VEC cppVar_37528 = ROM.rd(cppVar_37527);
	BIT_VEC cppVar_37529 = (cppVar_37528 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37530 = (cppVar_37529 << 3) | 0;
	cppVar_37530 = (cppVar_37530 & cppMask_un_8_);
	BIT_VEC cppVar_37531 = PC + 1;
	cppVar_37531 = (cppVar_37531 & cppMask_un_16_);
	BIT_VEC cppVar_37532 = ROM.rd(cppVar_37531);
	BIT_VEC cppVar_37533 = (cppVar_37532 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37534 = (cppVar_37533 & cppMask_un_5_);
	BIT_VEC cppVar_37535 = cppVar_37534 + 32;
	cppVar_37535 = (cppVar_37535 & cppMask_un_8_);
	BIT_VEC cppVar_37536 = (cppVar_37526) ? cppVar_37530 : cppVar_37535;
	BIT_VEC cppVar_37537 = IRAM.rd(cppVar_37536);
	BIT_VEC cppVar_37538 = PC + 1;
	cppVar_37538 = (cppVar_37538 & cppMask_un_16_);
	BIT_VEC cppVar_37539 = ROM.rd(cppVar_37538);
	BIT_VEC cppVar_37540 = (cppVar_37539 >> 7) & cppMask_un_1_;
	bool cppVar_37541 = (cppVar_37540 == 1);
	BIT_VEC cppVar_37542 = PC + 1;
	cppVar_37542 = (cppVar_37542 & cppMask_un_16_);
	BIT_VEC cppVar_37543 = ROM.rd(cppVar_37542);
	BIT_VEC cppVar_37544 = (cppVar_37543 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37545 = (cppVar_37544 << 3) | 0;
	cppVar_37545 = (cppVar_37545 & cppMask_un_8_);
	BIT_VEC cppVar_37546 = PC + 1;
	cppVar_37546 = (cppVar_37546 & cppMask_un_16_);
	BIT_VEC cppVar_37547 = ROM.rd(cppVar_37546);
	BIT_VEC cppVar_37548 = (cppVar_37547 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37549 = (cppVar_37548 & cppMask_un_5_);
	BIT_VEC cppVar_37550 = cppVar_37549 + 32;
	cppVar_37550 = (cppVar_37550 & cppMask_un_8_);
	BIT_VEC cppVar_37551 = (cppVar_37541) ? cppVar_37545 : cppVar_37550;
	bool cppVar_37553 = (cppVar_37551 == 128);
	BIT_VEC cppVar_37554 = PC + 1;
	cppVar_37554 = (cppVar_37554 & cppMask_un_16_);
	BIT_VEC cppVar_37555 = ROM.rd(cppVar_37554);
	BIT_VEC cppVar_37556 = (cppVar_37555 >> 7) & cppMask_un_1_;
	bool cppVar_37557 = (cppVar_37556 == 1);
	BIT_VEC cppVar_37558 = PC + 1;
	cppVar_37558 = (cppVar_37558 & cppMask_un_16_);
	BIT_VEC cppVar_37559 = ROM.rd(cppVar_37558);
	BIT_VEC cppVar_37560 = (cppVar_37559 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37561 = (cppVar_37560 << 3) | 0;
	cppVar_37561 = (cppVar_37561 & cppMask_un_8_);
	BIT_VEC cppVar_37562 = PC + 1;
	cppVar_37562 = (cppVar_37562 & cppMask_un_16_);
	BIT_VEC cppVar_37563 = ROM.rd(cppVar_37562);
	BIT_VEC cppVar_37564 = (cppVar_37563 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37565 = (cppVar_37564 & cppMask_un_5_);
	BIT_VEC cppVar_37566 = cppVar_37565 + 32;
	cppVar_37566 = (cppVar_37566 & cppMask_un_8_);
	BIT_VEC cppVar_37567 = (cppVar_37557) ? cppVar_37561 : cppVar_37566;
	bool cppVar_37569 = (cppVar_37567 == 129);
	BIT_VEC cppVar_37570 = PC + 1;
	cppVar_37570 = (cppVar_37570 & cppMask_un_16_);
	BIT_VEC cppVar_37571 = ROM.rd(cppVar_37570);
	BIT_VEC cppVar_37572 = (cppVar_37571 >> 7) & cppMask_un_1_;
	bool cppVar_37573 = (cppVar_37572 == 1);
	BIT_VEC cppVar_37574 = PC + 1;
	cppVar_37574 = (cppVar_37574 & cppMask_un_16_);
	BIT_VEC cppVar_37575 = ROM.rd(cppVar_37574);
	BIT_VEC cppVar_37576 = (cppVar_37575 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37577 = (cppVar_37576 << 3) | 0;
	cppVar_37577 = (cppVar_37577 & cppMask_un_8_);
	BIT_VEC cppVar_37578 = PC + 1;
	cppVar_37578 = (cppVar_37578 & cppMask_un_16_);
	BIT_VEC cppVar_37579 = ROM.rd(cppVar_37578);
	BIT_VEC cppVar_37580 = (cppVar_37579 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37581 = (cppVar_37580 & cppMask_un_5_);
	BIT_VEC cppVar_37582 = cppVar_37581 + 32;
	cppVar_37582 = (cppVar_37582 & cppMask_un_8_);
	BIT_VEC cppVar_37583 = (cppVar_37573) ? cppVar_37577 : cppVar_37582;
	bool cppVar_37585 = (cppVar_37583 == 130);
	BIT_VEC cppVar_37586 = PC + 1;
	cppVar_37586 = (cppVar_37586 & cppMask_un_16_);
	BIT_VEC cppVar_37587 = ROM.rd(cppVar_37586);
	BIT_VEC cppVar_37588 = (cppVar_37587 >> 7) & cppMask_un_1_;
	bool cppVar_37589 = (cppVar_37588 == 1);
	BIT_VEC cppVar_37590 = PC + 1;
	cppVar_37590 = (cppVar_37590 & cppMask_un_16_);
	BIT_VEC cppVar_37591 = ROM.rd(cppVar_37590);
	BIT_VEC cppVar_37592 = (cppVar_37591 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37593 = (cppVar_37592 << 3) | 0;
	cppVar_37593 = (cppVar_37593 & cppMask_un_8_);
	BIT_VEC cppVar_37594 = PC + 1;
	cppVar_37594 = (cppVar_37594 & cppMask_un_16_);
	BIT_VEC cppVar_37595 = ROM.rd(cppVar_37594);
	BIT_VEC cppVar_37596 = (cppVar_37595 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37597 = (cppVar_37596 & cppMask_un_5_);
	BIT_VEC cppVar_37598 = cppVar_37597 + 32;
	cppVar_37598 = (cppVar_37598 & cppMask_un_8_);
	BIT_VEC cppVar_37599 = (cppVar_37589) ? cppVar_37593 : cppVar_37598;
	bool cppVar_37601 = (cppVar_37599 == 131);
	BIT_VEC cppVar_37602 = PC + 1;
	cppVar_37602 = (cppVar_37602 & cppMask_un_16_);
	BIT_VEC cppVar_37603 = ROM.rd(cppVar_37602);
	BIT_VEC cppVar_37604 = (cppVar_37603 >> 7) & cppMask_un_1_;
	bool cppVar_37605 = (cppVar_37604 == 1);
	BIT_VEC cppVar_37606 = PC + 1;
	cppVar_37606 = (cppVar_37606 & cppMask_un_16_);
	BIT_VEC cppVar_37607 = ROM.rd(cppVar_37606);
	BIT_VEC cppVar_37608 = (cppVar_37607 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37609 = (cppVar_37608 << 3) | 0;
	cppVar_37609 = (cppVar_37609 & cppMask_un_8_);
	BIT_VEC cppVar_37610 = PC + 1;
	cppVar_37610 = (cppVar_37610 & cppMask_un_16_);
	BIT_VEC cppVar_37611 = ROM.rd(cppVar_37610);
	BIT_VEC cppVar_37612 = (cppVar_37611 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37613 = (cppVar_37612 & cppMask_un_5_);
	BIT_VEC cppVar_37614 = cppVar_37613 + 32;
	cppVar_37614 = (cppVar_37614 & cppMask_un_8_);
	BIT_VEC cppVar_37615 = (cppVar_37605) ? cppVar_37609 : cppVar_37614;
	bool cppVar_37617 = (cppVar_37615 == 135);
	BIT_VEC cppVar_37618 = PC + 1;
	cppVar_37618 = (cppVar_37618 & cppMask_un_16_);
	BIT_VEC cppVar_37619 = ROM.rd(cppVar_37618);
	BIT_VEC cppVar_37620 = (cppVar_37619 >> 7) & cppMask_un_1_;
	bool cppVar_37621 = (cppVar_37620 == 1);
	BIT_VEC cppVar_37622 = PC + 1;
	cppVar_37622 = (cppVar_37622 & cppMask_un_16_);
	BIT_VEC cppVar_37623 = ROM.rd(cppVar_37622);
	BIT_VEC cppVar_37624 = (cppVar_37623 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37625 = (cppVar_37624 << 3) | 0;
	cppVar_37625 = (cppVar_37625 & cppMask_un_8_);
	BIT_VEC cppVar_37626 = PC + 1;
	cppVar_37626 = (cppVar_37626 & cppMask_un_16_);
	BIT_VEC cppVar_37627 = ROM.rd(cppVar_37626);
	BIT_VEC cppVar_37628 = (cppVar_37627 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37629 = (cppVar_37628 & cppMask_un_5_);
	BIT_VEC cppVar_37630 = cppVar_37629 + 32;
	cppVar_37630 = (cppVar_37630 & cppMask_un_8_);
	BIT_VEC cppVar_37631 = (cppVar_37621) ? cppVar_37625 : cppVar_37630;
	bool cppVar_37633 = (cppVar_37631 == 136);
	BIT_VEC cppVar_37634 = PC + 1;
	cppVar_37634 = (cppVar_37634 & cppMask_un_16_);
	BIT_VEC cppVar_37635 = ROM.rd(cppVar_37634);
	BIT_VEC cppVar_37636 = (cppVar_37635 >> 7) & cppMask_un_1_;
	bool cppVar_37637 = (cppVar_37636 == 1);
	BIT_VEC cppVar_37638 = PC + 1;
	cppVar_37638 = (cppVar_37638 & cppMask_un_16_);
	BIT_VEC cppVar_37639 = ROM.rd(cppVar_37638);
	BIT_VEC cppVar_37640 = (cppVar_37639 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37641 = (cppVar_37640 << 3) | 0;
	cppVar_37641 = (cppVar_37641 & cppMask_un_8_);
	BIT_VEC cppVar_37642 = PC + 1;
	cppVar_37642 = (cppVar_37642 & cppMask_un_16_);
	BIT_VEC cppVar_37643 = ROM.rd(cppVar_37642);
	BIT_VEC cppVar_37644 = (cppVar_37643 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37645 = (cppVar_37644 & cppMask_un_5_);
	BIT_VEC cppVar_37646 = cppVar_37645 + 32;
	cppVar_37646 = (cppVar_37646 & cppMask_un_8_);
	BIT_VEC cppVar_37647 = (cppVar_37637) ? cppVar_37641 : cppVar_37646;
	bool cppVar_37649 = (cppVar_37647 == 137);
	BIT_VEC cppVar_37650 = PC + 1;
	cppVar_37650 = (cppVar_37650 & cppMask_un_16_);
	BIT_VEC cppVar_37651 = ROM.rd(cppVar_37650);
	BIT_VEC cppVar_37652 = (cppVar_37651 >> 7) & cppMask_un_1_;
	bool cppVar_37653 = (cppVar_37652 == 1);
	BIT_VEC cppVar_37654 = PC + 1;
	cppVar_37654 = (cppVar_37654 & cppMask_un_16_);
	BIT_VEC cppVar_37655 = ROM.rd(cppVar_37654);
	BIT_VEC cppVar_37656 = (cppVar_37655 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37657 = (cppVar_37656 << 3) | 0;
	cppVar_37657 = (cppVar_37657 & cppMask_un_8_);
	BIT_VEC cppVar_37658 = PC + 1;
	cppVar_37658 = (cppVar_37658 & cppMask_un_16_);
	BIT_VEC cppVar_37659 = ROM.rd(cppVar_37658);
	BIT_VEC cppVar_37660 = (cppVar_37659 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37661 = (cppVar_37660 & cppMask_un_5_);
	BIT_VEC cppVar_37662 = cppVar_37661 + 32;
	cppVar_37662 = (cppVar_37662 & cppMask_un_8_);
	BIT_VEC cppVar_37663 = (cppVar_37653) ? cppVar_37657 : cppVar_37662;
	bool cppVar_37665 = (cppVar_37663 == 138);
	BIT_VEC cppVar_37666 = PC + 1;
	cppVar_37666 = (cppVar_37666 & cppMask_un_16_);
	BIT_VEC cppVar_37667 = ROM.rd(cppVar_37666);
	BIT_VEC cppVar_37668 = (cppVar_37667 >> 7) & cppMask_un_1_;
	bool cppVar_37669 = (cppVar_37668 == 1);
	BIT_VEC cppVar_37670 = PC + 1;
	cppVar_37670 = (cppVar_37670 & cppMask_un_16_);
	BIT_VEC cppVar_37671 = ROM.rd(cppVar_37670);
	BIT_VEC cppVar_37672 = (cppVar_37671 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37673 = (cppVar_37672 << 3) | 0;
	cppVar_37673 = (cppVar_37673 & cppMask_un_8_);
	BIT_VEC cppVar_37674 = PC + 1;
	cppVar_37674 = (cppVar_37674 & cppMask_un_16_);
	BIT_VEC cppVar_37675 = ROM.rd(cppVar_37674);
	BIT_VEC cppVar_37676 = (cppVar_37675 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37677 = (cppVar_37676 & cppMask_un_5_);
	BIT_VEC cppVar_37678 = cppVar_37677 + 32;
	cppVar_37678 = (cppVar_37678 & cppMask_un_8_);
	BIT_VEC cppVar_37679 = (cppVar_37669) ? cppVar_37673 : cppVar_37678;
	bool cppVar_37681 = (cppVar_37679 == 140);
	BIT_VEC cppVar_37682 = PC + 1;
	cppVar_37682 = (cppVar_37682 & cppMask_un_16_);
	BIT_VEC cppVar_37683 = ROM.rd(cppVar_37682);
	BIT_VEC cppVar_37684 = (cppVar_37683 >> 7) & cppMask_un_1_;
	bool cppVar_37685 = (cppVar_37684 == 1);
	BIT_VEC cppVar_37686 = PC + 1;
	cppVar_37686 = (cppVar_37686 & cppMask_un_16_);
	BIT_VEC cppVar_37687 = ROM.rd(cppVar_37686);
	BIT_VEC cppVar_37688 = (cppVar_37687 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37689 = (cppVar_37688 << 3) | 0;
	cppVar_37689 = (cppVar_37689 & cppMask_un_8_);
	BIT_VEC cppVar_37690 = PC + 1;
	cppVar_37690 = (cppVar_37690 & cppMask_un_16_);
	BIT_VEC cppVar_37691 = ROM.rd(cppVar_37690);
	BIT_VEC cppVar_37692 = (cppVar_37691 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37693 = (cppVar_37692 & cppMask_un_5_);
	BIT_VEC cppVar_37694 = cppVar_37693 + 32;
	cppVar_37694 = (cppVar_37694 & cppMask_un_8_);
	BIT_VEC cppVar_37695 = (cppVar_37685) ? cppVar_37689 : cppVar_37694;
	bool cppVar_37697 = (cppVar_37695 == 139);
	BIT_VEC cppVar_37698 = PC + 1;
	cppVar_37698 = (cppVar_37698 & cppMask_un_16_);
	BIT_VEC cppVar_37699 = ROM.rd(cppVar_37698);
	BIT_VEC cppVar_37700 = (cppVar_37699 >> 7) & cppMask_un_1_;
	bool cppVar_37701 = (cppVar_37700 == 1);
	BIT_VEC cppVar_37702 = PC + 1;
	cppVar_37702 = (cppVar_37702 & cppMask_un_16_);
	BIT_VEC cppVar_37703 = ROM.rd(cppVar_37702);
	BIT_VEC cppVar_37704 = (cppVar_37703 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37705 = (cppVar_37704 << 3) | 0;
	cppVar_37705 = (cppVar_37705 & cppMask_un_8_);
	BIT_VEC cppVar_37706 = PC + 1;
	cppVar_37706 = (cppVar_37706 & cppMask_un_16_);
	BIT_VEC cppVar_37707 = ROM.rd(cppVar_37706);
	BIT_VEC cppVar_37708 = (cppVar_37707 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37709 = (cppVar_37708 & cppMask_un_5_);
	BIT_VEC cppVar_37710 = cppVar_37709 + 32;
	cppVar_37710 = (cppVar_37710 & cppMask_un_8_);
	BIT_VEC cppVar_37711 = (cppVar_37701) ? cppVar_37705 : cppVar_37710;
	bool cppVar_37713 = (cppVar_37711 == 141);
	BIT_VEC cppVar_37714 = PC + 1;
	cppVar_37714 = (cppVar_37714 & cppMask_un_16_);
	BIT_VEC cppVar_37715 = ROM.rd(cppVar_37714);
	BIT_VEC cppVar_37716 = (cppVar_37715 >> 7) & cppMask_un_1_;
	bool cppVar_37717 = (cppVar_37716 == 1);
	BIT_VEC cppVar_37718 = PC + 1;
	cppVar_37718 = (cppVar_37718 & cppMask_un_16_);
	BIT_VEC cppVar_37719 = ROM.rd(cppVar_37718);
	BIT_VEC cppVar_37720 = (cppVar_37719 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37721 = (cppVar_37720 << 3) | 0;
	cppVar_37721 = (cppVar_37721 & cppMask_un_8_);
	BIT_VEC cppVar_37722 = PC + 1;
	cppVar_37722 = (cppVar_37722 & cppMask_un_16_);
	BIT_VEC cppVar_37723 = ROM.rd(cppVar_37722);
	BIT_VEC cppVar_37724 = (cppVar_37723 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37725 = (cppVar_37724 & cppMask_un_5_);
	BIT_VEC cppVar_37726 = cppVar_37725 + 32;
	cppVar_37726 = (cppVar_37726 & cppMask_un_8_);
	BIT_VEC cppVar_37727 = (cppVar_37717) ? cppVar_37721 : cppVar_37726;
	bool cppVar_37729 = (cppVar_37727 == 144);
	BIT_VEC cppVar_37730 = PC + 1;
	cppVar_37730 = (cppVar_37730 & cppMask_un_16_);
	BIT_VEC cppVar_37731 = ROM.rd(cppVar_37730);
	BIT_VEC cppVar_37732 = (cppVar_37731 >> 7) & cppMask_un_1_;
	bool cppVar_37733 = (cppVar_37732 == 1);
	BIT_VEC cppVar_37734 = PC + 1;
	cppVar_37734 = (cppVar_37734 & cppMask_un_16_);
	BIT_VEC cppVar_37735 = ROM.rd(cppVar_37734);
	BIT_VEC cppVar_37736 = (cppVar_37735 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37737 = (cppVar_37736 << 3) | 0;
	cppVar_37737 = (cppVar_37737 & cppMask_un_8_);
	BIT_VEC cppVar_37738 = PC + 1;
	cppVar_37738 = (cppVar_37738 & cppMask_un_16_);
	BIT_VEC cppVar_37739 = ROM.rd(cppVar_37738);
	BIT_VEC cppVar_37740 = (cppVar_37739 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37741 = (cppVar_37740 & cppMask_un_5_);
	BIT_VEC cppVar_37742 = cppVar_37741 + 32;
	cppVar_37742 = (cppVar_37742 & cppMask_un_8_);
	BIT_VEC cppVar_37743 = (cppVar_37733) ? cppVar_37737 : cppVar_37742;
	bool cppVar_37745 = (cppVar_37743 == 152);
	BIT_VEC cppVar_37746 = PC + 1;
	cppVar_37746 = (cppVar_37746 & cppMask_un_16_);
	BIT_VEC cppVar_37747 = ROM.rd(cppVar_37746);
	BIT_VEC cppVar_37748 = (cppVar_37747 >> 7) & cppMask_un_1_;
	bool cppVar_37749 = (cppVar_37748 == 1);
	BIT_VEC cppVar_37750 = PC + 1;
	cppVar_37750 = (cppVar_37750 & cppMask_un_16_);
	BIT_VEC cppVar_37751 = ROM.rd(cppVar_37750);
	BIT_VEC cppVar_37752 = (cppVar_37751 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37753 = (cppVar_37752 << 3) | 0;
	cppVar_37753 = (cppVar_37753 & cppMask_un_8_);
	BIT_VEC cppVar_37754 = PC + 1;
	cppVar_37754 = (cppVar_37754 & cppMask_un_16_);
	BIT_VEC cppVar_37755 = ROM.rd(cppVar_37754);
	BIT_VEC cppVar_37756 = (cppVar_37755 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37757 = (cppVar_37756 & cppMask_un_5_);
	BIT_VEC cppVar_37758 = cppVar_37757 + 32;
	cppVar_37758 = (cppVar_37758 & cppMask_un_8_);
	BIT_VEC cppVar_37759 = (cppVar_37749) ? cppVar_37753 : cppVar_37758;
	bool cppVar_37761 = (cppVar_37759 == 153);
	BIT_VEC cppVar_37762 = PC + 1;
	cppVar_37762 = (cppVar_37762 & cppMask_un_16_);
	BIT_VEC cppVar_37763 = ROM.rd(cppVar_37762);
	BIT_VEC cppVar_37764 = (cppVar_37763 >> 7) & cppMask_un_1_;
	bool cppVar_37765 = (cppVar_37764 == 1);
	BIT_VEC cppVar_37766 = PC + 1;
	cppVar_37766 = (cppVar_37766 & cppMask_un_16_);
	BIT_VEC cppVar_37767 = ROM.rd(cppVar_37766);
	BIT_VEC cppVar_37768 = (cppVar_37767 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37769 = (cppVar_37768 << 3) | 0;
	cppVar_37769 = (cppVar_37769 & cppMask_un_8_);
	BIT_VEC cppVar_37770 = PC + 1;
	cppVar_37770 = (cppVar_37770 & cppMask_un_16_);
	BIT_VEC cppVar_37771 = ROM.rd(cppVar_37770);
	BIT_VEC cppVar_37772 = (cppVar_37771 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37773 = (cppVar_37772 & cppMask_un_5_);
	BIT_VEC cppVar_37774 = cppVar_37773 + 32;
	cppVar_37774 = (cppVar_37774 & cppMask_un_8_);
	BIT_VEC cppVar_37775 = (cppVar_37765) ? cppVar_37769 : cppVar_37774;
	bool cppVar_37777 = (cppVar_37775 == 160);
	BIT_VEC cppVar_37778 = PC + 1;
	cppVar_37778 = (cppVar_37778 & cppMask_un_16_);
	BIT_VEC cppVar_37779 = ROM.rd(cppVar_37778);
	BIT_VEC cppVar_37780 = (cppVar_37779 >> 7) & cppMask_un_1_;
	bool cppVar_37781 = (cppVar_37780 == 1);
	BIT_VEC cppVar_37782 = PC + 1;
	cppVar_37782 = (cppVar_37782 & cppMask_un_16_);
	BIT_VEC cppVar_37783 = ROM.rd(cppVar_37782);
	BIT_VEC cppVar_37784 = (cppVar_37783 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37785 = (cppVar_37784 << 3) | 0;
	cppVar_37785 = (cppVar_37785 & cppMask_un_8_);
	BIT_VEC cppVar_37786 = PC + 1;
	cppVar_37786 = (cppVar_37786 & cppMask_un_16_);
	BIT_VEC cppVar_37787 = ROM.rd(cppVar_37786);
	BIT_VEC cppVar_37788 = (cppVar_37787 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37789 = (cppVar_37788 & cppMask_un_5_);
	BIT_VEC cppVar_37790 = cppVar_37789 + 32;
	cppVar_37790 = (cppVar_37790 & cppMask_un_8_);
	BIT_VEC cppVar_37791 = (cppVar_37781) ? cppVar_37785 : cppVar_37790;
	bool cppVar_37793 = (cppVar_37791 == 168);
	BIT_VEC cppVar_37794 = PC + 1;
	cppVar_37794 = (cppVar_37794 & cppMask_un_16_);
	BIT_VEC cppVar_37795 = ROM.rd(cppVar_37794);
	BIT_VEC cppVar_37796 = (cppVar_37795 >> 7) & cppMask_un_1_;
	bool cppVar_37797 = (cppVar_37796 == 1);
	BIT_VEC cppVar_37798 = PC + 1;
	cppVar_37798 = (cppVar_37798 & cppMask_un_16_);
	BIT_VEC cppVar_37799 = ROM.rd(cppVar_37798);
	BIT_VEC cppVar_37800 = (cppVar_37799 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37801 = (cppVar_37800 << 3) | 0;
	cppVar_37801 = (cppVar_37801 & cppMask_un_8_);
	BIT_VEC cppVar_37802 = PC + 1;
	cppVar_37802 = (cppVar_37802 & cppMask_un_16_);
	BIT_VEC cppVar_37803 = ROM.rd(cppVar_37802);
	BIT_VEC cppVar_37804 = (cppVar_37803 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37805 = (cppVar_37804 & cppMask_un_5_);
	BIT_VEC cppVar_37806 = cppVar_37805 + 32;
	cppVar_37806 = (cppVar_37806 & cppMask_un_8_);
	BIT_VEC cppVar_37807 = (cppVar_37797) ? cppVar_37801 : cppVar_37806;
	bool cppVar_37809 = (cppVar_37807 == 176);
	BIT_VEC cppVar_37810 = PC + 1;
	cppVar_37810 = (cppVar_37810 & cppMask_un_16_);
	BIT_VEC cppVar_37811 = ROM.rd(cppVar_37810);
	BIT_VEC cppVar_37812 = (cppVar_37811 >> 7) & cppMask_un_1_;
	bool cppVar_37813 = (cppVar_37812 == 1);
	BIT_VEC cppVar_37814 = PC + 1;
	cppVar_37814 = (cppVar_37814 & cppMask_un_16_);
	BIT_VEC cppVar_37815 = ROM.rd(cppVar_37814);
	BIT_VEC cppVar_37816 = (cppVar_37815 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37817 = (cppVar_37816 << 3) | 0;
	cppVar_37817 = (cppVar_37817 & cppMask_un_8_);
	BIT_VEC cppVar_37818 = PC + 1;
	cppVar_37818 = (cppVar_37818 & cppMask_un_16_);
	BIT_VEC cppVar_37819 = ROM.rd(cppVar_37818);
	BIT_VEC cppVar_37820 = (cppVar_37819 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37821 = (cppVar_37820 & cppMask_un_5_);
	BIT_VEC cppVar_37822 = cppVar_37821 + 32;
	cppVar_37822 = (cppVar_37822 & cppMask_un_8_);
	BIT_VEC cppVar_37823 = (cppVar_37813) ? cppVar_37817 : cppVar_37822;
	bool cppVar_37825 = (cppVar_37823 == 184);
	BIT_VEC cppVar_37826 = PC + 1;
	cppVar_37826 = (cppVar_37826 & cppMask_un_16_);
	BIT_VEC cppVar_37827 = ROM.rd(cppVar_37826);
	BIT_VEC cppVar_37828 = (cppVar_37827 >> 7) & cppMask_un_1_;
	bool cppVar_37829 = (cppVar_37828 == 1);
	BIT_VEC cppVar_37830 = PC + 1;
	cppVar_37830 = (cppVar_37830 & cppMask_un_16_);
	BIT_VEC cppVar_37831 = ROM.rd(cppVar_37830);
	BIT_VEC cppVar_37832 = (cppVar_37831 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37833 = (cppVar_37832 << 3) | 0;
	cppVar_37833 = (cppVar_37833 & cppMask_un_8_);
	BIT_VEC cppVar_37834 = PC + 1;
	cppVar_37834 = (cppVar_37834 & cppMask_un_16_);
	BIT_VEC cppVar_37835 = ROM.rd(cppVar_37834);
	BIT_VEC cppVar_37836 = (cppVar_37835 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37837 = (cppVar_37836 & cppMask_un_5_);
	BIT_VEC cppVar_37838 = cppVar_37837 + 32;
	cppVar_37838 = (cppVar_37838 & cppMask_un_8_);
	BIT_VEC cppVar_37839 = (cppVar_37829) ? cppVar_37833 : cppVar_37838;
	bool cppVar_37841 = (cppVar_37839 == 208);
	BIT_VEC cppVar_37842 = PC + 1;
	cppVar_37842 = (cppVar_37842 & cppMask_un_16_);
	BIT_VEC cppVar_37843 = ROM.rd(cppVar_37842);
	BIT_VEC cppVar_37844 = (cppVar_37843 >> 7) & cppMask_un_1_;
	bool cppVar_37845 = (cppVar_37844 == 1);
	BIT_VEC cppVar_37846 = PC + 1;
	cppVar_37846 = (cppVar_37846 & cppMask_un_16_);
	BIT_VEC cppVar_37847 = ROM.rd(cppVar_37846);
	BIT_VEC cppVar_37848 = (cppVar_37847 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37849 = (cppVar_37848 << 3) | 0;
	cppVar_37849 = (cppVar_37849 & cppMask_un_8_);
	BIT_VEC cppVar_37850 = PC + 1;
	cppVar_37850 = (cppVar_37850 & cppMask_un_16_);
	BIT_VEC cppVar_37851 = ROM.rd(cppVar_37850);
	BIT_VEC cppVar_37852 = (cppVar_37851 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37853 = (cppVar_37852 & cppMask_un_5_);
	BIT_VEC cppVar_37854 = cppVar_37853 + 32;
	cppVar_37854 = (cppVar_37854 & cppMask_un_8_);
	BIT_VEC cppVar_37855 = (cppVar_37845) ? cppVar_37849 : cppVar_37854;
	bool cppVar_37857 = (cppVar_37855 == 224);
	BIT_VEC cppVar_37858 = PC + 1;
	cppVar_37858 = (cppVar_37858 & cppMask_un_16_);
	BIT_VEC cppVar_37859 = ROM.rd(cppVar_37858);
	BIT_VEC cppVar_37860 = (cppVar_37859 >> 7) & cppMask_un_1_;
	bool cppVar_37861 = (cppVar_37860 == 1);
	BIT_VEC cppVar_37862 = PC + 1;
	cppVar_37862 = (cppVar_37862 & cppMask_un_16_);
	BIT_VEC cppVar_37863 = ROM.rd(cppVar_37862);
	BIT_VEC cppVar_37864 = (cppVar_37863 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37865 = (cppVar_37864 << 3) | 0;
	cppVar_37865 = (cppVar_37865 & cppMask_un_8_);
	BIT_VEC cppVar_37866 = PC + 1;
	cppVar_37866 = (cppVar_37866 & cppMask_un_16_);
	BIT_VEC cppVar_37867 = ROM.rd(cppVar_37866);
	BIT_VEC cppVar_37868 = (cppVar_37867 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_37869 = (cppVar_37868 & cppMask_un_5_);
	BIT_VEC cppVar_37870 = cppVar_37869 + 32;
	cppVar_37870 = (cppVar_37870 & cppMask_un_8_);
	BIT_VEC cppVar_37871 = (cppVar_37861) ? cppVar_37865 : cppVar_37870;
	bool cppVar_37873 = (cppVar_37871 == 240);
	BIT_VEC cppVar_37875 = (cppVar_37873) ? B : 0;
	BIT_VEC cppVar_37876 = (cppVar_37857) ? ACC : cppVar_37875;
	BIT_VEC cppVar_37877 = (cppVar_37841) ? PSW : cppVar_37876;
	BIT_VEC cppVar_37878 = (cppVar_37825) ? IP : cppVar_37877;
	BIT_VEC cppVar_37879 = (cppVar_37809) ? P3 : cppVar_37878;
	BIT_VEC cppVar_37880 = (cppVar_37793) ? IE : cppVar_37879;
	BIT_VEC cppVar_37881 = (cppVar_37777) ? P2 : cppVar_37880;
	BIT_VEC cppVar_37882 = (cppVar_37761) ? SBUF : cppVar_37881;
	BIT_VEC cppVar_37883 = (cppVar_37745) ? SCON : cppVar_37882;
	BIT_VEC cppVar_37884 = (cppVar_37729) ? P1 : cppVar_37883;
	BIT_VEC cppVar_37885 = (cppVar_37713) ? TH1 : cppVar_37884;
	BIT_VEC cppVar_37886 = (cppVar_37697) ? TL1 : cppVar_37885;
	BIT_VEC cppVar_37887 = (cppVar_37681) ? TH0 : cppVar_37886;
	BIT_VEC cppVar_37888 = (cppVar_37665) ? TL0 : cppVar_37887;
	BIT_VEC cppVar_37889 = (cppVar_37649) ? TMOD : cppVar_37888;
	BIT_VEC cppVar_37890 = (cppVar_37633) ? TCON : cppVar_37889;
	BIT_VEC cppVar_37891 = (cppVar_37617) ? PCON : cppVar_37890;
	BIT_VEC cppVar_37892 = (cppVar_37601) ? DPH : cppVar_37891;
	BIT_VEC cppVar_37893 = (cppVar_37585) ? DPL : cppVar_37892;
	BIT_VEC cppVar_37894 = (cppVar_37569) ? SP : cppVar_37893;
	BIT_VEC cppVar_37895 = (cppVar_37553) ? P0 : cppVar_37894;
	BIT_VEC cppVar_37896 = (cppVar_37522) ? cppVar_37537 : cppVar_37895;
	BIT_VEC cppVar_37897 = cppVar_37505 & cppVar_37896;
	BIT_VEC cppVar_37898 = (PSW >> 7) & cppMask_un_1_;
	BIT_VEC cppVar_37899 = (cppVar_37898 & cppMask_un_1_);
	BIT_VEC cppVar_37900 = PC + 1;
	cppVar_37900 = (cppVar_37900 & cppMask_un_16_);
	BIT_VEC cppVar_37901 = ROM.rd(cppVar_37900);
	BIT_VEC cppVar_37902 = (cppVar_37901 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_37903 = (cppVar_37902 & cppMask_un_3_);
	BIT_VEC cppVar_37904 = cppVar_37899 << static_cast<unsigned>(cppVar_37903);
	cppVar_37904 = (cppVar_37904 & cppMask_un_8_);
	BIT_VEC cppVar_37905 = cppVar_37897 | cppVar_37904;
	BIT_VEC cppVar_37906 = (cppVar_37498) ? cppVar_37905 : P3;
	BIT_VEC cppVar_37907 = ROM.rd(PC);
	bool cppVar_37909 = (cppVar_37907 == 143);
	BIT_VEC cppVar_37911 = PC + 1;
	cppVar_37911 = (cppVar_37911 & cppMask_un_16_);
	BIT_VEC cppVar_37912 = ROM.rd(cppVar_37911);
	bool cppVar_37914 = (cppVar_37912 == 176);
	BIT_VEC cppVar_37916 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37918 = (cppVar_37916 << 3) | 7;
	cppVar_37918 = (cppVar_37918 & cppMask_un_5_);
	BIT_VEC cppVar_37919 = (0 << 5) | cppVar_37918;
	cppVar_37919 = (cppVar_37919 & cppMask_un_8_);
	BIT_VEC cppVar_37920 = (cppVar_37919 >> 7) & cppMask_un_1_;
	bool cppVar_37922 = (cppVar_37920 == 0);
	BIT_VEC cppVar_37923 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37924 = (cppVar_37923 << 3) | 7;
	cppVar_37924 = (cppVar_37924 & cppMask_un_5_);
	BIT_VEC cppVar_37925 = (0 << 5) | cppVar_37924;
	cppVar_37925 = (cppVar_37925 & cppMask_un_8_);
	BIT_VEC cppVar_37926 = IRAM.rd(cppVar_37925);
	BIT_VEC cppVar_37927 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37928 = (cppVar_37927 << 3) | 7;
	cppVar_37928 = (cppVar_37928 & cppMask_un_5_);
	BIT_VEC cppVar_37929 = (0 << 5) | cppVar_37928;
	cppVar_37929 = (cppVar_37929 & cppMask_un_8_);
	bool cppVar_37931 = (cppVar_37929 == 128);
	BIT_VEC cppVar_37932 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37933 = (cppVar_37932 << 3) | 7;
	cppVar_37933 = (cppVar_37933 & cppMask_un_5_);
	BIT_VEC cppVar_37934 = (0 << 5) | cppVar_37933;
	cppVar_37934 = (cppVar_37934 & cppMask_un_8_);
	bool cppVar_37936 = (cppVar_37934 == 129);
	BIT_VEC cppVar_37937 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37938 = (cppVar_37937 << 3) | 7;
	cppVar_37938 = (cppVar_37938 & cppMask_un_5_);
	BIT_VEC cppVar_37939 = (0 << 5) | cppVar_37938;
	cppVar_37939 = (cppVar_37939 & cppMask_un_8_);
	bool cppVar_37941 = (cppVar_37939 == 130);
	BIT_VEC cppVar_37942 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37943 = (cppVar_37942 << 3) | 7;
	cppVar_37943 = (cppVar_37943 & cppMask_un_5_);
	BIT_VEC cppVar_37944 = (0 << 5) | cppVar_37943;
	cppVar_37944 = (cppVar_37944 & cppMask_un_8_);
	bool cppVar_37946 = (cppVar_37944 == 131);
	BIT_VEC cppVar_37947 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37948 = (cppVar_37947 << 3) | 7;
	cppVar_37948 = (cppVar_37948 & cppMask_un_5_);
	BIT_VEC cppVar_37949 = (0 << 5) | cppVar_37948;
	cppVar_37949 = (cppVar_37949 & cppMask_un_8_);
	bool cppVar_37951 = (cppVar_37949 == 135);
	BIT_VEC cppVar_37952 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37953 = (cppVar_37952 << 3) | 7;
	cppVar_37953 = (cppVar_37953 & cppMask_un_5_);
	BIT_VEC cppVar_37954 = (0 << 5) | cppVar_37953;
	cppVar_37954 = (cppVar_37954 & cppMask_un_8_);
	bool cppVar_37956 = (cppVar_37954 == 136);
	BIT_VEC cppVar_37957 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37958 = (cppVar_37957 << 3) | 7;
	cppVar_37958 = (cppVar_37958 & cppMask_un_5_);
	BIT_VEC cppVar_37959 = (0 << 5) | cppVar_37958;
	cppVar_37959 = (cppVar_37959 & cppMask_un_8_);
	bool cppVar_37961 = (cppVar_37959 == 137);
	BIT_VEC cppVar_37962 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37963 = (cppVar_37962 << 3) | 7;
	cppVar_37963 = (cppVar_37963 & cppMask_un_5_);
	BIT_VEC cppVar_37964 = (0 << 5) | cppVar_37963;
	cppVar_37964 = (cppVar_37964 & cppMask_un_8_);
	bool cppVar_37966 = (cppVar_37964 == 138);
	BIT_VEC cppVar_37967 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37968 = (cppVar_37967 << 3) | 7;
	cppVar_37968 = (cppVar_37968 & cppMask_un_5_);
	BIT_VEC cppVar_37969 = (0 << 5) | cppVar_37968;
	cppVar_37969 = (cppVar_37969 & cppMask_un_8_);
	bool cppVar_37971 = (cppVar_37969 == 140);
	BIT_VEC cppVar_37972 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37973 = (cppVar_37972 << 3) | 7;
	cppVar_37973 = (cppVar_37973 & cppMask_un_5_);
	BIT_VEC cppVar_37974 = (0 << 5) | cppVar_37973;
	cppVar_37974 = (cppVar_37974 & cppMask_un_8_);
	bool cppVar_37976 = (cppVar_37974 == 139);
	BIT_VEC cppVar_37977 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37978 = (cppVar_37977 << 3) | 7;
	cppVar_37978 = (cppVar_37978 & cppMask_un_5_);
	BIT_VEC cppVar_37979 = (0 << 5) | cppVar_37978;
	cppVar_37979 = (cppVar_37979 & cppMask_un_8_);
	bool cppVar_37981 = (cppVar_37979 == 141);
	BIT_VEC cppVar_37982 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37983 = (cppVar_37982 << 3) | 7;
	cppVar_37983 = (cppVar_37983 & cppMask_un_5_);
	BIT_VEC cppVar_37984 = (0 << 5) | cppVar_37983;
	cppVar_37984 = (cppVar_37984 & cppMask_un_8_);
	bool cppVar_37986 = (cppVar_37984 == 144);
	BIT_VEC cppVar_37987 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37988 = (cppVar_37987 << 3) | 7;
	cppVar_37988 = (cppVar_37988 & cppMask_un_5_);
	BIT_VEC cppVar_37989 = (0 << 5) | cppVar_37988;
	cppVar_37989 = (cppVar_37989 & cppMask_un_8_);
	bool cppVar_37991 = (cppVar_37989 == 152);
	BIT_VEC cppVar_37992 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37993 = (cppVar_37992 << 3) | 7;
	cppVar_37993 = (cppVar_37993 & cppMask_un_5_);
	BIT_VEC cppVar_37994 = (0 << 5) | cppVar_37993;
	cppVar_37994 = (cppVar_37994 & cppMask_un_8_);
	bool cppVar_37996 = (cppVar_37994 == 153);
	BIT_VEC cppVar_37997 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_37998 = (cppVar_37997 << 3) | 7;
	cppVar_37998 = (cppVar_37998 & cppMask_un_5_);
	BIT_VEC cppVar_37999 = (0 << 5) | cppVar_37998;
	cppVar_37999 = (cppVar_37999 & cppMask_un_8_);
	bool cppVar_38001 = (cppVar_37999 == 160);
	BIT_VEC cppVar_38002 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38003 = (cppVar_38002 << 3) | 7;
	cppVar_38003 = (cppVar_38003 & cppMask_un_5_);
	BIT_VEC cppVar_38004 = (0 << 5) | cppVar_38003;
	cppVar_38004 = (cppVar_38004 & cppMask_un_8_);
	bool cppVar_38006 = (cppVar_38004 == 168);
	BIT_VEC cppVar_38007 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38008 = (cppVar_38007 << 3) | 7;
	cppVar_38008 = (cppVar_38008 & cppMask_un_5_);
	BIT_VEC cppVar_38009 = (0 << 5) | cppVar_38008;
	cppVar_38009 = (cppVar_38009 & cppMask_un_8_);
	bool cppVar_38011 = (cppVar_38009 == 176);
	BIT_VEC cppVar_38012 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38013 = (cppVar_38012 << 3) | 7;
	cppVar_38013 = (cppVar_38013 & cppMask_un_5_);
	BIT_VEC cppVar_38014 = (0 << 5) | cppVar_38013;
	cppVar_38014 = (cppVar_38014 & cppMask_un_8_);
	bool cppVar_38016 = (cppVar_38014 == 184);
	BIT_VEC cppVar_38017 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38018 = (cppVar_38017 << 3) | 7;
	cppVar_38018 = (cppVar_38018 & cppMask_un_5_);
	BIT_VEC cppVar_38019 = (0 << 5) | cppVar_38018;
	cppVar_38019 = (cppVar_38019 & cppMask_un_8_);
	bool cppVar_38021 = (cppVar_38019 == 208);
	BIT_VEC cppVar_38022 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38023 = (cppVar_38022 << 3) | 7;
	cppVar_38023 = (cppVar_38023 & cppMask_un_5_);
	BIT_VEC cppVar_38024 = (0 << 5) | cppVar_38023;
	cppVar_38024 = (cppVar_38024 & cppMask_un_8_);
	bool cppVar_38026 = (cppVar_38024 == 224);
	BIT_VEC cppVar_38027 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38028 = (cppVar_38027 << 3) | 7;
	cppVar_38028 = (cppVar_38028 & cppMask_un_5_);
	BIT_VEC cppVar_38029 = (0 << 5) | cppVar_38028;
	cppVar_38029 = (cppVar_38029 & cppMask_un_8_);
	bool cppVar_38031 = (cppVar_38029 == 240);
	BIT_VEC cppVar_38033 = (cppVar_38031) ? B : 0;
	BIT_VEC cppVar_38034 = (cppVar_38026) ? ACC : cppVar_38033;
	BIT_VEC cppVar_38035 = (cppVar_38021) ? PSW : cppVar_38034;
	BIT_VEC cppVar_38036 = (cppVar_38016) ? IP : cppVar_38035;
	BIT_VEC cppVar_38037 = (cppVar_38011) ? P3 : cppVar_38036;
	BIT_VEC cppVar_38038 = (cppVar_38006) ? IE : cppVar_38037;
	BIT_VEC cppVar_38039 = (cppVar_38001) ? P2 : cppVar_38038;
	BIT_VEC cppVar_38040 = (cppVar_37996) ? SBUF : cppVar_38039;
	BIT_VEC cppVar_38041 = (cppVar_37991) ? SCON : cppVar_38040;
	BIT_VEC cppVar_38042 = (cppVar_37986) ? P1 : cppVar_38041;
	BIT_VEC cppVar_38043 = (cppVar_37981) ? TH1 : cppVar_38042;
	BIT_VEC cppVar_38044 = (cppVar_37976) ? TL1 : cppVar_38043;
	BIT_VEC cppVar_38045 = (cppVar_37971) ? TH0 : cppVar_38044;
	BIT_VEC cppVar_38046 = (cppVar_37966) ? TL0 : cppVar_38045;
	BIT_VEC cppVar_38047 = (cppVar_37961) ? TMOD : cppVar_38046;
	BIT_VEC cppVar_38048 = (cppVar_37956) ? TCON : cppVar_38047;
	BIT_VEC cppVar_38049 = (cppVar_37951) ? PCON : cppVar_38048;
	BIT_VEC cppVar_38050 = (cppVar_37946) ? DPH : cppVar_38049;
	BIT_VEC cppVar_38051 = (cppVar_37941) ? DPL : cppVar_38050;
	BIT_VEC cppVar_38052 = (cppVar_37936) ? SP : cppVar_38051;
	BIT_VEC cppVar_38053 = (cppVar_37931) ? P0 : cppVar_38052;
	BIT_VEC cppVar_38054 = (cppVar_37922) ? cppVar_37926 : cppVar_38053;
	BIT_VEC cppVar_38055 = (cppVar_37914) ? cppVar_38054 : P3;
	BIT_VEC cppVar_38056 = ROM.rd(PC);
	bool cppVar_38058 = (cppVar_38056 == 142);
	BIT_VEC cppVar_38060 = PC + 1;
	cppVar_38060 = (cppVar_38060 & cppMask_un_16_);
	BIT_VEC cppVar_38061 = ROM.rd(cppVar_38060);
	bool cppVar_38063 = (cppVar_38061 == 176);
	BIT_VEC cppVar_38065 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38067 = (cppVar_38065 << 3) | 6;
	cppVar_38067 = (cppVar_38067 & cppMask_un_5_);
	BIT_VEC cppVar_38068 = (0 << 5) | cppVar_38067;
	cppVar_38068 = (cppVar_38068 & cppMask_un_8_);
	BIT_VEC cppVar_38069 = (cppVar_38068 >> 7) & cppMask_un_1_;
	bool cppVar_38071 = (cppVar_38069 == 0);
	BIT_VEC cppVar_38072 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38073 = (cppVar_38072 << 3) | 6;
	cppVar_38073 = (cppVar_38073 & cppMask_un_5_);
	BIT_VEC cppVar_38074 = (0 << 5) | cppVar_38073;
	cppVar_38074 = (cppVar_38074 & cppMask_un_8_);
	BIT_VEC cppVar_38075 = IRAM.rd(cppVar_38074);
	BIT_VEC cppVar_38076 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38077 = (cppVar_38076 << 3) | 6;
	cppVar_38077 = (cppVar_38077 & cppMask_un_5_);
	BIT_VEC cppVar_38078 = (0 << 5) | cppVar_38077;
	cppVar_38078 = (cppVar_38078 & cppMask_un_8_);
	bool cppVar_38080 = (cppVar_38078 == 128);
	BIT_VEC cppVar_38081 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38082 = (cppVar_38081 << 3) | 6;
	cppVar_38082 = (cppVar_38082 & cppMask_un_5_);
	BIT_VEC cppVar_38083 = (0 << 5) | cppVar_38082;
	cppVar_38083 = (cppVar_38083 & cppMask_un_8_);
	bool cppVar_38085 = (cppVar_38083 == 129);
	BIT_VEC cppVar_38086 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38087 = (cppVar_38086 << 3) | 6;
	cppVar_38087 = (cppVar_38087 & cppMask_un_5_);
	BIT_VEC cppVar_38088 = (0 << 5) | cppVar_38087;
	cppVar_38088 = (cppVar_38088 & cppMask_un_8_);
	bool cppVar_38090 = (cppVar_38088 == 130);
	BIT_VEC cppVar_38091 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38092 = (cppVar_38091 << 3) | 6;
	cppVar_38092 = (cppVar_38092 & cppMask_un_5_);
	BIT_VEC cppVar_38093 = (0 << 5) | cppVar_38092;
	cppVar_38093 = (cppVar_38093 & cppMask_un_8_);
	bool cppVar_38095 = (cppVar_38093 == 131);
	BIT_VEC cppVar_38096 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38097 = (cppVar_38096 << 3) | 6;
	cppVar_38097 = (cppVar_38097 & cppMask_un_5_);
	BIT_VEC cppVar_38098 = (0 << 5) | cppVar_38097;
	cppVar_38098 = (cppVar_38098 & cppMask_un_8_);
	bool cppVar_38100 = (cppVar_38098 == 135);
	BIT_VEC cppVar_38101 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38102 = (cppVar_38101 << 3) | 6;
	cppVar_38102 = (cppVar_38102 & cppMask_un_5_);
	BIT_VEC cppVar_38103 = (0 << 5) | cppVar_38102;
	cppVar_38103 = (cppVar_38103 & cppMask_un_8_);
	bool cppVar_38105 = (cppVar_38103 == 136);
	BIT_VEC cppVar_38106 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38107 = (cppVar_38106 << 3) | 6;
	cppVar_38107 = (cppVar_38107 & cppMask_un_5_);
	BIT_VEC cppVar_38108 = (0 << 5) | cppVar_38107;
	cppVar_38108 = (cppVar_38108 & cppMask_un_8_);
	bool cppVar_38110 = (cppVar_38108 == 137);
	BIT_VEC cppVar_38111 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38112 = (cppVar_38111 << 3) | 6;
	cppVar_38112 = (cppVar_38112 & cppMask_un_5_);
	BIT_VEC cppVar_38113 = (0 << 5) | cppVar_38112;
	cppVar_38113 = (cppVar_38113 & cppMask_un_8_);
	bool cppVar_38115 = (cppVar_38113 == 138);
	BIT_VEC cppVar_38116 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38117 = (cppVar_38116 << 3) | 6;
	cppVar_38117 = (cppVar_38117 & cppMask_un_5_);
	BIT_VEC cppVar_38118 = (0 << 5) | cppVar_38117;
	cppVar_38118 = (cppVar_38118 & cppMask_un_8_);
	bool cppVar_38120 = (cppVar_38118 == 140);
	BIT_VEC cppVar_38121 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38122 = (cppVar_38121 << 3) | 6;
	cppVar_38122 = (cppVar_38122 & cppMask_un_5_);
	BIT_VEC cppVar_38123 = (0 << 5) | cppVar_38122;
	cppVar_38123 = (cppVar_38123 & cppMask_un_8_);
	bool cppVar_38125 = (cppVar_38123 == 139);
	BIT_VEC cppVar_38126 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38127 = (cppVar_38126 << 3) | 6;
	cppVar_38127 = (cppVar_38127 & cppMask_un_5_);
	BIT_VEC cppVar_38128 = (0 << 5) | cppVar_38127;
	cppVar_38128 = (cppVar_38128 & cppMask_un_8_);
	bool cppVar_38130 = (cppVar_38128 == 141);
	BIT_VEC cppVar_38131 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38132 = (cppVar_38131 << 3) | 6;
	cppVar_38132 = (cppVar_38132 & cppMask_un_5_);
	BIT_VEC cppVar_38133 = (0 << 5) | cppVar_38132;
	cppVar_38133 = (cppVar_38133 & cppMask_un_8_);
	bool cppVar_38135 = (cppVar_38133 == 144);
	BIT_VEC cppVar_38136 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38137 = (cppVar_38136 << 3) | 6;
	cppVar_38137 = (cppVar_38137 & cppMask_un_5_);
	BIT_VEC cppVar_38138 = (0 << 5) | cppVar_38137;
	cppVar_38138 = (cppVar_38138 & cppMask_un_8_);
	bool cppVar_38140 = (cppVar_38138 == 152);
	BIT_VEC cppVar_38141 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38142 = (cppVar_38141 << 3) | 6;
	cppVar_38142 = (cppVar_38142 & cppMask_un_5_);
	BIT_VEC cppVar_38143 = (0 << 5) | cppVar_38142;
	cppVar_38143 = (cppVar_38143 & cppMask_un_8_);
	bool cppVar_38145 = (cppVar_38143 == 153);
	BIT_VEC cppVar_38146 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38147 = (cppVar_38146 << 3) | 6;
	cppVar_38147 = (cppVar_38147 & cppMask_un_5_);
	BIT_VEC cppVar_38148 = (0 << 5) | cppVar_38147;
	cppVar_38148 = (cppVar_38148 & cppMask_un_8_);
	bool cppVar_38150 = (cppVar_38148 == 160);
	BIT_VEC cppVar_38151 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38152 = (cppVar_38151 << 3) | 6;
	cppVar_38152 = (cppVar_38152 & cppMask_un_5_);
	BIT_VEC cppVar_38153 = (0 << 5) | cppVar_38152;
	cppVar_38153 = (cppVar_38153 & cppMask_un_8_);
	bool cppVar_38155 = (cppVar_38153 == 168);
	BIT_VEC cppVar_38156 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38157 = (cppVar_38156 << 3) | 6;
	cppVar_38157 = (cppVar_38157 & cppMask_un_5_);
	BIT_VEC cppVar_38158 = (0 << 5) | cppVar_38157;
	cppVar_38158 = (cppVar_38158 & cppMask_un_8_);
	bool cppVar_38160 = (cppVar_38158 == 176);
	BIT_VEC cppVar_38161 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38162 = (cppVar_38161 << 3) | 6;
	cppVar_38162 = (cppVar_38162 & cppMask_un_5_);
	BIT_VEC cppVar_38163 = (0 << 5) | cppVar_38162;
	cppVar_38163 = (cppVar_38163 & cppMask_un_8_);
	bool cppVar_38165 = (cppVar_38163 == 184);
	BIT_VEC cppVar_38166 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38167 = (cppVar_38166 << 3) | 6;
	cppVar_38167 = (cppVar_38167 & cppMask_un_5_);
	BIT_VEC cppVar_38168 = (0 << 5) | cppVar_38167;
	cppVar_38168 = (cppVar_38168 & cppMask_un_8_);
	bool cppVar_38170 = (cppVar_38168 == 208);
	BIT_VEC cppVar_38171 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38172 = (cppVar_38171 << 3) | 6;
	cppVar_38172 = (cppVar_38172 & cppMask_un_5_);
	BIT_VEC cppVar_38173 = (0 << 5) | cppVar_38172;
	cppVar_38173 = (cppVar_38173 & cppMask_un_8_);
	bool cppVar_38175 = (cppVar_38173 == 224);
	BIT_VEC cppVar_38176 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38177 = (cppVar_38176 << 3) | 6;
	cppVar_38177 = (cppVar_38177 & cppMask_un_5_);
	BIT_VEC cppVar_38178 = (0 << 5) | cppVar_38177;
	cppVar_38178 = (cppVar_38178 & cppMask_un_8_);
	bool cppVar_38180 = (cppVar_38178 == 240);
	BIT_VEC cppVar_38182 = (cppVar_38180) ? B : 0;
	BIT_VEC cppVar_38183 = (cppVar_38175) ? ACC : cppVar_38182;
	BIT_VEC cppVar_38184 = (cppVar_38170) ? PSW : cppVar_38183;
	BIT_VEC cppVar_38185 = (cppVar_38165) ? IP : cppVar_38184;
	BIT_VEC cppVar_38186 = (cppVar_38160) ? P3 : cppVar_38185;
	BIT_VEC cppVar_38187 = (cppVar_38155) ? IE : cppVar_38186;
	BIT_VEC cppVar_38188 = (cppVar_38150) ? P2 : cppVar_38187;
	BIT_VEC cppVar_38189 = (cppVar_38145) ? SBUF : cppVar_38188;
	BIT_VEC cppVar_38190 = (cppVar_38140) ? SCON : cppVar_38189;
	BIT_VEC cppVar_38191 = (cppVar_38135) ? P1 : cppVar_38190;
	BIT_VEC cppVar_38192 = (cppVar_38130) ? TH1 : cppVar_38191;
	BIT_VEC cppVar_38193 = (cppVar_38125) ? TL1 : cppVar_38192;
	BIT_VEC cppVar_38194 = (cppVar_38120) ? TH0 : cppVar_38193;
	BIT_VEC cppVar_38195 = (cppVar_38115) ? TL0 : cppVar_38194;
	BIT_VEC cppVar_38196 = (cppVar_38110) ? TMOD : cppVar_38195;
	BIT_VEC cppVar_38197 = (cppVar_38105) ? TCON : cppVar_38196;
	BIT_VEC cppVar_38198 = (cppVar_38100) ? PCON : cppVar_38197;
	BIT_VEC cppVar_38199 = (cppVar_38095) ? DPH : cppVar_38198;
	BIT_VEC cppVar_38200 = (cppVar_38090) ? DPL : cppVar_38199;
	BIT_VEC cppVar_38201 = (cppVar_38085) ? SP : cppVar_38200;
	BIT_VEC cppVar_38202 = (cppVar_38080) ? P0 : cppVar_38201;
	BIT_VEC cppVar_38203 = (cppVar_38071) ? cppVar_38075 : cppVar_38202;
	BIT_VEC cppVar_38204 = (cppVar_38063) ? cppVar_38203 : P3;
	BIT_VEC cppVar_38205 = ROM.rd(PC);
	bool cppVar_38207 = (cppVar_38205 == 141);
	BIT_VEC cppVar_38209 = PC + 1;
	cppVar_38209 = (cppVar_38209 & cppMask_un_16_);
	BIT_VEC cppVar_38210 = ROM.rd(cppVar_38209);
	bool cppVar_38212 = (cppVar_38210 == 176);
	BIT_VEC cppVar_38214 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38216 = (cppVar_38214 << 3) | 5;
	cppVar_38216 = (cppVar_38216 & cppMask_un_5_);
	BIT_VEC cppVar_38217 = (0 << 5) | cppVar_38216;
	cppVar_38217 = (cppVar_38217 & cppMask_un_8_);
	BIT_VEC cppVar_38218 = (cppVar_38217 >> 7) & cppMask_un_1_;
	bool cppVar_38220 = (cppVar_38218 == 0);
	BIT_VEC cppVar_38221 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38222 = (cppVar_38221 << 3) | 5;
	cppVar_38222 = (cppVar_38222 & cppMask_un_5_);
	BIT_VEC cppVar_38223 = (0 << 5) | cppVar_38222;
	cppVar_38223 = (cppVar_38223 & cppMask_un_8_);
	BIT_VEC cppVar_38224 = IRAM.rd(cppVar_38223);
	BIT_VEC cppVar_38225 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38226 = (cppVar_38225 << 3) | 5;
	cppVar_38226 = (cppVar_38226 & cppMask_un_5_);
	BIT_VEC cppVar_38227 = (0 << 5) | cppVar_38226;
	cppVar_38227 = (cppVar_38227 & cppMask_un_8_);
	bool cppVar_38229 = (cppVar_38227 == 128);
	BIT_VEC cppVar_38230 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38231 = (cppVar_38230 << 3) | 5;
	cppVar_38231 = (cppVar_38231 & cppMask_un_5_);
	BIT_VEC cppVar_38232 = (0 << 5) | cppVar_38231;
	cppVar_38232 = (cppVar_38232 & cppMask_un_8_);
	bool cppVar_38234 = (cppVar_38232 == 129);
	BIT_VEC cppVar_38235 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38236 = (cppVar_38235 << 3) | 5;
	cppVar_38236 = (cppVar_38236 & cppMask_un_5_);
	BIT_VEC cppVar_38237 = (0 << 5) | cppVar_38236;
	cppVar_38237 = (cppVar_38237 & cppMask_un_8_);
	bool cppVar_38239 = (cppVar_38237 == 130);
	BIT_VEC cppVar_38240 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38241 = (cppVar_38240 << 3) | 5;
	cppVar_38241 = (cppVar_38241 & cppMask_un_5_);
	BIT_VEC cppVar_38242 = (0 << 5) | cppVar_38241;
	cppVar_38242 = (cppVar_38242 & cppMask_un_8_);
	bool cppVar_38244 = (cppVar_38242 == 131);
	BIT_VEC cppVar_38245 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38246 = (cppVar_38245 << 3) | 5;
	cppVar_38246 = (cppVar_38246 & cppMask_un_5_);
	BIT_VEC cppVar_38247 = (0 << 5) | cppVar_38246;
	cppVar_38247 = (cppVar_38247 & cppMask_un_8_);
	bool cppVar_38249 = (cppVar_38247 == 135);
	BIT_VEC cppVar_38250 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38251 = (cppVar_38250 << 3) | 5;
	cppVar_38251 = (cppVar_38251 & cppMask_un_5_);
	BIT_VEC cppVar_38252 = (0 << 5) | cppVar_38251;
	cppVar_38252 = (cppVar_38252 & cppMask_un_8_);
	bool cppVar_38254 = (cppVar_38252 == 136);
	BIT_VEC cppVar_38255 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38256 = (cppVar_38255 << 3) | 5;
	cppVar_38256 = (cppVar_38256 & cppMask_un_5_);
	BIT_VEC cppVar_38257 = (0 << 5) | cppVar_38256;
	cppVar_38257 = (cppVar_38257 & cppMask_un_8_);
	bool cppVar_38259 = (cppVar_38257 == 137);
	BIT_VEC cppVar_38260 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38261 = (cppVar_38260 << 3) | 5;
	cppVar_38261 = (cppVar_38261 & cppMask_un_5_);
	BIT_VEC cppVar_38262 = (0 << 5) | cppVar_38261;
	cppVar_38262 = (cppVar_38262 & cppMask_un_8_);
	bool cppVar_38264 = (cppVar_38262 == 138);
	BIT_VEC cppVar_38265 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38266 = (cppVar_38265 << 3) | 5;
	cppVar_38266 = (cppVar_38266 & cppMask_un_5_);
	BIT_VEC cppVar_38267 = (0 << 5) | cppVar_38266;
	cppVar_38267 = (cppVar_38267 & cppMask_un_8_);
	bool cppVar_38269 = (cppVar_38267 == 140);
	BIT_VEC cppVar_38270 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38271 = (cppVar_38270 << 3) | 5;
	cppVar_38271 = (cppVar_38271 & cppMask_un_5_);
	BIT_VEC cppVar_38272 = (0 << 5) | cppVar_38271;
	cppVar_38272 = (cppVar_38272 & cppMask_un_8_);
	bool cppVar_38274 = (cppVar_38272 == 139);
	BIT_VEC cppVar_38275 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38276 = (cppVar_38275 << 3) | 5;
	cppVar_38276 = (cppVar_38276 & cppMask_un_5_);
	BIT_VEC cppVar_38277 = (0 << 5) | cppVar_38276;
	cppVar_38277 = (cppVar_38277 & cppMask_un_8_);
	bool cppVar_38279 = (cppVar_38277 == 141);
	BIT_VEC cppVar_38280 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38281 = (cppVar_38280 << 3) | 5;
	cppVar_38281 = (cppVar_38281 & cppMask_un_5_);
	BIT_VEC cppVar_38282 = (0 << 5) | cppVar_38281;
	cppVar_38282 = (cppVar_38282 & cppMask_un_8_);
	bool cppVar_38284 = (cppVar_38282 == 144);
	BIT_VEC cppVar_38285 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38286 = (cppVar_38285 << 3) | 5;
	cppVar_38286 = (cppVar_38286 & cppMask_un_5_);
	BIT_VEC cppVar_38287 = (0 << 5) | cppVar_38286;
	cppVar_38287 = (cppVar_38287 & cppMask_un_8_);
	bool cppVar_38289 = (cppVar_38287 == 152);
	BIT_VEC cppVar_38290 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38291 = (cppVar_38290 << 3) | 5;
	cppVar_38291 = (cppVar_38291 & cppMask_un_5_);
	BIT_VEC cppVar_38292 = (0 << 5) | cppVar_38291;
	cppVar_38292 = (cppVar_38292 & cppMask_un_8_);
	bool cppVar_38294 = (cppVar_38292 == 153);
	BIT_VEC cppVar_38295 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38296 = (cppVar_38295 << 3) | 5;
	cppVar_38296 = (cppVar_38296 & cppMask_un_5_);
	BIT_VEC cppVar_38297 = (0 << 5) | cppVar_38296;
	cppVar_38297 = (cppVar_38297 & cppMask_un_8_);
	bool cppVar_38299 = (cppVar_38297 == 160);
	BIT_VEC cppVar_38300 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38301 = (cppVar_38300 << 3) | 5;
	cppVar_38301 = (cppVar_38301 & cppMask_un_5_);
	BIT_VEC cppVar_38302 = (0 << 5) | cppVar_38301;
	cppVar_38302 = (cppVar_38302 & cppMask_un_8_);
	bool cppVar_38304 = (cppVar_38302 == 168);
	BIT_VEC cppVar_38305 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38306 = (cppVar_38305 << 3) | 5;
	cppVar_38306 = (cppVar_38306 & cppMask_un_5_);
	BIT_VEC cppVar_38307 = (0 << 5) | cppVar_38306;
	cppVar_38307 = (cppVar_38307 & cppMask_un_8_);
	bool cppVar_38309 = (cppVar_38307 == 176);
	BIT_VEC cppVar_38310 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38311 = (cppVar_38310 << 3) | 5;
	cppVar_38311 = (cppVar_38311 & cppMask_un_5_);
	BIT_VEC cppVar_38312 = (0 << 5) | cppVar_38311;
	cppVar_38312 = (cppVar_38312 & cppMask_un_8_);
	bool cppVar_38314 = (cppVar_38312 == 184);
	BIT_VEC cppVar_38315 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38316 = (cppVar_38315 << 3) | 5;
	cppVar_38316 = (cppVar_38316 & cppMask_un_5_);
	BIT_VEC cppVar_38317 = (0 << 5) | cppVar_38316;
	cppVar_38317 = (cppVar_38317 & cppMask_un_8_);
	bool cppVar_38319 = (cppVar_38317 == 208);
	BIT_VEC cppVar_38320 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38321 = (cppVar_38320 << 3) | 5;
	cppVar_38321 = (cppVar_38321 & cppMask_un_5_);
	BIT_VEC cppVar_38322 = (0 << 5) | cppVar_38321;
	cppVar_38322 = (cppVar_38322 & cppMask_un_8_);
	bool cppVar_38324 = (cppVar_38322 == 224);
	BIT_VEC cppVar_38325 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38326 = (cppVar_38325 << 3) | 5;
	cppVar_38326 = (cppVar_38326 & cppMask_un_5_);
	BIT_VEC cppVar_38327 = (0 << 5) | cppVar_38326;
	cppVar_38327 = (cppVar_38327 & cppMask_un_8_);
	bool cppVar_38329 = (cppVar_38327 == 240);
	BIT_VEC cppVar_38331 = (cppVar_38329) ? B : 0;
	BIT_VEC cppVar_38332 = (cppVar_38324) ? ACC : cppVar_38331;
	BIT_VEC cppVar_38333 = (cppVar_38319) ? PSW : cppVar_38332;
	BIT_VEC cppVar_38334 = (cppVar_38314) ? IP : cppVar_38333;
	BIT_VEC cppVar_38335 = (cppVar_38309) ? P3 : cppVar_38334;
	BIT_VEC cppVar_38336 = (cppVar_38304) ? IE : cppVar_38335;
	BIT_VEC cppVar_38337 = (cppVar_38299) ? P2 : cppVar_38336;
	BIT_VEC cppVar_38338 = (cppVar_38294) ? SBUF : cppVar_38337;
	BIT_VEC cppVar_38339 = (cppVar_38289) ? SCON : cppVar_38338;
	BIT_VEC cppVar_38340 = (cppVar_38284) ? P1 : cppVar_38339;
	BIT_VEC cppVar_38341 = (cppVar_38279) ? TH1 : cppVar_38340;
	BIT_VEC cppVar_38342 = (cppVar_38274) ? TL1 : cppVar_38341;
	BIT_VEC cppVar_38343 = (cppVar_38269) ? TH0 : cppVar_38342;
	BIT_VEC cppVar_38344 = (cppVar_38264) ? TL0 : cppVar_38343;
	BIT_VEC cppVar_38345 = (cppVar_38259) ? TMOD : cppVar_38344;
	BIT_VEC cppVar_38346 = (cppVar_38254) ? TCON : cppVar_38345;
	BIT_VEC cppVar_38347 = (cppVar_38249) ? PCON : cppVar_38346;
	BIT_VEC cppVar_38348 = (cppVar_38244) ? DPH : cppVar_38347;
	BIT_VEC cppVar_38349 = (cppVar_38239) ? DPL : cppVar_38348;
	BIT_VEC cppVar_38350 = (cppVar_38234) ? SP : cppVar_38349;
	BIT_VEC cppVar_38351 = (cppVar_38229) ? P0 : cppVar_38350;
	BIT_VEC cppVar_38352 = (cppVar_38220) ? cppVar_38224 : cppVar_38351;
	BIT_VEC cppVar_38353 = (cppVar_38212) ? cppVar_38352 : P3;
	BIT_VEC cppVar_38354 = ROM.rd(PC);
	bool cppVar_38356 = (cppVar_38354 == 140);
	BIT_VEC cppVar_38358 = PC + 1;
	cppVar_38358 = (cppVar_38358 & cppMask_un_16_);
	BIT_VEC cppVar_38359 = ROM.rd(cppVar_38358);
	bool cppVar_38361 = (cppVar_38359 == 176);
	BIT_VEC cppVar_38363 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38365 = (cppVar_38363 << 3) | 4;
	cppVar_38365 = (cppVar_38365 & cppMask_un_5_);
	BIT_VEC cppVar_38366 = (0 << 5) | cppVar_38365;
	cppVar_38366 = (cppVar_38366 & cppMask_un_8_);
	BIT_VEC cppVar_38367 = (cppVar_38366 >> 7) & cppMask_un_1_;
	bool cppVar_38369 = (cppVar_38367 == 0);
	BIT_VEC cppVar_38370 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38371 = (cppVar_38370 << 3) | 4;
	cppVar_38371 = (cppVar_38371 & cppMask_un_5_);
	BIT_VEC cppVar_38372 = (0 << 5) | cppVar_38371;
	cppVar_38372 = (cppVar_38372 & cppMask_un_8_);
	BIT_VEC cppVar_38373 = IRAM.rd(cppVar_38372);
	BIT_VEC cppVar_38374 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38375 = (cppVar_38374 << 3) | 4;
	cppVar_38375 = (cppVar_38375 & cppMask_un_5_);
	BIT_VEC cppVar_38376 = (0 << 5) | cppVar_38375;
	cppVar_38376 = (cppVar_38376 & cppMask_un_8_);
	bool cppVar_38378 = (cppVar_38376 == 128);
	BIT_VEC cppVar_38379 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38380 = (cppVar_38379 << 3) | 4;
	cppVar_38380 = (cppVar_38380 & cppMask_un_5_);
	BIT_VEC cppVar_38381 = (0 << 5) | cppVar_38380;
	cppVar_38381 = (cppVar_38381 & cppMask_un_8_);
	bool cppVar_38383 = (cppVar_38381 == 129);
	BIT_VEC cppVar_38384 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38385 = (cppVar_38384 << 3) | 4;
	cppVar_38385 = (cppVar_38385 & cppMask_un_5_);
	BIT_VEC cppVar_38386 = (0 << 5) | cppVar_38385;
	cppVar_38386 = (cppVar_38386 & cppMask_un_8_);
	bool cppVar_38388 = (cppVar_38386 == 130);
	BIT_VEC cppVar_38389 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38390 = (cppVar_38389 << 3) | 4;
	cppVar_38390 = (cppVar_38390 & cppMask_un_5_);
	BIT_VEC cppVar_38391 = (0 << 5) | cppVar_38390;
	cppVar_38391 = (cppVar_38391 & cppMask_un_8_);
	bool cppVar_38393 = (cppVar_38391 == 131);
	BIT_VEC cppVar_38394 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38395 = (cppVar_38394 << 3) | 4;
	cppVar_38395 = (cppVar_38395 & cppMask_un_5_);
	BIT_VEC cppVar_38396 = (0 << 5) | cppVar_38395;
	cppVar_38396 = (cppVar_38396 & cppMask_un_8_);
	bool cppVar_38398 = (cppVar_38396 == 135);
	BIT_VEC cppVar_38399 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38400 = (cppVar_38399 << 3) | 4;
	cppVar_38400 = (cppVar_38400 & cppMask_un_5_);
	BIT_VEC cppVar_38401 = (0 << 5) | cppVar_38400;
	cppVar_38401 = (cppVar_38401 & cppMask_un_8_);
	bool cppVar_38403 = (cppVar_38401 == 136);
	BIT_VEC cppVar_38404 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38405 = (cppVar_38404 << 3) | 4;
	cppVar_38405 = (cppVar_38405 & cppMask_un_5_);
	BIT_VEC cppVar_38406 = (0 << 5) | cppVar_38405;
	cppVar_38406 = (cppVar_38406 & cppMask_un_8_);
	bool cppVar_38408 = (cppVar_38406 == 137);
	BIT_VEC cppVar_38409 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38410 = (cppVar_38409 << 3) | 4;
	cppVar_38410 = (cppVar_38410 & cppMask_un_5_);
	BIT_VEC cppVar_38411 = (0 << 5) | cppVar_38410;
	cppVar_38411 = (cppVar_38411 & cppMask_un_8_);
	bool cppVar_38413 = (cppVar_38411 == 138);
	BIT_VEC cppVar_38414 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38415 = (cppVar_38414 << 3) | 4;
	cppVar_38415 = (cppVar_38415 & cppMask_un_5_);
	BIT_VEC cppVar_38416 = (0 << 5) | cppVar_38415;
	cppVar_38416 = (cppVar_38416 & cppMask_un_8_);
	bool cppVar_38418 = (cppVar_38416 == 140);
	BIT_VEC cppVar_38419 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38420 = (cppVar_38419 << 3) | 4;
	cppVar_38420 = (cppVar_38420 & cppMask_un_5_);
	BIT_VEC cppVar_38421 = (0 << 5) | cppVar_38420;
	cppVar_38421 = (cppVar_38421 & cppMask_un_8_);
	bool cppVar_38423 = (cppVar_38421 == 139);
	BIT_VEC cppVar_38424 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38425 = (cppVar_38424 << 3) | 4;
	cppVar_38425 = (cppVar_38425 & cppMask_un_5_);
	BIT_VEC cppVar_38426 = (0 << 5) | cppVar_38425;
	cppVar_38426 = (cppVar_38426 & cppMask_un_8_);
	bool cppVar_38428 = (cppVar_38426 == 141);
	BIT_VEC cppVar_38429 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38430 = (cppVar_38429 << 3) | 4;
	cppVar_38430 = (cppVar_38430 & cppMask_un_5_);
	BIT_VEC cppVar_38431 = (0 << 5) | cppVar_38430;
	cppVar_38431 = (cppVar_38431 & cppMask_un_8_);
	bool cppVar_38433 = (cppVar_38431 == 144);
	BIT_VEC cppVar_38434 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38435 = (cppVar_38434 << 3) | 4;
	cppVar_38435 = (cppVar_38435 & cppMask_un_5_);
	BIT_VEC cppVar_38436 = (0 << 5) | cppVar_38435;
	cppVar_38436 = (cppVar_38436 & cppMask_un_8_);
	bool cppVar_38438 = (cppVar_38436 == 152);
	BIT_VEC cppVar_38439 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38440 = (cppVar_38439 << 3) | 4;
	cppVar_38440 = (cppVar_38440 & cppMask_un_5_);
	BIT_VEC cppVar_38441 = (0 << 5) | cppVar_38440;
	cppVar_38441 = (cppVar_38441 & cppMask_un_8_);
	bool cppVar_38443 = (cppVar_38441 == 153);
	BIT_VEC cppVar_38444 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38445 = (cppVar_38444 << 3) | 4;
	cppVar_38445 = (cppVar_38445 & cppMask_un_5_);
	BIT_VEC cppVar_38446 = (0 << 5) | cppVar_38445;
	cppVar_38446 = (cppVar_38446 & cppMask_un_8_);
	bool cppVar_38448 = (cppVar_38446 == 160);
	BIT_VEC cppVar_38449 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38450 = (cppVar_38449 << 3) | 4;
	cppVar_38450 = (cppVar_38450 & cppMask_un_5_);
	BIT_VEC cppVar_38451 = (0 << 5) | cppVar_38450;
	cppVar_38451 = (cppVar_38451 & cppMask_un_8_);
	bool cppVar_38453 = (cppVar_38451 == 168);
	BIT_VEC cppVar_38454 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38455 = (cppVar_38454 << 3) | 4;
	cppVar_38455 = (cppVar_38455 & cppMask_un_5_);
	BIT_VEC cppVar_38456 = (0 << 5) | cppVar_38455;
	cppVar_38456 = (cppVar_38456 & cppMask_un_8_);
	bool cppVar_38458 = (cppVar_38456 == 176);
	BIT_VEC cppVar_38459 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38460 = (cppVar_38459 << 3) | 4;
	cppVar_38460 = (cppVar_38460 & cppMask_un_5_);
	BIT_VEC cppVar_38461 = (0 << 5) | cppVar_38460;
	cppVar_38461 = (cppVar_38461 & cppMask_un_8_);
	bool cppVar_38463 = (cppVar_38461 == 184);
	BIT_VEC cppVar_38464 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38465 = (cppVar_38464 << 3) | 4;
	cppVar_38465 = (cppVar_38465 & cppMask_un_5_);
	BIT_VEC cppVar_38466 = (0 << 5) | cppVar_38465;
	cppVar_38466 = (cppVar_38466 & cppMask_un_8_);
	bool cppVar_38468 = (cppVar_38466 == 208);
	BIT_VEC cppVar_38469 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38470 = (cppVar_38469 << 3) | 4;
	cppVar_38470 = (cppVar_38470 & cppMask_un_5_);
	BIT_VEC cppVar_38471 = (0 << 5) | cppVar_38470;
	cppVar_38471 = (cppVar_38471 & cppMask_un_8_);
	bool cppVar_38473 = (cppVar_38471 == 224);
	BIT_VEC cppVar_38474 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38475 = (cppVar_38474 << 3) | 4;
	cppVar_38475 = (cppVar_38475 & cppMask_un_5_);
	BIT_VEC cppVar_38476 = (0 << 5) | cppVar_38475;
	cppVar_38476 = (cppVar_38476 & cppMask_un_8_);
	bool cppVar_38478 = (cppVar_38476 == 240);
	BIT_VEC cppVar_38480 = (cppVar_38478) ? B : 0;
	BIT_VEC cppVar_38481 = (cppVar_38473) ? ACC : cppVar_38480;
	BIT_VEC cppVar_38482 = (cppVar_38468) ? PSW : cppVar_38481;
	BIT_VEC cppVar_38483 = (cppVar_38463) ? IP : cppVar_38482;
	BIT_VEC cppVar_38484 = (cppVar_38458) ? P3 : cppVar_38483;
	BIT_VEC cppVar_38485 = (cppVar_38453) ? IE : cppVar_38484;
	BIT_VEC cppVar_38486 = (cppVar_38448) ? P2 : cppVar_38485;
	BIT_VEC cppVar_38487 = (cppVar_38443) ? SBUF : cppVar_38486;
	BIT_VEC cppVar_38488 = (cppVar_38438) ? SCON : cppVar_38487;
	BIT_VEC cppVar_38489 = (cppVar_38433) ? P1 : cppVar_38488;
	BIT_VEC cppVar_38490 = (cppVar_38428) ? TH1 : cppVar_38489;
	BIT_VEC cppVar_38491 = (cppVar_38423) ? TL1 : cppVar_38490;
	BIT_VEC cppVar_38492 = (cppVar_38418) ? TH0 : cppVar_38491;
	BIT_VEC cppVar_38493 = (cppVar_38413) ? TL0 : cppVar_38492;
	BIT_VEC cppVar_38494 = (cppVar_38408) ? TMOD : cppVar_38493;
	BIT_VEC cppVar_38495 = (cppVar_38403) ? TCON : cppVar_38494;
	BIT_VEC cppVar_38496 = (cppVar_38398) ? PCON : cppVar_38495;
	BIT_VEC cppVar_38497 = (cppVar_38393) ? DPH : cppVar_38496;
	BIT_VEC cppVar_38498 = (cppVar_38388) ? DPL : cppVar_38497;
	BIT_VEC cppVar_38499 = (cppVar_38383) ? SP : cppVar_38498;
	BIT_VEC cppVar_38500 = (cppVar_38378) ? P0 : cppVar_38499;
	BIT_VEC cppVar_38501 = (cppVar_38369) ? cppVar_38373 : cppVar_38500;
	BIT_VEC cppVar_38502 = (cppVar_38361) ? cppVar_38501 : P3;
	BIT_VEC cppVar_38503 = ROM.rd(PC);
	bool cppVar_38505 = (cppVar_38503 == 139);
	BIT_VEC cppVar_38507 = PC + 1;
	cppVar_38507 = (cppVar_38507 & cppMask_un_16_);
	BIT_VEC cppVar_38508 = ROM.rd(cppVar_38507);
	bool cppVar_38510 = (cppVar_38508 == 176);
	BIT_VEC cppVar_38512 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38514 = (cppVar_38512 << 3) | 3;
	cppVar_38514 = (cppVar_38514 & cppMask_un_5_);
	BIT_VEC cppVar_38515 = (0 << 5) | cppVar_38514;
	cppVar_38515 = (cppVar_38515 & cppMask_un_8_);
	BIT_VEC cppVar_38516 = (cppVar_38515 >> 7) & cppMask_un_1_;
	bool cppVar_38518 = (cppVar_38516 == 0);
	BIT_VEC cppVar_38519 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38520 = (cppVar_38519 << 3) | 3;
	cppVar_38520 = (cppVar_38520 & cppMask_un_5_);
	BIT_VEC cppVar_38521 = (0 << 5) | cppVar_38520;
	cppVar_38521 = (cppVar_38521 & cppMask_un_8_);
	BIT_VEC cppVar_38522 = IRAM.rd(cppVar_38521);
	BIT_VEC cppVar_38523 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38524 = (cppVar_38523 << 3) | 3;
	cppVar_38524 = (cppVar_38524 & cppMask_un_5_);
	BIT_VEC cppVar_38525 = (0 << 5) | cppVar_38524;
	cppVar_38525 = (cppVar_38525 & cppMask_un_8_);
	bool cppVar_38527 = (cppVar_38525 == 128);
	BIT_VEC cppVar_38528 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38529 = (cppVar_38528 << 3) | 3;
	cppVar_38529 = (cppVar_38529 & cppMask_un_5_);
	BIT_VEC cppVar_38530 = (0 << 5) | cppVar_38529;
	cppVar_38530 = (cppVar_38530 & cppMask_un_8_);
	bool cppVar_38532 = (cppVar_38530 == 129);
	BIT_VEC cppVar_38533 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38534 = (cppVar_38533 << 3) | 3;
	cppVar_38534 = (cppVar_38534 & cppMask_un_5_);
	BIT_VEC cppVar_38535 = (0 << 5) | cppVar_38534;
	cppVar_38535 = (cppVar_38535 & cppMask_un_8_);
	bool cppVar_38537 = (cppVar_38535 == 130);
	BIT_VEC cppVar_38538 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38539 = (cppVar_38538 << 3) | 3;
	cppVar_38539 = (cppVar_38539 & cppMask_un_5_);
	BIT_VEC cppVar_38540 = (0 << 5) | cppVar_38539;
	cppVar_38540 = (cppVar_38540 & cppMask_un_8_);
	bool cppVar_38542 = (cppVar_38540 == 131);
	BIT_VEC cppVar_38543 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38544 = (cppVar_38543 << 3) | 3;
	cppVar_38544 = (cppVar_38544 & cppMask_un_5_);
	BIT_VEC cppVar_38545 = (0 << 5) | cppVar_38544;
	cppVar_38545 = (cppVar_38545 & cppMask_un_8_);
	bool cppVar_38547 = (cppVar_38545 == 135);
	BIT_VEC cppVar_38548 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38549 = (cppVar_38548 << 3) | 3;
	cppVar_38549 = (cppVar_38549 & cppMask_un_5_);
	BIT_VEC cppVar_38550 = (0 << 5) | cppVar_38549;
	cppVar_38550 = (cppVar_38550 & cppMask_un_8_);
	bool cppVar_38552 = (cppVar_38550 == 136);
	BIT_VEC cppVar_38553 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38554 = (cppVar_38553 << 3) | 3;
	cppVar_38554 = (cppVar_38554 & cppMask_un_5_);
	BIT_VEC cppVar_38555 = (0 << 5) | cppVar_38554;
	cppVar_38555 = (cppVar_38555 & cppMask_un_8_);
	bool cppVar_38557 = (cppVar_38555 == 137);
	BIT_VEC cppVar_38558 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38559 = (cppVar_38558 << 3) | 3;
	cppVar_38559 = (cppVar_38559 & cppMask_un_5_);
	BIT_VEC cppVar_38560 = (0 << 5) | cppVar_38559;
	cppVar_38560 = (cppVar_38560 & cppMask_un_8_);
	bool cppVar_38562 = (cppVar_38560 == 138);
	BIT_VEC cppVar_38563 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38564 = (cppVar_38563 << 3) | 3;
	cppVar_38564 = (cppVar_38564 & cppMask_un_5_);
	BIT_VEC cppVar_38565 = (0 << 5) | cppVar_38564;
	cppVar_38565 = (cppVar_38565 & cppMask_un_8_);
	bool cppVar_38567 = (cppVar_38565 == 140);
	BIT_VEC cppVar_38568 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38569 = (cppVar_38568 << 3) | 3;
	cppVar_38569 = (cppVar_38569 & cppMask_un_5_);
	BIT_VEC cppVar_38570 = (0 << 5) | cppVar_38569;
	cppVar_38570 = (cppVar_38570 & cppMask_un_8_);
	bool cppVar_38572 = (cppVar_38570 == 139);
	BIT_VEC cppVar_38573 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38574 = (cppVar_38573 << 3) | 3;
	cppVar_38574 = (cppVar_38574 & cppMask_un_5_);
	BIT_VEC cppVar_38575 = (0 << 5) | cppVar_38574;
	cppVar_38575 = (cppVar_38575 & cppMask_un_8_);
	bool cppVar_38577 = (cppVar_38575 == 141);
	BIT_VEC cppVar_38578 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38579 = (cppVar_38578 << 3) | 3;
	cppVar_38579 = (cppVar_38579 & cppMask_un_5_);
	BIT_VEC cppVar_38580 = (0 << 5) | cppVar_38579;
	cppVar_38580 = (cppVar_38580 & cppMask_un_8_);
	bool cppVar_38582 = (cppVar_38580 == 144);
	BIT_VEC cppVar_38583 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38584 = (cppVar_38583 << 3) | 3;
	cppVar_38584 = (cppVar_38584 & cppMask_un_5_);
	BIT_VEC cppVar_38585 = (0 << 5) | cppVar_38584;
	cppVar_38585 = (cppVar_38585 & cppMask_un_8_);
	bool cppVar_38587 = (cppVar_38585 == 152);
	BIT_VEC cppVar_38588 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38589 = (cppVar_38588 << 3) | 3;
	cppVar_38589 = (cppVar_38589 & cppMask_un_5_);
	BIT_VEC cppVar_38590 = (0 << 5) | cppVar_38589;
	cppVar_38590 = (cppVar_38590 & cppMask_un_8_);
	bool cppVar_38592 = (cppVar_38590 == 153);
	BIT_VEC cppVar_38593 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38594 = (cppVar_38593 << 3) | 3;
	cppVar_38594 = (cppVar_38594 & cppMask_un_5_);
	BIT_VEC cppVar_38595 = (0 << 5) | cppVar_38594;
	cppVar_38595 = (cppVar_38595 & cppMask_un_8_);
	bool cppVar_38597 = (cppVar_38595 == 160);
	BIT_VEC cppVar_38598 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38599 = (cppVar_38598 << 3) | 3;
	cppVar_38599 = (cppVar_38599 & cppMask_un_5_);
	BIT_VEC cppVar_38600 = (0 << 5) | cppVar_38599;
	cppVar_38600 = (cppVar_38600 & cppMask_un_8_);
	bool cppVar_38602 = (cppVar_38600 == 168);
	BIT_VEC cppVar_38603 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38604 = (cppVar_38603 << 3) | 3;
	cppVar_38604 = (cppVar_38604 & cppMask_un_5_);
	BIT_VEC cppVar_38605 = (0 << 5) | cppVar_38604;
	cppVar_38605 = (cppVar_38605 & cppMask_un_8_);
	bool cppVar_38607 = (cppVar_38605 == 176);
	BIT_VEC cppVar_38608 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38609 = (cppVar_38608 << 3) | 3;
	cppVar_38609 = (cppVar_38609 & cppMask_un_5_);
	BIT_VEC cppVar_38610 = (0 << 5) | cppVar_38609;
	cppVar_38610 = (cppVar_38610 & cppMask_un_8_);
	bool cppVar_38612 = (cppVar_38610 == 184);
	BIT_VEC cppVar_38613 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38614 = (cppVar_38613 << 3) | 3;
	cppVar_38614 = (cppVar_38614 & cppMask_un_5_);
	BIT_VEC cppVar_38615 = (0 << 5) | cppVar_38614;
	cppVar_38615 = (cppVar_38615 & cppMask_un_8_);
	bool cppVar_38617 = (cppVar_38615 == 208);
	BIT_VEC cppVar_38618 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38619 = (cppVar_38618 << 3) | 3;
	cppVar_38619 = (cppVar_38619 & cppMask_un_5_);
	BIT_VEC cppVar_38620 = (0 << 5) | cppVar_38619;
	cppVar_38620 = (cppVar_38620 & cppMask_un_8_);
	bool cppVar_38622 = (cppVar_38620 == 224);
	BIT_VEC cppVar_38623 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38624 = (cppVar_38623 << 3) | 3;
	cppVar_38624 = (cppVar_38624 & cppMask_un_5_);
	BIT_VEC cppVar_38625 = (0 << 5) | cppVar_38624;
	cppVar_38625 = (cppVar_38625 & cppMask_un_8_);
	bool cppVar_38627 = (cppVar_38625 == 240);
	BIT_VEC cppVar_38629 = (cppVar_38627) ? B : 0;
	BIT_VEC cppVar_38630 = (cppVar_38622) ? ACC : cppVar_38629;
	BIT_VEC cppVar_38631 = (cppVar_38617) ? PSW : cppVar_38630;
	BIT_VEC cppVar_38632 = (cppVar_38612) ? IP : cppVar_38631;
	BIT_VEC cppVar_38633 = (cppVar_38607) ? P3 : cppVar_38632;
	BIT_VEC cppVar_38634 = (cppVar_38602) ? IE : cppVar_38633;
	BIT_VEC cppVar_38635 = (cppVar_38597) ? P2 : cppVar_38634;
	BIT_VEC cppVar_38636 = (cppVar_38592) ? SBUF : cppVar_38635;
	BIT_VEC cppVar_38637 = (cppVar_38587) ? SCON : cppVar_38636;
	BIT_VEC cppVar_38638 = (cppVar_38582) ? P1 : cppVar_38637;
	BIT_VEC cppVar_38639 = (cppVar_38577) ? TH1 : cppVar_38638;
	BIT_VEC cppVar_38640 = (cppVar_38572) ? TL1 : cppVar_38639;
	BIT_VEC cppVar_38641 = (cppVar_38567) ? TH0 : cppVar_38640;
	BIT_VEC cppVar_38642 = (cppVar_38562) ? TL0 : cppVar_38641;
	BIT_VEC cppVar_38643 = (cppVar_38557) ? TMOD : cppVar_38642;
	BIT_VEC cppVar_38644 = (cppVar_38552) ? TCON : cppVar_38643;
	BIT_VEC cppVar_38645 = (cppVar_38547) ? PCON : cppVar_38644;
	BIT_VEC cppVar_38646 = (cppVar_38542) ? DPH : cppVar_38645;
	BIT_VEC cppVar_38647 = (cppVar_38537) ? DPL : cppVar_38646;
	BIT_VEC cppVar_38648 = (cppVar_38532) ? SP : cppVar_38647;
	BIT_VEC cppVar_38649 = (cppVar_38527) ? P0 : cppVar_38648;
	BIT_VEC cppVar_38650 = (cppVar_38518) ? cppVar_38522 : cppVar_38649;
	BIT_VEC cppVar_38651 = (cppVar_38510) ? cppVar_38650 : P3;
	BIT_VEC cppVar_38652 = ROM.rd(PC);
	bool cppVar_38654 = (cppVar_38652 == 138);
	BIT_VEC cppVar_38656 = PC + 1;
	cppVar_38656 = (cppVar_38656 & cppMask_un_16_);
	BIT_VEC cppVar_38657 = ROM.rd(cppVar_38656);
	bool cppVar_38659 = (cppVar_38657 == 176);
	BIT_VEC cppVar_38661 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38663 = (cppVar_38661 << 3) | 2;
	cppVar_38663 = (cppVar_38663 & cppMask_un_5_);
	BIT_VEC cppVar_38664 = (0 << 5) | cppVar_38663;
	cppVar_38664 = (cppVar_38664 & cppMask_un_8_);
	BIT_VEC cppVar_38665 = (cppVar_38664 >> 7) & cppMask_un_1_;
	bool cppVar_38667 = (cppVar_38665 == 0);
	BIT_VEC cppVar_38668 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38669 = (cppVar_38668 << 3) | 2;
	cppVar_38669 = (cppVar_38669 & cppMask_un_5_);
	BIT_VEC cppVar_38670 = (0 << 5) | cppVar_38669;
	cppVar_38670 = (cppVar_38670 & cppMask_un_8_);
	BIT_VEC cppVar_38671 = IRAM.rd(cppVar_38670);
	BIT_VEC cppVar_38672 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38673 = (cppVar_38672 << 3) | 2;
	cppVar_38673 = (cppVar_38673 & cppMask_un_5_);
	BIT_VEC cppVar_38674 = (0 << 5) | cppVar_38673;
	cppVar_38674 = (cppVar_38674 & cppMask_un_8_);
	bool cppVar_38676 = (cppVar_38674 == 128);
	BIT_VEC cppVar_38677 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38678 = (cppVar_38677 << 3) | 2;
	cppVar_38678 = (cppVar_38678 & cppMask_un_5_);
	BIT_VEC cppVar_38679 = (0 << 5) | cppVar_38678;
	cppVar_38679 = (cppVar_38679 & cppMask_un_8_);
	bool cppVar_38681 = (cppVar_38679 == 129);
	BIT_VEC cppVar_38682 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38683 = (cppVar_38682 << 3) | 2;
	cppVar_38683 = (cppVar_38683 & cppMask_un_5_);
	BIT_VEC cppVar_38684 = (0 << 5) | cppVar_38683;
	cppVar_38684 = (cppVar_38684 & cppMask_un_8_);
	bool cppVar_38686 = (cppVar_38684 == 130);
	BIT_VEC cppVar_38687 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38688 = (cppVar_38687 << 3) | 2;
	cppVar_38688 = (cppVar_38688 & cppMask_un_5_);
	BIT_VEC cppVar_38689 = (0 << 5) | cppVar_38688;
	cppVar_38689 = (cppVar_38689 & cppMask_un_8_);
	bool cppVar_38691 = (cppVar_38689 == 131);
	BIT_VEC cppVar_38692 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38693 = (cppVar_38692 << 3) | 2;
	cppVar_38693 = (cppVar_38693 & cppMask_un_5_);
	BIT_VEC cppVar_38694 = (0 << 5) | cppVar_38693;
	cppVar_38694 = (cppVar_38694 & cppMask_un_8_);
	bool cppVar_38696 = (cppVar_38694 == 135);
	BIT_VEC cppVar_38697 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38698 = (cppVar_38697 << 3) | 2;
	cppVar_38698 = (cppVar_38698 & cppMask_un_5_);
	BIT_VEC cppVar_38699 = (0 << 5) | cppVar_38698;
	cppVar_38699 = (cppVar_38699 & cppMask_un_8_);
	bool cppVar_38701 = (cppVar_38699 == 136);
	BIT_VEC cppVar_38702 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38703 = (cppVar_38702 << 3) | 2;
	cppVar_38703 = (cppVar_38703 & cppMask_un_5_);
	BIT_VEC cppVar_38704 = (0 << 5) | cppVar_38703;
	cppVar_38704 = (cppVar_38704 & cppMask_un_8_);
	bool cppVar_38706 = (cppVar_38704 == 137);
	BIT_VEC cppVar_38707 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38708 = (cppVar_38707 << 3) | 2;
	cppVar_38708 = (cppVar_38708 & cppMask_un_5_);
	BIT_VEC cppVar_38709 = (0 << 5) | cppVar_38708;
	cppVar_38709 = (cppVar_38709 & cppMask_un_8_);
	bool cppVar_38711 = (cppVar_38709 == 138);
	BIT_VEC cppVar_38712 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38713 = (cppVar_38712 << 3) | 2;
	cppVar_38713 = (cppVar_38713 & cppMask_un_5_);
	BIT_VEC cppVar_38714 = (0 << 5) | cppVar_38713;
	cppVar_38714 = (cppVar_38714 & cppMask_un_8_);
	bool cppVar_38716 = (cppVar_38714 == 140);
	BIT_VEC cppVar_38717 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38718 = (cppVar_38717 << 3) | 2;
	cppVar_38718 = (cppVar_38718 & cppMask_un_5_);
	BIT_VEC cppVar_38719 = (0 << 5) | cppVar_38718;
	cppVar_38719 = (cppVar_38719 & cppMask_un_8_);
	bool cppVar_38721 = (cppVar_38719 == 139);
	BIT_VEC cppVar_38722 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38723 = (cppVar_38722 << 3) | 2;
	cppVar_38723 = (cppVar_38723 & cppMask_un_5_);
	BIT_VEC cppVar_38724 = (0 << 5) | cppVar_38723;
	cppVar_38724 = (cppVar_38724 & cppMask_un_8_);
	bool cppVar_38726 = (cppVar_38724 == 141);
	BIT_VEC cppVar_38727 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38728 = (cppVar_38727 << 3) | 2;
	cppVar_38728 = (cppVar_38728 & cppMask_un_5_);
	BIT_VEC cppVar_38729 = (0 << 5) | cppVar_38728;
	cppVar_38729 = (cppVar_38729 & cppMask_un_8_);
	bool cppVar_38731 = (cppVar_38729 == 144);
	BIT_VEC cppVar_38732 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38733 = (cppVar_38732 << 3) | 2;
	cppVar_38733 = (cppVar_38733 & cppMask_un_5_);
	BIT_VEC cppVar_38734 = (0 << 5) | cppVar_38733;
	cppVar_38734 = (cppVar_38734 & cppMask_un_8_);
	bool cppVar_38736 = (cppVar_38734 == 152);
	BIT_VEC cppVar_38737 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38738 = (cppVar_38737 << 3) | 2;
	cppVar_38738 = (cppVar_38738 & cppMask_un_5_);
	BIT_VEC cppVar_38739 = (0 << 5) | cppVar_38738;
	cppVar_38739 = (cppVar_38739 & cppMask_un_8_);
	bool cppVar_38741 = (cppVar_38739 == 153);
	BIT_VEC cppVar_38742 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38743 = (cppVar_38742 << 3) | 2;
	cppVar_38743 = (cppVar_38743 & cppMask_un_5_);
	BIT_VEC cppVar_38744 = (0 << 5) | cppVar_38743;
	cppVar_38744 = (cppVar_38744 & cppMask_un_8_);
	bool cppVar_38746 = (cppVar_38744 == 160);
	BIT_VEC cppVar_38747 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38748 = (cppVar_38747 << 3) | 2;
	cppVar_38748 = (cppVar_38748 & cppMask_un_5_);
	BIT_VEC cppVar_38749 = (0 << 5) | cppVar_38748;
	cppVar_38749 = (cppVar_38749 & cppMask_un_8_);
	bool cppVar_38751 = (cppVar_38749 == 168);
	BIT_VEC cppVar_38752 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38753 = (cppVar_38752 << 3) | 2;
	cppVar_38753 = (cppVar_38753 & cppMask_un_5_);
	BIT_VEC cppVar_38754 = (0 << 5) | cppVar_38753;
	cppVar_38754 = (cppVar_38754 & cppMask_un_8_);
	bool cppVar_38756 = (cppVar_38754 == 176);
	BIT_VEC cppVar_38757 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38758 = (cppVar_38757 << 3) | 2;
	cppVar_38758 = (cppVar_38758 & cppMask_un_5_);
	BIT_VEC cppVar_38759 = (0 << 5) | cppVar_38758;
	cppVar_38759 = (cppVar_38759 & cppMask_un_8_);
	bool cppVar_38761 = (cppVar_38759 == 184);
	BIT_VEC cppVar_38762 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38763 = (cppVar_38762 << 3) | 2;
	cppVar_38763 = (cppVar_38763 & cppMask_un_5_);
	BIT_VEC cppVar_38764 = (0 << 5) | cppVar_38763;
	cppVar_38764 = (cppVar_38764 & cppMask_un_8_);
	bool cppVar_38766 = (cppVar_38764 == 208);
	BIT_VEC cppVar_38767 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38768 = (cppVar_38767 << 3) | 2;
	cppVar_38768 = (cppVar_38768 & cppMask_un_5_);
	BIT_VEC cppVar_38769 = (0 << 5) | cppVar_38768;
	cppVar_38769 = (cppVar_38769 & cppMask_un_8_);
	bool cppVar_38771 = (cppVar_38769 == 224);
	BIT_VEC cppVar_38772 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38773 = (cppVar_38772 << 3) | 2;
	cppVar_38773 = (cppVar_38773 & cppMask_un_5_);
	BIT_VEC cppVar_38774 = (0 << 5) | cppVar_38773;
	cppVar_38774 = (cppVar_38774 & cppMask_un_8_);
	bool cppVar_38776 = (cppVar_38774 == 240);
	BIT_VEC cppVar_38778 = (cppVar_38776) ? B : 0;
	BIT_VEC cppVar_38779 = (cppVar_38771) ? ACC : cppVar_38778;
	BIT_VEC cppVar_38780 = (cppVar_38766) ? PSW : cppVar_38779;
	BIT_VEC cppVar_38781 = (cppVar_38761) ? IP : cppVar_38780;
	BIT_VEC cppVar_38782 = (cppVar_38756) ? P3 : cppVar_38781;
	BIT_VEC cppVar_38783 = (cppVar_38751) ? IE : cppVar_38782;
	BIT_VEC cppVar_38784 = (cppVar_38746) ? P2 : cppVar_38783;
	BIT_VEC cppVar_38785 = (cppVar_38741) ? SBUF : cppVar_38784;
	BIT_VEC cppVar_38786 = (cppVar_38736) ? SCON : cppVar_38785;
	BIT_VEC cppVar_38787 = (cppVar_38731) ? P1 : cppVar_38786;
	BIT_VEC cppVar_38788 = (cppVar_38726) ? TH1 : cppVar_38787;
	BIT_VEC cppVar_38789 = (cppVar_38721) ? TL1 : cppVar_38788;
	BIT_VEC cppVar_38790 = (cppVar_38716) ? TH0 : cppVar_38789;
	BIT_VEC cppVar_38791 = (cppVar_38711) ? TL0 : cppVar_38790;
	BIT_VEC cppVar_38792 = (cppVar_38706) ? TMOD : cppVar_38791;
	BIT_VEC cppVar_38793 = (cppVar_38701) ? TCON : cppVar_38792;
	BIT_VEC cppVar_38794 = (cppVar_38696) ? PCON : cppVar_38793;
	BIT_VEC cppVar_38795 = (cppVar_38691) ? DPH : cppVar_38794;
	BIT_VEC cppVar_38796 = (cppVar_38686) ? DPL : cppVar_38795;
	BIT_VEC cppVar_38797 = (cppVar_38681) ? SP : cppVar_38796;
	BIT_VEC cppVar_38798 = (cppVar_38676) ? P0 : cppVar_38797;
	BIT_VEC cppVar_38799 = (cppVar_38667) ? cppVar_38671 : cppVar_38798;
	BIT_VEC cppVar_38800 = (cppVar_38659) ? cppVar_38799 : P3;
	BIT_VEC cppVar_38801 = ROM.rd(PC);
	bool cppVar_38803 = (cppVar_38801 == 137);
	BIT_VEC cppVar_38805 = PC + 1;
	cppVar_38805 = (cppVar_38805 & cppMask_un_16_);
	BIT_VEC cppVar_38806 = ROM.rd(cppVar_38805);
	bool cppVar_38808 = (cppVar_38806 == 176);
	BIT_VEC cppVar_38810 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38812 = (cppVar_38810 << 3) | 1;
	cppVar_38812 = (cppVar_38812 & cppMask_un_5_);
	BIT_VEC cppVar_38813 = (0 << 5) | cppVar_38812;
	cppVar_38813 = (cppVar_38813 & cppMask_un_8_);
	BIT_VEC cppVar_38814 = (cppVar_38813 >> 7) & cppMask_un_1_;
	bool cppVar_38816 = (cppVar_38814 == 0);
	BIT_VEC cppVar_38817 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38818 = (cppVar_38817 << 3) | 1;
	cppVar_38818 = (cppVar_38818 & cppMask_un_5_);
	BIT_VEC cppVar_38819 = (0 << 5) | cppVar_38818;
	cppVar_38819 = (cppVar_38819 & cppMask_un_8_);
	BIT_VEC cppVar_38820 = IRAM.rd(cppVar_38819);
	BIT_VEC cppVar_38821 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38822 = (cppVar_38821 << 3) | 1;
	cppVar_38822 = (cppVar_38822 & cppMask_un_5_);
	BIT_VEC cppVar_38823 = (0 << 5) | cppVar_38822;
	cppVar_38823 = (cppVar_38823 & cppMask_un_8_);
	bool cppVar_38825 = (cppVar_38823 == 128);
	BIT_VEC cppVar_38826 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38827 = (cppVar_38826 << 3) | 1;
	cppVar_38827 = (cppVar_38827 & cppMask_un_5_);
	BIT_VEC cppVar_38828 = (0 << 5) | cppVar_38827;
	cppVar_38828 = (cppVar_38828 & cppMask_un_8_);
	bool cppVar_38830 = (cppVar_38828 == 129);
	BIT_VEC cppVar_38831 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38832 = (cppVar_38831 << 3) | 1;
	cppVar_38832 = (cppVar_38832 & cppMask_un_5_);
	BIT_VEC cppVar_38833 = (0 << 5) | cppVar_38832;
	cppVar_38833 = (cppVar_38833 & cppMask_un_8_);
	bool cppVar_38835 = (cppVar_38833 == 130);
	BIT_VEC cppVar_38836 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38837 = (cppVar_38836 << 3) | 1;
	cppVar_38837 = (cppVar_38837 & cppMask_un_5_);
	BIT_VEC cppVar_38838 = (0 << 5) | cppVar_38837;
	cppVar_38838 = (cppVar_38838 & cppMask_un_8_);
	bool cppVar_38840 = (cppVar_38838 == 131);
	BIT_VEC cppVar_38841 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38842 = (cppVar_38841 << 3) | 1;
	cppVar_38842 = (cppVar_38842 & cppMask_un_5_);
	BIT_VEC cppVar_38843 = (0 << 5) | cppVar_38842;
	cppVar_38843 = (cppVar_38843 & cppMask_un_8_);
	bool cppVar_38845 = (cppVar_38843 == 135);
	BIT_VEC cppVar_38846 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38847 = (cppVar_38846 << 3) | 1;
	cppVar_38847 = (cppVar_38847 & cppMask_un_5_);
	BIT_VEC cppVar_38848 = (0 << 5) | cppVar_38847;
	cppVar_38848 = (cppVar_38848 & cppMask_un_8_);
	bool cppVar_38850 = (cppVar_38848 == 136);
	BIT_VEC cppVar_38851 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38852 = (cppVar_38851 << 3) | 1;
	cppVar_38852 = (cppVar_38852 & cppMask_un_5_);
	BIT_VEC cppVar_38853 = (0 << 5) | cppVar_38852;
	cppVar_38853 = (cppVar_38853 & cppMask_un_8_);
	bool cppVar_38855 = (cppVar_38853 == 137);
	BIT_VEC cppVar_38856 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38857 = (cppVar_38856 << 3) | 1;
	cppVar_38857 = (cppVar_38857 & cppMask_un_5_);
	BIT_VEC cppVar_38858 = (0 << 5) | cppVar_38857;
	cppVar_38858 = (cppVar_38858 & cppMask_un_8_);
	bool cppVar_38860 = (cppVar_38858 == 138);
	BIT_VEC cppVar_38861 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38862 = (cppVar_38861 << 3) | 1;
	cppVar_38862 = (cppVar_38862 & cppMask_un_5_);
	BIT_VEC cppVar_38863 = (0 << 5) | cppVar_38862;
	cppVar_38863 = (cppVar_38863 & cppMask_un_8_);
	bool cppVar_38865 = (cppVar_38863 == 140);
	BIT_VEC cppVar_38866 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38867 = (cppVar_38866 << 3) | 1;
	cppVar_38867 = (cppVar_38867 & cppMask_un_5_);
	BIT_VEC cppVar_38868 = (0 << 5) | cppVar_38867;
	cppVar_38868 = (cppVar_38868 & cppMask_un_8_);
	bool cppVar_38870 = (cppVar_38868 == 139);
	BIT_VEC cppVar_38871 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38872 = (cppVar_38871 << 3) | 1;
	cppVar_38872 = (cppVar_38872 & cppMask_un_5_);
	BIT_VEC cppVar_38873 = (0 << 5) | cppVar_38872;
	cppVar_38873 = (cppVar_38873 & cppMask_un_8_);
	bool cppVar_38875 = (cppVar_38873 == 141);
	BIT_VEC cppVar_38876 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38877 = (cppVar_38876 << 3) | 1;
	cppVar_38877 = (cppVar_38877 & cppMask_un_5_);
	BIT_VEC cppVar_38878 = (0 << 5) | cppVar_38877;
	cppVar_38878 = (cppVar_38878 & cppMask_un_8_);
	bool cppVar_38880 = (cppVar_38878 == 144);
	BIT_VEC cppVar_38881 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38882 = (cppVar_38881 << 3) | 1;
	cppVar_38882 = (cppVar_38882 & cppMask_un_5_);
	BIT_VEC cppVar_38883 = (0 << 5) | cppVar_38882;
	cppVar_38883 = (cppVar_38883 & cppMask_un_8_);
	bool cppVar_38885 = (cppVar_38883 == 152);
	BIT_VEC cppVar_38886 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38887 = (cppVar_38886 << 3) | 1;
	cppVar_38887 = (cppVar_38887 & cppMask_un_5_);
	BIT_VEC cppVar_38888 = (0 << 5) | cppVar_38887;
	cppVar_38888 = (cppVar_38888 & cppMask_un_8_);
	bool cppVar_38890 = (cppVar_38888 == 153);
	BIT_VEC cppVar_38891 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38892 = (cppVar_38891 << 3) | 1;
	cppVar_38892 = (cppVar_38892 & cppMask_un_5_);
	BIT_VEC cppVar_38893 = (0 << 5) | cppVar_38892;
	cppVar_38893 = (cppVar_38893 & cppMask_un_8_);
	bool cppVar_38895 = (cppVar_38893 == 160);
	BIT_VEC cppVar_38896 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38897 = (cppVar_38896 << 3) | 1;
	cppVar_38897 = (cppVar_38897 & cppMask_un_5_);
	BIT_VEC cppVar_38898 = (0 << 5) | cppVar_38897;
	cppVar_38898 = (cppVar_38898 & cppMask_un_8_);
	bool cppVar_38900 = (cppVar_38898 == 168);
	BIT_VEC cppVar_38901 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38902 = (cppVar_38901 << 3) | 1;
	cppVar_38902 = (cppVar_38902 & cppMask_un_5_);
	BIT_VEC cppVar_38903 = (0 << 5) | cppVar_38902;
	cppVar_38903 = (cppVar_38903 & cppMask_un_8_);
	bool cppVar_38905 = (cppVar_38903 == 176);
	BIT_VEC cppVar_38906 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38907 = (cppVar_38906 << 3) | 1;
	cppVar_38907 = (cppVar_38907 & cppMask_un_5_);
	BIT_VEC cppVar_38908 = (0 << 5) | cppVar_38907;
	cppVar_38908 = (cppVar_38908 & cppMask_un_8_);
	bool cppVar_38910 = (cppVar_38908 == 184);
	BIT_VEC cppVar_38911 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38912 = (cppVar_38911 << 3) | 1;
	cppVar_38912 = (cppVar_38912 & cppMask_un_5_);
	BIT_VEC cppVar_38913 = (0 << 5) | cppVar_38912;
	cppVar_38913 = (cppVar_38913 & cppMask_un_8_);
	bool cppVar_38915 = (cppVar_38913 == 208);
	BIT_VEC cppVar_38916 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38917 = (cppVar_38916 << 3) | 1;
	cppVar_38917 = (cppVar_38917 & cppMask_un_5_);
	BIT_VEC cppVar_38918 = (0 << 5) | cppVar_38917;
	cppVar_38918 = (cppVar_38918 & cppMask_un_8_);
	bool cppVar_38920 = (cppVar_38918 == 224);
	BIT_VEC cppVar_38921 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38922 = (cppVar_38921 << 3) | 1;
	cppVar_38922 = (cppVar_38922 & cppMask_un_5_);
	BIT_VEC cppVar_38923 = (0 << 5) | cppVar_38922;
	cppVar_38923 = (cppVar_38923 & cppMask_un_8_);
	bool cppVar_38925 = (cppVar_38923 == 240);
	BIT_VEC cppVar_38927 = (cppVar_38925) ? B : 0;
	BIT_VEC cppVar_38928 = (cppVar_38920) ? ACC : cppVar_38927;
	BIT_VEC cppVar_38929 = (cppVar_38915) ? PSW : cppVar_38928;
	BIT_VEC cppVar_38930 = (cppVar_38910) ? IP : cppVar_38929;
	BIT_VEC cppVar_38931 = (cppVar_38905) ? P3 : cppVar_38930;
	BIT_VEC cppVar_38932 = (cppVar_38900) ? IE : cppVar_38931;
	BIT_VEC cppVar_38933 = (cppVar_38895) ? P2 : cppVar_38932;
	BIT_VEC cppVar_38934 = (cppVar_38890) ? SBUF : cppVar_38933;
	BIT_VEC cppVar_38935 = (cppVar_38885) ? SCON : cppVar_38934;
	BIT_VEC cppVar_38936 = (cppVar_38880) ? P1 : cppVar_38935;
	BIT_VEC cppVar_38937 = (cppVar_38875) ? TH1 : cppVar_38936;
	BIT_VEC cppVar_38938 = (cppVar_38870) ? TL1 : cppVar_38937;
	BIT_VEC cppVar_38939 = (cppVar_38865) ? TH0 : cppVar_38938;
	BIT_VEC cppVar_38940 = (cppVar_38860) ? TL0 : cppVar_38939;
	BIT_VEC cppVar_38941 = (cppVar_38855) ? TMOD : cppVar_38940;
	BIT_VEC cppVar_38942 = (cppVar_38850) ? TCON : cppVar_38941;
	BIT_VEC cppVar_38943 = (cppVar_38845) ? PCON : cppVar_38942;
	BIT_VEC cppVar_38944 = (cppVar_38840) ? DPH : cppVar_38943;
	BIT_VEC cppVar_38945 = (cppVar_38835) ? DPL : cppVar_38944;
	BIT_VEC cppVar_38946 = (cppVar_38830) ? SP : cppVar_38945;
	BIT_VEC cppVar_38947 = (cppVar_38825) ? P0 : cppVar_38946;
	BIT_VEC cppVar_38948 = (cppVar_38816) ? cppVar_38820 : cppVar_38947;
	BIT_VEC cppVar_38949 = (cppVar_38808) ? cppVar_38948 : P3;
	BIT_VEC cppVar_38950 = ROM.rd(PC);
	bool cppVar_38952 = (cppVar_38950 == 136);
	BIT_VEC cppVar_38954 = PC + 1;
	cppVar_38954 = (cppVar_38954 & cppMask_un_16_);
	BIT_VEC cppVar_38955 = ROM.rd(cppVar_38954);
	bool cppVar_38957 = (cppVar_38955 == 176);
	BIT_VEC cppVar_38959 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38961 = (cppVar_38959 << 3) | 0;
	cppVar_38961 = (cppVar_38961 & cppMask_un_5_);
	BIT_VEC cppVar_38962 = (0 << 5) | cppVar_38961;
	cppVar_38962 = (cppVar_38962 & cppMask_un_8_);
	BIT_VEC cppVar_38963 = (cppVar_38962 >> 7) & cppMask_un_1_;
	bool cppVar_38965 = (cppVar_38963 == 0);
	BIT_VEC cppVar_38966 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38967 = (cppVar_38966 << 3) | 0;
	cppVar_38967 = (cppVar_38967 & cppMask_un_5_);
	BIT_VEC cppVar_38968 = (0 << 5) | cppVar_38967;
	cppVar_38968 = (cppVar_38968 & cppMask_un_8_);
	BIT_VEC cppVar_38969 = IRAM.rd(cppVar_38968);
	BIT_VEC cppVar_38970 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38971 = (cppVar_38970 << 3) | 0;
	cppVar_38971 = (cppVar_38971 & cppMask_un_5_);
	BIT_VEC cppVar_38972 = (0 << 5) | cppVar_38971;
	cppVar_38972 = (cppVar_38972 & cppMask_un_8_);
	bool cppVar_38974 = (cppVar_38972 == 128);
	BIT_VEC cppVar_38975 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38976 = (cppVar_38975 << 3) | 0;
	cppVar_38976 = (cppVar_38976 & cppMask_un_5_);
	BIT_VEC cppVar_38977 = (0 << 5) | cppVar_38976;
	cppVar_38977 = (cppVar_38977 & cppMask_un_8_);
	bool cppVar_38979 = (cppVar_38977 == 129);
	BIT_VEC cppVar_38980 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38981 = (cppVar_38980 << 3) | 0;
	cppVar_38981 = (cppVar_38981 & cppMask_un_5_);
	BIT_VEC cppVar_38982 = (0 << 5) | cppVar_38981;
	cppVar_38982 = (cppVar_38982 & cppMask_un_8_);
	bool cppVar_38984 = (cppVar_38982 == 130);
	BIT_VEC cppVar_38985 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38986 = (cppVar_38985 << 3) | 0;
	cppVar_38986 = (cppVar_38986 & cppMask_un_5_);
	BIT_VEC cppVar_38987 = (0 << 5) | cppVar_38986;
	cppVar_38987 = (cppVar_38987 & cppMask_un_8_);
	bool cppVar_38989 = (cppVar_38987 == 131);
	BIT_VEC cppVar_38990 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38991 = (cppVar_38990 << 3) | 0;
	cppVar_38991 = (cppVar_38991 & cppMask_un_5_);
	BIT_VEC cppVar_38992 = (0 << 5) | cppVar_38991;
	cppVar_38992 = (cppVar_38992 & cppMask_un_8_);
	bool cppVar_38994 = (cppVar_38992 == 135);
	BIT_VEC cppVar_38995 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_38996 = (cppVar_38995 << 3) | 0;
	cppVar_38996 = (cppVar_38996 & cppMask_un_5_);
	BIT_VEC cppVar_38997 = (0 << 5) | cppVar_38996;
	cppVar_38997 = (cppVar_38997 & cppMask_un_8_);
	bool cppVar_38999 = (cppVar_38997 == 136);
	BIT_VEC cppVar_39000 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39001 = (cppVar_39000 << 3) | 0;
	cppVar_39001 = (cppVar_39001 & cppMask_un_5_);
	BIT_VEC cppVar_39002 = (0 << 5) | cppVar_39001;
	cppVar_39002 = (cppVar_39002 & cppMask_un_8_);
	bool cppVar_39004 = (cppVar_39002 == 137);
	BIT_VEC cppVar_39005 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39006 = (cppVar_39005 << 3) | 0;
	cppVar_39006 = (cppVar_39006 & cppMask_un_5_);
	BIT_VEC cppVar_39007 = (0 << 5) | cppVar_39006;
	cppVar_39007 = (cppVar_39007 & cppMask_un_8_);
	bool cppVar_39009 = (cppVar_39007 == 138);
	BIT_VEC cppVar_39010 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39011 = (cppVar_39010 << 3) | 0;
	cppVar_39011 = (cppVar_39011 & cppMask_un_5_);
	BIT_VEC cppVar_39012 = (0 << 5) | cppVar_39011;
	cppVar_39012 = (cppVar_39012 & cppMask_un_8_);
	bool cppVar_39014 = (cppVar_39012 == 140);
	BIT_VEC cppVar_39015 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39016 = (cppVar_39015 << 3) | 0;
	cppVar_39016 = (cppVar_39016 & cppMask_un_5_);
	BIT_VEC cppVar_39017 = (0 << 5) | cppVar_39016;
	cppVar_39017 = (cppVar_39017 & cppMask_un_8_);
	bool cppVar_39019 = (cppVar_39017 == 139);
	BIT_VEC cppVar_39020 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39021 = (cppVar_39020 << 3) | 0;
	cppVar_39021 = (cppVar_39021 & cppMask_un_5_);
	BIT_VEC cppVar_39022 = (0 << 5) | cppVar_39021;
	cppVar_39022 = (cppVar_39022 & cppMask_un_8_);
	bool cppVar_39024 = (cppVar_39022 == 141);
	BIT_VEC cppVar_39025 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39026 = (cppVar_39025 << 3) | 0;
	cppVar_39026 = (cppVar_39026 & cppMask_un_5_);
	BIT_VEC cppVar_39027 = (0 << 5) | cppVar_39026;
	cppVar_39027 = (cppVar_39027 & cppMask_un_8_);
	bool cppVar_39029 = (cppVar_39027 == 144);
	BIT_VEC cppVar_39030 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39031 = (cppVar_39030 << 3) | 0;
	cppVar_39031 = (cppVar_39031 & cppMask_un_5_);
	BIT_VEC cppVar_39032 = (0 << 5) | cppVar_39031;
	cppVar_39032 = (cppVar_39032 & cppMask_un_8_);
	bool cppVar_39034 = (cppVar_39032 == 152);
	BIT_VEC cppVar_39035 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39036 = (cppVar_39035 << 3) | 0;
	cppVar_39036 = (cppVar_39036 & cppMask_un_5_);
	BIT_VEC cppVar_39037 = (0 << 5) | cppVar_39036;
	cppVar_39037 = (cppVar_39037 & cppMask_un_8_);
	bool cppVar_39039 = (cppVar_39037 == 153);
	BIT_VEC cppVar_39040 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39041 = (cppVar_39040 << 3) | 0;
	cppVar_39041 = (cppVar_39041 & cppMask_un_5_);
	BIT_VEC cppVar_39042 = (0 << 5) | cppVar_39041;
	cppVar_39042 = (cppVar_39042 & cppMask_un_8_);
	bool cppVar_39044 = (cppVar_39042 == 160);
	BIT_VEC cppVar_39045 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39046 = (cppVar_39045 << 3) | 0;
	cppVar_39046 = (cppVar_39046 & cppMask_un_5_);
	BIT_VEC cppVar_39047 = (0 << 5) | cppVar_39046;
	cppVar_39047 = (cppVar_39047 & cppMask_un_8_);
	bool cppVar_39049 = (cppVar_39047 == 168);
	BIT_VEC cppVar_39050 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39051 = (cppVar_39050 << 3) | 0;
	cppVar_39051 = (cppVar_39051 & cppMask_un_5_);
	BIT_VEC cppVar_39052 = (0 << 5) | cppVar_39051;
	cppVar_39052 = (cppVar_39052 & cppMask_un_8_);
	bool cppVar_39054 = (cppVar_39052 == 176);
	BIT_VEC cppVar_39055 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39056 = (cppVar_39055 << 3) | 0;
	cppVar_39056 = (cppVar_39056 & cppMask_un_5_);
	BIT_VEC cppVar_39057 = (0 << 5) | cppVar_39056;
	cppVar_39057 = (cppVar_39057 & cppMask_un_8_);
	bool cppVar_39059 = (cppVar_39057 == 184);
	BIT_VEC cppVar_39060 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39061 = (cppVar_39060 << 3) | 0;
	cppVar_39061 = (cppVar_39061 & cppMask_un_5_);
	BIT_VEC cppVar_39062 = (0 << 5) | cppVar_39061;
	cppVar_39062 = (cppVar_39062 & cppMask_un_8_);
	bool cppVar_39064 = (cppVar_39062 == 208);
	BIT_VEC cppVar_39065 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39066 = (cppVar_39065 << 3) | 0;
	cppVar_39066 = (cppVar_39066 & cppMask_un_5_);
	BIT_VEC cppVar_39067 = (0 << 5) | cppVar_39066;
	cppVar_39067 = (cppVar_39067 & cppMask_un_8_);
	bool cppVar_39069 = (cppVar_39067 == 224);
	BIT_VEC cppVar_39070 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39071 = (cppVar_39070 << 3) | 0;
	cppVar_39071 = (cppVar_39071 & cppMask_un_5_);
	BIT_VEC cppVar_39072 = (0 << 5) | cppVar_39071;
	cppVar_39072 = (cppVar_39072 & cppMask_un_8_);
	bool cppVar_39074 = (cppVar_39072 == 240);
	BIT_VEC cppVar_39076 = (cppVar_39074) ? B : 0;
	BIT_VEC cppVar_39077 = (cppVar_39069) ? ACC : cppVar_39076;
	BIT_VEC cppVar_39078 = (cppVar_39064) ? PSW : cppVar_39077;
	BIT_VEC cppVar_39079 = (cppVar_39059) ? IP : cppVar_39078;
	BIT_VEC cppVar_39080 = (cppVar_39054) ? P3 : cppVar_39079;
	BIT_VEC cppVar_39081 = (cppVar_39049) ? IE : cppVar_39080;
	BIT_VEC cppVar_39082 = (cppVar_39044) ? P2 : cppVar_39081;
	BIT_VEC cppVar_39083 = (cppVar_39039) ? SBUF : cppVar_39082;
	BIT_VEC cppVar_39084 = (cppVar_39034) ? SCON : cppVar_39083;
	BIT_VEC cppVar_39085 = (cppVar_39029) ? P1 : cppVar_39084;
	BIT_VEC cppVar_39086 = (cppVar_39024) ? TH1 : cppVar_39085;
	BIT_VEC cppVar_39087 = (cppVar_39019) ? TL1 : cppVar_39086;
	BIT_VEC cppVar_39088 = (cppVar_39014) ? TH0 : cppVar_39087;
	BIT_VEC cppVar_39089 = (cppVar_39009) ? TL0 : cppVar_39088;
	BIT_VEC cppVar_39090 = (cppVar_39004) ? TMOD : cppVar_39089;
	BIT_VEC cppVar_39091 = (cppVar_38999) ? TCON : cppVar_39090;
	BIT_VEC cppVar_39092 = (cppVar_38994) ? PCON : cppVar_39091;
	BIT_VEC cppVar_39093 = (cppVar_38989) ? DPH : cppVar_39092;
	BIT_VEC cppVar_39094 = (cppVar_38984) ? DPL : cppVar_39093;
	BIT_VEC cppVar_39095 = (cppVar_38979) ? SP : cppVar_39094;
	BIT_VEC cppVar_39096 = (cppVar_38974) ? P0 : cppVar_39095;
	BIT_VEC cppVar_39097 = (cppVar_38965) ? cppVar_38969 : cppVar_39096;
	BIT_VEC cppVar_39098 = (cppVar_38957) ? cppVar_39097 : P3;
	BIT_VEC cppVar_39099 = ROM.rd(PC);
	bool cppVar_39101 = (cppVar_39099 == 135);
	BIT_VEC cppVar_39103 = PC + 1;
	cppVar_39103 = (cppVar_39103 & cppMask_un_16_);
	BIT_VEC cppVar_39104 = ROM.rd(cppVar_39103);
	bool cppVar_39106 = (cppVar_39104 == 176);
	BIT_VEC cppVar_39108 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39110 = (cppVar_39108 << 3) | 1;
	cppVar_39110 = (cppVar_39110 & cppMask_un_5_);
	BIT_VEC cppVar_39111 = (0 << 5) | cppVar_39110;
	cppVar_39111 = (cppVar_39111 & cppMask_un_8_);
	BIT_VEC cppVar_39112 = IRAM.rd(cppVar_39111);
	BIT_VEC cppVar_39113 = IRAM.rd(cppVar_39112);
	BIT_VEC cppVar_39114 = (cppVar_39106) ? cppVar_39113 : P3;
	BIT_VEC cppVar_39115 = ROM.rd(PC);
	bool cppVar_39117 = (cppVar_39115 == 134);
	BIT_VEC cppVar_39119 = PC + 1;
	cppVar_39119 = (cppVar_39119 & cppMask_un_16_);
	BIT_VEC cppVar_39120 = ROM.rd(cppVar_39119);
	bool cppVar_39122 = (cppVar_39120 == 176);
	BIT_VEC cppVar_39124 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_39126 = (cppVar_39124 << 3) | 0;
	cppVar_39126 = (cppVar_39126 & cppMask_un_5_);
	BIT_VEC cppVar_39127 = (0 << 5) | cppVar_39126;
	cppVar_39127 = (cppVar_39127 & cppMask_un_8_);
	BIT_VEC cppVar_39128 = IRAM.rd(cppVar_39127);
	BIT_VEC cppVar_39129 = IRAM.rd(cppVar_39128);
	BIT_VEC cppVar_39130 = (cppVar_39122) ? cppVar_39129 : P3;
	BIT_VEC cppVar_39131 = ROM.rd(PC);
	bool cppVar_39133 = (cppVar_39131 == 133);
	BIT_VEC cppVar_39135 = PC + 2;
	cppVar_39135 = (cppVar_39135 & cppMask_un_16_);
	BIT_VEC cppVar_39136 = ROM.rd(cppVar_39135);
	bool cppVar_39138 = (cppVar_39136 == 176);
	BIT_VEC cppVar_39140 = PC + 1;
	cppVar_39140 = (cppVar_39140 & cppMask_un_16_);
	BIT_VEC cppVar_39141 = ROM.rd(cppVar_39140);
	BIT_VEC cppVar_39142 = (cppVar_39141 >> 7) & cppMask_un_1_;
	bool cppVar_39144 = (cppVar_39142 == 0);
	BIT_VEC cppVar_39145 = PC + 1;
	cppVar_39145 = (cppVar_39145 & cppMask_un_16_);
	BIT_VEC cppVar_39146 = ROM.rd(cppVar_39145);
	BIT_VEC cppVar_39147 = IRAM.rd(cppVar_39146);
	BIT_VEC cppVar_39148 = PC + 1;
	cppVar_39148 = (cppVar_39148 & cppMask_un_16_);
	BIT_VEC cppVar_39149 = ROM.rd(cppVar_39148);
	bool cppVar_39151 = (cppVar_39149 == 128);
	BIT_VEC cppVar_39152 = PC + 1;
	cppVar_39152 = (cppVar_39152 & cppMask_un_16_);
	BIT_VEC cppVar_39153 = ROM.rd(cppVar_39152);
	bool cppVar_39155 = (cppVar_39153 == 129);
	BIT_VEC cppVar_39156 = PC + 1;
	cppVar_39156 = (cppVar_39156 & cppMask_un_16_);
	BIT_VEC cppVar_39157 = ROM.rd(cppVar_39156);
	bool cppVar_39159 = (cppVar_39157 == 130);
	BIT_VEC cppVar_39160 = PC + 1;
	cppVar_39160 = (cppVar_39160 & cppMask_un_16_);
	BIT_VEC cppVar_39161 = ROM.rd(cppVar_39160);
	bool cppVar_39163 = (cppVar_39161 == 131);
	BIT_VEC cppVar_39164 = PC + 1;
	cppVar_39164 = (cppVar_39164 & cppMask_un_16_);
	BIT_VEC cppVar_39165 = ROM.rd(cppVar_39164);
	bool cppVar_39167 = (cppVar_39165 == 135);
	BIT_VEC cppVar_39168 = PC + 1;
	cppVar_39168 = (cppVar_39168 & cppMask_un_16_);
	BIT_VEC cppVar_39169 = ROM.rd(cppVar_39168);
	bool cppVar_39171 = (cppVar_39169 == 136);
	BIT_VEC cppVar_39172 = PC + 1;
	cppVar_39172 = (cppVar_39172 & cppMask_un_16_);
	BIT_VEC cppVar_39173 = ROM.rd(cppVar_39172);
	bool cppVar_39175 = (cppVar_39173 == 137);
	BIT_VEC cppVar_39176 = PC + 1;
	cppVar_39176 = (cppVar_39176 & cppMask_un_16_);
	BIT_VEC cppVar_39177 = ROM.rd(cppVar_39176);
	bool cppVar_39179 = (cppVar_39177 == 138);
	BIT_VEC cppVar_39180 = PC + 1;
	cppVar_39180 = (cppVar_39180 & cppMask_un_16_);
	BIT_VEC cppVar_39181 = ROM.rd(cppVar_39180);
	bool cppVar_39183 = (cppVar_39181 == 140);
	BIT_VEC cppVar_39184 = PC + 1;
	cppVar_39184 = (cppVar_39184 & cppMask_un_16_);
	BIT_VEC cppVar_39185 = ROM.rd(cppVar_39184);
	bool cppVar_39187 = (cppVar_39185 == 139);
	BIT_VEC cppVar_39188 = PC + 1;
	cppVar_39188 = (cppVar_39188 & cppMask_un_16_);
	BIT_VEC cppVar_39189 = ROM.rd(cppVar_39188);
	bool cppVar_39191 = (cppVar_39189 == 141);
	BIT_VEC cppVar_39192 = PC + 1;
	cppVar_39192 = (cppVar_39192 & cppMask_un_16_);
	BIT_VEC cppVar_39193 = ROM.rd(cppVar_39192);
	bool cppVar_39195 = (cppVar_39193 == 144);
	BIT_VEC cppVar_39196 = PC + 1;
	cppVar_39196 = (cppVar_39196 & cppMask_un_16_);
	BIT_VEC cppVar_39197 = ROM.rd(cppVar_39196);
	bool cppVar_39199 = (cppVar_39197 == 152);
	BIT_VEC cppVar_39200 = PC + 1;
	cppVar_39200 = (cppVar_39200 & cppMask_un_16_);
	BIT_VEC cppVar_39201 = ROM.rd(cppVar_39200);
	bool cppVar_39203 = (cppVar_39201 == 153);
	BIT_VEC cppVar_39204 = PC + 1;
	cppVar_39204 = (cppVar_39204 & cppMask_un_16_);
	BIT_VEC cppVar_39205 = ROM.rd(cppVar_39204);
	bool cppVar_39207 = (cppVar_39205 == 160);
	BIT_VEC cppVar_39208 = PC + 1;
	cppVar_39208 = (cppVar_39208 & cppMask_un_16_);
	BIT_VEC cppVar_39209 = ROM.rd(cppVar_39208);
	bool cppVar_39211 = (cppVar_39209 == 168);
	BIT_VEC cppVar_39212 = PC + 1;
	cppVar_39212 = (cppVar_39212 & cppMask_un_16_);
	BIT_VEC cppVar_39213 = ROM.rd(cppVar_39212);
	bool cppVar_39215 = (cppVar_39213 == 176);
	BIT_VEC cppVar_39216 = PC + 1;
	cppVar_39216 = (cppVar_39216 & cppMask_un_16_);
	BIT_VEC cppVar_39217 = ROM.rd(cppVar_39216);
	bool cppVar_39219 = (cppVar_39217 == 184);
	BIT_VEC cppVar_39220 = PC + 1;
	cppVar_39220 = (cppVar_39220 & cppMask_un_16_);
	BIT_VEC cppVar_39221 = ROM.rd(cppVar_39220);
	bool cppVar_39223 = (cppVar_39221 == 208);
	BIT_VEC cppVar_39224 = PC + 1;
	cppVar_39224 = (cppVar_39224 & cppMask_un_16_);
	BIT_VEC cppVar_39225 = ROM.rd(cppVar_39224);
	bool cppVar_39227 = (cppVar_39225 == 224);
	BIT_VEC cppVar_39228 = PC + 1;
	cppVar_39228 = (cppVar_39228 & cppMask_un_16_);
	BIT_VEC cppVar_39229 = ROM.rd(cppVar_39228);
	bool cppVar_39231 = (cppVar_39229 == 240);
	BIT_VEC cppVar_39233 = (cppVar_39231) ? B : 0;
	BIT_VEC cppVar_39234 = (cppVar_39227) ? ACC : cppVar_39233;
	BIT_VEC cppVar_39235 = (cppVar_39223) ? PSW : cppVar_39234;
	BIT_VEC cppVar_39236 = (cppVar_39219) ? IP : cppVar_39235;
	BIT_VEC cppVar_39237 = (cppVar_39215) ? P3 : cppVar_39236;
	BIT_VEC cppVar_39238 = (cppVar_39211) ? IE : cppVar_39237;
	BIT_VEC cppVar_39239 = (cppVar_39207) ? P2 : cppVar_39238;
	BIT_VEC cppVar_39240 = (cppVar_39203) ? SBUF : cppVar_39239;
	BIT_VEC cppVar_39241 = (cppVar_39199) ? SCON : cppVar_39240;
	BIT_VEC cppVar_39242 = (cppVar_39195) ? P1 : cppVar_39241;
	BIT_VEC cppVar_39243 = (cppVar_39191) ? TH1 : cppVar_39242;
	BIT_VEC cppVar_39244 = (cppVar_39187) ? TL1 : cppVar_39243;
	BIT_VEC cppVar_39245 = (cppVar_39183) ? TH0 : cppVar_39244;
	BIT_VEC cppVar_39246 = (cppVar_39179) ? TL0 : cppVar_39245;
	BIT_VEC cppVar_39247 = (cppVar_39175) ? TMOD : cppVar_39246;
	BIT_VEC cppVar_39248 = (cppVar_39171) ? TCON : cppVar_39247;
	BIT_VEC cppVar_39249 = (cppVar_39167) ? PCON : cppVar_39248;
	BIT_VEC cppVar_39250 = (cppVar_39163) ? DPH : cppVar_39249;
	BIT_VEC cppVar_39251 = (cppVar_39159) ? DPL : cppVar_39250;
	BIT_VEC cppVar_39252 = (cppVar_39155) ? SP : cppVar_39251;
	BIT_VEC cppVar_39253 = (cppVar_39151) ? P0 : cppVar_39252;
	BIT_VEC cppVar_39254 = (cppVar_39144) ? cppVar_39147 : cppVar_39253;
	BIT_VEC cppVar_39255 = (cppVar_39138) ? cppVar_39254 : P3;
	BIT_VEC cppVar_39256 = ROM.rd(PC);
	bool cppVar_39258 = (cppVar_39256 == 117);
	BIT_VEC cppVar_39260 = PC + 1;
	cppVar_39260 = (cppVar_39260 & cppMask_un_16_);
	BIT_VEC cppVar_39261 = ROM.rd(cppVar_39260);
	bool cppVar_39263 = (cppVar_39261 == 176);
	BIT_VEC cppVar_39265 = PC + 2;
	cppVar_39265 = (cppVar_39265 & cppMask_un_16_);
	BIT_VEC cppVar_39266 = ROM.rd(cppVar_39265);
	BIT_VEC cppVar_39267 = (cppVar_39263) ? cppVar_39266 : P3;
	BIT_VEC cppVar_39268 = ROM.rd(PC);
	bool cppVar_39270 = (cppVar_39268 == 99);
	BIT_VEC cppVar_39272 = PC + 1;
	cppVar_39272 = (cppVar_39272 & cppMask_un_16_);
	BIT_VEC cppVar_39273 = ROM.rd(cppVar_39272);
	bool cppVar_39275 = (cppVar_39273 == 176);
	BIT_VEC cppVar_39276 = PC + 1;
	cppVar_39276 = (cppVar_39276 & cppMask_un_16_);
	BIT_VEC cppVar_39277 = ROM.rd(cppVar_39276);
	BIT_VEC cppVar_39278 = (cppVar_39277 >> 7) & cppMask_un_1_;
	bool cppVar_39280 = (cppVar_39278 == 0);
	BIT_VEC cppVar_39281 = PC + 1;
	cppVar_39281 = (cppVar_39281 & cppMask_un_16_);
	BIT_VEC cppVar_39282 = ROM.rd(cppVar_39281);
	BIT_VEC cppVar_39283 = IRAM.rd(cppVar_39282);
	BIT_VEC cppVar_39284 = PC + 1;
	cppVar_39284 = (cppVar_39284 & cppMask_un_16_);
	BIT_VEC cppVar_39285 = ROM.rd(cppVar_39284);
	bool cppVar_39287 = (cppVar_39285 == 128);
	BIT_VEC cppVar_39288 = PC + 1;
	cppVar_39288 = (cppVar_39288 & cppMask_un_16_);
	BIT_VEC cppVar_39289 = ROM.rd(cppVar_39288);
	bool cppVar_39291 = (cppVar_39289 == 129);
	BIT_VEC cppVar_39292 = PC + 1;
	cppVar_39292 = (cppVar_39292 & cppMask_un_16_);
	BIT_VEC cppVar_39293 = ROM.rd(cppVar_39292);
	bool cppVar_39295 = (cppVar_39293 == 130);
	BIT_VEC cppVar_39296 = PC + 1;
	cppVar_39296 = (cppVar_39296 & cppMask_un_16_);
	BIT_VEC cppVar_39297 = ROM.rd(cppVar_39296);
	bool cppVar_39299 = (cppVar_39297 == 131);
	BIT_VEC cppVar_39300 = PC + 1;
	cppVar_39300 = (cppVar_39300 & cppMask_un_16_);
	BIT_VEC cppVar_39301 = ROM.rd(cppVar_39300);
	bool cppVar_39303 = (cppVar_39301 == 135);
	BIT_VEC cppVar_39304 = PC + 1;
	cppVar_39304 = (cppVar_39304 & cppMask_un_16_);
	BIT_VEC cppVar_39305 = ROM.rd(cppVar_39304);
	bool cppVar_39307 = (cppVar_39305 == 136);
	BIT_VEC cppVar_39308 = PC + 1;
	cppVar_39308 = (cppVar_39308 & cppMask_un_16_);
	BIT_VEC cppVar_39309 = ROM.rd(cppVar_39308);
	bool cppVar_39311 = (cppVar_39309 == 137);
	BIT_VEC cppVar_39312 = PC + 1;
	cppVar_39312 = (cppVar_39312 & cppMask_un_16_);
	BIT_VEC cppVar_39313 = ROM.rd(cppVar_39312);
	bool cppVar_39315 = (cppVar_39313 == 138);
	BIT_VEC cppVar_39316 = PC + 1;
	cppVar_39316 = (cppVar_39316 & cppMask_un_16_);
	BIT_VEC cppVar_39317 = ROM.rd(cppVar_39316);
	bool cppVar_39319 = (cppVar_39317 == 140);
	BIT_VEC cppVar_39320 = PC + 1;
	cppVar_39320 = (cppVar_39320 & cppMask_un_16_);
	BIT_VEC cppVar_39321 = ROM.rd(cppVar_39320);
	bool cppVar_39323 = (cppVar_39321 == 139);
	BIT_VEC cppVar_39324 = PC + 1;
	cppVar_39324 = (cppVar_39324 & cppMask_un_16_);
	BIT_VEC cppVar_39325 = ROM.rd(cppVar_39324);
	bool cppVar_39327 = (cppVar_39325 == 141);
	BIT_VEC cppVar_39328 = PC + 1;
	cppVar_39328 = (cppVar_39328 & cppMask_un_16_);
	BIT_VEC cppVar_39329 = ROM.rd(cppVar_39328);
	bool cppVar_39331 = (cppVar_39329 == 144);
	BIT_VEC cppVar_39332 = PC + 1;
	cppVar_39332 = (cppVar_39332 & cppMask_un_16_);
	BIT_VEC cppVar_39333 = ROM.rd(cppVar_39332);
	bool cppVar_39335 = (cppVar_39333 == 152);
	BIT_VEC cppVar_39336 = PC + 1;
	cppVar_39336 = (cppVar_39336 & cppMask_un_16_);
	BIT_VEC cppVar_39337 = ROM.rd(cppVar_39336);
	bool cppVar_39339 = (cppVar_39337 == 153);
	BIT_VEC cppVar_39340 = PC + 1;
	cppVar_39340 = (cppVar_39340 & cppMask_un_16_);
	BIT_VEC cppVar_39341 = ROM.rd(cppVar_39340);
	bool cppVar_39343 = (cppVar_39341 == 160);
	BIT_VEC cppVar_39344 = PC + 1;
	cppVar_39344 = (cppVar_39344 & cppMask_un_16_);
	BIT_VEC cppVar_39345 = ROM.rd(cppVar_39344);
	bool cppVar_39347 = (cppVar_39345 == 168);
	BIT_VEC cppVar_39348 = PC + 1;
	cppVar_39348 = (cppVar_39348 & cppMask_un_16_);
	BIT_VEC cppVar_39349 = ROM.rd(cppVar_39348);
	bool cppVar_39351 = (cppVar_39349 == 176);
	BIT_VEC cppVar_39352 = PC + 1;
	cppVar_39352 = (cppVar_39352 & cppMask_un_16_);
	BIT_VEC cppVar_39353 = ROM.rd(cppVar_39352);
	bool cppVar_39355 = (cppVar_39353 == 184);
	BIT_VEC cppVar_39356 = PC + 1;
	cppVar_39356 = (cppVar_39356 & cppMask_un_16_);
	BIT_VEC cppVar_39357 = ROM.rd(cppVar_39356);
	bool cppVar_39359 = (cppVar_39357 == 208);
	BIT_VEC cppVar_39360 = PC + 1;
	cppVar_39360 = (cppVar_39360 & cppMask_un_16_);
	BIT_VEC cppVar_39361 = ROM.rd(cppVar_39360);
	bool cppVar_39363 = (cppVar_39361 == 224);
	BIT_VEC cppVar_39364 = PC + 1;
	cppVar_39364 = (cppVar_39364 & cppMask_un_16_);
	BIT_VEC cppVar_39365 = ROM.rd(cppVar_39364);
	bool cppVar_39367 = (cppVar_39365 == 240);
	BIT_VEC cppVar_39369 = (cppVar_39367) ? B : 0;
	BIT_VEC cppVar_39370 = (cppVar_39363) ? ACC : cppVar_39369;
	BIT_VEC cppVar_39371 = (cppVar_39359) ? PSW : cppVar_39370;
	BIT_VEC cppVar_39372 = (cppVar_39355) ? IP : cppVar_39371;
	BIT_VEC cppVar_39373 = (cppVar_39351) ? P3 : cppVar_39372;
	BIT_VEC cppVar_39374 = (cppVar_39347) ? IE : cppVar_39373;
	BIT_VEC cppVar_39375 = (cppVar_39343) ? P2 : cppVar_39374;
	BIT_VEC cppVar_39376 = (cppVar_39339) ? SBUF : cppVar_39375;
	BIT_VEC cppVar_39377 = (cppVar_39335) ? SCON : cppVar_39376;
	BIT_VEC cppVar_39378 = (cppVar_39331) ? P1 : cppVar_39377;
	BIT_VEC cppVar_39379 = (cppVar_39327) ? TH1 : cppVar_39378;
	BIT_VEC cppVar_39380 = (cppVar_39323) ? TL1 : cppVar_39379;
	BIT_VEC cppVar_39381 = (cppVar_39319) ? TH0 : cppVar_39380;
	BIT_VEC cppVar_39382 = (cppVar_39315) ? TL0 : cppVar_39381;
	BIT_VEC cppVar_39383 = (cppVar_39311) ? TMOD : cppVar_39382;
	BIT_VEC cppVar_39384 = (cppVar_39307) ? TCON : cppVar_39383;
	BIT_VEC cppVar_39385 = (cppVar_39303) ? PCON : cppVar_39384;
	BIT_VEC cppVar_39386 = (cppVar_39299) ? DPH : cppVar_39385;
	BIT_VEC cppVar_39387 = (cppVar_39295) ? DPL : cppVar_39386;
	BIT_VEC cppVar_39388 = (cppVar_39291) ? SP : cppVar_39387;
	BIT_VEC cppVar_39389 = (cppVar_39287) ? P0 : cppVar_39388;
	BIT_VEC cppVar_39390 = (cppVar_39280) ? cppVar_39283 : cppVar_39389;
	BIT_VEC cppVar_39392 = PC + 2;
	cppVar_39392 = (cppVar_39392 & cppMask_un_16_);
	BIT_VEC cppVar_39393 = ROM.rd(cppVar_39392);
	BIT_VEC cppVar_39394 = cppVar_39390 ^ cppVar_39393;
	BIT_VEC cppVar_39395 = (cppVar_39275) ? cppVar_39394 : P3;
	BIT_VEC cppVar_39396 = ROM.rd(PC);
	bool cppVar_39398 = (cppVar_39396 == 98);
	BIT_VEC cppVar_39400 = PC + 1;
	cppVar_39400 = (cppVar_39400 & cppMask_un_16_);
	BIT_VEC cppVar_39401 = ROM.rd(cppVar_39400);
	bool cppVar_39403 = (cppVar_39401 == 176);
	BIT_VEC cppVar_39404 = PC + 1;
	cppVar_39404 = (cppVar_39404 & cppMask_un_16_);
	BIT_VEC cppVar_39405 = ROM.rd(cppVar_39404);
	BIT_VEC cppVar_39406 = (cppVar_39405 >> 7) & cppMask_un_1_;
	bool cppVar_39408 = (cppVar_39406 == 0);
	BIT_VEC cppVar_39409 = PC + 1;
	cppVar_39409 = (cppVar_39409 & cppMask_un_16_);
	BIT_VEC cppVar_39410 = ROM.rd(cppVar_39409);
	BIT_VEC cppVar_39411 = IRAM.rd(cppVar_39410);
	BIT_VEC cppVar_39412 = PC + 1;
	cppVar_39412 = (cppVar_39412 & cppMask_un_16_);
	BIT_VEC cppVar_39413 = ROM.rd(cppVar_39412);
	bool cppVar_39415 = (cppVar_39413 == 128);
	BIT_VEC cppVar_39416 = PC + 1;
	cppVar_39416 = (cppVar_39416 & cppMask_un_16_);
	BIT_VEC cppVar_39417 = ROM.rd(cppVar_39416);
	bool cppVar_39419 = (cppVar_39417 == 129);
	BIT_VEC cppVar_39420 = PC + 1;
	cppVar_39420 = (cppVar_39420 & cppMask_un_16_);
	BIT_VEC cppVar_39421 = ROM.rd(cppVar_39420);
	bool cppVar_39423 = (cppVar_39421 == 130);
	BIT_VEC cppVar_39424 = PC + 1;
	cppVar_39424 = (cppVar_39424 & cppMask_un_16_);
	BIT_VEC cppVar_39425 = ROM.rd(cppVar_39424);
	bool cppVar_39427 = (cppVar_39425 == 131);
	BIT_VEC cppVar_39428 = PC + 1;
	cppVar_39428 = (cppVar_39428 & cppMask_un_16_);
	BIT_VEC cppVar_39429 = ROM.rd(cppVar_39428);
	bool cppVar_39431 = (cppVar_39429 == 135);
	BIT_VEC cppVar_39432 = PC + 1;
	cppVar_39432 = (cppVar_39432 & cppMask_un_16_);
	BIT_VEC cppVar_39433 = ROM.rd(cppVar_39432);
	bool cppVar_39435 = (cppVar_39433 == 136);
	BIT_VEC cppVar_39436 = PC + 1;
	cppVar_39436 = (cppVar_39436 & cppMask_un_16_);
	BIT_VEC cppVar_39437 = ROM.rd(cppVar_39436);
	bool cppVar_39439 = (cppVar_39437 == 137);
	BIT_VEC cppVar_39440 = PC + 1;
	cppVar_39440 = (cppVar_39440 & cppMask_un_16_);
	BIT_VEC cppVar_39441 = ROM.rd(cppVar_39440);
	bool cppVar_39443 = (cppVar_39441 == 138);
	BIT_VEC cppVar_39444 = PC + 1;
	cppVar_39444 = (cppVar_39444 & cppMask_un_16_);
	BIT_VEC cppVar_39445 = ROM.rd(cppVar_39444);
	bool cppVar_39447 = (cppVar_39445 == 140);
	BIT_VEC cppVar_39448 = PC + 1;
	cppVar_39448 = (cppVar_39448 & cppMask_un_16_);
	BIT_VEC cppVar_39449 = ROM.rd(cppVar_39448);
	bool cppVar_39451 = (cppVar_39449 == 139);
	BIT_VEC cppVar_39452 = PC + 1;
	cppVar_39452 = (cppVar_39452 & cppMask_un_16_);
	BIT_VEC cppVar_39453 = ROM.rd(cppVar_39452);
	bool cppVar_39455 = (cppVar_39453 == 141);
	BIT_VEC cppVar_39456 = PC + 1;
	cppVar_39456 = (cppVar_39456 & cppMask_un_16_);
	BIT_VEC cppVar_39457 = ROM.rd(cppVar_39456);
	bool cppVar_39459 = (cppVar_39457 == 144);
	BIT_VEC cppVar_39460 = PC + 1;
	cppVar_39460 = (cppVar_39460 & cppMask_un_16_);
	BIT_VEC cppVar_39461 = ROM.rd(cppVar_39460);
	bool cppVar_39463 = (cppVar_39461 == 152);
	BIT_VEC cppVar_39464 = PC + 1;
	cppVar_39464 = (cppVar_39464 & cppMask_un_16_);
	BIT_VEC cppVar_39465 = ROM.rd(cppVar_39464);
	bool cppVar_39467 = (cppVar_39465 == 153);
	BIT_VEC cppVar_39468 = PC + 1;
	cppVar_39468 = (cppVar_39468 & cppMask_un_16_);
	BIT_VEC cppVar_39469 = ROM.rd(cppVar_39468);
	bool cppVar_39471 = (cppVar_39469 == 160);
	BIT_VEC cppVar_39472 = PC + 1;
	cppVar_39472 = (cppVar_39472 & cppMask_un_16_);
	BIT_VEC cppVar_39473 = ROM.rd(cppVar_39472);
	bool cppVar_39475 = (cppVar_39473 == 168);
	BIT_VEC cppVar_39476 = PC + 1;
	cppVar_39476 = (cppVar_39476 & cppMask_un_16_);
	BIT_VEC cppVar_39477 = ROM.rd(cppVar_39476);
	bool cppVar_39479 = (cppVar_39477 == 176);
	BIT_VEC cppVar_39480 = PC + 1;
	cppVar_39480 = (cppVar_39480 & cppMask_un_16_);
	BIT_VEC cppVar_39481 = ROM.rd(cppVar_39480);
	bool cppVar_39483 = (cppVar_39481 == 184);
	BIT_VEC cppVar_39484 = PC + 1;
	cppVar_39484 = (cppVar_39484 & cppMask_un_16_);
	BIT_VEC cppVar_39485 = ROM.rd(cppVar_39484);
	bool cppVar_39487 = (cppVar_39485 == 208);
	BIT_VEC cppVar_39488 = PC + 1;
	cppVar_39488 = (cppVar_39488 & cppMask_un_16_);
	BIT_VEC cppVar_39489 = ROM.rd(cppVar_39488);
	bool cppVar_39491 = (cppVar_39489 == 224);
	BIT_VEC cppVar_39492 = PC + 1;
	cppVar_39492 = (cppVar_39492 & cppMask_un_16_);
	BIT_VEC cppVar_39493 = ROM.rd(cppVar_39492);
	bool cppVar_39495 = (cppVar_39493 == 240);
	BIT_VEC cppVar_39497 = (cppVar_39495) ? B : 0;
	BIT_VEC cppVar_39498 = (cppVar_39491) ? ACC : cppVar_39497;
	BIT_VEC cppVar_39499 = (cppVar_39487) ? PSW : cppVar_39498;
	BIT_VEC cppVar_39500 = (cppVar_39483) ? IP : cppVar_39499;
	BIT_VEC cppVar_39501 = (cppVar_39479) ? P3 : cppVar_39500;
	BIT_VEC cppVar_39502 = (cppVar_39475) ? IE : cppVar_39501;
	BIT_VEC cppVar_39503 = (cppVar_39471) ? P2 : cppVar_39502;
	BIT_VEC cppVar_39504 = (cppVar_39467) ? SBUF : cppVar_39503;
	BIT_VEC cppVar_39505 = (cppVar_39463) ? SCON : cppVar_39504;
	BIT_VEC cppVar_39506 = (cppVar_39459) ? P1 : cppVar_39505;
	BIT_VEC cppVar_39507 = (cppVar_39455) ? TH1 : cppVar_39506;
	BIT_VEC cppVar_39508 = (cppVar_39451) ? TL1 : cppVar_39507;
	BIT_VEC cppVar_39509 = (cppVar_39447) ? TH0 : cppVar_39508;
	BIT_VEC cppVar_39510 = (cppVar_39443) ? TL0 : cppVar_39509;
	BIT_VEC cppVar_39511 = (cppVar_39439) ? TMOD : cppVar_39510;
	BIT_VEC cppVar_39512 = (cppVar_39435) ? TCON : cppVar_39511;
	BIT_VEC cppVar_39513 = (cppVar_39431) ? PCON : cppVar_39512;
	BIT_VEC cppVar_39514 = (cppVar_39427) ? DPH : cppVar_39513;
	BIT_VEC cppVar_39515 = (cppVar_39423) ? DPL : cppVar_39514;
	BIT_VEC cppVar_39516 = (cppVar_39419) ? SP : cppVar_39515;
	BIT_VEC cppVar_39517 = (cppVar_39415) ? P0 : cppVar_39516;
	BIT_VEC cppVar_39518 = (cppVar_39408) ? cppVar_39411 : cppVar_39517;
	BIT_VEC cppVar_39519 = cppVar_39518 ^ ACC;
	BIT_VEC cppVar_39520 = (cppVar_39403) ? cppVar_39519 : P3;
	BIT_VEC cppVar_39521 = ROM.rd(PC);
	bool cppVar_39523 = (cppVar_39521 == 83);
	BIT_VEC cppVar_39525 = PC + 1;
	cppVar_39525 = (cppVar_39525 & cppMask_un_16_);
	BIT_VEC cppVar_39526 = ROM.rd(cppVar_39525);
	bool cppVar_39528 = (cppVar_39526 == 176);
	BIT_VEC cppVar_39529 = PC + 1;
	cppVar_39529 = (cppVar_39529 & cppMask_un_16_);
	BIT_VEC cppVar_39530 = ROM.rd(cppVar_39529);
	BIT_VEC cppVar_39531 = (cppVar_39530 >> 7) & cppMask_un_1_;
	bool cppVar_39533 = (cppVar_39531 == 0);
	BIT_VEC cppVar_39534 = PC + 1;
	cppVar_39534 = (cppVar_39534 & cppMask_un_16_);
	BIT_VEC cppVar_39535 = ROM.rd(cppVar_39534);
	BIT_VEC cppVar_39536 = IRAM.rd(cppVar_39535);
	BIT_VEC cppVar_39537 = PC + 1;
	cppVar_39537 = (cppVar_39537 & cppMask_un_16_);
	BIT_VEC cppVar_39538 = ROM.rd(cppVar_39537);
	bool cppVar_39540 = (cppVar_39538 == 128);
	BIT_VEC cppVar_39541 = PC + 1;
	cppVar_39541 = (cppVar_39541 & cppMask_un_16_);
	BIT_VEC cppVar_39542 = ROM.rd(cppVar_39541);
	bool cppVar_39544 = (cppVar_39542 == 129);
	BIT_VEC cppVar_39545 = PC + 1;
	cppVar_39545 = (cppVar_39545 & cppMask_un_16_);
	BIT_VEC cppVar_39546 = ROM.rd(cppVar_39545);
	bool cppVar_39548 = (cppVar_39546 == 130);
	BIT_VEC cppVar_39549 = PC + 1;
	cppVar_39549 = (cppVar_39549 & cppMask_un_16_);
	BIT_VEC cppVar_39550 = ROM.rd(cppVar_39549);
	bool cppVar_39552 = (cppVar_39550 == 131);
	BIT_VEC cppVar_39553 = PC + 1;
	cppVar_39553 = (cppVar_39553 & cppMask_un_16_);
	BIT_VEC cppVar_39554 = ROM.rd(cppVar_39553);
	bool cppVar_39556 = (cppVar_39554 == 135);
	BIT_VEC cppVar_39557 = PC + 1;
	cppVar_39557 = (cppVar_39557 & cppMask_un_16_);
	BIT_VEC cppVar_39558 = ROM.rd(cppVar_39557);
	bool cppVar_39560 = (cppVar_39558 == 136);
	BIT_VEC cppVar_39561 = PC + 1;
	cppVar_39561 = (cppVar_39561 & cppMask_un_16_);
	BIT_VEC cppVar_39562 = ROM.rd(cppVar_39561);
	bool cppVar_39564 = (cppVar_39562 == 137);
	BIT_VEC cppVar_39565 = PC + 1;
	cppVar_39565 = (cppVar_39565 & cppMask_un_16_);
	BIT_VEC cppVar_39566 = ROM.rd(cppVar_39565);
	bool cppVar_39568 = (cppVar_39566 == 138);
	BIT_VEC cppVar_39569 = PC + 1;
	cppVar_39569 = (cppVar_39569 & cppMask_un_16_);
	BIT_VEC cppVar_39570 = ROM.rd(cppVar_39569);
	bool cppVar_39572 = (cppVar_39570 == 140);
	BIT_VEC cppVar_39573 = PC + 1;
	cppVar_39573 = (cppVar_39573 & cppMask_un_16_);
	BIT_VEC cppVar_39574 = ROM.rd(cppVar_39573);
	bool cppVar_39576 = (cppVar_39574 == 139);
	BIT_VEC cppVar_39577 = PC + 1;
	cppVar_39577 = (cppVar_39577 & cppMask_un_16_);
	BIT_VEC cppVar_39578 = ROM.rd(cppVar_39577);
	bool cppVar_39580 = (cppVar_39578 == 141);
	BIT_VEC cppVar_39581 = PC + 1;
	cppVar_39581 = (cppVar_39581 & cppMask_un_16_);
	BIT_VEC cppVar_39582 = ROM.rd(cppVar_39581);
	bool cppVar_39584 = (cppVar_39582 == 144);
	BIT_VEC cppVar_39585 = PC + 1;
	cppVar_39585 = (cppVar_39585 & cppMask_un_16_);
	BIT_VEC cppVar_39586 = ROM.rd(cppVar_39585);
	bool cppVar_39588 = (cppVar_39586 == 152);
	BIT_VEC cppVar_39589 = PC + 1;
	cppVar_39589 = (cppVar_39589 & cppMask_un_16_);
	BIT_VEC cppVar_39590 = ROM.rd(cppVar_39589);
	bool cppVar_39592 = (cppVar_39590 == 153);
	BIT_VEC cppVar_39593 = PC + 1;
	cppVar_39593 = (cppVar_39593 & cppMask_un_16_);
	BIT_VEC cppVar_39594 = ROM.rd(cppVar_39593);
	bool cppVar_39596 = (cppVar_39594 == 160);
	BIT_VEC cppVar_39597 = PC + 1;
	cppVar_39597 = (cppVar_39597 & cppMask_un_16_);
	BIT_VEC cppVar_39598 = ROM.rd(cppVar_39597);
	bool cppVar_39600 = (cppVar_39598 == 168);
	BIT_VEC cppVar_39601 = PC + 1;
	cppVar_39601 = (cppVar_39601 & cppMask_un_16_);
	BIT_VEC cppVar_39602 = ROM.rd(cppVar_39601);
	bool cppVar_39604 = (cppVar_39602 == 176);
	BIT_VEC cppVar_39605 = PC + 1;
	cppVar_39605 = (cppVar_39605 & cppMask_un_16_);
	BIT_VEC cppVar_39606 = ROM.rd(cppVar_39605);
	bool cppVar_39608 = (cppVar_39606 == 184);
	BIT_VEC cppVar_39609 = PC + 1;
	cppVar_39609 = (cppVar_39609 & cppMask_un_16_);
	BIT_VEC cppVar_39610 = ROM.rd(cppVar_39609);
	bool cppVar_39612 = (cppVar_39610 == 208);
	BIT_VEC cppVar_39613 = PC + 1;
	cppVar_39613 = (cppVar_39613 & cppMask_un_16_);
	BIT_VEC cppVar_39614 = ROM.rd(cppVar_39613);
	bool cppVar_39616 = (cppVar_39614 == 224);
	BIT_VEC cppVar_39617 = PC + 1;
	cppVar_39617 = (cppVar_39617 & cppMask_un_16_);
	BIT_VEC cppVar_39618 = ROM.rd(cppVar_39617);
	bool cppVar_39620 = (cppVar_39618 == 240);
	BIT_VEC cppVar_39622 = (cppVar_39620) ? B : 0;
	BIT_VEC cppVar_39623 = (cppVar_39616) ? ACC : cppVar_39622;
	BIT_VEC cppVar_39624 = (cppVar_39612) ? PSW : cppVar_39623;
	BIT_VEC cppVar_39625 = (cppVar_39608) ? IP : cppVar_39624;
	BIT_VEC cppVar_39626 = (cppVar_39604) ? P3 : cppVar_39625;
	BIT_VEC cppVar_39627 = (cppVar_39600) ? IE : cppVar_39626;
	BIT_VEC cppVar_39628 = (cppVar_39596) ? P2 : cppVar_39627;
	BIT_VEC cppVar_39629 = (cppVar_39592) ? SBUF : cppVar_39628;
	BIT_VEC cppVar_39630 = (cppVar_39588) ? SCON : cppVar_39629;
	BIT_VEC cppVar_39631 = (cppVar_39584) ? P1 : cppVar_39630;
	BIT_VEC cppVar_39632 = (cppVar_39580) ? TH1 : cppVar_39631;
	BIT_VEC cppVar_39633 = (cppVar_39576) ? TL1 : cppVar_39632;
	BIT_VEC cppVar_39634 = (cppVar_39572) ? TH0 : cppVar_39633;
	BIT_VEC cppVar_39635 = (cppVar_39568) ? TL0 : cppVar_39634;
	BIT_VEC cppVar_39636 = (cppVar_39564) ? TMOD : cppVar_39635;
	BIT_VEC cppVar_39637 = (cppVar_39560) ? TCON : cppVar_39636;
	BIT_VEC cppVar_39638 = (cppVar_39556) ? PCON : cppVar_39637;
	BIT_VEC cppVar_39639 = (cppVar_39552) ? DPH : cppVar_39638;
	BIT_VEC cppVar_39640 = (cppVar_39548) ? DPL : cppVar_39639;
	BIT_VEC cppVar_39641 = (cppVar_39544) ? SP : cppVar_39640;
	BIT_VEC cppVar_39642 = (cppVar_39540) ? P0 : cppVar_39641;
	BIT_VEC cppVar_39643 = (cppVar_39533) ? cppVar_39536 : cppVar_39642;
	BIT_VEC cppVar_39645 = PC + 2;
	cppVar_39645 = (cppVar_39645 & cppMask_un_16_);
	BIT_VEC cppVar_39646 = ROM.rd(cppVar_39645);
	BIT_VEC cppVar_39647 = cppVar_39643 & cppVar_39646;
	BIT_VEC cppVar_39648 = (cppVar_39528) ? cppVar_39647 : P3;
	BIT_VEC cppVar_39649 = ROM.rd(PC);
	bool cppVar_39651 = (cppVar_39649 == 82);
	BIT_VEC cppVar_39653 = PC + 1;
	cppVar_39653 = (cppVar_39653 & cppMask_un_16_);
	BIT_VEC cppVar_39654 = ROM.rd(cppVar_39653);
	bool cppVar_39656 = (cppVar_39654 == 176);
	BIT_VEC cppVar_39657 = PC + 1;
	cppVar_39657 = (cppVar_39657 & cppMask_un_16_);
	BIT_VEC cppVar_39658 = ROM.rd(cppVar_39657);
	BIT_VEC cppVar_39659 = (cppVar_39658 >> 7) & cppMask_un_1_;
	bool cppVar_39661 = (cppVar_39659 == 0);
	BIT_VEC cppVar_39662 = PC + 1;
	cppVar_39662 = (cppVar_39662 & cppMask_un_16_);
	BIT_VEC cppVar_39663 = ROM.rd(cppVar_39662);
	BIT_VEC cppVar_39664 = IRAM.rd(cppVar_39663);
	BIT_VEC cppVar_39665 = PC + 1;
	cppVar_39665 = (cppVar_39665 & cppMask_un_16_);
	BIT_VEC cppVar_39666 = ROM.rd(cppVar_39665);
	bool cppVar_39668 = (cppVar_39666 == 128);
	BIT_VEC cppVar_39669 = PC + 1;
	cppVar_39669 = (cppVar_39669 & cppMask_un_16_);
	BIT_VEC cppVar_39670 = ROM.rd(cppVar_39669);
	bool cppVar_39672 = (cppVar_39670 == 129);
	BIT_VEC cppVar_39673 = PC + 1;
	cppVar_39673 = (cppVar_39673 & cppMask_un_16_);
	BIT_VEC cppVar_39674 = ROM.rd(cppVar_39673);
	bool cppVar_39676 = (cppVar_39674 == 130);
	BIT_VEC cppVar_39677 = PC + 1;
	cppVar_39677 = (cppVar_39677 & cppMask_un_16_);
	BIT_VEC cppVar_39678 = ROM.rd(cppVar_39677);
	bool cppVar_39680 = (cppVar_39678 == 131);
	BIT_VEC cppVar_39681 = PC + 1;
	cppVar_39681 = (cppVar_39681 & cppMask_un_16_);
	BIT_VEC cppVar_39682 = ROM.rd(cppVar_39681);
	bool cppVar_39684 = (cppVar_39682 == 135);
	BIT_VEC cppVar_39685 = PC + 1;
	cppVar_39685 = (cppVar_39685 & cppMask_un_16_);
	BIT_VEC cppVar_39686 = ROM.rd(cppVar_39685);
	bool cppVar_39688 = (cppVar_39686 == 136);
	BIT_VEC cppVar_39689 = PC + 1;
	cppVar_39689 = (cppVar_39689 & cppMask_un_16_);
	BIT_VEC cppVar_39690 = ROM.rd(cppVar_39689);
	bool cppVar_39692 = (cppVar_39690 == 137);
	BIT_VEC cppVar_39693 = PC + 1;
	cppVar_39693 = (cppVar_39693 & cppMask_un_16_);
	BIT_VEC cppVar_39694 = ROM.rd(cppVar_39693);
	bool cppVar_39696 = (cppVar_39694 == 138);
	BIT_VEC cppVar_39697 = PC + 1;
	cppVar_39697 = (cppVar_39697 & cppMask_un_16_);
	BIT_VEC cppVar_39698 = ROM.rd(cppVar_39697);
	bool cppVar_39700 = (cppVar_39698 == 140);
	BIT_VEC cppVar_39701 = PC + 1;
	cppVar_39701 = (cppVar_39701 & cppMask_un_16_);
	BIT_VEC cppVar_39702 = ROM.rd(cppVar_39701);
	bool cppVar_39704 = (cppVar_39702 == 139);
	BIT_VEC cppVar_39705 = PC + 1;
	cppVar_39705 = (cppVar_39705 & cppMask_un_16_);
	BIT_VEC cppVar_39706 = ROM.rd(cppVar_39705);
	bool cppVar_39708 = (cppVar_39706 == 141);
	BIT_VEC cppVar_39709 = PC + 1;
	cppVar_39709 = (cppVar_39709 & cppMask_un_16_);
	BIT_VEC cppVar_39710 = ROM.rd(cppVar_39709);
	bool cppVar_39712 = (cppVar_39710 == 144);
	BIT_VEC cppVar_39713 = PC + 1;
	cppVar_39713 = (cppVar_39713 & cppMask_un_16_);
	BIT_VEC cppVar_39714 = ROM.rd(cppVar_39713);
	bool cppVar_39716 = (cppVar_39714 == 152);
	BIT_VEC cppVar_39717 = PC + 1;
	cppVar_39717 = (cppVar_39717 & cppMask_un_16_);
	BIT_VEC cppVar_39718 = ROM.rd(cppVar_39717);
	bool cppVar_39720 = (cppVar_39718 == 153);
	BIT_VEC cppVar_39721 = PC + 1;
	cppVar_39721 = (cppVar_39721 & cppMask_un_16_);
	BIT_VEC cppVar_39722 = ROM.rd(cppVar_39721);
	bool cppVar_39724 = (cppVar_39722 == 160);
	BIT_VEC cppVar_39725 = PC + 1;
	cppVar_39725 = (cppVar_39725 & cppMask_un_16_);
	BIT_VEC cppVar_39726 = ROM.rd(cppVar_39725);
	bool cppVar_39728 = (cppVar_39726 == 168);
	BIT_VEC cppVar_39729 = PC + 1;
	cppVar_39729 = (cppVar_39729 & cppMask_un_16_);
	BIT_VEC cppVar_39730 = ROM.rd(cppVar_39729);
	bool cppVar_39732 = (cppVar_39730 == 176);
	BIT_VEC cppVar_39733 = PC + 1;
	cppVar_39733 = (cppVar_39733 & cppMask_un_16_);
	BIT_VEC cppVar_39734 = ROM.rd(cppVar_39733);
	bool cppVar_39736 = (cppVar_39734 == 184);
	BIT_VEC cppVar_39737 = PC + 1;
	cppVar_39737 = (cppVar_39737 & cppMask_un_16_);
	BIT_VEC cppVar_39738 = ROM.rd(cppVar_39737);
	bool cppVar_39740 = (cppVar_39738 == 208);
	BIT_VEC cppVar_39741 = PC + 1;
	cppVar_39741 = (cppVar_39741 & cppMask_un_16_);
	BIT_VEC cppVar_39742 = ROM.rd(cppVar_39741);
	bool cppVar_39744 = (cppVar_39742 == 224);
	BIT_VEC cppVar_39745 = PC + 1;
	cppVar_39745 = (cppVar_39745 & cppMask_un_16_);
	BIT_VEC cppVar_39746 = ROM.rd(cppVar_39745);
	bool cppVar_39748 = (cppVar_39746 == 240);
	BIT_VEC cppVar_39750 = (cppVar_39748) ? B : 0;
	BIT_VEC cppVar_39751 = (cppVar_39744) ? ACC : cppVar_39750;
	BIT_VEC cppVar_39752 = (cppVar_39740) ? PSW : cppVar_39751;
	BIT_VEC cppVar_39753 = (cppVar_39736) ? IP : cppVar_39752;
	BIT_VEC cppVar_39754 = (cppVar_39732) ? P3 : cppVar_39753;
	BIT_VEC cppVar_39755 = (cppVar_39728) ? IE : cppVar_39754;
	BIT_VEC cppVar_39756 = (cppVar_39724) ? P2 : cppVar_39755;
	BIT_VEC cppVar_39757 = (cppVar_39720) ? SBUF : cppVar_39756;
	BIT_VEC cppVar_39758 = (cppVar_39716) ? SCON : cppVar_39757;
	BIT_VEC cppVar_39759 = (cppVar_39712) ? P1 : cppVar_39758;
	BIT_VEC cppVar_39760 = (cppVar_39708) ? TH1 : cppVar_39759;
	BIT_VEC cppVar_39761 = (cppVar_39704) ? TL1 : cppVar_39760;
	BIT_VEC cppVar_39762 = (cppVar_39700) ? TH0 : cppVar_39761;
	BIT_VEC cppVar_39763 = (cppVar_39696) ? TL0 : cppVar_39762;
	BIT_VEC cppVar_39764 = (cppVar_39692) ? TMOD : cppVar_39763;
	BIT_VEC cppVar_39765 = (cppVar_39688) ? TCON : cppVar_39764;
	BIT_VEC cppVar_39766 = (cppVar_39684) ? PCON : cppVar_39765;
	BIT_VEC cppVar_39767 = (cppVar_39680) ? DPH : cppVar_39766;
	BIT_VEC cppVar_39768 = (cppVar_39676) ? DPL : cppVar_39767;
	BIT_VEC cppVar_39769 = (cppVar_39672) ? SP : cppVar_39768;
	BIT_VEC cppVar_39770 = (cppVar_39668) ? P0 : cppVar_39769;
	BIT_VEC cppVar_39771 = (cppVar_39661) ? cppVar_39664 : cppVar_39770;
	BIT_VEC cppVar_39772 = cppVar_39771 & ACC;
	BIT_VEC cppVar_39773 = (cppVar_39656) ? cppVar_39772 : P3;
	BIT_VEC cppVar_39774 = ROM.rd(PC);
	bool cppVar_39776 = (cppVar_39774 == 67);
	BIT_VEC cppVar_39778 = PC + 1;
	cppVar_39778 = (cppVar_39778 & cppMask_un_16_);
	BIT_VEC cppVar_39779 = ROM.rd(cppVar_39778);
	bool cppVar_39781 = (cppVar_39779 == 176);
	BIT_VEC cppVar_39782 = PC + 1;
	cppVar_39782 = (cppVar_39782 & cppMask_un_16_);
	BIT_VEC cppVar_39783 = ROM.rd(cppVar_39782);
	BIT_VEC cppVar_39784 = (cppVar_39783 >> 7) & cppMask_un_1_;
	bool cppVar_39786 = (cppVar_39784 == 0);
	BIT_VEC cppVar_39787 = PC + 1;
	cppVar_39787 = (cppVar_39787 & cppMask_un_16_);
	BIT_VEC cppVar_39788 = ROM.rd(cppVar_39787);
	BIT_VEC cppVar_39789 = IRAM.rd(cppVar_39788);
	BIT_VEC cppVar_39790 = PC + 1;
	cppVar_39790 = (cppVar_39790 & cppMask_un_16_);
	BIT_VEC cppVar_39791 = ROM.rd(cppVar_39790);
	bool cppVar_39793 = (cppVar_39791 == 128);
	BIT_VEC cppVar_39794 = PC + 1;
	cppVar_39794 = (cppVar_39794 & cppMask_un_16_);
	BIT_VEC cppVar_39795 = ROM.rd(cppVar_39794);
	bool cppVar_39797 = (cppVar_39795 == 129);
	BIT_VEC cppVar_39798 = PC + 1;
	cppVar_39798 = (cppVar_39798 & cppMask_un_16_);
	BIT_VEC cppVar_39799 = ROM.rd(cppVar_39798);
	bool cppVar_39801 = (cppVar_39799 == 130);
	BIT_VEC cppVar_39802 = PC + 1;
	cppVar_39802 = (cppVar_39802 & cppMask_un_16_);
	BIT_VEC cppVar_39803 = ROM.rd(cppVar_39802);
	bool cppVar_39805 = (cppVar_39803 == 131);
	BIT_VEC cppVar_39806 = PC + 1;
	cppVar_39806 = (cppVar_39806 & cppMask_un_16_);
	BIT_VEC cppVar_39807 = ROM.rd(cppVar_39806);
	bool cppVar_39809 = (cppVar_39807 == 135);
	BIT_VEC cppVar_39810 = PC + 1;
	cppVar_39810 = (cppVar_39810 & cppMask_un_16_);
	BIT_VEC cppVar_39811 = ROM.rd(cppVar_39810);
	bool cppVar_39813 = (cppVar_39811 == 136);
	BIT_VEC cppVar_39814 = PC + 1;
	cppVar_39814 = (cppVar_39814 & cppMask_un_16_);
	BIT_VEC cppVar_39815 = ROM.rd(cppVar_39814);
	bool cppVar_39817 = (cppVar_39815 == 137);
	BIT_VEC cppVar_39818 = PC + 1;
	cppVar_39818 = (cppVar_39818 & cppMask_un_16_);
	BIT_VEC cppVar_39819 = ROM.rd(cppVar_39818);
	bool cppVar_39821 = (cppVar_39819 == 138);
	BIT_VEC cppVar_39822 = PC + 1;
	cppVar_39822 = (cppVar_39822 & cppMask_un_16_);
	BIT_VEC cppVar_39823 = ROM.rd(cppVar_39822);
	bool cppVar_39825 = (cppVar_39823 == 140);
	BIT_VEC cppVar_39826 = PC + 1;
	cppVar_39826 = (cppVar_39826 & cppMask_un_16_);
	BIT_VEC cppVar_39827 = ROM.rd(cppVar_39826);
	bool cppVar_39829 = (cppVar_39827 == 139);
	BIT_VEC cppVar_39830 = PC + 1;
	cppVar_39830 = (cppVar_39830 & cppMask_un_16_);
	BIT_VEC cppVar_39831 = ROM.rd(cppVar_39830);
	bool cppVar_39833 = (cppVar_39831 == 141);
	BIT_VEC cppVar_39834 = PC + 1;
	cppVar_39834 = (cppVar_39834 & cppMask_un_16_);
	BIT_VEC cppVar_39835 = ROM.rd(cppVar_39834);
	bool cppVar_39837 = (cppVar_39835 == 144);
	BIT_VEC cppVar_39838 = PC + 1;
	cppVar_39838 = (cppVar_39838 & cppMask_un_16_);
	BIT_VEC cppVar_39839 = ROM.rd(cppVar_39838);
	bool cppVar_39841 = (cppVar_39839 == 152);
	BIT_VEC cppVar_39842 = PC + 1;
	cppVar_39842 = (cppVar_39842 & cppMask_un_16_);
	BIT_VEC cppVar_39843 = ROM.rd(cppVar_39842);
	bool cppVar_39845 = (cppVar_39843 == 153);
	BIT_VEC cppVar_39846 = PC + 1;
	cppVar_39846 = (cppVar_39846 & cppMask_un_16_);
	BIT_VEC cppVar_39847 = ROM.rd(cppVar_39846);
	bool cppVar_39849 = (cppVar_39847 == 160);
	BIT_VEC cppVar_39850 = PC + 1;
	cppVar_39850 = (cppVar_39850 & cppMask_un_16_);
	BIT_VEC cppVar_39851 = ROM.rd(cppVar_39850);
	bool cppVar_39853 = (cppVar_39851 == 168);
	BIT_VEC cppVar_39854 = PC + 1;
	cppVar_39854 = (cppVar_39854 & cppMask_un_16_);
	BIT_VEC cppVar_39855 = ROM.rd(cppVar_39854);
	bool cppVar_39857 = (cppVar_39855 == 176);
	BIT_VEC cppVar_39858 = PC + 1;
	cppVar_39858 = (cppVar_39858 & cppMask_un_16_);
	BIT_VEC cppVar_39859 = ROM.rd(cppVar_39858);
	bool cppVar_39861 = (cppVar_39859 == 184);
	BIT_VEC cppVar_39862 = PC + 1;
	cppVar_39862 = (cppVar_39862 & cppMask_un_16_);
	BIT_VEC cppVar_39863 = ROM.rd(cppVar_39862);
	bool cppVar_39865 = (cppVar_39863 == 208);
	BIT_VEC cppVar_39866 = PC + 1;
	cppVar_39866 = (cppVar_39866 & cppMask_un_16_);
	BIT_VEC cppVar_39867 = ROM.rd(cppVar_39866);
	bool cppVar_39869 = (cppVar_39867 == 224);
	BIT_VEC cppVar_39870 = PC + 1;
	cppVar_39870 = (cppVar_39870 & cppMask_un_16_);
	BIT_VEC cppVar_39871 = ROM.rd(cppVar_39870);
	bool cppVar_39873 = (cppVar_39871 == 240);
	BIT_VEC cppVar_39875 = (cppVar_39873) ? B : 0;
	BIT_VEC cppVar_39876 = (cppVar_39869) ? ACC : cppVar_39875;
	BIT_VEC cppVar_39877 = (cppVar_39865) ? PSW : cppVar_39876;
	BIT_VEC cppVar_39878 = (cppVar_39861) ? IP : cppVar_39877;
	BIT_VEC cppVar_39879 = (cppVar_39857) ? P3 : cppVar_39878;
	BIT_VEC cppVar_39880 = (cppVar_39853) ? IE : cppVar_39879;
	BIT_VEC cppVar_39881 = (cppVar_39849) ? P2 : cppVar_39880;
	BIT_VEC cppVar_39882 = (cppVar_39845) ? SBUF : cppVar_39881;
	BIT_VEC cppVar_39883 = (cppVar_39841) ? SCON : cppVar_39882;
	BIT_VEC cppVar_39884 = (cppVar_39837) ? P1 : cppVar_39883;
	BIT_VEC cppVar_39885 = (cppVar_39833) ? TH1 : cppVar_39884;
	BIT_VEC cppVar_39886 = (cppVar_39829) ? TL1 : cppVar_39885;
	BIT_VEC cppVar_39887 = (cppVar_39825) ? TH0 : cppVar_39886;
	BIT_VEC cppVar_39888 = (cppVar_39821) ? TL0 : cppVar_39887;
	BIT_VEC cppVar_39889 = (cppVar_39817) ? TMOD : cppVar_39888;
	BIT_VEC cppVar_39890 = (cppVar_39813) ? TCON : cppVar_39889;
	BIT_VEC cppVar_39891 = (cppVar_39809) ? PCON : cppVar_39890;
	BIT_VEC cppVar_39892 = (cppVar_39805) ? DPH : cppVar_39891;
	BIT_VEC cppVar_39893 = (cppVar_39801) ? DPL : cppVar_39892;
	BIT_VEC cppVar_39894 = (cppVar_39797) ? SP : cppVar_39893;
	BIT_VEC cppVar_39895 = (cppVar_39793) ? P0 : cppVar_39894;
	BIT_VEC cppVar_39896 = (cppVar_39786) ? cppVar_39789 : cppVar_39895;
	BIT_VEC cppVar_39898 = PC + 2;
	cppVar_39898 = (cppVar_39898 & cppMask_un_16_);
	BIT_VEC cppVar_39899 = ROM.rd(cppVar_39898);
	BIT_VEC cppVar_39900 = cppVar_39896 | cppVar_39899;
	BIT_VEC cppVar_39901 = (cppVar_39781) ? cppVar_39900 : P3;
	BIT_VEC cppVar_39902 = ROM.rd(PC);
	bool cppVar_39904 = (cppVar_39902 == 66);
	BIT_VEC cppVar_39906 = PC + 1;
	cppVar_39906 = (cppVar_39906 & cppMask_un_16_);
	BIT_VEC cppVar_39907 = ROM.rd(cppVar_39906);
	bool cppVar_39909 = (cppVar_39907 == 176);
	BIT_VEC cppVar_39910 = PC + 1;
	cppVar_39910 = (cppVar_39910 & cppMask_un_16_);
	BIT_VEC cppVar_39911 = ROM.rd(cppVar_39910);
	BIT_VEC cppVar_39912 = (cppVar_39911 >> 7) & cppMask_un_1_;
	bool cppVar_39914 = (cppVar_39912 == 0);
	BIT_VEC cppVar_39915 = PC + 1;
	cppVar_39915 = (cppVar_39915 & cppMask_un_16_);
	BIT_VEC cppVar_39916 = ROM.rd(cppVar_39915);
	BIT_VEC cppVar_39917 = IRAM.rd(cppVar_39916);
	BIT_VEC cppVar_39918 = PC + 1;
	cppVar_39918 = (cppVar_39918 & cppMask_un_16_);
	BIT_VEC cppVar_39919 = ROM.rd(cppVar_39918);
	bool cppVar_39921 = (cppVar_39919 == 128);
	BIT_VEC cppVar_39922 = PC + 1;
	cppVar_39922 = (cppVar_39922 & cppMask_un_16_);
	BIT_VEC cppVar_39923 = ROM.rd(cppVar_39922);
	bool cppVar_39925 = (cppVar_39923 == 129);
	BIT_VEC cppVar_39926 = PC + 1;
	cppVar_39926 = (cppVar_39926 & cppMask_un_16_);
	BIT_VEC cppVar_39927 = ROM.rd(cppVar_39926);
	bool cppVar_39929 = (cppVar_39927 == 130);
	BIT_VEC cppVar_39930 = PC + 1;
	cppVar_39930 = (cppVar_39930 & cppMask_un_16_);
	BIT_VEC cppVar_39931 = ROM.rd(cppVar_39930);
	bool cppVar_39933 = (cppVar_39931 == 131);
	BIT_VEC cppVar_39934 = PC + 1;
	cppVar_39934 = (cppVar_39934 & cppMask_un_16_);
	BIT_VEC cppVar_39935 = ROM.rd(cppVar_39934);
	bool cppVar_39937 = (cppVar_39935 == 135);
	BIT_VEC cppVar_39938 = PC + 1;
	cppVar_39938 = (cppVar_39938 & cppMask_un_16_);
	BIT_VEC cppVar_39939 = ROM.rd(cppVar_39938);
	bool cppVar_39941 = (cppVar_39939 == 136);
	BIT_VEC cppVar_39942 = PC + 1;
	cppVar_39942 = (cppVar_39942 & cppMask_un_16_);
	BIT_VEC cppVar_39943 = ROM.rd(cppVar_39942);
	bool cppVar_39945 = (cppVar_39943 == 137);
	BIT_VEC cppVar_39946 = PC + 1;
	cppVar_39946 = (cppVar_39946 & cppMask_un_16_);
	BIT_VEC cppVar_39947 = ROM.rd(cppVar_39946);
	bool cppVar_39949 = (cppVar_39947 == 138);
	BIT_VEC cppVar_39950 = PC + 1;
	cppVar_39950 = (cppVar_39950 & cppMask_un_16_);
	BIT_VEC cppVar_39951 = ROM.rd(cppVar_39950);
	bool cppVar_39953 = (cppVar_39951 == 140);
	BIT_VEC cppVar_39954 = PC + 1;
	cppVar_39954 = (cppVar_39954 & cppMask_un_16_);
	BIT_VEC cppVar_39955 = ROM.rd(cppVar_39954);
	bool cppVar_39957 = (cppVar_39955 == 139);
	BIT_VEC cppVar_39958 = PC + 1;
	cppVar_39958 = (cppVar_39958 & cppMask_un_16_);
	BIT_VEC cppVar_39959 = ROM.rd(cppVar_39958);
	bool cppVar_39961 = (cppVar_39959 == 141);
	BIT_VEC cppVar_39962 = PC + 1;
	cppVar_39962 = (cppVar_39962 & cppMask_un_16_);
	BIT_VEC cppVar_39963 = ROM.rd(cppVar_39962);
	bool cppVar_39965 = (cppVar_39963 == 144);
	BIT_VEC cppVar_39966 = PC + 1;
	cppVar_39966 = (cppVar_39966 & cppMask_un_16_);
	BIT_VEC cppVar_39967 = ROM.rd(cppVar_39966);
	bool cppVar_39969 = (cppVar_39967 == 152);
	BIT_VEC cppVar_39970 = PC + 1;
	cppVar_39970 = (cppVar_39970 & cppMask_un_16_);
	BIT_VEC cppVar_39971 = ROM.rd(cppVar_39970);
	bool cppVar_39973 = (cppVar_39971 == 153);
	BIT_VEC cppVar_39974 = PC + 1;
	cppVar_39974 = (cppVar_39974 & cppMask_un_16_);
	BIT_VEC cppVar_39975 = ROM.rd(cppVar_39974);
	bool cppVar_39977 = (cppVar_39975 == 160);
	BIT_VEC cppVar_39978 = PC + 1;
	cppVar_39978 = (cppVar_39978 & cppMask_un_16_);
	BIT_VEC cppVar_39979 = ROM.rd(cppVar_39978);
	bool cppVar_39981 = (cppVar_39979 == 168);
	BIT_VEC cppVar_39982 = PC + 1;
	cppVar_39982 = (cppVar_39982 & cppMask_un_16_);
	BIT_VEC cppVar_39983 = ROM.rd(cppVar_39982);
	bool cppVar_39985 = (cppVar_39983 == 176);
	BIT_VEC cppVar_39986 = PC + 1;
	cppVar_39986 = (cppVar_39986 & cppMask_un_16_);
	BIT_VEC cppVar_39987 = ROM.rd(cppVar_39986);
	bool cppVar_39989 = (cppVar_39987 == 184);
	BIT_VEC cppVar_39990 = PC + 1;
	cppVar_39990 = (cppVar_39990 & cppMask_un_16_);
	BIT_VEC cppVar_39991 = ROM.rd(cppVar_39990);
	bool cppVar_39993 = (cppVar_39991 == 208);
	BIT_VEC cppVar_39994 = PC + 1;
	cppVar_39994 = (cppVar_39994 & cppMask_un_16_);
	BIT_VEC cppVar_39995 = ROM.rd(cppVar_39994);
	bool cppVar_39997 = (cppVar_39995 == 224);
	BIT_VEC cppVar_39998 = PC + 1;
	cppVar_39998 = (cppVar_39998 & cppMask_un_16_);
	BIT_VEC cppVar_39999 = ROM.rd(cppVar_39998);
	bool cppVar_40001 = (cppVar_39999 == 240);
	BIT_VEC cppVar_40003 = (cppVar_40001) ? B : 0;
	BIT_VEC cppVar_40004 = (cppVar_39997) ? ACC : cppVar_40003;
	BIT_VEC cppVar_40005 = (cppVar_39993) ? PSW : cppVar_40004;
	BIT_VEC cppVar_40006 = (cppVar_39989) ? IP : cppVar_40005;
	BIT_VEC cppVar_40007 = (cppVar_39985) ? P3 : cppVar_40006;
	BIT_VEC cppVar_40008 = (cppVar_39981) ? IE : cppVar_40007;
	BIT_VEC cppVar_40009 = (cppVar_39977) ? P2 : cppVar_40008;
	BIT_VEC cppVar_40010 = (cppVar_39973) ? SBUF : cppVar_40009;
	BIT_VEC cppVar_40011 = (cppVar_39969) ? SCON : cppVar_40010;
	BIT_VEC cppVar_40012 = (cppVar_39965) ? P1 : cppVar_40011;
	BIT_VEC cppVar_40013 = (cppVar_39961) ? TH1 : cppVar_40012;
	BIT_VEC cppVar_40014 = (cppVar_39957) ? TL1 : cppVar_40013;
	BIT_VEC cppVar_40015 = (cppVar_39953) ? TH0 : cppVar_40014;
	BIT_VEC cppVar_40016 = (cppVar_39949) ? TL0 : cppVar_40015;
	BIT_VEC cppVar_40017 = (cppVar_39945) ? TMOD : cppVar_40016;
	BIT_VEC cppVar_40018 = (cppVar_39941) ? TCON : cppVar_40017;
	BIT_VEC cppVar_40019 = (cppVar_39937) ? PCON : cppVar_40018;
	BIT_VEC cppVar_40020 = (cppVar_39933) ? DPH : cppVar_40019;
	BIT_VEC cppVar_40021 = (cppVar_39929) ? DPL : cppVar_40020;
	BIT_VEC cppVar_40022 = (cppVar_39925) ? SP : cppVar_40021;
	BIT_VEC cppVar_40023 = (cppVar_39921) ? P0 : cppVar_40022;
	BIT_VEC cppVar_40024 = (cppVar_39914) ? cppVar_39917 : cppVar_40023;
	BIT_VEC cppVar_40025 = cppVar_40024 | ACC;
	BIT_VEC cppVar_40026 = (cppVar_39909) ? cppVar_40025 : P3;
	BIT_VEC cppVar_40027 = ROM.rd(PC);
	bool cppVar_40029 = (cppVar_40027 == 213);
	BIT_VEC cppVar_40030 = ROM.rd(PC);
	bool cppVar_40032 = (cppVar_40030 == 21);
	bool cppVar_40033 = cppVar_40029 || cppVar_40032;
	BIT_VEC cppVar_40035 = PC + 1;
	cppVar_40035 = (cppVar_40035 & cppMask_un_16_);
	BIT_VEC cppVar_40036 = ROM.rd(cppVar_40035);
	bool cppVar_40038 = (cppVar_40036 == 176);
	BIT_VEC cppVar_40039 = PC + 1;
	cppVar_40039 = (cppVar_40039 & cppMask_un_16_);
	BIT_VEC cppVar_40040 = ROM.rd(cppVar_40039);
	BIT_VEC cppVar_40041 = (cppVar_40040 >> 7) & cppMask_un_1_;
	bool cppVar_40043 = (cppVar_40041 == 0);
	BIT_VEC cppVar_40044 = PC + 1;
	cppVar_40044 = (cppVar_40044 & cppMask_un_16_);
	BIT_VEC cppVar_40045 = ROM.rd(cppVar_40044);
	BIT_VEC cppVar_40046 = IRAM.rd(cppVar_40045);
	BIT_VEC cppVar_40047 = PC + 1;
	cppVar_40047 = (cppVar_40047 & cppMask_un_16_);
	BIT_VEC cppVar_40048 = ROM.rd(cppVar_40047);
	bool cppVar_40050 = (cppVar_40048 == 128);
	BIT_VEC cppVar_40051 = PC + 1;
	cppVar_40051 = (cppVar_40051 & cppMask_un_16_);
	BIT_VEC cppVar_40052 = ROM.rd(cppVar_40051);
	bool cppVar_40054 = (cppVar_40052 == 129);
	BIT_VEC cppVar_40055 = PC + 1;
	cppVar_40055 = (cppVar_40055 & cppMask_un_16_);
	BIT_VEC cppVar_40056 = ROM.rd(cppVar_40055);
	bool cppVar_40058 = (cppVar_40056 == 130);
	BIT_VEC cppVar_40059 = PC + 1;
	cppVar_40059 = (cppVar_40059 & cppMask_un_16_);
	BIT_VEC cppVar_40060 = ROM.rd(cppVar_40059);
	bool cppVar_40062 = (cppVar_40060 == 131);
	BIT_VEC cppVar_40063 = PC + 1;
	cppVar_40063 = (cppVar_40063 & cppMask_un_16_);
	BIT_VEC cppVar_40064 = ROM.rd(cppVar_40063);
	bool cppVar_40066 = (cppVar_40064 == 135);
	BIT_VEC cppVar_40067 = PC + 1;
	cppVar_40067 = (cppVar_40067 & cppMask_un_16_);
	BIT_VEC cppVar_40068 = ROM.rd(cppVar_40067);
	bool cppVar_40070 = (cppVar_40068 == 136);
	BIT_VEC cppVar_40071 = PC + 1;
	cppVar_40071 = (cppVar_40071 & cppMask_un_16_);
	BIT_VEC cppVar_40072 = ROM.rd(cppVar_40071);
	bool cppVar_40074 = (cppVar_40072 == 137);
	BIT_VEC cppVar_40075 = PC + 1;
	cppVar_40075 = (cppVar_40075 & cppMask_un_16_);
	BIT_VEC cppVar_40076 = ROM.rd(cppVar_40075);
	bool cppVar_40078 = (cppVar_40076 == 138);
	BIT_VEC cppVar_40079 = PC + 1;
	cppVar_40079 = (cppVar_40079 & cppMask_un_16_);
	BIT_VEC cppVar_40080 = ROM.rd(cppVar_40079);
	bool cppVar_40082 = (cppVar_40080 == 140);
	BIT_VEC cppVar_40083 = PC + 1;
	cppVar_40083 = (cppVar_40083 & cppMask_un_16_);
	BIT_VEC cppVar_40084 = ROM.rd(cppVar_40083);
	bool cppVar_40086 = (cppVar_40084 == 139);
	BIT_VEC cppVar_40087 = PC + 1;
	cppVar_40087 = (cppVar_40087 & cppMask_un_16_);
	BIT_VEC cppVar_40088 = ROM.rd(cppVar_40087);
	bool cppVar_40090 = (cppVar_40088 == 141);
	BIT_VEC cppVar_40091 = PC + 1;
	cppVar_40091 = (cppVar_40091 & cppMask_un_16_);
	BIT_VEC cppVar_40092 = ROM.rd(cppVar_40091);
	bool cppVar_40094 = (cppVar_40092 == 144);
	BIT_VEC cppVar_40095 = PC + 1;
	cppVar_40095 = (cppVar_40095 & cppMask_un_16_);
	BIT_VEC cppVar_40096 = ROM.rd(cppVar_40095);
	bool cppVar_40098 = (cppVar_40096 == 152);
	BIT_VEC cppVar_40099 = PC + 1;
	cppVar_40099 = (cppVar_40099 & cppMask_un_16_);
	BIT_VEC cppVar_40100 = ROM.rd(cppVar_40099);
	bool cppVar_40102 = (cppVar_40100 == 153);
	BIT_VEC cppVar_40103 = PC + 1;
	cppVar_40103 = (cppVar_40103 & cppMask_un_16_);
	BIT_VEC cppVar_40104 = ROM.rd(cppVar_40103);
	bool cppVar_40106 = (cppVar_40104 == 160);
	BIT_VEC cppVar_40107 = PC + 1;
	cppVar_40107 = (cppVar_40107 & cppMask_un_16_);
	BIT_VEC cppVar_40108 = ROM.rd(cppVar_40107);
	bool cppVar_40110 = (cppVar_40108 == 168);
	BIT_VEC cppVar_40111 = PC + 1;
	cppVar_40111 = (cppVar_40111 & cppMask_un_16_);
	BIT_VEC cppVar_40112 = ROM.rd(cppVar_40111);
	bool cppVar_40114 = (cppVar_40112 == 176);
	BIT_VEC cppVar_40115 = PC + 1;
	cppVar_40115 = (cppVar_40115 & cppMask_un_16_);
	BIT_VEC cppVar_40116 = ROM.rd(cppVar_40115);
	bool cppVar_40118 = (cppVar_40116 == 184);
	BIT_VEC cppVar_40119 = PC + 1;
	cppVar_40119 = (cppVar_40119 & cppMask_un_16_);
	BIT_VEC cppVar_40120 = ROM.rd(cppVar_40119);
	bool cppVar_40122 = (cppVar_40120 == 208);
	BIT_VEC cppVar_40123 = PC + 1;
	cppVar_40123 = (cppVar_40123 & cppMask_un_16_);
	BIT_VEC cppVar_40124 = ROM.rd(cppVar_40123);
	bool cppVar_40126 = (cppVar_40124 == 224);
	BIT_VEC cppVar_40127 = PC + 1;
	cppVar_40127 = (cppVar_40127 & cppMask_un_16_);
	BIT_VEC cppVar_40128 = ROM.rd(cppVar_40127);
	bool cppVar_40130 = (cppVar_40128 == 240);
	BIT_VEC cppVar_40132 = (cppVar_40130) ? B : 0;
	BIT_VEC cppVar_40133 = (cppVar_40126) ? ACC : cppVar_40132;
	BIT_VEC cppVar_40134 = (cppVar_40122) ? PSW : cppVar_40133;
	BIT_VEC cppVar_40135 = (cppVar_40118) ? IP : cppVar_40134;
	BIT_VEC cppVar_40136 = (cppVar_40114) ? P3 : cppVar_40135;
	BIT_VEC cppVar_40137 = (cppVar_40110) ? IE : cppVar_40136;
	BIT_VEC cppVar_40138 = (cppVar_40106) ? P2 : cppVar_40137;
	BIT_VEC cppVar_40139 = (cppVar_40102) ? SBUF : cppVar_40138;
	BIT_VEC cppVar_40140 = (cppVar_40098) ? SCON : cppVar_40139;
	BIT_VEC cppVar_40141 = (cppVar_40094) ? P1 : cppVar_40140;
	BIT_VEC cppVar_40142 = (cppVar_40090) ? TH1 : cppVar_40141;
	BIT_VEC cppVar_40143 = (cppVar_40086) ? TL1 : cppVar_40142;
	BIT_VEC cppVar_40144 = (cppVar_40082) ? TH0 : cppVar_40143;
	BIT_VEC cppVar_40145 = (cppVar_40078) ? TL0 : cppVar_40144;
	BIT_VEC cppVar_40146 = (cppVar_40074) ? TMOD : cppVar_40145;
	BIT_VEC cppVar_40147 = (cppVar_40070) ? TCON : cppVar_40146;
	BIT_VEC cppVar_40148 = (cppVar_40066) ? PCON : cppVar_40147;
	BIT_VEC cppVar_40149 = (cppVar_40062) ? DPH : cppVar_40148;
	BIT_VEC cppVar_40150 = (cppVar_40058) ? DPL : cppVar_40149;
	BIT_VEC cppVar_40151 = (cppVar_40054) ? SP : cppVar_40150;
	BIT_VEC cppVar_40152 = (cppVar_40050) ? P0 : cppVar_40151;
	BIT_VEC cppVar_40153 = (cppVar_40043) ? cppVar_40046 : cppVar_40152;
	BIT_VEC cppVar_40155 = cppVar_40153 - 1;
	cppVar_40155 = (cppVar_40155 & cppMask_un_8_);
	BIT_VEC cppVar_40156 = (cppVar_40038) ? cppVar_40155 : P3;
	BIT_VEC cppVar_40157 = ROM.rd(PC);
	bool cppVar_40159 = (cppVar_40157 == 194);
	BIT_VEC cppVar_40160 = ROM.rd(PC);
	bool cppVar_40162 = (cppVar_40160 == 16);
	bool cppVar_40163 = cppVar_40159 || cppVar_40162;
	BIT_VEC cppVar_40165 = PC + 1;
	cppVar_40165 = (cppVar_40165 & cppMask_un_16_);
	BIT_VEC cppVar_40166 = ROM.rd(cppVar_40165);
	BIT_VEC cppVar_40167 = (cppVar_40166 >> 7) & cppMask_un_1_;
	bool cppVar_40169 = (cppVar_40167 == 1);
	BIT_VEC cppVar_40170 = PC + 1;
	cppVar_40170 = (cppVar_40170 & cppMask_un_16_);
	BIT_VEC cppVar_40171 = ROM.rd(cppVar_40170);
	BIT_VEC cppVar_40172 = (cppVar_40171 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40174 = (cppVar_40172 << 3) | 0;
	cppVar_40174 = (cppVar_40174 & cppMask_un_8_);
	BIT_VEC cppVar_40175 = PC + 1;
	cppVar_40175 = (cppVar_40175 & cppMask_un_16_);
	BIT_VEC cppVar_40176 = ROM.rd(cppVar_40175);
	BIT_VEC cppVar_40177 = (cppVar_40176 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40178 = (cppVar_40177 & cppMask_un_5_);
	BIT_VEC cppVar_40180 = cppVar_40178 + 32;
	cppVar_40180 = (cppVar_40180 & cppMask_un_8_);
	BIT_VEC cppVar_40181 = (cppVar_40169) ? cppVar_40174 : cppVar_40180;
	bool cppVar_40183 = (cppVar_40181 == 176);
	BIT_VEC cppVar_40185 = PC + 1;
	cppVar_40185 = (cppVar_40185 & cppMask_un_16_);
	BIT_VEC cppVar_40186 = ROM.rd(cppVar_40185);
	BIT_VEC cppVar_40187 = (cppVar_40186 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_40188 = (cppVar_40187 & cppMask_un_3_);
	BIT_VEC cppVar_40189 = 1 << static_cast<unsigned>(cppVar_40188);
	cppVar_40189 = (cppVar_40189 & cppMask_un_8_);
	BIT_VEC cppVar_40190 = ~cppVar_40189;
	BIT_VEC cppVar_40191 = PC + 1;
	cppVar_40191 = (cppVar_40191 & cppMask_un_16_);
	BIT_VEC cppVar_40192 = ROM.rd(cppVar_40191);
	BIT_VEC cppVar_40193 = (cppVar_40192 >> 7) & cppMask_un_1_;
	bool cppVar_40194 = (cppVar_40193 == 1);
	BIT_VEC cppVar_40195 = PC + 1;
	cppVar_40195 = (cppVar_40195 & cppMask_un_16_);
	BIT_VEC cppVar_40196 = ROM.rd(cppVar_40195);
	BIT_VEC cppVar_40197 = (cppVar_40196 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40198 = (cppVar_40197 << 3) | 0;
	cppVar_40198 = (cppVar_40198 & cppMask_un_8_);
	BIT_VEC cppVar_40199 = PC + 1;
	cppVar_40199 = (cppVar_40199 & cppMask_un_16_);
	BIT_VEC cppVar_40200 = ROM.rd(cppVar_40199);
	BIT_VEC cppVar_40201 = (cppVar_40200 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40202 = (cppVar_40201 & cppMask_un_5_);
	BIT_VEC cppVar_40203 = cppVar_40202 + 32;
	cppVar_40203 = (cppVar_40203 & cppMask_un_8_);
	BIT_VEC cppVar_40204 = (cppVar_40194) ? cppVar_40198 : cppVar_40203;
	BIT_VEC cppVar_40205 = (cppVar_40204 >> 7) & cppMask_un_1_;
	bool cppVar_40207 = (cppVar_40205 == 0);
	BIT_VEC cppVar_40208 = PC + 1;
	cppVar_40208 = (cppVar_40208 & cppMask_un_16_);
	BIT_VEC cppVar_40209 = ROM.rd(cppVar_40208);
	BIT_VEC cppVar_40210 = (cppVar_40209 >> 7) & cppMask_un_1_;
	bool cppVar_40211 = (cppVar_40210 == 1);
	BIT_VEC cppVar_40212 = PC + 1;
	cppVar_40212 = (cppVar_40212 & cppMask_un_16_);
	BIT_VEC cppVar_40213 = ROM.rd(cppVar_40212);
	BIT_VEC cppVar_40214 = (cppVar_40213 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40215 = (cppVar_40214 << 3) | 0;
	cppVar_40215 = (cppVar_40215 & cppMask_un_8_);
	BIT_VEC cppVar_40216 = PC + 1;
	cppVar_40216 = (cppVar_40216 & cppMask_un_16_);
	BIT_VEC cppVar_40217 = ROM.rd(cppVar_40216);
	BIT_VEC cppVar_40218 = (cppVar_40217 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40219 = (cppVar_40218 & cppMask_un_5_);
	BIT_VEC cppVar_40220 = cppVar_40219 + 32;
	cppVar_40220 = (cppVar_40220 & cppMask_un_8_);
	BIT_VEC cppVar_40221 = (cppVar_40211) ? cppVar_40215 : cppVar_40220;
	BIT_VEC cppVar_40222 = IRAM.rd(cppVar_40221);
	BIT_VEC cppVar_40223 = PC + 1;
	cppVar_40223 = (cppVar_40223 & cppMask_un_16_);
	BIT_VEC cppVar_40224 = ROM.rd(cppVar_40223);
	BIT_VEC cppVar_40225 = (cppVar_40224 >> 7) & cppMask_un_1_;
	bool cppVar_40226 = (cppVar_40225 == 1);
	BIT_VEC cppVar_40227 = PC + 1;
	cppVar_40227 = (cppVar_40227 & cppMask_un_16_);
	BIT_VEC cppVar_40228 = ROM.rd(cppVar_40227);
	BIT_VEC cppVar_40229 = (cppVar_40228 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40230 = (cppVar_40229 << 3) | 0;
	cppVar_40230 = (cppVar_40230 & cppMask_un_8_);
	BIT_VEC cppVar_40231 = PC + 1;
	cppVar_40231 = (cppVar_40231 & cppMask_un_16_);
	BIT_VEC cppVar_40232 = ROM.rd(cppVar_40231);
	BIT_VEC cppVar_40233 = (cppVar_40232 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40234 = (cppVar_40233 & cppMask_un_5_);
	BIT_VEC cppVar_40235 = cppVar_40234 + 32;
	cppVar_40235 = (cppVar_40235 & cppMask_un_8_);
	BIT_VEC cppVar_40236 = (cppVar_40226) ? cppVar_40230 : cppVar_40235;
	bool cppVar_40238 = (cppVar_40236 == 128);
	BIT_VEC cppVar_40239 = PC + 1;
	cppVar_40239 = (cppVar_40239 & cppMask_un_16_);
	BIT_VEC cppVar_40240 = ROM.rd(cppVar_40239);
	BIT_VEC cppVar_40241 = (cppVar_40240 >> 7) & cppMask_un_1_;
	bool cppVar_40242 = (cppVar_40241 == 1);
	BIT_VEC cppVar_40243 = PC + 1;
	cppVar_40243 = (cppVar_40243 & cppMask_un_16_);
	BIT_VEC cppVar_40244 = ROM.rd(cppVar_40243);
	BIT_VEC cppVar_40245 = (cppVar_40244 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40246 = (cppVar_40245 << 3) | 0;
	cppVar_40246 = (cppVar_40246 & cppMask_un_8_);
	BIT_VEC cppVar_40247 = PC + 1;
	cppVar_40247 = (cppVar_40247 & cppMask_un_16_);
	BIT_VEC cppVar_40248 = ROM.rd(cppVar_40247);
	BIT_VEC cppVar_40249 = (cppVar_40248 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40250 = (cppVar_40249 & cppMask_un_5_);
	BIT_VEC cppVar_40251 = cppVar_40250 + 32;
	cppVar_40251 = (cppVar_40251 & cppMask_un_8_);
	BIT_VEC cppVar_40252 = (cppVar_40242) ? cppVar_40246 : cppVar_40251;
	bool cppVar_40254 = (cppVar_40252 == 129);
	BIT_VEC cppVar_40255 = PC + 1;
	cppVar_40255 = (cppVar_40255 & cppMask_un_16_);
	BIT_VEC cppVar_40256 = ROM.rd(cppVar_40255);
	BIT_VEC cppVar_40257 = (cppVar_40256 >> 7) & cppMask_un_1_;
	bool cppVar_40258 = (cppVar_40257 == 1);
	BIT_VEC cppVar_40259 = PC + 1;
	cppVar_40259 = (cppVar_40259 & cppMask_un_16_);
	BIT_VEC cppVar_40260 = ROM.rd(cppVar_40259);
	BIT_VEC cppVar_40261 = (cppVar_40260 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40262 = (cppVar_40261 << 3) | 0;
	cppVar_40262 = (cppVar_40262 & cppMask_un_8_);
	BIT_VEC cppVar_40263 = PC + 1;
	cppVar_40263 = (cppVar_40263 & cppMask_un_16_);
	BIT_VEC cppVar_40264 = ROM.rd(cppVar_40263);
	BIT_VEC cppVar_40265 = (cppVar_40264 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40266 = (cppVar_40265 & cppMask_un_5_);
	BIT_VEC cppVar_40267 = cppVar_40266 + 32;
	cppVar_40267 = (cppVar_40267 & cppMask_un_8_);
	BIT_VEC cppVar_40268 = (cppVar_40258) ? cppVar_40262 : cppVar_40267;
	bool cppVar_40270 = (cppVar_40268 == 130);
	BIT_VEC cppVar_40271 = PC + 1;
	cppVar_40271 = (cppVar_40271 & cppMask_un_16_);
	BIT_VEC cppVar_40272 = ROM.rd(cppVar_40271);
	BIT_VEC cppVar_40273 = (cppVar_40272 >> 7) & cppMask_un_1_;
	bool cppVar_40274 = (cppVar_40273 == 1);
	BIT_VEC cppVar_40275 = PC + 1;
	cppVar_40275 = (cppVar_40275 & cppMask_un_16_);
	BIT_VEC cppVar_40276 = ROM.rd(cppVar_40275);
	BIT_VEC cppVar_40277 = (cppVar_40276 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40278 = (cppVar_40277 << 3) | 0;
	cppVar_40278 = (cppVar_40278 & cppMask_un_8_);
	BIT_VEC cppVar_40279 = PC + 1;
	cppVar_40279 = (cppVar_40279 & cppMask_un_16_);
	BIT_VEC cppVar_40280 = ROM.rd(cppVar_40279);
	BIT_VEC cppVar_40281 = (cppVar_40280 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40282 = (cppVar_40281 & cppMask_un_5_);
	BIT_VEC cppVar_40283 = cppVar_40282 + 32;
	cppVar_40283 = (cppVar_40283 & cppMask_un_8_);
	BIT_VEC cppVar_40284 = (cppVar_40274) ? cppVar_40278 : cppVar_40283;
	bool cppVar_40286 = (cppVar_40284 == 131);
	BIT_VEC cppVar_40287 = PC + 1;
	cppVar_40287 = (cppVar_40287 & cppMask_un_16_);
	BIT_VEC cppVar_40288 = ROM.rd(cppVar_40287);
	BIT_VEC cppVar_40289 = (cppVar_40288 >> 7) & cppMask_un_1_;
	bool cppVar_40290 = (cppVar_40289 == 1);
	BIT_VEC cppVar_40291 = PC + 1;
	cppVar_40291 = (cppVar_40291 & cppMask_un_16_);
	BIT_VEC cppVar_40292 = ROM.rd(cppVar_40291);
	BIT_VEC cppVar_40293 = (cppVar_40292 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40294 = (cppVar_40293 << 3) | 0;
	cppVar_40294 = (cppVar_40294 & cppMask_un_8_);
	BIT_VEC cppVar_40295 = PC + 1;
	cppVar_40295 = (cppVar_40295 & cppMask_un_16_);
	BIT_VEC cppVar_40296 = ROM.rd(cppVar_40295);
	BIT_VEC cppVar_40297 = (cppVar_40296 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40298 = (cppVar_40297 & cppMask_un_5_);
	BIT_VEC cppVar_40299 = cppVar_40298 + 32;
	cppVar_40299 = (cppVar_40299 & cppMask_un_8_);
	BIT_VEC cppVar_40300 = (cppVar_40290) ? cppVar_40294 : cppVar_40299;
	bool cppVar_40302 = (cppVar_40300 == 135);
	BIT_VEC cppVar_40303 = PC + 1;
	cppVar_40303 = (cppVar_40303 & cppMask_un_16_);
	BIT_VEC cppVar_40304 = ROM.rd(cppVar_40303);
	BIT_VEC cppVar_40305 = (cppVar_40304 >> 7) & cppMask_un_1_;
	bool cppVar_40306 = (cppVar_40305 == 1);
	BIT_VEC cppVar_40307 = PC + 1;
	cppVar_40307 = (cppVar_40307 & cppMask_un_16_);
	BIT_VEC cppVar_40308 = ROM.rd(cppVar_40307);
	BIT_VEC cppVar_40309 = (cppVar_40308 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40310 = (cppVar_40309 << 3) | 0;
	cppVar_40310 = (cppVar_40310 & cppMask_un_8_);
	BIT_VEC cppVar_40311 = PC + 1;
	cppVar_40311 = (cppVar_40311 & cppMask_un_16_);
	BIT_VEC cppVar_40312 = ROM.rd(cppVar_40311);
	BIT_VEC cppVar_40313 = (cppVar_40312 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40314 = (cppVar_40313 & cppMask_un_5_);
	BIT_VEC cppVar_40315 = cppVar_40314 + 32;
	cppVar_40315 = (cppVar_40315 & cppMask_un_8_);
	BIT_VEC cppVar_40316 = (cppVar_40306) ? cppVar_40310 : cppVar_40315;
	bool cppVar_40318 = (cppVar_40316 == 136);
	BIT_VEC cppVar_40319 = PC + 1;
	cppVar_40319 = (cppVar_40319 & cppMask_un_16_);
	BIT_VEC cppVar_40320 = ROM.rd(cppVar_40319);
	BIT_VEC cppVar_40321 = (cppVar_40320 >> 7) & cppMask_un_1_;
	bool cppVar_40322 = (cppVar_40321 == 1);
	BIT_VEC cppVar_40323 = PC + 1;
	cppVar_40323 = (cppVar_40323 & cppMask_un_16_);
	BIT_VEC cppVar_40324 = ROM.rd(cppVar_40323);
	BIT_VEC cppVar_40325 = (cppVar_40324 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40326 = (cppVar_40325 << 3) | 0;
	cppVar_40326 = (cppVar_40326 & cppMask_un_8_);
	BIT_VEC cppVar_40327 = PC + 1;
	cppVar_40327 = (cppVar_40327 & cppMask_un_16_);
	BIT_VEC cppVar_40328 = ROM.rd(cppVar_40327);
	BIT_VEC cppVar_40329 = (cppVar_40328 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40330 = (cppVar_40329 & cppMask_un_5_);
	BIT_VEC cppVar_40331 = cppVar_40330 + 32;
	cppVar_40331 = (cppVar_40331 & cppMask_un_8_);
	BIT_VEC cppVar_40332 = (cppVar_40322) ? cppVar_40326 : cppVar_40331;
	bool cppVar_40334 = (cppVar_40332 == 137);
	BIT_VEC cppVar_40335 = PC + 1;
	cppVar_40335 = (cppVar_40335 & cppMask_un_16_);
	BIT_VEC cppVar_40336 = ROM.rd(cppVar_40335);
	BIT_VEC cppVar_40337 = (cppVar_40336 >> 7) & cppMask_un_1_;
	bool cppVar_40338 = (cppVar_40337 == 1);
	BIT_VEC cppVar_40339 = PC + 1;
	cppVar_40339 = (cppVar_40339 & cppMask_un_16_);
	BIT_VEC cppVar_40340 = ROM.rd(cppVar_40339);
	BIT_VEC cppVar_40341 = (cppVar_40340 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40342 = (cppVar_40341 << 3) | 0;
	cppVar_40342 = (cppVar_40342 & cppMask_un_8_);
	BIT_VEC cppVar_40343 = PC + 1;
	cppVar_40343 = (cppVar_40343 & cppMask_un_16_);
	BIT_VEC cppVar_40344 = ROM.rd(cppVar_40343);
	BIT_VEC cppVar_40345 = (cppVar_40344 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40346 = (cppVar_40345 & cppMask_un_5_);
	BIT_VEC cppVar_40347 = cppVar_40346 + 32;
	cppVar_40347 = (cppVar_40347 & cppMask_un_8_);
	BIT_VEC cppVar_40348 = (cppVar_40338) ? cppVar_40342 : cppVar_40347;
	bool cppVar_40350 = (cppVar_40348 == 138);
	BIT_VEC cppVar_40351 = PC + 1;
	cppVar_40351 = (cppVar_40351 & cppMask_un_16_);
	BIT_VEC cppVar_40352 = ROM.rd(cppVar_40351);
	BIT_VEC cppVar_40353 = (cppVar_40352 >> 7) & cppMask_un_1_;
	bool cppVar_40354 = (cppVar_40353 == 1);
	BIT_VEC cppVar_40355 = PC + 1;
	cppVar_40355 = (cppVar_40355 & cppMask_un_16_);
	BIT_VEC cppVar_40356 = ROM.rd(cppVar_40355);
	BIT_VEC cppVar_40357 = (cppVar_40356 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40358 = (cppVar_40357 << 3) | 0;
	cppVar_40358 = (cppVar_40358 & cppMask_un_8_);
	BIT_VEC cppVar_40359 = PC + 1;
	cppVar_40359 = (cppVar_40359 & cppMask_un_16_);
	BIT_VEC cppVar_40360 = ROM.rd(cppVar_40359);
	BIT_VEC cppVar_40361 = (cppVar_40360 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40362 = (cppVar_40361 & cppMask_un_5_);
	BIT_VEC cppVar_40363 = cppVar_40362 + 32;
	cppVar_40363 = (cppVar_40363 & cppMask_un_8_);
	BIT_VEC cppVar_40364 = (cppVar_40354) ? cppVar_40358 : cppVar_40363;
	bool cppVar_40366 = (cppVar_40364 == 140);
	BIT_VEC cppVar_40367 = PC + 1;
	cppVar_40367 = (cppVar_40367 & cppMask_un_16_);
	BIT_VEC cppVar_40368 = ROM.rd(cppVar_40367);
	BIT_VEC cppVar_40369 = (cppVar_40368 >> 7) & cppMask_un_1_;
	bool cppVar_40370 = (cppVar_40369 == 1);
	BIT_VEC cppVar_40371 = PC + 1;
	cppVar_40371 = (cppVar_40371 & cppMask_un_16_);
	BIT_VEC cppVar_40372 = ROM.rd(cppVar_40371);
	BIT_VEC cppVar_40373 = (cppVar_40372 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40374 = (cppVar_40373 << 3) | 0;
	cppVar_40374 = (cppVar_40374 & cppMask_un_8_);
	BIT_VEC cppVar_40375 = PC + 1;
	cppVar_40375 = (cppVar_40375 & cppMask_un_16_);
	BIT_VEC cppVar_40376 = ROM.rd(cppVar_40375);
	BIT_VEC cppVar_40377 = (cppVar_40376 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40378 = (cppVar_40377 & cppMask_un_5_);
	BIT_VEC cppVar_40379 = cppVar_40378 + 32;
	cppVar_40379 = (cppVar_40379 & cppMask_un_8_);
	BIT_VEC cppVar_40380 = (cppVar_40370) ? cppVar_40374 : cppVar_40379;
	bool cppVar_40382 = (cppVar_40380 == 139);
	BIT_VEC cppVar_40383 = PC + 1;
	cppVar_40383 = (cppVar_40383 & cppMask_un_16_);
	BIT_VEC cppVar_40384 = ROM.rd(cppVar_40383);
	BIT_VEC cppVar_40385 = (cppVar_40384 >> 7) & cppMask_un_1_;
	bool cppVar_40386 = (cppVar_40385 == 1);
	BIT_VEC cppVar_40387 = PC + 1;
	cppVar_40387 = (cppVar_40387 & cppMask_un_16_);
	BIT_VEC cppVar_40388 = ROM.rd(cppVar_40387);
	BIT_VEC cppVar_40389 = (cppVar_40388 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40390 = (cppVar_40389 << 3) | 0;
	cppVar_40390 = (cppVar_40390 & cppMask_un_8_);
	BIT_VEC cppVar_40391 = PC + 1;
	cppVar_40391 = (cppVar_40391 & cppMask_un_16_);
	BIT_VEC cppVar_40392 = ROM.rd(cppVar_40391);
	BIT_VEC cppVar_40393 = (cppVar_40392 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40394 = (cppVar_40393 & cppMask_un_5_);
	BIT_VEC cppVar_40395 = cppVar_40394 + 32;
	cppVar_40395 = (cppVar_40395 & cppMask_un_8_);
	BIT_VEC cppVar_40396 = (cppVar_40386) ? cppVar_40390 : cppVar_40395;
	bool cppVar_40398 = (cppVar_40396 == 141);
	BIT_VEC cppVar_40399 = PC + 1;
	cppVar_40399 = (cppVar_40399 & cppMask_un_16_);
	BIT_VEC cppVar_40400 = ROM.rd(cppVar_40399);
	BIT_VEC cppVar_40401 = (cppVar_40400 >> 7) & cppMask_un_1_;
	bool cppVar_40402 = (cppVar_40401 == 1);
	BIT_VEC cppVar_40403 = PC + 1;
	cppVar_40403 = (cppVar_40403 & cppMask_un_16_);
	BIT_VEC cppVar_40404 = ROM.rd(cppVar_40403);
	BIT_VEC cppVar_40405 = (cppVar_40404 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40406 = (cppVar_40405 << 3) | 0;
	cppVar_40406 = (cppVar_40406 & cppMask_un_8_);
	BIT_VEC cppVar_40407 = PC + 1;
	cppVar_40407 = (cppVar_40407 & cppMask_un_16_);
	BIT_VEC cppVar_40408 = ROM.rd(cppVar_40407);
	BIT_VEC cppVar_40409 = (cppVar_40408 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40410 = (cppVar_40409 & cppMask_un_5_);
	BIT_VEC cppVar_40411 = cppVar_40410 + 32;
	cppVar_40411 = (cppVar_40411 & cppMask_un_8_);
	BIT_VEC cppVar_40412 = (cppVar_40402) ? cppVar_40406 : cppVar_40411;
	bool cppVar_40414 = (cppVar_40412 == 144);
	BIT_VEC cppVar_40415 = PC + 1;
	cppVar_40415 = (cppVar_40415 & cppMask_un_16_);
	BIT_VEC cppVar_40416 = ROM.rd(cppVar_40415);
	BIT_VEC cppVar_40417 = (cppVar_40416 >> 7) & cppMask_un_1_;
	bool cppVar_40418 = (cppVar_40417 == 1);
	BIT_VEC cppVar_40419 = PC + 1;
	cppVar_40419 = (cppVar_40419 & cppMask_un_16_);
	BIT_VEC cppVar_40420 = ROM.rd(cppVar_40419);
	BIT_VEC cppVar_40421 = (cppVar_40420 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40422 = (cppVar_40421 << 3) | 0;
	cppVar_40422 = (cppVar_40422 & cppMask_un_8_);
	BIT_VEC cppVar_40423 = PC + 1;
	cppVar_40423 = (cppVar_40423 & cppMask_un_16_);
	BIT_VEC cppVar_40424 = ROM.rd(cppVar_40423);
	BIT_VEC cppVar_40425 = (cppVar_40424 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40426 = (cppVar_40425 & cppMask_un_5_);
	BIT_VEC cppVar_40427 = cppVar_40426 + 32;
	cppVar_40427 = (cppVar_40427 & cppMask_un_8_);
	BIT_VEC cppVar_40428 = (cppVar_40418) ? cppVar_40422 : cppVar_40427;
	bool cppVar_40430 = (cppVar_40428 == 152);
	BIT_VEC cppVar_40431 = PC + 1;
	cppVar_40431 = (cppVar_40431 & cppMask_un_16_);
	BIT_VEC cppVar_40432 = ROM.rd(cppVar_40431);
	BIT_VEC cppVar_40433 = (cppVar_40432 >> 7) & cppMask_un_1_;
	bool cppVar_40434 = (cppVar_40433 == 1);
	BIT_VEC cppVar_40435 = PC + 1;
	cppVar_40435 = (cppVar_40435 & cppMask_un_16_);
	BIT_VEC cppVar_40436 = ROM.rd(cppVar_40435);
	BIT_VEC cppVar_40437 = (cppVar_40436 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40438 = (cppVar_40437 << 3) | 0;
	cppVar_40438 = (cppVar_40438 & cppMask_un_8_);
	BIT_VEC cppVar_40439 = PC + 1;
	cppVar_40439 = (cppVar_40439 & cppMask_un_16_);
	BIT_VEC cppVar_40440 = ROM.rd(cppVar_40439);
	BIT_VEC cppVar_40441 = (cppVar_40440 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40442 = (cppVar_40441 & cppMask_un_5_);
	BIT_VEC cppVar_40443 = cppVar_40442 + 32;
	cppVar_40443 = (cppVar_40443 & cppMask_un_8_);
	BIT_VEC cppVar_40444 = (cppVar_40434) ? cppVar_40438 : cppVar_40443;
	bool cppVar_40446 = (cppVar_40444 == 153);
	BIT_VEC cppVar_40447 = PC + 1;
	cppVar_40447 = (cppVar_40447 & cppMask_un_16_);
	BIT_VEC cppVar_40448 = ROM.rd(cppVar_40447);
	BIT_VEC cppVar_40449 = (cppVar_40448 >> 7) & cppMask_un_1_;
	bool cppVar_40450 = (cppVar_40449 == 1);
	BIT_VEC cppVar_40451 = PC + 1;
	cppVar_40451 = (cppVar_40451 & cppMask_un_16_);
	BIT_VEC cppVar_40452 = ROM.rd(cppVar_40451);
	BIT_VEC cppVar_40453 = (cppVar_40452 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40454 = (cppVar_40453 << 3) | 0;
	cppVar_40454 = (cppVar_40454 & cppMask_un_8_);
	BIT_VEC cppVar_40455 = PC + 1;
	cppVar_40455 = (cppVar_40455 & cppMask_un_16_);
	BIT_VEC cppVar_40456 = ROM.rd(cppVar_40455);
	BIT_VEC cppVar_40457 = (cppVar_40456 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40458 = (cppVar_40457 & cppMask_un_5_);
	BIT_VEC cppVar_40459 = cppVar_40458 + 32;
	cppVar_40459 = (cppVar_40459 & cppMask_un_8_);
	BIT_VEC cppVar_40460 = (cppVar_40450) ? cppVar_40454 : cppVar_40459;
	bool cppVar_40462 = (cppVar_40460 == 160);
	BIT_VEC cppVar_40463 = PC + 1;
	cppVar_40463 = (cppVar_40463 & cppMask_un_16_);
	BIT_VEC cppVar_40464 = ROM.rd(cppVar_40463);
	BIT_VEC cppVar_40465 = (cppVar_40464 >> 7) & cppMask_un_1_;
	bool cppVar_40466 = (cppVar_40465 == 1);
	BIT_VEC cppVar_40467 = PC + 1;
	cppVar_40467 = (cppVar_40467 & cppMask_un_16_);
	BIT_VEC cppVar_40468 = ROM.rd(cppVar_40467);
	BIT_VEC cppVar_40469 = (cppVar_40468 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40470 = (cppVar_40469 << 3) | 0;
	cppVar_40470 = (cppVar_40470 & cppMask_un_8_);
	BIT_VEC cppVar_40471 = PC + 1;
	cppVar_40471 = (cppVar_40471 & cppMask_un_16_);
	BIT_VEC cppVar_40472 = ROM.rd(cppVar_40471);
	BIT_VEC cppVar_40473 = (cppVar_40472 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40474 = (cppVar_40473 & cppMask_un_5_);
	BIT_VEC cppVar_40475 = cppVar_40474 + 32;
	cppVar_40475 = (cppVar_40475 & cppMask_un_8_);
	BIT_VEC cppVar_40476 = (cppVar_40466) ? cppVar_40470 : cppVar_40475;
	bool cppVar_40478 = (cppVar_40476 == 168);
	BIT_VEC cppVar_40479 = PC + 1;
	cppVar_40479 = (cppVar_40479 & cppMask_un_16_);
	BIT_VEC cppVar_40480 = ROM.rd(cppVar_40479);
	BIT_VEC cppVar_40481 = (cppVar_40480 >> 7) & cppMask_un_1_;
	bool cppVar_40482 = (cppVar_40481 == 1);
	BIT_VEC cppVar_40483 = PC + 1;
	cppVar_40483 = (cppVar_40483 & cppMask_un_16_);
	BIT_VEC cppVar_40484 = ROM.rd(cppVar_40483);
	BIT_VEC cppVar_40485 = (cppVar_40484 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40486 = (cppVar_40485 << 3) | 0;
	cppVar_40486 = (cppVar_40486 & cppMask_un_8_);
	BIT_VEC cppVar_40487 = PC + 1;
	cppVar_40487 = (cppVar_40487 & cppMask_un_16_);
	BIT_VEC cppVar_40488 = ROM.rd(cppVar_40487);
	BIT_VEC cppVar_40489 = (cppVar_40488 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40490 = (cppVar_40489 & cppMask_un_5_);
	BIT_VEC cppVar_40491 = cppVar_40490 + 32;
	cppVar_40491 = (cppVar_40491 & cppMask_un_8_);
	BIT_VEC cppVar_40492 = (cppVar_40482) ? cppVar_40486 : cppVar_40491;
	bool cppVar_40494 = (cppVar_40492 == 176);
	BIT_VEC cppVar_40495 = PC + 1;
	cppVar_40495 = (cppVar_40495 & cppMask_un_16_);
	BIT_VEC cppVar_40496 = ROM.rd(cppVar_40495);
	BIT_VEC cppVar_40497 = (cppVar_40496 >> 7) & cppMask_un_1_;
	bool cppVar_40498 = (cppVar_40497 == 1);
	BIT_VEC cppVar_40499 = PC + 1;
	cppVar_40499 = (cppVar_40499 & cppMask_un_16_);
	BIT_VEC cppVar_40500 = ROM.rd(cppVar_40499);
	BIT_VEC cppVar_40501 = (cppVar_40500 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40502 = (cppVar_40501 << 3) | 0;
	cppVar_40502 = (cppVar_40502 & cppMask_un_8_);
	BIT_VEC cppVar_40503 = PC + 1;
	cppVar_40503 = (cppVar_40503 & cppMask_un_16_);
	BIT_VEC cppVar_40504 = ROM.rd(cppVar_40503);
	BIT_VEC cppVar_40505 = (cppVar_40504 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40506 = (cppVar_40505 & cppMask_un_5_);
	BIT_VEC cppVar_40507 = cppVar_40506 + 32;
	cppVar_40507 = (cppVar_40507 & cppMask_un_8_);
	BIT_VEC cppVar_40508 = (cppVar_40498) ? cppVar_40502 : cppVar_40507;
	bool cppVar_40510 = (cppVar_40508 == 184);
	BIT_VEC cppVar_40511 = PC + 1;
	cppVar_40511 = (cppVar_40511 & cppMask_un_16_);
	BIT_VEC cppVar_40512 = ROM.rd(cppVar_40511);
	BIT_VEC cppVar_40513 = (cppVar_40512 >> 7) & cppMask_un_1_;
	bool cppVar_40514 = (cppVar_40513 == 1);
	BIT_VEC cppVar_40515 = PC + 1;
	cppVar_40515 = (cppVar_40515 & cppMask_un_16_);
	BIT_VEC cppVar_40516 = ROM.rd(cppVar_40515);
	BIT_VEC cppVar_40517 = (cppVar_40516 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40518 = (cppVar_40517 << 3) | 0;
	cppVar_40518 = (cppVar_40518 & cppMask_un_8_);
	BIT_VEC cppVar_40519 = PC + 1;
	cppVar_40519 = (cppVar_40519 & cppMask_un_16_);
	BIT_VEC cppVar_40520 = ROM.rd(cppVar_40519);
	BIT_VEC cppVar_40521 = (cppVar_40520 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40522 = (cppVar_40521 & cppMask_un_5_);
	BIT_VEC cppVar_40523 = cppVar_40522 + 32;
	cppVar_40523 = (cppVar_40523 & cppMask_un_8_);
	BIT_VEC cppVar_40524 = (cppVar_40514) ? cppVar_40518 : cppVar_40523;
	bool cppVar_40526 = (cppVar_40524 == 208);
	BIT_VEC cppVar_40527 = PC + 1;
	cppVar_40527 = (cppVar_40527 & cppMask_un_16_);
	BIT_VEC cppVar_40528 = ROM.rd(cppVar_40527);
	BIT_VEC cppVar_40529 = (cppVar_40528 >> 7) & cppMask_un_1_;
	bool cppVar_40530 = (cppVar_40529 == 1);
	BIT_VEC cppVar_40531 = PC + 1;
	cppVar_40531 = (cppVar_40531 & cppMask_un_16_);
	BIT_VEC cppVar_40532 = ROM.rd(cppVar_40531);
	BIT_VEC cppVar_40533 = (cppVar_40532 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40534 = (cppVar_40533 << 3) | 0;
	cppVar_40534 = (cppVar_40534 & cppMask_un_8_);
	BIT_VEC cppVar_40535 = PC + 1;
	cppVar_40535 = (cppVar_40535 & cppMask_un_16_);
	BIT_VEC cppVar_40536 = ROM.rd(cppVar_40535);
	BIT_VEC cppVar_40537 = (cppVar_40536 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40538 = (cppVar_40537 & cppMask_un_5_);
	BIT_VEC cppVar_40539 = cppVar_40538 + 32;
	cppVar_40539 = (cppVar_40539 & cppMask_un_8_);
	BIT_VEC cppVar_40540 = (cppVar_40530) ? cppVar_40534 : cppVar_40539;
	bool cppVar_40542 = (cppVar_40540 == 224);
	BIT_VEC cppVar_40543 = PC + 1;
	cppVar_40543 = (cppVar_40543 & cppMask_un_16_);
	BIT_VEC cppVar_40544 = ROM.rd(cppVar_40543);
	BIT_VEC cppVar_40545 = (cppVar_40544 >> 7) & cppMask_un_1_;
	bool cppVar_40546 = (cppVar_40545 == 1);
	BIT_VEC cppVar_40547 = PC + 1;
	cppVar_40547 = (cppVar_40547 & cppMask_un_16_);
	BIT_VEC cppVar_40548 = ROM.rd(cppVar_40547);
	BIT_VEC cppVar_40549 = (cppVar_40548 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40550 = (cppVar_40549 << 3) | 0;
	cppVar_40550 = (cppVar_40550 & cppMask_un_8_);
	BIT_VEC cppVar_40551 = PC + 1;
	cppVar_40551 = (cppVar_40551 & cppMask_un_16_);
	BIT_VEC cppVar_40552 = ROM.rd(cppVar_40551);
	BIT_VEC cppVar_40553 = (cppVar_40552 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_40554 = (cppVar_40553 & cppMask_un_5_);
	BIT_VEC cppVar_40555 = cppVar_40554 + 32;
	cppVar_40555 = (cppVar_40555 & cppMask_un_8_);
	BIT_VEC cppVar_40556 = (cppVar_40546) ? cppVar_40550 : cppVar_40555;
	bool cppVar_40558 = (cppVar_40556 == 240);
	BIT_VEC cppVar_40560 = (cppVar_40558) ? B : 0;
	BIT_VEC cppVar_40561 = (cppVar_40542) ? ACC : cppVar_40560;
	BIT_VEC cppVar_40562 = (cppVar_40526) ? PSW : cppVar_40561;
	BIT_VEC cppVar_40563 = (cppVar_40510) ? IP : cppVar_40562;
	BIT_VEC cppVar_40564 = (cppVar_40494) ? P3 : cppVar_40563;
	BIT_VEC cppVar_40565 = (cppVar_40478) ? IE : cppVar_40564;
	BIT_VEC cppVar_40566 = (cppVar_40462) ? P2 : cppVar_40565;
	BIT_VEC cppVar_40567 = (cppVar_40446) ? SBUF : cppVar_40566;
	BIT_VEC cppVar_40568 = (cppVar_40430) ? SCON : cppVar_40567;
	BIT_VEC cppVar_40569 = (cppVar_40414) ? P1 : cppVar_40568;
	BIT_VEC cppVar_40570 = (cppVar_40398) ? TH1 : cppVar_40569;
	BIT_VEC cppVar_40571 = (cppVar_40382) ? TL1 : cppVar_40570;
	BIT_VEC cppVar_40572 = (cppVar_40366) ? TH0 : cppVar_40571;
	BIT_VEC cppVar_40573 = (cppVar_40350) ? TL0 : cppVar_40572;
	BIT_VEC cppVar_40574 = (cppVar_40334) ? TMOD : cppVar_40573;
	BIT_VEC cppVar_40575 = (cppVar_40318) ? TCON : cppVar_40574;
	BIT_VEC cppVar_40576 = (cppVar_40302) ? PCON : cppVar_40575;
	BIT_VEC cppVar_40577 = (cppVar_40286) ? DPH : cppVar_40576;
	BIT_VEC cppVar_40578 = (cppVar_40270) ? DPL : cppVar_40577;
	BIT_VEC cppVar_40579 = (cppVar_40254) ? SP : cppVar_40578;
	BIT_VEC cppVar_40580 = (cppVar_40238) ? P0 : cppVar_40579;
	BIT_VEC cppVar_40581 = (cppVar_40207) ? cppVar_40222 : cppVar_40580;
	BIT_VEC cppVar_40582 = cppVar_40190 & cppVar_40581;
	BIT_VEC cppVar_40584 = 0;
	BIT_VEC cppVar_40585 = PC + 1;
	cppVar_40585 = (cppVar_40585 & cppMask_un_16_);
	BIT_VEC cppVar_40586 = ROM.rd(cppVar_40585);
	BIT_VEC cppVar_40587 = (cppVar_40586 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_40588 = (cppVar_40587 & cppMask_un_3_);
	BIT_VEC cppVar_40589 = cppVar_40584 << static_cast<unsigned>(cppVar_40588);
	cppVar_40589 = (cppVar_40589 & cppMask_un_8_);
	BIT_VEC cppVar_40590 = cppVar_40582 | cppVar_40589;
	BIT_VEC cppVar_40591 = (cppVar_40183) ? cppVar_40590 : P3;
	BIT_VEC cppVar_40592 = ROM.rd(PC);
	bool cppVar_40594 = (cppVar_40592 == 5);
	BIT_VEC cppVar_40596 = PC + 1;
	cppVar_40596 = (cppVar_40596 & cppMask_un_16_);
	BIT_VEC cppVar_40597 = ROM.rd(cppVar_40596);
	bool cppVar_40599 = (cppVar_40597 == 176);
	BIT_VEC cppVar_40600 = PC + 1;
	cppVar_40600 = (cppVar_40600 & cppMask_un_16_);
	BIT_VEC cppVar_40601 = ROM.rd(cppVar_40600);
	BIT_VEC cppVar_40602 = (cppVar_40601 >> 7) & cppMask_un_1_;
	bool cppVar_40604 = (cppVar_40602 == 0);
	BIT_VEC cppVar_40605 = PC + 1;
	cppVar_40605 = (cppVar_40605 & cppMask_un_16_);
	BIT_VEC cppVar_40606 = ROM.rd(cppVar_40605);
	BIT_VEC cppVar_40607 = IRAM.rd(cppVar_40606);
	BIT_VEC cppVar_40608 = PC + 1;
	cppVar_40608 = (cppVar_40608 & cppMask_un_16_);
	BIT_VEC cppVar_40609 = ROM.rd(cppVar_40608);
	bool cppVar_40611 = (cppVar_40609 == 128);
	BIT_VEC cppVar_40612 = PC + 1;
	cppVar_40612 = (cppVar_40612 & cppMask_un_16_);
	BIT_VEC cppVar_40613 = ROM.rd(cppVar_40612);
	bool cppVar_40615 = (cppVar_40613 == 129);
	BIT_VEC cppVar_40616 = PC + 1;
	cppVar_40616 = (cppVar_40616 & cppMask_un_16_);
	BIT_VEC cppVar_40617 = ROM.rd(cppVar_40616);
	bool cppVar_40619 = (cppVar_40617 == 130);
	BIT_VEC cppVar_40620 = PC + 1;
	cppVar_40620 = (cppVar_40620 & cppMask_un_16_);
	BIT_VEC cppVar_40621 = ROM.rd(cppVar_40620);
	bool cppVar_40623 = (cppVar_40621 == 131);
	BIT_VEC cppVar_40624 = PC + 1;
	cppVar_40624 = (cppVar_40624 & cppMask_un_16_);
	BIT_VEC cppVar_40625 = ROM.rd(cppVar_40624);
	bool cppVar_40627 = (cppVar_40625 == 135);
	BIT_VEC cppVar_40628 = PC + 1;
	cppVar_40628 = (cppVar_40628 & cppMask_un_16_);
	BIT_VEC cppVar_40629 = ROM.rd(cppVar_40628);
	bool cppVar_40631 = (cppVar_40629 == 136);
	BIT_VEC cppVar_40632 = PC + 1;
	cppVar_40632 = (cppVar_40632 & cppMask_un_16_);
	BIT_VEC cppVar_40633 = ROM.rd(cppVar_40632);
	bool cppVar_40635 = (cppVar_40633 == 137);
	BIT_VEC cppVar_40636 = PC + 1;
	cppVar_40636 = (cppVar_40636 & cppMask_un_16_);
	BIT_VEC cppVar_40637 = ROM.rd(cppVar_40636);
	bool cppVar_40639 = (cppVar_40637 == 138);
	BIT_VEC cppVar_40640 = PC + 1;
	cppVar_40640 = (cppVar_40640 & cppMask_un_16_);
	BIT_VEC cppVar_40641 = ROM.rd(cppVar_40640);
	bool cppVar_40643 = (cppVar_40641 == 140);
	BIT_VEC cppVar_40644 = PC + 1;
	cppVar_40644 = (cppVar_40644 & cppMask_un_16_);
	BIT_VEC cppVar_40645 = ROM.rd(cppVar_40644);
	bool cppVar_40647 = (cppVar_40645 == 139);
	BIT_VEC cppVar_40648 = PC + 1;
	cppVar_40648 = (cppVar_40648 & cppMask_un_16_);
	BIT_VEC cppVar_40649 = ROM.rd(cppVar_40648);
	bool cppVar_40651 = (cppVar_40649 == 141);
	BIT_VEC cppVar_40652 = PC + 1;
	cppVar_40652 = (cppVar_40652 & cppMask_un_16_);
	BIT_VEC cppVar_40653 = ROM.rd(cppVar_40652);
	bool cppVar_40655 = (cppVar_40653 == 144);
	BIT_VEC cppVar_40656 = PC + 1;
	cppVar_40656 = (cppVar_40656 & cppMask_un_16_);
	BIT_VEC cppVar_40657 = ROM.rd(cppVar_40656);
	bool cppVar_40659 = (cppVar_40657 == 152);
	BIT_VEC cppVar_40660 = PC + 1;
	cppVar_40660 = (cppVar_40660 & cppMask_un_16_);
	BIT_VEC cppVar_40661 = ROM.rd(cppVar_40660);
	bool cppVar_40663 = (cppVar_40661 == 153);
	BIT_VEC cppVar_40664 = PC + 1;
	cppVar_40664 = (cppVar_40664 & cppMask_un_16_);
	BIT_VEC cppVar_40665 = ROM.rd(cppVar_40664);
	bool cppVar_40667 = (cppVar_40665 == 160);
	BIT_VEC cppVar_40668 = PC + 1;
	cppVar_40668 = (cppVar_40668 & cppMask_un_16_);
	BIT_VEC cppVar_40669 = ROM.rd(cppVar_40668);
	bool cppVar_40671 = (cppVar_40669 == 168);
	BIT_VEC cppVar_40672 = PC + 1;
	cppVar_40672 = (cppVar_40672 & cppMask_un_16_);
	BIT_VEC cppVar_40673 = ROM.rd(cppVar_40672);
	bool cppVar_40675 = (cppVar_40673 == 176);
	BIT_VEC cppVar_40676 = PC + 1;
	cppVar_40676 = (cppVar_40676 & cppMask_un_16_);
	BIT_VEC cppVar_40677 = ROM.rd(cppVar_40676);
	bool cppVar_40679 = (cppVar_40677 == 184);
	BIT_VEC cppVar_40680 = PC + 1;
	cppVar_40680 = (cppVar_40680 & cppMask_un_16_);
	BIT_VEC cppVar_40681 = ROM.rd(cppVar_40680);
	bool cppVar_40683 = (cppVar_40681 == 208);
	BIT_VEC cppVar_40684 = PC + 1;
	cppVar_40684 = (cppVar_40684 & cppMask_un_16_);
	BIT_VEC cppVar_40685 = ROM.rd(cppVar_40684);
	bool cppVar_40687 = (cppVar_40685 == 224);
	BIT_VEC cppVar_40688 = PC + 1;
	cppVar_40688 = (cppVar_40688 & cppMask_un_16_);
	BIT_VEC cppVar_40689 = ROM.rd(cppVar_40688);
	bool cppVar_40691 = (cppVar_40689 == 240);
	BIT_VEC cppVar_40693 = (cppVar_40691) ? B : 0;
	BIT_VEC cppVar_40694 = (cppVar_40687) ? ACC : cppVar_40693;
	BIT_VEC cppVar_40695 = (cppVar_40683) ? PSW : cppVar_40694;
	BIT_VEC cppVar_40696 = (cppVar_40679) ? IP : cppVar_40695;
	BIT_VEC cppVar_40697 = (cppVar_40675) ? P3 : cppVar_40696;
	BIT_VEC cppVar_40698 = (cppVar_40671) ? IE : cppVar_40697;
	BIT_VEC cppVar_40699 = (cppVar_40667) ? P2 : cppVar_40698;
	BIT_VEC cppVar_40700 = (cppVar_40663) ? SBUF : cppVar_40699;
	BIT_VEC cppVar_40701 = (cppVar_40659) ? SCON : cppVar_40700;
	BIT_VEC cppVar_40702 = (cppVar_40655) ? P1 : cppVar_40701;
	BIT_VEC cppVar_40703 = (cppVar_40651) ? TH1 : cppVar_40702;
	BIT_VEC cppVar_40704 = (cppVar_40647) ? TL1 : cppVar_40703;
	BIT_VEC cppVar_40705 = (cppVar_40643) ? TH0 : cppVar_40704;
	BIT_VEC cppVar_40706 = (cppVar_40639) ? TL0 : cppVar_40705;
	BIT_VEC cppVar_40707 = (cppVar_40635) ? TMOD : cppVar_40706;
	BIT_VEC cppVar_40708 = (cppVar_40631) ? TCON : cppVar_40707;
	BIT_VEC cppVar_40709 = (cppVar_40627) ? PCON : cppVar_40708;
	BIT_VEC cppVar_40710 = (cppVar_40623) ? DPH : cppVar_40709;
	BIT_VEC cppVar_40711 = (cppVar_40619) ? DPL : cppVar_40710;
	BIT_VEC cppVar_40712 = (cppVar_40615) ? SP : cppVar_40711;
	BIT_VEC cppVar_40713 = (cppVar_40611) ? P0 : cppVar_40712;
	BIT_VEC cppVar_40714 = (cppVar_40604) ? cppVar_40607 : cppVar_40713;
	BIT_VEC cppVar_40716 = cppVar_40714 + 1;
	cppVar_40716 = (cppVar_40716 & cppMask_un_8_);
	BIT_VEC cppVar_40717 = (cppVar_40599) ? cppVar_40716 : P3;
	BIT_VEC cppVar_40718 = ROM.rd(PC);
	bool cppVar_40720 = (cppVar_40718 == 255);
	BIT_VEC cppVar_40721 = ROM.rd(PC);
	bool cppVar_40723 = (cppVar_40721 == 254);
	BIT_VEC cppVar_40724 = ROM.rd(PC);
	bool cppVar_40726 = (cppVar_40724 == 253);
	BIT_VEC cppVar_40727 = ROM.rd(PC);
	bool cppVar_40729 = (cppVar_40727 == 252);
	BIT_VEC cppVar_40730 = ROM.rd(PC);
	bool cppVar_40732 = (cppVar_40730 == 251);
	BIT_VEC cppVar_40733 = ROM.rd(PC);
	bool cppVar_40735 = (cppVar_40733 == 250);
	BIT_VEC cppVar_40736 = ROM.rd(PC);
	bool cppVar_40738 = (cppVar_40736 == 249);
	BIT_VEC cppVar_40739 = ROM.rd(PC);
	bool cppVar_40741 = (cppVar_40739 == 248);
	BIT_VEC cppVar_40742 = ROM.rd(PC);
	bool cppVar_40744 = (cppVar_40742 == 247);
	BIT_VEC cppVar_40745 = ROM.rd(PC);
	bool cppVar_40747 = (cppVar_40745 == 246);
	BIT_VEC cppVar_40748 = ROM.rd(PC);
	bool cppVar_40750 = (cppVar_40748 == 244);
	BIT_VEC cppVar_40751 = ROM.rd(PC);
	bool cppVar_40753 = (cppVar_40751 == 243);
	BIT_VEC cppVar_40754 = ROM.rd(PC);
	bool cppVar_40756 = (cppVar_40754 == 242);
	BIT_VEC cppVar_40757 = ROM.rd(PC);
	bool cppVar_40759 = (cppVar_40757 == 241);
	BIT_VEC cppVar_40760 = ROM.rd(PC);
	bool cppVar_40762 = (cppVar_40760 == 240);
	BIT_VEC cppVar_40763 = ROM.rd(PC);
	bool cppVar_40765 = (cppVar_40763 == 239);
	BIT_VEC cppVar_40766 = ROM.rd(PC);
	bool cppVar_40768 = (cppVar_40766 == 238);
	BIT_VEC cppVar_40769 = ROM.rd(PC);
	bool cppVar_40771 = (cppVar_40769 == 237);
	BIT_VEC cppVar_40772 = ROM.rd(PC);
	bool cppVar_40774 = (cppVar_40772 == 236);
	BIT_VEC cppVar_40775 = ROM.rd(PC);
	bool cppVar_40777 = (cppVar_40775 == 235);
	BIT_VEC cppVar_40778 = ROM.rd(PC);
	bool cppVar_40780 = (cppVar_40778 == 234);
	BIT_VEC cppVar_40781 = ROM.rd(PC);
	bool cppVar_40783 = (cppVar_40781 == 233);
	BIT_VEC cppVar_40784 = ROM.rd(PC);
	bool cppVar_40786 = (cppVar_40784 == 232);
	BIT_VEC cppVar_40787 = ROM.rd(PC);
	bool cppVar_40789 = (cppVar_40787 == 231);
	BIT_VEC cppVar_40790 = ROM.rd(PC);
	bool cppVar_40792 = (cppVar_40790 == 230);
	BIT_VEC cppVar_40793 = ROM.rd(PC);
	bool cppVar_40795 = (cppVar_40793 == 229);
	BIT_VEC cppVar_40796 = ROM.rd(PC);
	bool cppVar_40798 = (cppVar_40796 == 228);
	BIT_VEC cppVar_40799 = ROM.rd(PC);
	bool cppVar_40801 = (cppVar_40799 == 227);
	BIT_VEC cppVar_40802 = ROM.rd(PC);
	bool cppVar_40804 = (cppVar_40802 == 226);
	BIT_VEC cppVar_40805 = ROM.rd(PC);
	bool cppVar_40807 = (cppVar_40805 == 225);
	BIT_VEC cppVar_40808 = ROM.rd(PC);
	bool cppVar_40810 = (cppVar_40808 == 224);
	BIT_VEC cppVar_40811 = ROM.rd(PC);
	bool cppVar_40813 = (cppVar_40811 == 223);
	BIT_VEC cppVar_40814 = ROM.rd(PC);
	bool cppVar_40816 = (cppVar_40814 == 222);
	BIT_VEC cppVar_40817 = ROM.rd(PC);
	bool cppVar_40819 = (cppVar_40817 == 221);
	BIT_VEC cppVar_40820 = ROM.rd(PC);
	bool cppVar_40822 = (cppVar_40820 == 220);
	BIT_VEC cppVar_40823 = ROM.rd(PC);
	bool cppVar_40825 = (cppVar_40823 == 219);
	BIT_VEC cppVar_40826 = ROM.rd(PC);
	bool cppVar_40828 = (cppVar_40826 == 218);
	BIT_VEC cppVar_40829 = ROM.rd(PC);
	bool cppVar_40831 = (cppVar_40829 == 217);
	BIT_VEC cppVar_40832 = ROM.rd(PC);
	bool cppVar_40834 = (cppVar_40832 == 216);
	BIT_VEC cppVar_40835 = ROM.rd(PC);
	bool cppVar_40837 = (cppVar_40835 == 215);
	BIT_VEC cppVar_40838 = ROM.rd(PC);
	bool cppVar_40840 = (cppVar_40838 == 214);
	BIT_VEC cppVar_40841 = ROM.rd(PC);
	bool cppVar_40843 = (cppVar_40841 == 212);
	BIT_VEC cppVar_40844 = ROM.rd(PC);
	bool cppVar_40846 = (cppVar_40844 == 211);
	BIT_VEC cppVar_40847 = ROM.rd(PC);
	bool cppVar_40849 = (cppVar_40847 == 209);
	BIT_VEC cppVar_40850 = ROM.rd(PC);
	bool cppVar_40852 = (cppVar_40850 == 207);
	BIT_VEC cppVar_40853 = ROM.rd(PC);
	bool cppVar_40855 = (cppVar_40853 == 206);
	BIT_VEC cppVar_40856 = ROM.rd(PC);
	bool cppVar_40858 = (cppVar_40856 == 205);
	BIT_VEC cppVar_40859 = ROM.rd(PC);
	bool cppVar_40861 = (cppVar_40859 == 204);
	BIT_VEC cppVar_40862 = ROM.rd(PC);
	bool cppVar_40864 = (cppVar_40862 == 203);
	BIT_VEC cppVar_40865 = ROM.rd(PC);
	bool cppVar_40867 = (cppVar_40865 == 202);
	BIT_VEC cppVar_40868 = ROM.rd(PC);
	bool cppVar_40870 = (cppVar_40868 == 201);
	BIT_VEC cppVar_40871 = ROM.rd(PC);
	bool cppVar_40873 = (cppVar_40871 == 200);
	BIT_VEC cppVar_40874 = ROM.rd(PC);
	bool cppVar_40876 = (cppVar_40874 == 199);
	BIT_VEC cppVar_40877 = ROM.rd(PC);
	bool cppVar_40879 = (cppVar_40877 == 198);
	BIT_VEC cppVar_40880 = ROM.rd(PC);
	bool cppVar_40882 = (cppVar_40880 == 196);
	BIT_VEC cppVar_40883 = ROM.rd(PC);
	bool cppVar_40885 = (cppVar_40883 == 195);
	BIT_VEC cppVar_40886 = ROM.rd(PC);
	bool cppVar_40888 = (cppVar_40886 == 193);
	BIT_VEC cppVar_40889 = ROM.rd(PC);
	bool cppVar_40891 = (cppVar_40889 == 192);
	BIT_VEC cppVar_40892 = ROM.rd(PC);
	bool cppVar_40894 = (cppVar_40892 == 191);
	BIT_VEC cppVar_40895 = ROM.rd(PC);
	bool cppVar_40897 = (cppVar_40895 == 190);
	BIT_VEC cppVar_40898 = ROM.rd(PC);
	bool cppVar_40900 = (cppVar_40898 == 189);
	BIT_VEC cppVar_40901 = ROM.rd(PC);
	bool cppVar_40903 = (cppVar_40901 == 188);
	BIT_VEC cppVar_40904 = ROM.rd(PC);
	bool cppVar_40906 = (cppVar_40904 == 187);
	BIT_VEC cppVar_40907 = ROM.rd(PC);
	bool cppVar_40909 = (cppVar_40907 == 186);
	BIT_VEC cppVar_40910 = ROM.rd(PC);
	bool cppVar_40912 = (cppVar_40910 == 185);
	BIT_VEC cppVar_40913 = ROM.rd(PC);
	bool cppVar_40915 = (cppVar_40913 == 184);
	BIT_VEC cppVar_40916 = ROM.rd(PC);
	bool cppVar_40918 = (cppVar_40916 == 183);
	BIT_VEC cppVar_40919 = ROM.rd(PC);
	bool cppVar_40921 = (cppVar_40919 == 182);
	BIT_VEC cppVar_40922 = ROM.rd(PC);
	bool cppVar_40924 = (cppVar_40922 == 181);
	BIT_VEC cppVar_40925 = ROM.rd(PC);
	bool cppVar_40927 = (cppVar_40925 == 180);
	BIT_VEC cppVar_40928 = ROM.rd(PC);
	bool cppVar_40930 = (cppVar_40928 == 179);
	BIT_VEC cppVar_40931 = ROM.rd(PC);
	bool cppVar_40933 = (cppVar_40931 == 177);
	BIT_VEC cppVar_40934 = ROM.rd(PC);
	bool cppVar_40936 = (cppVar_40934 == 176);
	BIT_VEC cppVar_40937 = ROM.rd(PC);
	bool cppVar_40939 = (cppVar_40937 == 175);
	BIT_VEC cppVar_40940 = ROM.rd(PC);
	bool cppVar_40942 = (cppVar_40940 == 174);
	BIT_VEC cppVar_40943 = ROM.rd(PC);
	bool cppVar_40945 = (cppVar_40943 == 173);
	BIT_VEC cppVar_40946 = ROM.rd(PC);
	bool cppVar_40948 = (cppVar_40946 == 172);
	BIT_VEC cppVar_40949 = ROM.rd(PC);
	bool cppVar_40951 = (cppVar_40949 == 171);
	BIT_VEC cppVar_40952 = ROM.rd(PC);
	bool cppVar_40954 = (cppVar_40952 == 170);
	BIT_VEC cppVar_40955 = ROM.rd(PC);
	bool cppVar_40957 = (cppVar_40955 == 169);
	BIT_VEC cppVar_40958 = ROM.rd(PC);
	bool cppVar_40960 = (cppVar_40958 == 168);
	BIT_VEC cppVar_40961 = ROM.rd(PC);
	bool cppVar_40963 = (cppVar_40961 == 167);
	BIT_VEC cppVar_40964 = ROM.rd(PC);
	bool cppVar_40966 = (cppVar_40964 == 166);
	BIT_VEC cppVar_40967 = ROM.rd(PC);
	bool cppVar_40969 = (cppVar_40967 == 165);
	BIT_VEC cppVar_40970 = ROM.rd(PC);
	bool cppVar_40972 = (cppVar_40970 == 164);
	BIT_VEC cppVar_40973 = ROM.rd(PC);
	bool cppVar_40975 = (cppVar_40973 == 163);
	BIT_VEC cppVar_40976 = ROM.rd(PC);
	bool cppVar_40978 = (cppVar_40976 == 162);
	BIT_VEC cppVar_40979 = ROM.rd(PC);
	bool cppVar_40981 = (cppVar_40979 == 161);
	BIT_VEC cppVar_40982 = ROM.rd(PC);
	bool cppVar_40984 = (cppVar_40982 == 160);
	BIT_VEC cppVar_40985 = ROM.rd(PC);
	bool cppVar_40987 = (cppVar_40985 == 159);
	BIT_VEC cppVar_40988 = ROM.rd(PC);
	bool cppVar_40990 = (cppVar_40988 == 158);
	BIT_VEC cppVar_40991 = ROM.rd(PC);
	bool cppVar_40993 = (cppVar_40991 == 157);
	BIT_VEC cppVar_40994 = ROM.rd(PC);
	bool cppVar_40996 = (cppVar_40994 == 156);
	BIT_VEC cppVar_40997 = ROM.rd(PC);
	bool cppVar_40999 = (cppVar_40997 == 155);
	BIT_VEC cppVar_41000 = ROM.rd(PC);
	bool cppVar_41002 = (cppVar_41000 == 154);
	BIT_VEC cppVar_41003 = ROM.rd(PC);
	bool cppVar_41005 = (cppVar_41003 == 153);
	BIT_VEC cppVar_41006 = ROM.rd(PC);
	bool cppVar_41008 = (cppVar_41006 == 152);
	BIT_VEC cppVar_41009 = ROM.rd(PC);
	bool cppVar_41011 = (cppVar_41009 == 151);
	BIT_VEC cppVar_41012 = ROM.rd(PC);
	bool cppVar_41014 = (cppVar_41012 == 150);
	BIT_VEC cppVar_41015 = ROM.rd(PC);
	bool cppVar_41017 = (cppVar_41015 == 149);
	BIT_VEC cppVar_41018 = ROM.rd(PC);
	bool cppVar_41020 = (cppVar_41018 == 148);
	BIT_VEC cppVar_41021 = ROM.rd(PC);
	bool cppVar_41023 = (cppVar_41021 == 147);
	BIT_VEC cppVar_41024 = ROM.rd(PC);
	bool cppVar_41026 = (cppVar_41024 == 145);
	BIT_VEC cppVar_41027 = ROM.rd(PC);
	bool cppVar_41029 = (cppVar_41027 == 144);
	BIT_VEC cppVar_41030 = ROM.rd(PC);
	bool cppVar_41032 = (cppVar_41030 == 132);
	BIT_VEC cppVar_41033 = ROM.rd(PC);
	bool cppVar_41035 = (cppVar_41033 == 131);
	BIT_VEC cppVar_41036 = ROM.rd(PC);
	bool cppVar_41038 = (cppVar_41036 == 130);
	BIT_VEC cppVar_41039 = ROM.rd(PC);
	bool cppVar_41041 = (cppVar_41039 == 129);
	BIT_VEC cppVar_41042 = ROM.rd(PC);
	bool cppVar_41044 = (cppVar_41042 == 128);
	BIT_VEC cppVar_41045 = ROM.rd(PC);
	bool cppVar_41047 = (cppVar_41045 == 127);
	BIT_VEC cppVar_41048 = ROM.rd(PC);
	bool cppVar_41050 = (cppVar_41048 == 126);
	BIT_VEC cppVar_41051 = ROM.rd(PC);
	bool cppVar_41053 = (cppVar_41051 == 125);
	BIT_VEC cppVar_41054 = ROM.rd(PC);
	bool cppVar_41056 = (cppVar_41054 == 124);
	BIT_VEC cppVar_41057 = ROM.rd(PC);
	bool cppVar_41059 = (cppVar_41057 == 123);
	BIT_VEC cppVar_41060 = ROM.rd(PC);
	bool cppVar_41062 = (cppVar_41060 == 122);
	BIT_VEC cppVar_41063 = ROM.rd(PC);
	bool cppVar_41065 = (cppVar_41063 == 121);
	BIT_VEC cppVar_41066 = ROM.rd(PC);
	bool cppVar_41068 = (cppVar_41066 == 120);
	BIT_VEC cppVar_41069 = ROM.rd(PC);
	bool cppVar_41071 = (cppVar_41069 == 119);
	BIT_VEC cppVar_41072 = ROM.rd(PC);
	bool cppVar_41074 = (cppVar_41072 == 118);
	BIT_VEC cppVar_41075 = ROM.rd(PC);
	bool cppVar_41077 = (cppVar_41075 == 116);
	BIT_VEC cppVar_41078 = ROM.rd(PC);
	bool cppVar_41080 = (cppVar_41078 == 115);
	BIT_VEC cppVar_41081 = ROM.rd(PC);
	bool cppVar_41083 = (cppVar_41081 == 114);
	BIT_VEC cppVar_41084 = ROM.rd(PC);
	bool cppVar_41086 = (cppVar_41084 == 113);
	BIT_VEC cppVar_41087 = ROM.rd(PC);
	bool cppVar_41089 = (cppVar_41087 == 112);
	BIT_VEC cppVar_41090 = ROM.rd(PC);
	bool cppVar_41092 = (cppVar_41090 == 111);
	BIT_VEC cppVar_41093 = ROM.rd(PC);
	bool cppVar_41095 = (cppVar_41093 == 110);
	BIT_VEC cppVar_41096 = ROM.rd(PC);
	bool cppVar_41098 = (cppVar_41096 == 109);
	BIT_VEC cppVar_41099 = ROM.rd(PC);
	bool cppVar_41101 = (cppVar_41099 == 108);
	BIT_VEC cppVar_41102 = ROM.rd(PC);
	bool cppVar_41104 = (cppVar_41102 == 107);
	BIT_VEC cppVar_41105 = ROM.rd(PC);
	bool cppVar_41107 = (cppVar_41105 == 106);
	BIT_VEC cppVar_41108 = ROM.rd(PC);
	bool cppVar_41110 = (cppVar_41108 == 105);
	BIT_VEC cppVar_41111 = ROM.rd(PC);
	bool cppVar_41113 = (cppVar_41111 == 104);
	BIT_VEC cppVar_41114 = ROM.rd(PC);
	bool cppVar_41116 = (cppVar_41114 == 103);
	BIT_VEC cppVar_41117 = ROM.rd(PC);
	bool cppVar_41119 = (cppVar_41117 == 102);
	BIT_VEC cppVar_41120 = ROM.rd(PC);
	bool cppVar_41122 = (cppVar_41120 == 101);
	BIT_VEC cppVar_41123 = ROM.rd(PC);
	bool cppVar_41125 = (cppVar_41123 == 100);
	BIT_VEC cppVar_41126 = ROM.rd(PC);
	bool cppVar_41128 = (cppVar_41126 == 97);
	BIT_VEC cppVar_41129 = ROM.rd(PC);
	bool cppVar_41131 = (cppVar_41129 == 96);
	BIT_VEC cppVar_41132 = ROM.rd(PC);
	bool cppVar_41134 = (cppVar_41132 == 95);
	BIT_VEC cppVar_41135 = ROM.rd(PC);
	bool cppVar_41137 = (cppVar_41135 == 94);
	BIT_VEC cppVar_41138 = ROM.rd(PC);
	bool cppVar_41140 = (cppVar_41138 == 93);
	BIT_VEC cppVar_41141 = ROM.rd(PC);
	bool cppVar_41143 = (cppVar_41141 == 92);
	BIT_VEC cppVar_41144 = ROM.rd(PC);
	bool cppVar_41146 = (cppVar_41144 == 91);
	BIT_VEC cppVar_41147 = ROM.rd(PC);
	bool cppVar_41149 = (cppVar_41147 == 90);
	BIT_VEC cppVar_41150 = ROM.rd(PC);
	bool cppVar_41152 = (cppVar_41150 == 89);
	BIT_VEC cppVar_41153 = ROM.rd(PC);
	bool cppVar_41155 = (cppVar_41153 == 88);
	BIT_VEC cppVar_41156 = ROM.rd(PC);
	bool cppVar_41158 = (cppVar_41156 == 87);
	BIT_VEC cppVar_41159 = ROM.rd(PC);
	bool cppVar_41161 = (cppVar_41159 == 86);
	BIT_VEC cppVar_41162 = ROM.rd(PC);
	bool cppVar_41164 = (cppVar_41162 == 85);
	BIT_VEC cppVar_41165 = ROM.rd(PC);
	bool cppVar_41167 = (cppVar_41165 == 84);
	BIT_VEC cppVar_41168 = ROM.rd(PC);
	bool cppVar_41170 = (cppVar_41168 == 81);
	BIT_VEC cppVar_41171 = ROM.rd(PC);
	bool cppVar_41173 = (cppVar_41171 == 80);
	BIT_VEC cppVar_41174 = ROM.rd(PC);
	bool cppVar_41176 = (cppVar_41174 == 79);
	BIT_VEC cppVar_41177 = ROM.rd(PC);
	bool cppVar_41179 = (cppVar_41177 == 78);
	BIT_VEC cppVar_41180 = ROM.rd(PC);
	bool cppVar_41182 = (cppVar_41180 == 77);
	BIT_VEC cppVar_41183 = ROM.rd(PC);
	bool cppVar_41185 = (cppVar_41183 == 76);
	BIT_VEC cppVar_41186 = ROM.rd(PC);
	bool cppVar_41188 = (cppVar_41186 == 75);
	BIT_VEC cppVar_41189 = ROM.rd(PC);
	bool cppVar_41191 = (cppVar_41189 == 74);
	BIT_VEC cppVar_41192 = ROM.rd(PC);
	bool cppVar_41194 = (cppVar_41192 == 73);
	BIT_VEC cppVar_41195 = ROM.rd(PC);
	bool cppVar_41197 = (cppVar_41195 == 72);
	BIT_VEC cppVar_41198 = ROM.rd(PC);
	bool cppVar_41200 = (cppVar_41198 == 71);
	BIT_VEC cppVar_41201 = ROM.rd(PC);
	bool cppVar_41203 = (cppVar_41201 == 70);
	BIT_VEC cppVar_41204 = ROM.rd(PC);
	bool cppVar_41206 = (cppVar_41204 == 69);
	BIT_VEC cppVar_41207 = ROM.rd(PC);
	bool cppVar_41209 = (cppVar_41207 == 68);
	BIT_VEC cppVar_41210 = ROM.rd(PC);
	bool cppVar_41212 = (cppVar_41210 == 65);
	BIT_VEC cppVar_41213 = ROM.rd(PC);
	bool cppVar_41215 = (cppVar_41213 == 64);
	BIT_VEC cppVar_41216 = ROM.rd(PC);
	bool cppVar_41218 = (cppVar_41216 == 63);
	BIT_VEC cppVar_41219 = ROM.rd(PC);
	bool cppVar_41221 = (cppVar_41219 == 62);
	BIT_VEC cppVar_41222 = ROM.rd(PC);
	bool cppVar_41224 = (cppVar_41222 == 61);
	BIT_VEC cppVar_41225 = ROM.rd(PC);
	bool cppVar_41227 = (cppVar_41225 == 60);
	BIT_VEC cppVar_41228 = ROM.rd(PC);
	bool cppVar_41230 = (cppVar_41228 == 59);
	BIT_VEC cppVar_41231 = ROM.rd(PC);
	bool cppVar_41233 = (cppVar_41231 == 58);
	BIT_VEC cppVar_41234 = ROM.rd(PC);
	bool cppVar_41236 = (cppVar_41234 == 57);
	BIT_VEC cppVar_41237 = ROM.rd(PC);
	bool cppVar_41239 = (cppVar_41237 == 56);
	BIT_VEC cppVar_41240 = ROM.rd(PC);
	bool cppVar_41242 = (cppVar_41240 == 55);
	BIT_VEC cppVar_41243 = ROM.rd(PC);
	bool cppVar_41245 = (cppVar_41243 == 54);
	BIT_VEC cppVar_41246 = ROM.rd(PC);
	bool cppVar_41248 = (cppVar_41246 == 53);
	BIT_VEC cppVar_41249 = ROM.rd(PC);
	bool cppVar_41251 = (cppVar_41249 == 52);
	BIT_VEC cppVar_41252 = ROM.rd(PC);
	bool cppVar_41254 = (cppVar_41252 == 51);
	BIT_VEC cppVar_41255 = ROM.rd(PC);
	bool cppVar_41257 = (cppVar_41255 == 50);
	BIT_VEC cppVar_41258 = ROM.rd(PC);
	bool cppVar_41260 = (cppVar_41258 == 49);
	BIT_VEC cppVar_41261 = ROM.rd(PC);
	bool cppVar_41263 = (cppVar_41261 == 48);
	BIT_VEC cppVar_41264 = ROM.rd(PC);
	bool cppVar_41266 = (cppVar_41264 == 47);
	BIT_VEC cppVar_41267 = ROM.rd(PC);
	bool cppVar_41269 = (cppVar_41267 == 46);
	BIT_VEC cppVar_41270 = ROM.rd(PC);
	bool cppVar_41272 = (cppVar_41270 == 45);
	BIT_VEC cppVar_41273 = ROM.rd(PC);
	bool cppVar_41275 = (cppVar_41273 == 44);
	BIT_VEC cppVar_41276 = ROM.rd(PC);
	bool cppVar_41278 = (cppVar_41276 == 43);
	BIT_VEC cppVar_41279 = ROM.rd(PC);
	bool cppVar_41281 = (cppVar_41279 == 42);
	BIT_VEC cppVar_41282 = ROM.rd(PC);
	bool cppVar_41284 = (cppVar_41282 == 41);
	BIT_VEC cppVar_41285 = ROM.rd(PC);
	bool cppVar_41287 = (cppVar_41285 == 40);
	BIT_VEC cppVar_41288 = ROM.rd(PC);
	bool cppVar_41290 = (cppVar_41288 == 39);
	BIT_VEC cppVar_41291 = ROM.rd(PC);
	bool cppVar_41293 = (cppVar_41291 == 38);
	BIT_VEC cppVar_41294 = ROM.rd(PC);
	bool cppVar_41296 = (cppVar_41294 == 37);
	BIT_VEC cppVar_41297 = ROM.rd(PC);
	bool cppVar_41299 = (cppVar_41297 == 36);
	BIT_VEC cppVar_41300 = ROM.rd(PC);
	bool cppVar_41302 = (cppVar_41300 == 35);
	BIT_VEC cppVar_41303 = ROM.rd(PC);
	bool cppVar_41305 = (cppVar_41303 == 34);
	BIT_VEC cppVar_41306 = ROM.rd(PC);
	bool cppVar_41308 = (cppVar_41306 == 33);
	BIT_VEC cppVar_41309 = ROM.rd(PC);
	bool cppVar_41311 = (cppVar_41309 == 32);
	BIT_VEC cppVar_41312 = ROM.rd(PC);
	bool cppVar_41314 = (cppVar_41312 == 31);
	BIT_VEC cppVar_41315 = ROM.rd(PC);
	bool cppVar_41317 = (cppVar_41315 == 30);
	BIT_VEC cppVar_41318 = ROM.rd(PC);
	bool cppVar_41320 = (cppVar_41318 == 29);
	BIT_VEC cppVar_41321 = ROM.rd(PC);
	bool cppVar_41323 = (cppVar_41321 == 28);
	BIT_VEC cppVar_41324 = ROM.rd(PC);
	bool cppVar_41326 = (cppVar_41324 == 27);
	BIT_VEC cppVar_41327 = ROM.rd(PC);
	bool cppVar_41329 = (cppVar_41327 == 26);
	BIT_VEC cppVar_41330 = ROM.rd(PC);
	bool cppVar_41332 = (cppVar_41330 == 25);
	BIT_VEC cppVar_41333 = ROM.rd(PC);
	bool cppVar_41335 = (cppVar_41333 == 24);
	BIT_VEC cppVar_41336 = ROM.rd(PC);
	bool cppVar_41338 = (cppVar_41336 == 23);
	BIT_VEC cppVar_41339 = ROM.rd(PC);
	bool cppVar_41341 = (cppVar_41339 == 22);
	BIT_VEC cppVar_41342 = ROM.rd(PC);
	bool cppVar_41344 = (cppVar_41342 == 20);
	BIT_VEC cppVar_41345 = ROM.rd(PC);
	bool cppVar_41347 = (cppVar_41345 == 19);
	BIT_VEC cppVar_41348 = ROM.rd(PC);
	bool cppVar_41350 = (cppVar_41348 == 18);
	BIT_VEC cppVar_41351 = ROM.rd(PC);
	bool cppVar_41353 = (cppVar_41351 == 17);
	BIT_VEC cppVar_41354 = ROM.rd(PC);
	bool cppVar_41356 = (cppVar_41354 == 15);
	BIT_VEC cppVar_41357 = ROM.rd(PC);
	bool cppVar_41359 = (cppVar_41357 == 14);
	BIT_VEC cppVar_41360 = ROM.rd(PC);
	bool cppVar_41362 = (cppVar_41360 == 13);
	BIT_VEC cppVar_41363 = ROM.rd(PC);
	bool cppVar_41365 = (cppVar_41363 == 12);
	BIT_VEC cppVar_41366 = ROM.rd(PC);
	bool cppVar_41368 = (cppVar_41366 == 11);
	BIT_VEC cppVar_41369 = ROM.rd(PC);
	bool cppVar_41371 = (cppVar_41369 == 10);
	BIT_VEC cppVar_41372 = ROM.rd(PC);
	bool cppVar_41374 = (cppVar_41372 == 9);
	BIT_VEC cppVar_41375 = ROM.rd(PC);
	bool cppVar_41377 = (cppVar_41375 == 8);
	BIT_VEC cppVar_41378 = ROM.rd(PC);
	bool cppVar_41380 = (cppVar_41378 == 7);
	BIT_VEC cppVar_41381 = ROM.rd(PC);
	bool cppVar_41383 = (cppVar_41381 == 6);
	BIT_VEC cppVar_41384 = ROM.rd(PC);
	bool cppVar_41386 = (cppVar_41384 == 4);
	BIT_VEC cppVar_41387 = ROM.rd(PC);
	bool cppVar_41389 = (cppVar_41387 == 3);
	BIT_VEC cppVar_41390 = ROM.rd(PC);
	bool cppVar_41392 = (cppVar_41390 == 2);
	BIT_VEC cppVar_41393 = ROM.rd(PC);
	bool cppVar_41395 = (cppVar_41393 == 1);
	BIT_VEC cppVar_41396 = ROM.rd(PC);
	bool cppVar_41398 = (cppVar_41396 == 0);
	bool cppVar_41399 = cppVar_41395 || cppVar_41398;
	bool cppVar_41400 = cppVar_41392 || cppVar_41399;
	bool cppVar_41401 = cppVar_41389 || cppVar_41400;
	bool cppVar_41402 = cppVar_41386 || cppVar_41401;
	bool cppVar_41403 = cppVar_41383 || cppVar_41402;
	bool cppVar_41404 = cppVar_41380 || cppVar_41403;
	bool cppVar_41405 = cppVar_41377 || cppVar_41404;
	bool cppVar_41406 = cppVar_41374 || cppVar_41405;
	bool cppVar_41407 = cppVar_41371 || cppVar_41406;
	bool cppVar_41408 = cppVar_41368 || cppVar_41407;
	bool cppVar_41409 = cppVar_41365 || cppVar_41408;
	bool cppVar_41410 = cppVar_41362 || cppVar_41409;
	bool cppVar_41411 = cppVar_41359 || cppVar_41410;
	bool cppVar_41412 = cppVar_41356 || cppVar_41411;
	bool cppVar_41413 = cppVar_41353 || cppVar_41412;
	bool cppVar_41414 = cppVar_41350 || cppVar_41413;
	bool cppVar_41415 = cppVar_41347 || cppVar_41414;
	bool cppVar_41416 = cppVar_41344 || cppVar_41415;
	bool cppVar_41417 = cppVar_41341 || cppVar_41416;
	bool cppVar_41418 = cppVar_41338 || cppVar_41417;
	bool cppVar_41419 = cppVar_41335 || cppVar_41418;
	bool cppVar_41420 = cppVar_41332 || cppVar_41419;
	bool cppVar_41421 = cppVar_41329 || cppVar_41420;
	bool cppVar_41422 = cppVar_41326 || cppVar_41421;
	bool cppVar_41423 = cppVar_41323 || cppVar_41422;
	bool cppVar_41424 = cppVar_41320 || cppVar_41423;
	bool cppVar_41425 = cppVar_41317 || cppVar_41424;
	bool cppVar_41426 = cppVar_41314 || cppVar_41425;
	bool cppVar_41427 = cppVar_41311 || cppVar_41426;
	bool cppVar_41428 = cppVar_41308 || cppVar_41427;
	bool cppVar_41429 = cppVar_41305 || cppVar_41428;
	bool cppVar_41430 = cppVar_41302 || cppVar_41429;
	bool cppVar_41431 = cppVar_41299 || cppVar_41430;
	bool cppVar_41432 = cppVar_41296 || cppVar_41431;
	bool cppVar_41433 = cppVar_41293 || cppVar_41432;
	bool cppVar_41434 = cppVar_41290 || cppVar_41433;
	bool cppVar_41435 = cppVar_41287 || cppVar_41434;
	bool cppVar_41436 = cppVar_41284 || cppVar_41435;
	bool cppVar_41437 = cppVar_41281 || cppVar_41436;
	bool cppVar_41438 = cppVar_41278 || cppVar_41437;
	bool cppVar_41439 = cppVar_41275 || cppVar_41438;
	bool cppVar_41440 = cppVar_41272 || cppVar_41439;
	bool cppVar_41441 = cppVar_41269 || cppVar_41440;
	bool cppVar_41442 = cppVar_41266 || cppVar_41441;
	bool cppVar_41443 = cppVar_41263 || cppVar_41442;
	bool cppVar_41444 = cppVar_41260 || cppVar_41443;
	bool cppVar_41445 = cppVar_41257 || cppVar_41444;
	bool cppVar_41446 = cppVar_41254 || cppVar_41445;
	bool cppVar_41447 = cppVar_41251 || cppVar_41446;
	bool cppVar_41448 = cppVar_41248 || cppVar_41447;
	bool cppVar_41449 = cppVar_41245 || cppVar_41448;
	bool cppVar_41450 = cppVar_41242 || cppVar_41449;
	bool cppVar_41451 = cppVar_41239 || cppVar_41450;
	bool cppVar_41452 = cppVar_41236 || cppVar_41451;
	bool cppVar_41453 = cppVar_41233 || cppVar_41452;
	bool cppVar_41454 = cppVar_41230 || cppVar_41453;
	bool cppVar_41455 = cppVar_41227 || cppVar_41454;
	bool cppVar_41456 = cppVar_41224 || cppVar_41455;
	bool cppVar_41457 = cppVar_41221 || cppVar_41456;
	bool cppVar_41458 = cppVar_41218 || cppVar_41457;
	bool cppVar_41459 = cppVar_41215 || cppVar_41458;
	bool cppVar_41460 = cppVar_41212 || cppVar_41459;
	bool cppVar_41461 = cppVar_41209 || cppVar_41460;
	bool cppVar_41462 = cppVar_41206 || cppVar_41461;
	bool cppVar_41463 = cppVar_41203 || cppVar_41462;
	bool cppVar_41464 = cppVar_41200 || cppVar_41463;
	bool cppVar_41465 = cppVar_41197 || cppVar_41464;
	bool cppVar_41466 = cppVar_41194 || cppVar_41465;
	bool cppVar_41467 = cppVar_41191 || cppVar_41466;
	bool cppVar_41468 = cppVar_41188 || cppVar_41467;
	bool cppVar_41469 = cppVar_41185 || cppVar_41468;
	bool cppVar_41470 = cppVar_41182 || cppVar_41469;
	bool cppVar_41471 = cppVar_41179 || cppVar_41470;
	bool cppVar_41472 = cppVar_41176 || cppVar_41471;
	bool cppVar_41473 = cppVar_41173 || cppVar_41472;
	bool cppVar_41474 = cppVar_41170 || cppVar_41473;
	bool cppVar_41475 = cppVar_41167 || cppVar_41474;
	bool cppVar_41476 = cppVar_41164 || cppVar_41475;
	bool cppVar_41477 = cppVar_41161 || cppVar_41476;
	bool cppVar_41478 = cppVar_41158 || cppVar_41477;
	bool cppVar_41479 = cppVar_41155 || cppVar_41478;
	bool cppVar_41480 = cppVar_41152 || cppVar_41479;
	bool cppVar_41481 = cppVar_41149 || cppVar_41480;
	bool cppVar_41482 = cppVar_41146 || cppVar_41481;
	bool cppVar_41483 = cppVar_41143 || cppVar_41482;
	bool cppVar_41484 = cppVar_41140 || cppVar_41483;
	bool cppVar_41485 = cppVar_41137 || cppVar_41484;
	bool cppVar_41486 = cppVar_41134 || cppVar_41485;
	bool cppVar_41487 = cppVar_41131 || cppVar_41486;
	bool cppVar_41488 = cppVar_41128 || cppVar_41487;
	bool cppVar_41489 = cppVar_41125 || cppVar_41488;
	bool cppVar_41490 = cppVar_41122 || cppVar_41489;
	bool cppVar_41491 = cppVar_41119 || cppVar_41490;
	bool cppVar_41492 = cppVar_41116 || cppVar_41491;
	bool cppVar_41493 = cppVar_41113 || cppVar_41492;
	bool cppVar_41494 = cppVar_41110 || cppVar_41493;
	bool cppVar_41495 = cppVar_41107 || cppVar_41494;
	bool cppVar_41496 = cppVar_41104 || cppVar_41495;
	bool cppVar_41497 = cppVar_41101 || cppVar_41496;
	bool cppVar_41498 = cppVar_41098 || cppVar_41497;
	bool cppVar_41499 = cppVar_41095 || cppVar_41498;
	bool cppVar_41500 = cppVar_41092 || cppVar_41499;
	bool cppVar_41501 = cppVar_41089 || cppVar_41500;
	bool cppVar_41502 = cppVar_41086 || cppVar_41501;
	bool cppVar_41503 = cppVar_41083 || cppVar_41502;
	bool cppVar_41504 = cppVar_41080 || cppVar_41503;
	bool cppVar_41505 = cppVar_41077 || cppVar_41504;
	bool cppVar_41506 = cppVar_41074 || cppVar_41505;
	bool cppVar_41507 = cppVar_41071 || cppVar_41506;
	bool cppVar_41508 = cppVar_41068 || cppVar_41507;
	bool cppVar_41509 = cppVar_41065 || cppVar_41508;
	bool cppVar_41510 = cppVar_41062 || cppVar_41509;
	bool cppVar_41511 = cppVar_41059 || cppVar_41510;
	bool cppVar_41512 = cppVar_41056 || cppVar_41511;
	bool cppVar_41513 = cppVar_41053 || cppVar_41512;
	bool cppVar_41514 = cppVar_41050 || cppVar_41513;
	bool cppVar_41515 = cppVar_41047 || cppVar_41514;
	bool cppVar_41516 = cppVar_41044 || cppVar_41515;
	bool cppVar_41517 = cppVar_41041 || cppVar_41516;
	bool cppVar_41518 = cppVar_41038 || cppVar_41517;
	bool cppVar_41519 = cppVar_41035 || cppVar_41518;
	bool cppVar_41520 = cppVar_41032 || cppVar_41519;
	bool cppVar_41521 = cppVar_41029 || cppVar_41520;
	bool cppVar_41522 = cppVar_41026 || cppVar_41521;
	bool cppVar_41523 = cppVar_41023 || cppVar_41522;
	bool cppVar_41524 = cppVar_41020 || cppVar_41523;
	bool cppVar_41525 = cppVar_41017 || cppVar_41524;
	bool cppVar_41526 = cppVar_41014 || cppVar_41525;
	bool cppVar_41527 = cppVar_41011 || cppVar_41526;
	bool cppVar_41528 = cppVar_41008 || cppVar_41527;
	bool cppVar_41529 = cppVar_41005 || cppVar_41528;
	bool cppVar_41530 = cppVar_41002 || cppVar_41529;
	bool cppVar_41531 = cppVar_40999 || cppVar_41530;
	bool cppVar_41532 = cppVar_40996 || cppVar_41531;
	bool cppVar_41533 = cppVar_40993 || cppVar_41532;
	bool cppVar_41534 = cppVar_40990 || cppVar_41533;
	bool cppVar_41535 = cppVar_40987 || cppVar_41534;
	bool cppVar_41536 = cppVar_40984 || cppVar_41535;
	bool cppVar_41537 = cppVar_40981 || cppVar_41536;
	bool cppVar_41538 = cppVar_40978 || cppVar_41537;
	bool cppVar_41539 = cppVar_40975 || cppVar_41538;
	bool cppVar_41540 = cppVar_40972 || cppVar_41539;
	bool cppVar_41541 = cppVar_40969 || cppVar_41540;
	bool cppVar_41542 = cppVar_40966 || cppVar_41541;
	bool cppVar_41543 = cppVar_40963 || cppVar_41542;
	bool cppVar_41544 = cppVar_40960 || cppVar_41543;
	bool cppVar_41545 = cppVar_40957 || cppVar_41544;
	bool cppVar_41546 = cppVar_40954 || cppVar_41545;
	bool cppVar_41547 = cppVar_40951 || cppVar_41546;
	bool cppVar_41548 = cppVar_40948 || cppVar_41547;
	bool cppVar_41549 = cppVar_40945 || cppVar_41548;
	bool cppVar_41550 = cppVar_40942 || cppVar_41549;
	bool cppVar_41551 = cppVar_40939 || cppVar_41550;
	bool cppVar_41552 = cppVar_40936 || cppVar_41551;
	bool cppVar_41553 = cppVar_40933 || cppVar_41552;
	bool cppVar_41554 = cppVar_40930 || cppVar_41553;
	bool cppVar_41555 = cppVar_40927 || cppVar_41554;
	bool cppVar_41556 = cppVar_40924 || cppVar_41555;
	bool cppVar_41557 = cppVar_40921 || cppVar_41556;
	bool cppVar_41558 = cppVar_40918 || cppVar_41557;
	bool cppVar_41559 = cppVar_40915 || cppVar_41558;
	bool cppVar_41560 = cppVar_40912 || cppVar_41559;
	bool cppVar_41561 = cppVar_40909 || cppVar_41560;
	bool cppVar_41562 = cppVar_40906 || cppVar_41561;
	bool cppVar_41563 = cppVar_40903 || cppVar_41562;
	bool cppVar_41564 = cppVar_40900 || cppVar_41563;
	bool cppVar_41565 = cppVar_40897 || cppVar_41564;
	bool cppVar_41566 = cppVar_40894 || cppVar_41565;
	bool cppVar_41567 = cppVar_40891 || cppVar_41566;
	bool cppVar_41568 = cppVar_40888 || cppVar_41567;
	bool cppVar_41569 = cppVar_40885 || cppVar_41568;
	bool cppVar_41570 = cppVar_40882 || cppVar_41569;
	bool cppVar_41571 = cppVar_40879 || cppVar_41570;
	bool cppVar_41572 = cppVar_40876 || cppVar_41571;
	bool cppVar_41573 = cppVar_40873 || cppVar_41572;
	bool cppVar_41574 = cppVar_40870 || cppVar_41573;
	bool cppVar_41575 = cppVar_40867 || cppVar_41574;
	bool cppVar_41576 = cppVar_40864 || cppVar_41575;
	bool cppVar_41577 = cppVar_40861 || cppVar_41576;
	bool cppVar_41578 = cppVar_40858 || cppVar_41577;
	bool cppVar_41579 = cppVar_40855 || cppVar_41578;
	bool cppVar_41580 = cppVar_40852 || cppVar_41579;
	bool cppVar_41581 = cppVar_40849 || cppVar_41580;
	bool cppVar_41582 = cppVar_40846 || cppVar_41581;
	bool cppVar_41583 = cppVar_40843 || cppVar_41582;
	bool cppVar_41584 = cppVar_40840 || cppVar_41583;
	bool cppVar_41585 = cppVar_40837 || cppVar_41584;
	bool cppVar_41586 = cppVar_40834 || cppVar_41585;
	bool cppVar_41587 = cppVar_40831 || cppVar_41586;
	bool cppVar_41588 = cppVar_40828 || cppVar_41587;
	bool cppVar_41589 = cppVar_40825 || cppVar_41588;
	bool cppVar_41590 = cppVar_40822 || cppVar_41589;
	bool cppVar_41591 = cppVar_40819 || cppVar_41590;
	bool cppVar_41592 = cppVar_40816 || cppVar_41591;
	bool cppVar_41593 = cppVar_40813 || cppVar_41592;
	bool cppVar_41594 = cppVar_40810 || cppVar_41593;
	bool cppVar_41595 = cppVar_40807 || cppVar_41594;
	bool cppVar_41596 = cppVar_40804 || cppVar_41595;
	bool cppVar_41597 = cppVar_40801 || cppVar_41596;
	bool cppVar_41598 = cppVar_40798 || cppVar_41597;
	bool cppVar_41599 = cppVar_40795 || cppVar_41598;
	bool cppVar_41600 = cppVar_40792 || cppVar_41599;
	bool cppVar_41601 = cppVar_40789 || cppVar_41600;
	bool cppVar_41602 = cppVar_40786 || cppVar_41601;
	bool cppVar_41603 = cppVar_40783 || cppVar_41602;
	bool cppVar_41604 = cppVar_40780 || cppVar_41603;
	bool cppVar_41605 = cppVar_40777 || cppVar_41604;
	bool cppVar_41606 = cppVar_40774 || cppVar_41605;
	bool cppVar_41607 = cppVar_40771 || cppVar_41606;
	bool cppVar_41608 = cppVar_40768 || cppVar_41607;
	bool cppVar_41609 = cppVar_40765 || cppVar_41608;
	bool cppVar_41610 = cppVar_40762 || cppVar_41609;
	bool cppVar_41611 = cppVar_40759 || cppVar_41610;
	bool cppVar_41612 = cppVar_40756 || cppVar_41611;
	bool cppVar_41613 = cppVar_40753 || cppVar_41612;
	bool cppVar_41614 = cppVar_40750 || cppVar_41613;
	bool cppVar_41615 = cppVar_40747 || cppVar_41614;
	bool cppVar_41616 = cppVar_40744 || cppVar_41615;
	bool cppVar_41617 = cppVar_40741 || cppVar_41616;
	bool cppVar_41618 = cppVar_40738 || cppVar_41617;
	bool cppVar_41619 = cppVar_40735 || cppVar_41618;
	bool cppVar_41620 = cppVar_40732 || cppVar_41619;
	bool cppVar_41621 = cppVar_40729 || cppVar_41620;
	bool cppVar_41622 = cppVar_40726 || cppVar_41621;
	bool cppVar_41623 = cppVar_40723 || cppVar_41622;
	bool cppVar_41624 = cppVar_40720 || cppVar_41623;
	BIT_VEC cppVar_41626 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_41628 = (cppVar_41626 << 3) | 7;
	cppVar_41628 = (cppVar_41628 & cppMask_un_5_);
	BIT_VEC cppVar_41629 = (0 << 5) | cppVar_41628;
	cppVar_41629 = (cppVar_41629 & cppMask_un_8_);
	bool cppVar_41631 = (cppVar_41629 == 176);
	BIT_VEC cppVar_41632 = (cppVar_41631) ? ACC : P3;
	BIT_VEC cppVar_41633 = (cppVar_41624) ? cppVar_41632 : P3;
	BIT_VEC cppVar_41634 = (cppVar_40594) ? cppVar_40717 : cppVar_41633;
	BIT_VEC cppVar_41635 = (cppVar_40163) ? cppVar_40591 : cppVar_41634;
	BIT_VEC cppVar_41636 = (cppVar_40033) ? cppVar_40156 : cppVar_41635;
	BIT_VEC cppVar_41637 = (cppVar_39904) ? cppVar_40026 : cppVar_41636;
	BIT_VEC cppVar_41638 = (cppVar_39776) ? cppVar_39901 : cppVar_41637;
	BIT_VEC cppVar_41639 = (cppVar_39651) ? cppVar_39773 : cppVar_41638;
	BIT_VEC cppVar_41640 = (cppVar_39523) ? cppVar_39648 : cppVar_41639;
	BIT_VEC cppVar_41641 = (cppVar_39398) ? cppVar_39520 : cppVar_41640;
	BIT_VEC cppVar_41642 = (cppVar_39270) ? cppVar_39395 : cppVar_41641;
	BIT_VEC cppVar_41643 = (cppVar_39258) ? cppVar_39267 : cppVar_41642;
	BIT_VEC cppVar_41644 = (cppVar_39133) ? cppVar_39255 : cppVar_41643;
	BIT_VEC cppVar_41645 = (cppVar_39117) ? cppVar_39130 : cppVar_41644;
	BIT_VEC cppVar_41646 = (cppVar_39101) ? cppVar_39114 : cppVar_41645;
	BIT_VEC cppVar_41647 = (cppVar_38952) ? cppVar_39098 : cppVar_41646;
	BIT_VEC cppVar_41648 = (cppVar_38803) ? cppVar_38949 : cppVar_41647;
	BIT_VEC cppVar_41649 = (cppVar_38654) ? cppVar_38800 : cppVar_41648;
	BIT_VEC cppVar_41650 = (cppVar_38505) ? cppVar_38651 : cppVar_41649;
	BIT_VEC cppVar_41651 = (cppVar_38356) ? cppVar_38502 : cppVar_41650;
	BIT_VEC cppVar_41652 = (cppVar_38207) ? cppVar_38353 : cppVar_41651;
	BIT_VEC cppVar_41653 = (cppVar_38058) ? cppVar_38204 : cppVar_41652;
	BIT_VEC cppVar_41654 = (cppVar_37909) ? cppVar_38055 : cppVar_41653;
	BIT_VEC cppVar_41655 = (cppVar_37478) ? cppVar_37906 : cppVar_41654;
	BIT_VEC cppVar_41656 = (cppVar_36649) ? cppVar_37475 : cppVar_41655;
	BIT_VEC cppVar_41657 = (cppVar_36640) ? cppVar_36646 : cppVar_41656;
	BIT_VEC cppVar_41658 = (cppVar_36626) ? cppVar_36633 : cppVar_41657;
	BIT_VEC cppVar_41659 = (cppVar_36195) ? cppVar_36623 : cppVar_41658;
	return cppVar_41659;
}
