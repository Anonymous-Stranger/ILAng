#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_DPL()
{
	BIT_VEC cppVar_9950 = ROM.rd(PC);
	bool cppVar_9952 = (cppVar_9950 == 208);
	BIT_VEC cppVar_9954 = PC + 1;
	cppVar_9954 = (cppVar_9954 & cppMask_un_16_);
	BIT_VEC cppVar_9955 = ROM.rd(cppVar_9954);
	bool cppVar_9957 = (cppVar_9955 == 130);
	BIT_VEC cppVar_9958 = IRAM.rd(SP);
	BIT_VEC cppVar_9959 = (cppVar_9957) ? cppVar_9958 : DPL;
	BIT_VEC cppVar_9960 = ROM.rd(PC);
	bool cppVar_9962 = (cppVar_9960 == 245);
	BIT_VEC cppVar_9963 = ROM.rd(PC);
	bool cppVar_9965 = (cppVar_9963 == 197);
	bool cppVar_9966 = cppVar_9962 || cppVar_9965;
	BIT_VEC cppVar_9968 = PC + 1;
	cppVar_9968 = (cppVar_9968 & cppMask_un_16_);
	BIT_VEC cppVar_9969 = ROM.rd(cppVar_9968);
	bool cppVar_9971 = (cppVar_9969 == 130);
	BIT_VEC cppVar_9972 = (cppVar_9971) ? ACC : DPL;
	BIT_VEC cppVar_9973 = ROM.rd(PC);
	bool cppVar_9975 = (cppVar_9973 == 163);
	BIT_VEC cppVar_9977 = PC + 2;
	cppVar_9977 = (cppVar_9977 & cppMask_un_16_);
	BIT_VEC cppVar_9978 = ROM.rd(cppVar_9977);
	bool cppVar_9980 = (cppVar_9978 == 130);
	BIT_VEC cppVar_9981 = PC + 2;
	cppVar_9981 = (cppVar_9981 & cppMask_un_16_);
	BIT_VEC cppVar_9982 = ROM.rd(cppVar_9981);
	BIT_VEC cppVar_9983 = (cppVar_9982 >> 7) & cppMask_un_1_;
	bool cppVar_9985 = (cppVar_9983 == 0);
	BIT_VEC cppVar_9986 = PC + 2;
	cppVar_9986 = (cppVar_9986 & cppMask_un_16_);
	BIT_VEC cppVar_9987 = ROM.rd(cppVar_9986);
	BIT_VEC cppVar_9988 = IRAM.rd(cppVar_9987);
	BIT_VEC cppVar_9989 = PC + 2;
	cppVar_9989 = (cppVar_9989 & cppMask_un_16_);
	BIT_VEC cppVar_9990 = ROM.rd(cppVar_9989);
	bool cppVar_9992 = (cppVar_9990 == 128);
	BIT_VEC cppVar_9993 = PC + 2;
	cppVar_9993 = (cppVar_9993 & cppMask_un_16_);
	BIT_VEC cppVar_9994 = ROM.rd(cppVar_9993);
	bool cppVar_9996 = (cppVar_9994 == 129);
	BIT_VEC cppVar_9997 = PC + 2;
	cppVar_9997 = (cppVar_9997 & cppMask_un_16_);
	BIT_VEC cppVar_9998 = ROM.rd(cppVar_9997);
	bool cppVar_10000 = (cppVar_9998 == 130);
	BIT_VEC cppVar_10001 = PC + 2;
	cppVar_10001 = (cppVar_10001 & cppMask_un_16_);
	BIT_VEC cppVar_10002 = ROM.rd(cppVar_10001);
	bool cppVar_10004 = (cppVar_10002 == 131);
	BIT_VEC cppVar_10005 = PC + 2;
	cppVar_10005 = (cppVar_10005 & cppMask_un_16_);
	BIT_VEC cppVar_10006 = ROM.rd(cppVar_10005);
	bool cppVar_10008 = (cppVar_10006 == 135);
	BIT_VEC cppVar_10009 = PC + 2;
	cppVar_10009 = (cppVar_10009 & cppMask_un_16_);
	BIT_VEC cppVar_10010 = ROM.rd(cppVar_10009);
	bool cppVar_10012 = (cppVar_10010 == 136);
	BIT_VEC cppVar_10013 = PC + 2;
	cppVar_10013 = (cppVar_10013 & cppMask_un_16_);
	BIT_VEC cppVar_10014 = ROM.rd(cppVar_10013);
	bool cppVar_10016 = (cppVar_10014 == 137);
	BIT_VEC cppVar_10017 = PC + 2;
	cppVar_10017 = (cppVar_10017 & cppMask_un_16_);
	BIT_VEC cppVar_10018 = ROM.rd(cppVar_10017);
	bool cppVar_10020 = (cppVar_10018 == 138);
	BIT_VEC cppVar_10021 = PC + 2;
	cppVar_10021 = (cppVar_10021 & cppMask_un_16_);
	BIT_VEC cppVar_10022 = ROM.rd(cppVar_10021);
	bool cppVar_10024 = (cppVar_10022 == 140);
	BIT_VEC cppVar_10025 = PC + 2;
	cppVar_10025 = (cppVar_10025 & cppMask_un_16_);
	BIT_VEC cppVar_10026 = ROM.rd(cppVar_10025);
	bool cppVar_10028 = (cppVar_10026 == 139);
	BIT_VEC cppVar_10029 = PC + 2;
	cppVar_10029 = (cppVar_10029 & cppMask_un_16_);
	BIT_VEC cppVar_10030 = ROM.rd(cppVar_10029);
	bool cppVar_10032 = (cppVar_10030 == 141);
	BIT_VEC cppVar_10033 = PC + 2;
	cppVar_10033 = (cppVar_10033 & cppMask_un_16_);
	BIT_VEC cppVar_10034 = ROM.rd(cppVar_10033);
	bool cppVar_10036 = (cppVar_10034 == 144);
	BIT_VEC cppVar_10037 = PC + 2;
	cppVar_10037 = (cppVar_10037 & cppMask_un_16_);
	BIT_VEC cppVar_10038 = ROM.rd(cppVar_10037);
	bool cppVar_10040 = (cppVar_10038 == 152);
	BIT_VEC cppVar_10041 = PC + 2;
	cppVar_10041 = (cppVar_10041 & cppMask_un_16_);
	BIT_VEC cppVar_10042 = ROM.rd(cppVar_10041);
	bool cppVar_10044 = (cppVar_10042 == 153);
	BIT_VEC cppVar_10045 = PC + 2;
	cppVar_10045 = (cppVar_10045 & cppMask_un_16_);
	BIT_VEC cppVar_10046 = ROM.rd(cppVar_10045);
	bool cppVar_10048 = (cppVar_10046 == 160);
	BIT_VEC cppVar_10049 = PC + 2;
	cppVar_10049 = (cppVar_10049 & cppMask_un_16_);
	BIT_VEC cppVar_10050 = ROM.rd(cppVar_10049);
	bool cppVar_10052 = (cppVar_10050 == 168);
	BIT_VEC cppVar_10053 = PC + 2;
	cppVar_10053 = (cppVar_10053 & cppMask_un_16_);
	BIT_VEC cppVar_10054 = ROM.rd(cppVar_10053);
	bool cppVar_10056 = (cppVar_10054 == 176);
	BIT_VEC cppVar_10057 = PC + 2;
	cppVar_10057 = (cppVar_10057 & cppMask_un_16_);
	BIT_VEC cppVar_10058 = ROM.rd(cppVar_10057);
	bool cppVar_10060 = (cppVar_10058 == 184);
	BIT_VEC cppVar_10061 = PC + 2;
	cppVar_10061 = (cppVar_10061 & cppMask_un_16_);
	BIT_VEC cppVar_10062 = ROM.rd(cppVar_10061);
	bool cppVar_10064 = (cppVar_10062 == 208);
	BIT_VEC cppVar_10065 = PC + 2;
	cppVar_10065 = (cppVar_10065 & cppMask_un_16_);
	BIT_VEC cppVar_10066 = ROM.rd(cppVar_10065);
	bool cppVar_10068 = (cppVar_10066 == 224);
	BIT_VEC cppVar_10069 = PC + 2;
	cppVar_10069 = (cppVar_10069 & cppMask_un_16_);
	BIT_VEC cppVar_10070 = ROM.rd(cppVar_10069);
	bool cppVar_10072 = (cppVar_10070 == 240);
	BIT_VEC cppVar_10074 = (cppVar_10072) ? B : 0;
	BIT_VEC cppVar_10075 = (cppVar_10068) ? ACC : cppVar_10074;
	BIT_VEC cppVar_10076 = (cppVar_10064) ? PSW : cppVar_10075;
	BIT_VEC cppVar_10077 = (cppVar_10060) ? IP : cppVar_10076;
	BIT_VEC cppVar_10078 = (cppVar_10056) ? P3 : cppVar_10077;
	BIT_VEC cppVar_10079 = (cppVar_10052) ? IE : cppVar_10078;
	BIT_VEC cppVar_10080 = (cppVar_10048) ? P2 : cppVar_10079;
	BIT_VEC cppVar_10081 = (cppVar_10044) ? SBUF : cppVar_10080;
	BIT_VEC cppVar_10082 = (cppVar_10040) ? SCON : cppVar_10081;
	BIT_VEC cppVar_10083 = (cppVar_10036) ? P1 : cppVar_10082;
	BIT_VEC cppVar_10084 = (cppVar_10032) ? TH1 : cppVar_10083;
	BIT_VEC cppVar_10085 = (cppVar_10028) ? TL1 : cppVar_10084;
	BIT_VEC cppVar_10086 = (cppVar_10024) ? TH0 : cppVar_10085;
	BIT_VEC cppVar_10087 = (cppVar_10020) ? TL0 : cppVar_10086;
	BIT_VEC cppVar_10088 = (cppVar_10016) ? TMOD : cppVar_10087;
	BIT_VEC cppVar_10089 = (cppVar_10012) ? TCON : cppVar_10088;
	BIT_VEC cppVar_10090 = (cppVar_10008) ? PCON : cppVar_10089;
	BIT_VEC cppVar_10091 = (cppVar_10004) ? DPH : cppVar_10090;
	BIT_VEC cppVar_10092 = (cppVar_10000) ? DPL : cppVar_10091;
	BIT_VEC cppVar_10093 = (cppVar_9996) ? SP : cppVar_10092;
	BIT_VEC cppVar_10094 = (cppVar_9992) ? P0 : cppVar_10093;
	BIT_VEC cppVar_10095 = (cppVar_9985) ? cppVar_9988 : cppVar_10094;
	BIT_VEC cppVar_10097 = cppVar_10095 + 1;
	cppVar_10097 = (cppVar_10097 & cppMask_un_8_);
	BIT_VEC cppVar_10098 = (cppVar_9980) ? cppVar_10097 : DPL;
	BIT_VEC cppVar_10099 = ROM.rd(PC);
	bool cppVar_10101 = (cppVar_10099 == 144);
	BIT_VEC cppVar_10103 = PC + 2;
	cppVar_10103 = (cppVar_10103 & cppMask_un_16_);
	BIT_VEC cppVar_10104 = ROM.rd(cppVar_10103);
	bool cppVar_10106 = (cppVar_10104 == 130);
	BIT_VEC cppVar_10107 = PC + 2;
	cppVar_10107 = (cppVar_10107 & cppMask_un_16_);
	BIT_VEC cppVar_10108 = ROM.rd(cppVar_10107);
	BIT_VEC cppVar_10109 = (cppVar_10106) ? cppVar_10108 : DPL;
	BIT_VEC cppVar_10110 = ROM.rd(PC);
	bool cppVar_10112 = (cppVar_10110 == 143);
	BIT_VEC cppVar_10114 = PC + 1;
	cppVar_10114 = (cppVar_10114 & cppMask_un_16_);
	BIT_VEC cppVar_10115 = ROM.rd(cppVar_10114);
	bool cppVar_10117 = (cppVar_10115 == 130);
	BIT_VEC cppVar_10119 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10121 = (cppVar_10119 << 3) | 7;
	cppVar_10121 = (cppVar_10121 & cppMask_un_5_);
	BIT_VEC cppVar_10122 = (0 << 5) | cppVar_10121;
	cppVar_10122 = (cppVar_10122 & cppMask_un_8_);
	BIT_VEC cppVar_10123 = (cppVar_10122 >> 7) & cppMask_un_1_;
	bool cppVar_10125 = (cppVar_10123 == 0);
	BIT_VEC cppVar_10126 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10127 = (cppVar_10126 << 3) | 7;
	cppVar_10127 = (cppVar_10127 & cppMask_un_5_);
	BIT_VEC cppVar_10128 = (0 << 5) | cppVar_10127;
	cppVar_10128 = (cppVar_10128 & cppMask_un_8_);
	BIT_VEC cppVar_10129 = IRAM.rd(cppVar_10128);
	BIT_VEC cppVar_10130 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10131 = (cppVar_10130 << 3) | 7;
	cppVar_10131 = (cppVar_10131 & cppMask_un_5_);
	BIT_VEC cppVar_10132 = (0 << 5) | cppVar_10131;
	cppVar_10132 = (cppVar_10132 & cppMask_un_8_);
	bool cppVar_10134 = (cppVar_10132 == 128);
	BIT_VEC cppVar_10135 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10136 = (cppVar_10135 << 3) | 7;
	cppVar_10136 = (cppVar_10136 & cppMask_un_5_);
	BIT_VEC cppVar_10137 = (0 << 5) | cppVar_10136;
	cppVar_10137 = (cppVar_10137 & cppMask_un_8_);
	bool cppVar_10139 = (cppVar_10137 == 129);
	BIT_VEC cppVar_10140 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10141 = (cppVar_10140 << 3) | 7;
	cppVar_10141 = (cppVar_10141 & cppMask_un_5_);
	BIT_VEC cppVar_10142 = (0 << 5) | cppVar_10141;
	cppVar_10142 = (cppVar_10142 & cppMask_un_8_);
	bool cppVar_10144 = (cppVar_10142 == 130);
	BIT_VEC cppVar_10145 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10146 = (cppVar_10145 << 3) | 7;
	cppVar_10146 = (cppVar_10146 & cppMask_un_5_);
	BIT_VEC cppVar_10147 = (0 << 5) | cppVar_10146;
	cppVar_10147 = (cppVar_10147 & cppMask_un_8_);
	bool cppVar_10149 = (cppVar_10147 == 131);
	BIT_VEC cppVar_10150 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10151 = (cppVar_10150 << 3) | 7;
	cppVar_10151 = (cppVar_10151 & cppMask_un_5_);
	BIT_VEC cppVar_10152 = (0 << 5) | cppVar_10151;
	cppVar_10152 = (cppVar_10152 & cppMask_un_8_);
	bool cppVar_10154 = (cppVar_10152 == 135);
	BIT_VEC cppVar_10155 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10156 = (cppVar_10155 << 3) | 7;
	cppVar_10156 = (cppVar_10156 & cppMask_un_5_);
	BIT_VEC cppVar_10157 = (0 << 5) | cppVar_10156;
	cppVar_10157 = (cppVar_10157 & cppMask_un_8_);
	bool cppVar_10159 = (cppVar_10157 == 136);
	BIT_VEC cppVar_10160 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10161 = (cppVar_10160 << 3) | 7;
	cppVar_10161 = (cppVar_10161 & cppMask_un_5_);
	BIT_VEC cppVar_10162 = (0 << 5) | cppVar_10161;
	cppVar_10162 = (cppVar_10162 & cppMask_un_8_);
	bool cppVar_10164 = (cppVar_10162 == 137);
	BIT_VEC cppVar_10165 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10166 = (cppVar_10165 << 3) | 7;
	cppVar_10166 = (cppVar_10166 & cppMask_un_5_);
	BIT_VEC cppVar_10167 = (0 << 5) | cppVar_10166;
	cppVar_10167 = (cppVar_10167 & cppMask_un_8_);
	bool cppVar_10169 = (cppVar_10167 == 138);
	BIT_VEC cppVar_10170 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10171 = (cppVar_10170 << 3) | 7;
	cppVar_10171 = (cppVar_10171 & cppMask_un_5_);
	BIT_VEC cppVar_10172 = (0 << 5) | cppVar_10171;
	cppVar_10172 = (cppVar_10172 & cppMask_un_8_);
	bool cppVar_10174 = (cppVar_10172 == 140);
	BIT_VEC cppVar_10175 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10176 = (cppVar_10175 << 3) | 7;
	cppVar_10176 = (cppVar_10176 & cppMask_un_5_);
	BIT_VEC cppVar_10177 = (0 << 5) | cppVar_10176;
	cppVar_10177 = (cppVar_10177 & cppMask_un_8_);
	bool cppVar_10179 = (cppVar_10177 == 139);
	BIT_VEC cppVar_10180 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10181 = (cppVar_10180 << 3) | 7;
	cppVar_10181 = (cppVar_10181 & cppMask_un_5_);
	BIT_VEC cppVar_10182 = (0 << 5) | cppVar_10181;
	cppVar_10182 = (cppVar_10182 & cppMask_un_8_);
	bool cppVar_10184 = (cppVar_10182 == 141);
	BIT_VEC cppVar_10185 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10186 = (cppVar_10185 << 3) | 7;
	cppVar_10186 = (cppVar_10186 & cppMask_un_5_);
	BIT_VEC cppVar_10187 = (0 << 5) | cppVar_10186;
	cppVar_10187 = (cppVar_10187 & cppMask_un_8_);
	bool cppVar_10189 = (cppVar_10187 == 144);
	BIT_VEC cppVar_10190 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10191 = (cppVar_10190 << 3) | 7;
	cppVar_10191 = (cppVar_10191 & cppMask_un_5_);
	BIT_VEC cppVar_10192 = (0 << 5) | cppVar_10191;
	cppVar_10192 = (cppVar_10192 & cppMask_un_8_);
	bool cppVar_10194 = (cppVar_10192 == 152);
	BIT_VEC cppVar_10195 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10196 = (cppVar_10195 << 3) | 7;
	cppVar_10196 = (cppVar_10196 & cppMask_un_5_);
	BIT_VEC cppVar_10197 = (0 << 5) | cppVar_10196;
	cppVar_10197 = (cppVar_10197 & cppMask_un_8_);
	bool cppVar_10199 = (cppVar_10197 == 153);
	BIT_VEC cppVar_10200 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10201 = (cppVar_10200 << 3) | 7;
	cppVar_10201 = (cppVar_10201 & cppMask_un_5_);
	BIT_VEC cppVar_10202 = (0 << 5) | cppVar_10201;
	cppVar_10202 = (cppVar_10202 & cppMask_un_8_);
	bool cppVar_10204 = (cppVar_10202 == 160);
	BIT_VEC cppVar_10205 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10206 = (cppVar_10205 << 3) | 7;
	cppVar_10206 = (cppVar_10206 & cppMask_un_5_);
	BIT_VEC cppVar_10207 = (0 << 5) | cppVar_10206;
	cppVar_10207 = (cppVar_10207 & cppMask_un_8_);
	bool cppVar_10209 = (cppVar_10207 == 168);
	BIT_VEC cppVar_10210 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10211 = (cppVar_10210 << 3) | 7;
	cppVar_10211 = (cppVar_10211 & cppMask_un_5_);
	BIT_VEC cppVar_10212 = (0 << 5) | cppVar_10211;
	cppVar_10212 = (cppVar_10212 & cppMask_un_8_);
	bool cppVar_10214 = (cppVar_10212 == 176);
	BIT_VEC cppVar_10215 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10216 = (cppVar_10215 << 3) | 7;
	cppVar_10216 = (cppVar_10216 & cppMask_un_5_);
	BIT_VEC cppVar_10217 = (0 << 5) | cppVar_10216;
	cppVar_10217 = (cppVar_10217 & cppMask_un_8_);
	bool cppVar_10219 = (cppVar_10217 == 184);
	BIT_VEC cppVar_10220 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10221 = (cppVar_10220 << 3) | 7;
	cppVar_10221 = (cppVar_10221 & cppMask_un_5_);
	BIT_VEC cppVar_10222 = (0 << 5) | cppVar_10221;
	cppVar_10222 = (cppVar_10222 & cppMask_un_8_);
	bool cppVar_10224 = (cppVar_10222 == 208);
	BIT_VEC cppVar_10225 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10226 = (cppVar_10225 << 3) | 7;
	cppVar_10226 = (cppVar_10226 & cppMask_un_5_);
	BIT_VEC cppVar_10227 = (0 << 5) | cppVar_10226;
	cppVar_10227 = (cppVar_10227 & cppMask_un_8_);
	bool cppVar_10229 = (cppVar_10227 == 224);
	BIT_VEC cppVar_10230 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10231 = (cppVar_10230 << 3) | 7;
	cppVar_10231 = (cppVar_10231 & cppMask_un_5_);
	BIT_VEC cppVar_10232 = (0 << 5) | cppVar_10231;
	cppVar_10232 = (cppVar_10232 & cppMask_un_8_);
	bool cppVar_10234 = (cppVar_10232 == 240);
	BIT_VEC cppVar_10236 = (cppVar_10234) ? B : 0;
	BIT_VEC cppVar_10237 = (cppVar_10229) ? ACC : cppVar_10236;
	BIT_VEC cppVar_10238 = (cppVar_10224) ? PSW : cppVar_10237;
	BIT_VEC cppVar_10239 = (cppVar_10219) ? IP : cppVar_10238;
	BIT_VEC cppVar_10240 = (cppVar_10214) ? P3 : cppVar_10239;
	BIT_VEC cppVar_10241 = (cppVar_10209) ? IE : cppVar_10240;
	BIT_VEC cppVar_10242 = (cppVar_10204) ? P2 : cppVar_10241;
	BIT_VEC cppVar_10243 = (cppVar_10199) ? SBUF : cppVar_10242;
	BIT_VEC cppVar_10244 = (cppVar_10194) ? SCON : cppVar_10243;
	BIT_VEC cppVar_10245 = (cppVar_10189) ? P1 : cppVar_10244;
	BIT_VEC cppVar_10246 = (cppVar_10184) ? TH1 : cppVar_10245;
	BIT_VEC cppVar_10247 = (cppVar_10179) ? TL1 : cppVar_10246;
	BIT_VEC cppVar_10248 = (cppVar_10174) ? TH0 : cppVar_10247;
	BIT_VEC cppVar_10249 = (cppVar_10169) ? TL0 : cppVar_10248;
	BIT_VEC cppVar_10250 = (cppVar_10164) ? TMOD : cppVar_10249;
	BIT_VEC cppVar_10251 = (cppVar_10159) ? TCON : cppVar_10250;
	BIT_VEC cppVar_10252 = (cppVar_10154) ? PCON : cppVar_10251;
	BIT_VEC cppVar_10253 = (cppVar_10149) ? DPH : cppVar_10252;
	BIT_VEC cppVar_10254 = (cppVar_10144) ? DPL : cppVar_10253;
	BIT_VEC cppVar_10255 = (cppVar_10139) ? SP : cppVar_10254;
	BIT_VEC cppVar_10256 = (cppVar_10134) ? P0 : cppVar_10255;
	BIT_VEC cppVar_10257 = (cppVar_10125) ? cppVar_10129 : cppVar_10256;
	BIT_VEC cppVar_10258 = (cppVar_10117) ? cppVar_10257 : DPL;
	BIT_VEC cppVar_10259 = ROM.rd(PC);
	bool cppVar_10261 = (cppVar_10259 == 142);
	BIT_VEC cppVar_10263 = PC + 1;
	cppVar_10263 = (cppVar_10263 & cppMask_un_16_);
	BIT_VEC cppVar_10264 = ROM.rd(cppVar_10263);
	bool cppVar_10266 = (cppVar_10264 == 130);
	BIT_VEC cppVar_10268 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10270 = (cppVar_10268 << 3) | 6;
	cppVar_10270 = (cppVar_10270 & cppMask_un_5_);
	BIT_VEC cppVar_10271 = (0 << 5) | cppVar_10270;
	cppVar_10271 = (cppVar_10271 & cppMask_un_8_);
	BIT_VEC cppVar_10272 = (cppVar_10271 >> 7) & cppMask_un_1_;
	bool cppVar_10274 = (cppVar_10272 == 0);
	BIT_VEC cppVar_10275 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10276 = (cppVar_10275 << 3) | 6;
	cppVar_10276 = (cppVar_10276 & cppMask_un_5_);
	BIT_VEC cppVar_10277 = (0 << 5) | cppVar_10276;
	cppVar_10277 = (cppVar_10277 & cppMask_un_8_);
	BIT_VEC cppVar_10278 = IRAM.rd(cppVar_10277);
	BIT_VEC cppVar_10279 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10280 = (cppVar_10279 << 3) | 6;
	cppVar_10280 = (cppVar_10280 & cppMask_un_5_);
	BIT_VEC cppVar_10281 = (0 << 5) | cppVar_10280;
	cppVar_10281 = (cppVar_10281 & cppMask_un_8_);
	bool cppVar_10283 = (cppVar_10281 == 128);
	BIT_VEC cppVar_10284 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10285 = (cppVar_10284 << 3) | 6;
	cppVar_10285 = (cppVar_10285 & cppMask_un_5_);
	BIT_VEC cppVar_10286 = (0 << 5) | cppVar_10285;
	cppVar_10286 = (cppVar_10286 & cppMask_un_8_);
	bool cppVar_10288 = (cppVar_10286 == 129);
	BIT_VEC cppVar_10289 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10290 = (cppVar_10289 << 3) | 6;
	cppVar_10290 = (cppVar_10290 & cppMask_un_5_);
	BIT_VEC cppVar_10291 = (0 << 5) | cppVar_10290;
	cppVar_10291 = (cppVar_10291 & cppMask_un_8_);
	bool cppVar_10293 = (cppVar_10291 == 130);
	BIT_VEC cppVar_10294 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10295 = (cppVar_10294 << 3) | 6;
	cppVar_10295 = (cppVar_10295 & cppMask_un_5_);
	BIT_VEC cppVar_10296 = (0 << 5) | cppVar_10295;
	cppVar_10296 = (cppVar_10296 & cppMask_un_8_);
	bool cppVar_10298 = (cppVar_10296 == 131);
	BIT_VEC cppVar_10299 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10300 = (cppVar_10299 << 3) | 6;
	cppVar_10300 = (cppVar_10300 & cppMask_un_5_);
	BIT_VEC cppVar_10301 = (0 << 5) | cppVar_10300;
	cppVar_10301 = (cppVar_10301 & cppMask_un_8_);
	bool cppVar_10303 = (cppVar_10301 == 135);
	BIT_VEC cppVar_10304 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10305 = (cppVar_10304 << 3) | 6;
	cppVar_10305 = (cppVar_10305 & cppMask_un_5_);
	BIT_VEC cppVar_10306 = (0 << 5) | cppVar_10305;
	cppVar_10306 = (cppVar_10306 & cppMask_un_8_);
	bool cppVar_10308 = (cppVar_10306 == 136);
	BIT_VEC cppVar_10309 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10310 = (cppVar_10309 << 3) | 6;
	cppVar_10310 = (cppVar_10310 & cppMask_un_5_);
	BIT_VEC cppVar_10311 = (0 << 5) | cppVar_10310;
	cppVar_10311 = (cppVar_10311 & cppMask_un_8_);
	bool cppVar_10313 = (cppVar_10311 == 137);
	BIT_VEC cppVar_10314 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10315 = (cppVar_10314 << 3) | 6;
	cppVar_10315 = (cppVar_10315 & cppMask_un_5_);
	BIT_VEC cppVar_10316 = (0 << 5) | cppVar_10315;
	cppVar_10316 = (cppVar_10316 & cppMask_un_8_);
	bool cppVar_10318 = (cppVar_10316 == 138);
	BIT_VEC cppVar_10319 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10320 = (cppVar_10319 << 3) | 6;
	cppVar_10320 = (cppVar_10320 & cppMask_un_5_);
	BIT_VEC cppVar_10321 = (0 << 5) | cppVar_10320;
	cppVar_10321 = (cppVar_10321 & cppMask_un_8_);
	bool cppVar_10323 = (cppVar_10321 == 140);
	BIT_VEC cppVar_10324 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10325 = (cppVar_10324 << 3) | 6;
	cppVar_10325 = (cppVar_10325 & cppMask_un_5_);
	BIT_VEC cppVar_10326 = (0 << 5) | cppVar_10325;
	cppVar_10326 = (cppVar_10326 & cppMask_un_8_);
	bool cppVar_10328 = (cppVar_10326 == 139);
	BIT_VEC cppVar_10329 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10330 = (cppVar_10329 << 3) | 6;
	cppVar_10330 = (cppVar_10330 & cppMask_un_5_);
	BIT_VEC cppVar_10331 = (0 << 5) | cppVar_10330;
	cppVar_10331 = (cppVar_10331 & cppMask_un_8_);
	bool cppVar_10333 = (cppVar_10331 == 141);
	BIT_VEC cppVar_10334 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10335 = (cppVar_10334 << 3) | 6;
	cppVar_10335 = (cppVar_10335 & cppMask_un_5_);
	BIT_VEC cppVar_10336 = (0 << 5) | cppVar_10335;
	cppVar_10336 = (cppVar_10336 & cppMask_un_8_);
	bool cppVar_10338 = (cppVar_10336 == 144);
	BIT_VEC cppVar_10339 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10340 = (cppVar_10339 << 3) | 6;
	cppVar_10340 = (cppVar_10340 & cppMask_un_5_);
	BIT_VEC cppVar_10341 = (0 << 5) | cppVar_10340;
	cppVar_10341 = (cppVar_10341 & cppMask_un_8_);
	bool cppVar_10343 = (cppVar_10341 == 152);
	BIT_VEC cppVar_10344 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10345 = (cppVar_10344 << 3) | 6;
	cppVar_10345 = (cppVar_10345 & cppMask_un_5_);
	BIT_VEC cppVar_10346 = (0 << 5) | cppVar_10345;
	cppVar_10346 = (cppVar_10346 & cppMask_un_8_);
	bool cppVar_10348 = (cppVar_10346 == 153);
	BIT_VEC cppVar_10349 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10350 = (cppVar_10349 << 3) | 6;
	cppVar_10350 = (cppVar_10350 & cppMask_un_5_);
	BIT_VEC cppVar_10351 = (0 << 5) | cppVar_10350;
	cppVar_10351 = (cppVar_10351 & cppMask_un_8_);
	bool cppVar_10353 = (cppVar_10351 == 160);
	BIT_VEC cppVar_10354 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10355 = (cppVar_10354 << 3) | 6;
	cppVar_10355 = (cppVar_10355 & cppMask_un_5_);
	BIT_VEC cppVar_10356 = (0 << 5) | cppVar_10355;
	cppVar_10356 = (cppVar_10356 & cppMask_un_8_);
	bool cppVar_10358 = (cppVar_10356 == 168);
	BIT_VEC cppVar_10359 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10360 = (cppVar_10359 << 3) | 6;
	cppVar_10360 = (cppVar_10360 & cppMask_un_5_);
	BIT_VEC cppVar_10361 = (0 << 5) | cppVar_10360;
	cppVar_10361 = (cppVar_10361 & cppMask_un_8_);
	bool cppVar_10363 = (cppVar_10361 == 176);
	BIT_VEC cppVar_10364 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10365 = (cppVar_10364 << 3) | 6;
	cppVar_10365 = (cppVar_10365 & cppMask_un_5_);
	BIT_VEC cppVar_10366 = (0 << 5) | cppVar_10365;
	cppVar_10366 = (cppVar_10366 & cppMask_un_8_);
	bool cppVar_10368 = (cppVar_10366 == 184);
	BIT_VEC cppVar_10369 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10370 = (cppVar_10369 << 3) | 6;
	cppVar_10370 = (cppVar_10370 & cppMask_un_5_);
	BIT_VEC cppVar_10371 = (0 << 5) | cppVar_10370;
	cppVar_10371 = (cppVar_10371 & cppMask_un_8_);
	bool cppVar_10373 = (cppVar_10371 == 208);
	BIT_VEC cppVar_10374 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10375 = (cppVar_10374 << 3) | 6;
	cppVar_10375 = (cppVar_10375 & cppMask_un_5_);
	BIT_VEC cppVar_10376 = (0 << 5) | cppVar_10375;
	cppVar_10376 = (cppVar_10376 & cppMask_un_8_);
	bool cppVar_10378 = (cppVar_10376 == 224);
	BIT_VEC cppVar_10379 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10380 = (cppVar_10379 << 3) | 6;
	cppVar_10380 = (cppVar_10380 & cppMask_un_5_);
	BIT_VEC cppVar_10381 = (0 << 5) | cppVar_10380;
	cppVar_10381 = (cppVar_10381 & cppMask_un_8_);
	bool cppVar_10383 = (cppVar_10381 == 240);
	BIT_VEC cppVar_10385 = (cppVar_10383) ? B : 0;
	BIT_VEC cppVar_10386 = (cppVar_10378) ? ACC : cppVar_10385;
	BIT_VEC cppVar_10387 = (cppVar_10373) ? PSW : cppVar_10386;
	BIT_VEC cppVar_10388 = (cppVar_10368) ? IP : cppVar_10387;
	BIT_VEC cppVar_10389 = (cppVar_10363) ? P3 : cppVar_10388;
	BIT_VEC cppVar_10390 = (cppVar_10358) ? IE : cppVar_10389;
	BIT_VEC cppVar_10391 = (cppVar_10353) ? P2 : cppVar_10390;
	BIT_VEC cppVar_10392 = (cppVar_10348) ? SBUF : cppVar_10391;
	BIT_VEC cppVar_10393 = (cppVar_10343) ? SCON : cppVar_10392;
	BIT_VEC cppVar_10394 = (cppVar_10338) ? P1 : cppVar_10393;
	BIT_VEC cppVar_10395 = (cppVar_10333) ? TH1 : cppVar_10394;
	BIT_VEC cppVar_10396 = (cppVar_10328) ? TL1 : cppVar_10395;
	BIT_VEC cppVar_10397 = (cppVar_10323) ? TH0 : cppVar_10396;
	BIT_VEC cppVar_10398 = (cppVar_10318) ? TL0 : cppVar_10397;
	BIT_VEC cppVar_10399 = (cppVar_10313) ? TMOD : cppVar_10398;
	BIT_VEC cppVar_10400 = (cppVar_10308) ? TCON : cppVar_10399;
	BIT_VEC cppVar_10401 = (cppVar_10303) ? PCON : cppVar_10400;
	BIT_VEC cppVar_10402 = (cppVar_10298) ? DPH : cppVar_10401;
	BIT_VEC cppVar_10403 = (cppVar_10293) ? DPL : cppVar_10402;
	BIT_VEC cppVar_10404 = (cppVar_10288) ? SP : cppVar_10403;
	BIT_VEC cppVar_10405 = (cppVar_10283) ? P0 : cppVar_10404;
	BIT_VEC cppVar_10406 = (cppVar_10274) ? cppVar_10278 : cppVar_10405;
	BIT_VEC cppVar_10407 = (cppVar_10266) ? cppVar_10406 : DPL;
	BIT_VEC cppVar_10408 = ROM.rd(PC);
	bool cppVar_10410 = (cppVar_10408 == 141);
	BIT_VEC cppVar_10412 = PC + 1;
	cppVar_10412 = (cppVar_10412 & cppMask_un_16_);
	BIT_VEC cppVar_10413 = ROM.rd(cppVar_10412);
	bool cppVar_10415 = (cppVar_10413 == 130);
	BIT_VEC cppVar_10417 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10419 = (cppVar_10417 << 3) | 5;
	cppVar_10419 = (cppVar_10419 & cppMask_un_5_);
	BIT_VEC cppVar_10420 = (0 << 5) | cppVar_10419;
	cppVar_10420 = (cppVar_10420 & cppMask_un_8_);
	BIT_VEC cppVar_10421 = (cppVar_10420 >> 7) & cppMask_un_1_;
	bool cppVar_10423 = (cppVar_10421 == 0);
	BIT_VEC cppVar_10424 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10425 = (cppVar_10424 << 3) | 5;
	cppVar_10425 = (cppVar_10425 & cppMask_un_5_);
	BIT_VEC cppVar_10426 = (0 << 5) | cppVar_10425;
	cppVar_10426 = (cppVar_10426 & cppMask_un_8_);
	BIT_VEC cppVar_10427 = IRAM.rd(cppVar_10426);
	BIT_VEC cppVar_10428 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10429 = (cppVar_10428 << 3) | 5;
	cppVar_10429 = (cppVar_10429 & cppMask_un_5_);
	BIT_VEC cppVar_10430 = (0 << 5) | cppVar_10429;
	cppVar_10430 = (cppVar_10430 & cppMask_un_8_);
	bool cppVar_10432 = (cppVar_10430 == 128);
	BIT_VEC cppVar_10433 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10434 = (cppVar_10433 << 3) | 5;
	cppVar_10434 = (cppVar_10434 & cppMask_un_5_);
	BIT_VEC cppVar_10435 = (0 << 5) | cppVar_10434;
	cppVar_10435 = (cppVar_10435 & cppMask_un_8_);
	bool cppVar_10437 = (cppVar_10435 == 129);
	BIT_VEC cppVar_10438 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10439 = (cppVar_10438 << 3) | 5;
	cppVar_10439 = (cppVar_10439 & cppMask_un_5_);
	BIT_VEC cppVar_10440 = (0 << 5) | cppVar_10439;
	cppVar_10440 = (cppVar_10440 & cppMask_un_8_);
	bool cppVar_10442 = (cppVar_10440 == 130);
	BIT_VEC cppVar_10443 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10444 = (cppVar_10443 << 3) | 5;
	cppVar_10444 = (cppVar_10444 & cppMask_un_5_);
	BIT_VEC cppVar_10445 = (0 << 5) | cppVar_10444;
	cppVar_10445 = (cppVar_10445 & cppMask_un_8_);
	bool cppVar_10447 = (cppVar_10445 == 131);
	BIT_VEC cppVar_10448 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10449 = (cppVar_10448 << 3) | 5;
	cppVar_10449 = (cppVar_10449 & cppMask_un_5_);
	BIT_VEC cppVar_10450 = (0 << 5) | cppVar_10449;
	cppVar_10450 = (cppVar_10450 & cppMask_un_8_);
	bool cppVar_10452 = (cppVar_10450 == 135);
	BIT_VEC cppVar_10453 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10454 = (cppVar_10453 << 3) | 5;
	cppVar_10454 = (cppVar_10454 & cppMask_un_5_);
	BIT_VEC cppVar_10455 = (0 << 5) | cppVar_10454;
	cppVar_10455 = (cppVar_10455 & cppMask_un_8_);
	bool cppVar_10457 = (cppVar_10455 == 136);
	BIT_VEC cppVar_10458 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10459 = (cppVar_10458 << 3) | 5;
	cppVar_10459 = (cppVar_10459 & cppMask_un_5_);
	BIT_VEC cppVar_10460 = (0 << 5) | cppVar_10459;
	cppVar_10460 = (cppVar_10460 & cppMask_un_8_);
	bool cppVar_10462 = (cppVar_10460 == 137);
	BIT_VEC cppVar_10463 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10464 = (cppVar_10463 << 3) | 5;
	cppVar_10464 = (cppVar_10464 & cppMask_un_5_);
	BIT_VEC cppVar_10465 = (0 << 5) | cppVar_10464;
	cppVar_10465 = (cppVar_10465 & cppMask_un_8_);
	bool cppVar_10467 = (cppVar_10465 == 138);
	BIT_VEC cppVar_10468 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10469 = (cppVar_10468 << 3) | 5;
	cppVar_10469 = (cppVar_10469 & cppMask_un_5_);
	BIT_VEC cppVar_10470 = (0 << 5) | cppVar_10469;
	cppVar_10470 = (cppVar_10470 & cppMask_un_8_);
	bool cppVar_10472 = (cppVar_10470 == 140);
	BIT_VEC cppVar_10473 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10474 = (cppVar_10473 << 3) | 5;
	cppVar_10474 = (cppVar_10474 & cppMask_un_5_);
	BIT_VEC cppVar_10475 = (0 << 5) | cppVar_10474;
	cppVar_10475 = (cppVar_10475 & cppMask_un_8_);
	bool cppVar_10477 = (cppVar_10475 == 139);
	BIT_VEC cppVar_10478 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10479 = (cppVar_10478 << 3) | 5;
	cppVar_10479 = (cppVar_10479 & cppMask_un_5_);
	BIT_VEC cppVar_10480 = (0 << 5) | cppVar_10479;
	cppVar_10480 = (cppVar_10480 & cppMask_un_8_);
	bool cppVar_10482 = (cppVar_10480 == 141);
	BIT_VEC cppVar_10483 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10484 = (cppVar_10483 << 3) | 5;
	cppVar_10484 = (cppVar_10484 & cppMask_un_5_);
	BIT_VEC cppVar_10485 = (0 << 5) | cppVar_10484;
	cppVar_10485 = (cppVar_10485 & cppMask_un_8_);
	bool cppVar_10487 = (cppVar_10485 == 144);
	BIT_VEC cppVar_10488 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10489 = (cppVar_10488 << 3) | 5;
	cppVar_10489 = (cppVar_10489 & cppMask_un_5_);
	BIT_VEC cppVar_10490 = (0 << 5) | cppVar_10489;
	cppVar_10490 = (cppVar_10490 & cppMask_un_8_);
	bool cppVar_10492 = (cppVar_10490 == 152);
	BIT_VEC cppVar_10493 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10494 = (cppVar_10493 << 3) | 5;
	cppVar_10494 = (cppVar_10494 & cppMask_un_5_);
	BIT_VEC cppVar_10495 = (0 << 5) | cppVar_10494;
	cppVar_10495 = (cppVar_10495 & cppMask_un_8_);
	bool cppVar_10497 = (cppVar_10495 == 153);
	BIT_VEC cppVar_10498 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10499 = (cppVar_10498 << 3) | 5;
	cppVar_10499 = (cppVar_10499 & cppMask_un_5_);
	BIT_VEC cppVar_10500 = (0 << 5) | cppVar_10499;
	cppVar_10500 = (cppVar_10500 & cppMask_un_8_);
	bool cppVar_10502 = (cppVar_10500 == 160);
	BIT_VEC cppVar_10503 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10504 = (cppVar_10503 << 3) | 5;
	cppVar_10504 = (cppVar_10504 & cppMask_un_5_);
	BIT_VEC cppVar_10505 = (0 << 5) | cppVar_10504;
	cppVar_10505 = (cppVar_10505 & cppMask_un_8_);
	bool cppVar_10507 = (cppVar_10505 == 168);
	BIT_VEC cppVar_10508 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10509 = (cppVar_10508 << 3) | 5;
	cppVar_10509 = (cppVar_10509 & cppMask_un_5_);
	BIT_VEC cppVar_10510 = (0 << 5) | cppVar_10509;
	cppVar_10510 = (cppVar_10510 & cppMask_un_8_);
	bool cppVar_10512 = (cppVar_10510 == 176);
	BIT_VEC cppVar_10513 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10514 = (cppVar_10513 << 3) | 5;
	cppVar_10514 = (cppVar_10514 & cppMask_un_5_);
	BIT_VEC cppVar_10515 = (0 << 5) | cppVar_10514;
	cppVar_10515 = (cppVar_10515 & cppMask_un_8_);
	bool cppVar_10517 = (cppVar_10515 == 184);
	BIT_VEC cppVar_10518 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10519 = (cppVar_10518 << 3) | 5;
	cppVar_10519 = (cppVar_10519 & cppMask_un_5_);
	BIT_VEC cppVar_10520 = (0 << 5) | cppVar_10519;
	cppVar_10520 = (cppVar_10520 & cppMask_un_8_);
	bool cppVar_10522 = (cppVar_10520 == 208);
	BIT_VEC cppVar_10523 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10524 = (cppVar_10523 << 3) | 5;
	cppVar_10524 = (cppVar_10524 & cppMask_un_5_);
	BIT_VEC cppVar_10525 = (0 << 5) | cppVar_10524;
	cppVar_10525 = (cppVar_10525 & cppMask_un_8_);
	bool cppVar_10527 = (cppVar_10525 == 224);
	BIT_VEC cppVar_10528 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10529 = (cppVar_10528 << 3) | 5;
	cppVar_10529 = (cppVar_10529 & cppMask_un_5_);
	BIT_VEC cppVar_10530 = (0 << 5) | cppVar_10529;
	cppVar_10530 = (cppVar_10530 & cppMask_un_8_);
	bool cppVar_10532 = (cppVar_10530 == 240);
	BIT_VEC cppVar_10534 = (cppVar_10532) ? B : 0;
	BIT_VEC cppVar_10535 = (cppVar_10527) ? ACC : cppVar_10534;
	BIT_VEC cppVar_10536 = (cppVar_10522) ? PSW : cppVar_10535;
	BIT_VEC cppVar_10537 = (cppVar_10517) ? IP : cppVar_10536;
	BIT_VEC cppVar_10538 = (cppVar_10512) ? P3 : cppVar_10537;
	BIT_VEC cppVar_10539 = (cppVar_10507) ? IE : cppVar_10538;
	BIT_VEC cppVar_10540 = (cppVar_10502) ? P2 : cppVar_10539;
	BIT_VEC cppVar_10541 = (cppVar_10497) ? SBUF : cppVar_10540;
	BIT_VEC cppVar_10542 = (cppVar_10492) ? SCON : cppVar_10541;
	BIT_VEC cppVar_10543 = (cppVar_10487) ? P1 : cppVar_10542;
	BIT_VEC cppVar_10544 = (cppVar_10482) ? TH1 : cppVar_10543;
	BIT_VEC cppVar_10545 = (cppVar_10477) ? TL1 : cppVar_10544;
	BIT_VEC cppVar_10546 = (cppVar_10472) ? TH0 : cppVar_10545;
	BIT_VEC cppVar_10547 = (cppVar_10467) ? TL0 : cppVar_10546;
	BIT_VEC cppVar_10548 = (cppVar_10462) ? TMOD : cppVar_10547;
	BIT_VEC cppVar_10549 = (cppVar_10457) ? TCON : cppVar_10548;
	BIT_VEC cppVar_10550 = (cppVar_10452) ? PCON : cppVar_10549;
	BIT_VEC cppVar_10551 = (cppVar_10447) ? DPH : cppVar_10550;
	BIT_VEC cppVar_10552 = (cppVar_10442) ? DPL : cppVar_10551;
	BIT_VEC cppVar_10553 = (cppVar_10437) ? SP : cppVar_10552;
	BIT_VEC cppVar_10554 = (cppVar_10432) ? P0 : cppVar_10553;
	BIT_VEC cppVar_10555 = (cppVar_10423) ? cppVar_10427 : cppVar_10554;
	BIT_VEC cppVar_10556 = (cppVar_10415) ? cppVar_10555 : DPL;
	BIT_VEC cppVar_10557 = ROM.rd(PC);
	bool cppVar_10559 = (cppVar_10557 == 140);
	BIT_VEC cppVar_10561 = PC + 1;
	cppVar_10561 = (cppVar_10561 & cppMask_un_16_);
	BIT_VEC cppVar_10562 = ROM.rd(cppVar_10561);
	bool cppVar_10564 = (cppVar_10562 == 130);
	BIT_VEC cppVar_10566 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10568 = (cppVar_10566 << 3) | 4;
	cppVar_10568 = (cppVar_10568 & cppMask_un_5_);
	BIT_VEC cppVar_10569 = (0 << 5) | cppVar_10568;
	cppVar_10569 = (cppVar_10569 & cppMask_un_8_);
	BIT_VEC cppVar_10570 = (cppVar_10569 >> 7) & cppMask_un_1_;
	bool cppVar_10572 = (cppVar_10570 == 0);
	BIT_VEC cppVar_10573 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10574 = (cppVar_10573 << 3) | 4;
	cppVar_10574 = (cppVar_10574 & cppMask_un_5_);
	BIT_VEC cppVar_10575 = (0 << 5) | cppVar_10574;
	cppVar_10575 = (cppVar_10575 & cppMask_un_8_);
	BIT_VEC cppVar_10576 = IRAM.rd(cppVar_10575);
	BIT_VEC cppVar_10577 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10578 = (cppVar_10577 << 3) | 4;
	cppVar_10578 = (cppVar_10578 & cppMask_un_5_);
	BIT_VEC cppVar_10579 = (0 << 5) | cppVar_10578;
	cppVar_10579 = (cppVar_10579 & cppMask_un_8_);
	bool cppVar_10581 = (cppVar_10579 == 128);
	BIT_VEC cppVar_10582 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10583 = (cppVar_10582 << 3) | 4;
	cppVar_10583 = (cppVar_10583 & cppMask_un_5_);
	BIT_VEC cppVar_10584 = (0 << 5) | cppVar_10583;
	cppVar_10584 = (cppVar_10584 & cppMask_un_8_);
	bool cppVar_10586 = (cppVar_10584 == 129);
	BIT_VEC cppVar_10587 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10588 = (cppVar_10587 << 3) | 4;
	cppVar_10588 = (cppVar_10588 & cppMask_un_5_);
	BIT_VEC cppVar_10589 = (0 << 5) | cppVar_10588;
	cppVar_10589 = (cppVar_10589 & cppMask_un_8_);
	bool cppVar_10591 = (cppVar_10589 == 130);
	BIT_VEC cppVar_10592 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10593 = (cppVar_10592 << 3) | 4;
	cppVar_10593 = (cppVar_10593 & cppMask_un_5_);
	BIT_VEC cppVar_10594 = (0 << 5) | cppVar_10593;
	cppVar_10594 = (cppVar_10594 & cppMask_un_8_);
	bool cppVar_10596 = (cppVar_10594 == 131);
	BIT_VEC cppVar_10597 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10598 = (cppVar_10597 << 3) | 4;
	cppVar_10598 = (cppVar_10598 & cppMask_un_5_);
	BIT_VEC cppVar_10599 = (0 << 5) | cppVar_10598;
	cppVar_10599 = (cppVar_10599 & cppMask_un_8_);
	bool cppVar_10601 = (cppVar_10599 == 135);
	BIT_VEC cppVar_10602 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10603 = (cppVar_10602 << 3) | 4;
	cppVar_10603 = (cppVar_10603 & cppMask_un_5_);
	BIT_VEC cppVar_10604 = (0 << 5) | cppVar_10603;
	cppVar_10604 = (cppVar_10604 & cppMask_un_8_);
	bool cppVar_10606 = (cppVar_10604 == 136);
	BIT_VEC cppVar_10607 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10608 = (cppVar_10607 << 3) | 4;
	cppVar_10608 = (cppVar_10608 & cppMask_un_5_);
	BIT_VEC cppVar_10609 = (0 << 5) | cppVar_10608;
	cppVar_10609 = (cppVar_10609 & cppMask_un_8_);
	bool cppVar_10611 = (cppVar_10609 == 137);
	BIT_VEC cppVar_10612 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10613 = (cppVar_10612 << 3) | 4;
	cppVar_10613 = (cppVar_10613 & cppMask_un_5_);
	BIT_VEC cppVar_10614 = (0 << 5) | cppVar_10613;
	cppVar_10614 = (cppVar_10614 & cppMask_un_8_);
	bool cppVar_10616 = (cppVar_10614 == 138);
	BIT_VEC cppVar_10617 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10618 = (cppVar_10617 << 3) | 4;
	cppVar_10618 = (cppVar_10618 & cppMask_un_5_);
	BIT_VEC cppVar_10619 = (0 << 5) | cppVar_10618;
	cppVar_10619 = (cppVar_10619 & cppMask_un_8_);
	bool cppVar_10621 = (cppVar_10619 == 140);
	BIT_VEC cppVar_10622 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10623 = (cppVar_10622 << 3) | 4;
	cppVar_10623 = (cppVar_10623 & cppMask_un_5_);
	BIT_VEC cppVar_10624 = (0 << 5) | cppVar_10623;
	cppVar_10624 = (cppVar_10624 & cppMask_un_8_);
	bool cppVar_10626 = (cppVar_10624 == 139);
	BIT_VEC cppVar_10627 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10628 = (cppVar_10627 << 3) | 4;
	cppVar_10628 = (cppVar_10628 & cppMask_un_5_);
	BIT_VEC cppVar_10629 = (0 << 5) | cppVar_10628;
	cppVar_10629 = (cppVar_10629 & cppMask_un_8_);
	bool cppVar_10631 = (cppVar_10629 == 141);
	BIT_VEC cppVar_10632 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10633 = (cppVar_10632 << 3) | 4;
	cppVar_10633 = (cppVar_10633 & cppMask_un_5_);
	BIT_VEC cppVar_10634 = (0 << 5) | cppVar_10633;
	cppVar_10634 = (cppVar_10634 & cppMask_un_8_);
	bool cppVar_10636 = (cppVar_10634 == 144);
	BIT_VEC cppVar_10637 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10638 = (cppVar_10637 << 3) | 4;
	cppVar_10638 = (cppVar_10638 & cppMask_un_5_);
	BIT_VEC cppVar_10639 = (0 << 5) | cppVar_10638;
	cppVar_10639 = (cppVar_10639 & cppMask_un_8_);
	bool cppVar_10641 = (cppVar_10639 == 152);
	BIT_VEC cppVar_10642 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10643 = (cppVar_10642 << 3) | 4;
	cppVar_10643 = (cppVar_10643 & cppMask_un_5_);
	BIT_VEC cppVar_10644 = (0 << 5) | cppVar_10643;
	cppVar_10644 = (cppVar_10644 & cppMask_un_8_);
	bool cppVar_10646 = (cppVar_10644 == 153);
	BIT_VEC cppVar_10647 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10648 = (cppVar_10647 << 3) | 4;
	cppVar_10648 = (cppVar_10648 & cppMask_un_5_);
	BIT_VEC cppVar_10649 = (0 << 5) | cppVar_10648;
	cppVar_10649 = (cppVar_10649 & cppMask_un_8_);
	bool cppVar_10651 = (cppVar_10649 == 160);
	BIT_VEC cppVar_10652 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10653 = (cppVar_10652 << 3) | 4;
	cppVar_10653 = (cppVar_10653 & cppMask_un_5_);
	BIT_VEC cppVar_10654 = (0 << 5) | cppVar_10653;
	cppVar_10654 = (cppVar_10654 & cppMask_un_8_);
	bool cppVar_10656 = (cppVar_10654 == 168);
	BIT_VEC cppVar_10657 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10658 = (cppVar_10657 << 3) | 4;
	cppVar_10658 = (cppVar_10658 & cppMask_un_5_);
	BIT_VEC cppVar_10659 = (0 << 5) | cppVar_10658;
	cppVar_10659 = (cppVar_10659 & cppMask_un_8_);
	bool cppVar_10661 = (cppVar_10659 == 176);
	BIT_VEC cppVar_10662 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10663 = (cppVar_10662 << 3) | 4;
	cppVar_10663 = (cppVar_10663 & cppMask_un_5_);
	BIT_VEC cppVar_10664 = (0 << 5) | cppVar_10663;
	cppVar_10664 = (cppVar_10664 & cppMask_un_8_);
	bool cppVar_10666 = (cppVar_10664 == 184);
	BIT_VEC cppVar_10667 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10668 = (cppVar_10667 << 3) | 4;
	cppVar_10668 = (cppVar_10668 & cppMask_un_5_);
	BIT_VEC cppVar_10669 = (0 << 5) | cppVar_10668;
	cppVar_10669 = (cppVar_10669 & cppMask_un_8_);
	bool cppVar_10671 = (cppVar_10669 == 208);
	BIT_VEC cppVar_10672 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10673 = (cppVar_10672 << 3) | 4;
	cppVar_10673 = (cppVar_10673 & cppMask_un_5_);
	BIT_VEC cppVar_10674 = (0 << 5) | cppVar_10673;
	cppVar_10674 = (cppVar_10674 & cppMask_un_8_);
	bool cppVar_10676 = (cppVar_10674 == 224);
	BIT_VEC cppVar_10677 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10678 = (cppVar_10677 << 3) | 4;
	cppVar_10678 = (cppVar_10678 & cppMask_un_5_);
	BIT_VEC cppVar_10679 = (0 << 5) | cppVar_10678;
	cppVar_10679 = (cppVar_10679 & cppMask_un_8_);
	bool cppVar_10681 = (cppVar_10679 == 240);
	BIT_VEC cppVar_10683 = (cppVar_10681) ? B : 0;
	BIT_VEC cppVar_10684 = (cppVar_10676) ? ACC : cppVar_10683;
	BIT_VEC cppVar_10685 = (cppVar_10671) ? PSW : cppVar_10684;
	BIT_VEC cppVar_10686 = (cppVar_10666) ? IP : cppVar_10685;
	BIT_VEC cppVar_10687 = (cppVar_10661) ? P3 : cppVar_10686;
	BIT_VEC cppVar_10688 = (cppVar_10656) ? IE : cppVar_10687;
	BIT_VEC cppVar_10689 = (cppVar_10651) ? P2 : cppVar_10688;
	BIT_VEC cppVar_10690 = (cppVar_10646) ? SBUF : cppVar_10689;
	BIT_VEC cppVar_10691 = (cppVar_10641) ? SCON : cppVar_10690;
	BIT_VEC cppVar_10692 = (cppVar_10636) ? P1 : cppVar_10691;
	BIT_VEC cppVar_10693 = (cppVar_10631) ? TH1 : cppVar_10692;
	BIT_VEC cppVar_10694 = (cppVar_10626) ? TL1 : cppVar_10693;
	BIT_VEC cppVar_10695 = (cppVar_10621) ? TH0 : cppVar_10694;
	BIT_VEC cppVar_10696 = (cppVar_10616) ? TL0 : cppVar_10695;
	BIT_VEC cppVar_10697 = (cppVar_10611) ? TMOD : cppVar_10696;
	BIT_VEC cppVar_10698 = (cppVar_10606) ? TCON : cppVar_10697;
	BIT_VEC cppVar_10699 = (cppVar_10601) ? PCON : cppVar_10698;
	BIT_VEC cppVar_10700 = (cppVar_10596) ? DPH : cppVar_10699;
	BIT_VEC cppVar_10701 = (cppVar_10591) ? DPL : cppVar_10700;
	BIT_VEC cppVar_10702 = (cppVar_10586) ? SP : cppVar_10701;
	BIT_VEC cppVar_10703 = (cppVar_10581) ? P0 : cppVar_10702;
	BIT_VEC cppVar_10704 = (cppVar_10572) ? cppVar_10576 : cppVar_10703;
	BIT_VEC cppVar_10705 = (cppVar_10564) ? cppVar_10704 : DPL;
	BIT_VEC cppVar_10706 = ROM.rd(PC);
	bool cppVar_10708 = (cppVar_10706 == 139);
	BIT_VEC cppVar_10710 = PC + 1;
	cppVar_10710 = (cppVar_10710 & cppMask_un_16_);
	BIT_VEC cppVar_10711 = ROM.rd(cppVar_10710);
	bool cppVar_10713 = (cppVar_10711 == 130);
	BIT_VEC cppVar_10715 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10717 = (cppVar_10715 << 3) | 3;
	cppVar_10717 = (cppVar_10717 & cppMask_un_5_);
	BIT_VEC cppVar_10718 = (0 << 5) | cppVar_10717;
	cppVar_10718 = (cppVar_10718 & cppMask_un_8_);
	BIT_VEC cppVar_10719 = (cppVar_10718 >> 7) & cppMask_un_1_;
	bool cppVar_10721 = (cppVar_10719 == 0);
	BIT_VEC cppVar_10722 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10723 = (cppVar_10722 << 3) | 3;
	cppVar_10723 = (cppVar_10723 & cppMask_un_5_);
	BIT_VEC cppVar_10724 = (0 << 5) | cppVar_10723;
	cppVar_10724 = (cppVar_10724 & cppMask_un_8_);
	BIT_VEC cppVar_10725 = IRAM.rd(cppVar_10724);
	BIT_VEC cppVar_10726 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10727 = (cppVar_10726 << 3) | 3;
	cppVar_10727 = (cppVar_10727 & cppMask_un_5_);
	BIT_VEC cppVar_10728 = (0 << 5) | cppVar_10727;
	cppVar_10728 = (cppVar_10728 & cppMask_un_8_);
	bool cppVar_10730 = (cppVar_10728 == 128);
	BIT_VEC cppVar_10731 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10732 = (cppVar_10731 << 3) | 3;
	cppVar_10732 = (cppVar_10732 & cppMask_un_5_);
	BIT_VEC cppVar_10733 = (0 << 5) | cppVar_10732;
	cppVar_10733 = (cppVar_10733 & cppMask_un_8_);
	bool cppVar_10735 = (cppVar_10733 == 129);
	BIT_VEC cppVar_10736 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10737 = (cppVar_10736 << 3) | 3;
	cppVar_10737 = (cppVar_10737 & cppMask_un_5_);
	BIT_VEC cppVar_10738 = (0 << 5) | cppVar_10737;
	cppVar_10738 = (cppVar_10738 & cppMask_un_8_);
	bool cppVar_10740 = (cppVar_10738 == 130);
	BIT_VEC cppVar_10741 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10742 = (cppVar_10741 << 3) | 3;
	cppVar_10742 = (cppVar_10742 & cppMask_un_5_);
	BIT_VEC cppVar_10743 = (0 << 5) | cppVar_10742;
	cppVar_10743 = (cppVar_10743 & cppMask_un_8_);
	bool cppVar_10745 = (cppVar_10743 == 131);
	BIT_VEC cppVar_10746 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10747 = (cppVar_10746 << 3) | 3;
	cppVar_10747 = (cppVar_10747 & cppMask_un_5_);
	BIT_VEC cppVar_10748 = (0 << 5) | cppVar_10747;
	cppVar_10748 = (cppVar_10748 & cppMask_un_8_);
	bool cppVar_10750 = (cppVar_10748 == 135);
	BIT_VEC cppVar_10751 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10752 = (cppVar_10751 << 3) | 3;
	cppVar_10752 = (cppVar_10752 & cppMask_un_5_);
	BIT_VEC cppVar_10753 = (0 << 5) | cppVar_10752;
	cppVar_10753 = (cppVar_10753 & cppMask_un_8_);
	bool cppVar_10755 = (cppVar_10753 == 136);
	BIT_VEC cppVar_10756 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10757 = (cppVar_10756 << 3) | 3;
	cppVar_10757 = (cppVar_10757 & cppMask_un_5_);
	BIT_VEC cppVar_10758 = (0 << 5) | cppVar_10757;
	cppVar_10758 = (cppVar_10758 & cppMask_un_8_);
	bool cppVar_10760 = (cppVar_10758 == 137);
	BIT_VEC cppVar_10761 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10762 = (cppVar_10761 << 3) | 3;
	cppVar_10762 = (cppVar_10762 & cppMask_un_5_);
	BIT_VEC cppVar_10763 = (0 << 5) | cppVar_10762;
	cppVar_10763 = (cppVar_10763 & cppMask_un_8_);
	bool cppVar_10765 = (cppVar_10763 == 138);
	BIT_VEC cppVar_10766 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10767 = (cppVar_10766 << 3) | 3;
	cppVar_10767 = (cppVar_10767 & cppMask_un_5_);
	BIT_VEC cppVar_10768 = (0 << 5) | cppVar_10767;
	cppVar_10768 = (cppVar_10768 & cppMask_un_8_);
	bool cppVar_10770 = (cppVar_10768 == 140);
	BIT_VEC cppVar_10771 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10772 = (cppVar_10771 << 3) | 3;
	cppVar_10772 = (cppVar_10772 & cppMask_un_5_);
	BIT_VEC cppVar_10773 = (0 << 5) | cppVar_10772;
	cppVar_10773 = (cppVar_10773 & cppMask_un_8_);
	bool cppVar_10775 = (cppVar_10773 == 139);
	BIT_VEC cppVar_10776 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10777 = (cppVar_10776 << 3) | 3;
	cppVar_10777 = (cppVar_10777 & cppMask_un_5_);
	BIT_VEC cppVar_10778 = (0 << 5) | cppVar_10777;
	cppVar_10778 = (cppVar_10778 & cppMask_un_8_);
	bool cppVar_10780 = (cppVar_10778 == 141);
	BIT_VEC cppVar_10781 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10782 = (cppVar_10781 << 3) | 3;
	cppVar_10782 = (cppVar_10782 & cppMask_un_5_);
	BIT_VEC cppVar_10783 = (0 << 5) | cppVar_10782;
	cppVar_10783 = (cppVar_10783 & cppMask_un_8_);
	bool cppVar_10785 = (cppVar_10783 == 144);
	BIT_VEC cppVar_10786 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10787 = (cppVar_10786 << 3) | 3;
	cppVar_10787 = (cppVar_10787 & cppMask_un_5_);
	BIT_VEC cppVar_10788 = (0 << 5) | cppVar_10787;
	cppVar_10788 = (cppVar_10788 & cppMask_un_8_);
	bool cppVar_10790 = (cppVar_10788 == 152);
	BIT_VEC cppVar_10791 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10792 = (cppVar_10791 << 3) | 3;
	cppVar_10792 = (cppVar_10792 & cppMask_un_5_);
	BIT_VEC cppVar_10793 = (0 << 5) | cppVar_10792;
	cppVar_10793 = (cppVar_10793 & cppMask_un_8_);
	bool cppVar_10795 = (cppVar_10793 == 153);
	BIT_VEC cppVar_10796 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10797 = (cppVar_10796 << 3) | 3;
	cppVar_10797 = (cppVar_10797 & cppMask_un_5_);
	BIT_VEC cppVar_10798 = (0 << 5) | cppVar_10797;
	cppVar_10798 = (cppVar_10798 & cppMask_un_8_);
	bool cppVar_10800 = (cppVar_10798 == 160);
	BIT_VEC cppVar_10801 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10802 = (cppVar_10801 << 3) | 3;
	cppVar_10802 = (cppVar_10802 & cppMask_un_5_);
	BIT_VEC cppVar_10803 = (0 << 5) | cppVar_10802;
	cppVar_10803 = (cppVar_10803 & cppMask_un_8_);
	bool cppVar_10805 = (cppVar_10803 == 168);
	BIT_VEC cppVar_10806 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10807 = (cppVar_10806 << 3) | 3;
	cppVar_10807 = (cppVar_10807 & cppMask_un_5_);
	BIT_VEC cppVar_10808 = (0 << 5) | cppVar_10807;
	cppVar_10808 = (cppVar_10808 & cppMask_un_8_);
	bool cppVar_10810 = (cppVar_10808 == 176);
	BIT_VEC cppVar_10811 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10812 = (cppVar_10811 << 3) | 3;
	cppVar_10812 = (cppVar_10812 & cppMask_un_5_);
	BIT_VEC cppVar_10813 = (0 << 5) | cppVar_10812;
	cppVar_10813 = (cppVar_10813 & cppMask_un_8_);
	bool cppVar_10815 = (cppVar_10813 == 184);
	BIT_VEC cppVar_10816 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10817 = (cppVar_10816 << 3) | 3;
	cppVar_10817 = (cppVar_10817 & cppMask_un_5_);
	BIT_VEC cppVar_10818 = (0 << 5) | cppVar_10817;
	cppVar_10818 = (cppVar_10818 & cppMask_un_8_);
	bool cppVar_10820 = (cppVar_10818 == 208);
	BIT_VEC cppVar_10821 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10822 = (cppVar_10821 << 3) | 3;
	cppVar_10822 = (cppVar_10822 & cppMask_un_5_);
	BIT_VEC cppVar_10823 = (0 << 5) | cppVar_10822;
	cppVar_10823 = (cppVar_10823 & cppMask_un_8_);
	bool cppVar_10825 = (cppVar_10823 == 224);
	BIT_VEC cppVar_10826 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10827 = (cppVar_10826 << 3) | 3;
	cppVar_10827 = (cppVar_10827 & cppMask_un_5_);
	BIT_VEC cppVar_10828 = (0 << 5) | cppVar_10827;
	cppVar_10828 = (cppVar_10828 & cppMask_un_8_);
	bool cppVar_10830 = (cppVar_10828 == 240);
	BIT_VEC cppVar_10832 = (cppVar_10830) ? B : 0;
	BIT_VEC cppVar_10833 = (cppVar_10825) ? ACC : cppVar_10832;
	BIT_VEC cppVar_10834 = (cppVar_10820) ? PSW : cppVar_10833;
	BIT_VEC cppVar_10835 = (cppVar_10815) ? IP : cppVar_10834;
	BIT_VEC cppVar_10836 = (cppVar_10810) ? P3 : cppVar_10835;
	BIT_VEC cppVar_10837 = (cppVar_10805) ? IE : cppVar_10836;
	BIT_VEC cppVar_10838 = (cppVar_10800) ? P2 : cppVar_10837;
	BIT_VEC cppVar_10839 = (cppVar_10795) ? SBUF : cppVar_10838;
	BIT_VEC cppVar_10840 = (cppVar_10790) ? SCON : cppVar_10839;
	BIT_VEC cppVar_10841 = (cppVar_10785) ? P1 : cppVar_10840;
	BIT_VEC cppVar_10842 = (cppVar_10780) ? TH1 : cppVar_10841;
	BIT_VEC cppVar_10843 = (cppVar_10775) ? TL1 : cppVar_10842;
	BIT_VEC cppVar_10844 = (cppVar_10770) ? TH0 : cppVar_10843;
	BIT_VEC cppVar_10845 = (cppVar_10765) ? TL0 : cppVar_10844;
	BIT_VEC cppVar_10846 = (cppVar_10760) ? TMOD : cppVar_10845;
	BIT_VEC cppVar_10847 = (cppVar_10755) ? TCON : cppVar_10846;
	BIT_VEC cppVar_10848 = (cppVar_10750) ? PCON : cppVar_10847;
	BIT_VEC cppVar_10849 = (cppVar_10745) ? DPH : cppVar_10848;
	BIT_VEC cppVar_10850 = (cppVar_10740) ? DPL : cppVar_10849;
	BIT_VEC cppVar_10851 = (cppVar_10735) ? SP : cppVar_10850;
	BIT_VEC cppVar_10852 = (cppVar_10730) ? P0 : cppVar_10851;
	BIT_VEC cppVar_10853 = (cppVar_10721) ? cppVar_10725 : cppVar_10852;
	BIT_VEC cppVar_10854 = (cppVar_10713) ? cppVar_10853 : DPL;
	BIT_VEC cppVar_10855 = ROM.rd(PC);
	bool cppVar_10857 = (cppVar_10855 == 138);
	BIT_VEC cppVar_10859 = PC + 1;
	cppVar_10859 = (cppVar_10859 & cppMask_un_16_);
	BIT_VEC cppVar_10860 = ROM.rd(cppVar_10859);
	bool cppVar_10862 = (cppVar_10860 == 130);
	BIT_VEC cppVar_10864 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10866 = (cppVar_10864 << 3) | 2;
	cppVar_10866 = (cppVar_10866 & cppMask_un_5_);
	BIT_VEC cppVar_10867 = (0 << 5) | cppVar_10866;
	cppVar_10867 = (cppVar_10867 & cppMask_un_8_);
	BIT_VEC cppVar_10868 = (cppVar_10867 >> 7) & cppMask_un_1_;
	bool cppVar_10870 = (cppVar_10868 == 0);
	BIT_VEC cppVar_10871 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10872 = (cppVar_10871 << 3) | 2;
	cppVar_10872 = (cppVar_10872 & cppMask_un_5_);
	BIT_VEC cppVar_10873 = (0 << 5) | cppVar_10872;
	cppVar_10873 = (cppVar_10873 & cppMask_un_8_);
	BIT_VEC cppVar_10874 = IRAM.rd(cppVar_10873);
	BIT_VEC cppVar_10875 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10876 = (cppVar_10875 << 3) | 2;
	cppVar_10876 = (cppVar_10876 & cppMask_un_5_);
	BIT_VEC cppVar_10877 = (0 << 5) | cppVar_10876;
	cppVar_10877 = (cppVar_10877 & cppMask_un_8_);
	bool cppVar_10879 = (cppVar_10877 == 128);
	BIT_VEC cppVar_10880 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10881 = (cppVar_10880 << 3) | 2;
	cppVar_10881 = (cppVar_10881 & cppMask_un_5_);
	BIT_VEC cppVar_10882 = (0 << 5) | cppVar_10881;
	cppVar_10882 = (cppVar_10882 & cppMask_un_8_);
	bool cppVar_10884 = (cppVar_10882 == 129);
	BIT_VEC cppVar_10885 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10886 = (cppVar_10885 << 3) | 2;
	cppVar_10886 = (cppVar_10886 & cppMask_un_5_);
	BIT_VEC cppVar_10887 = (0 << 5) | cppVar_10886;
	cppVar_10887 = (cppVar_10887 & cppMask_un_8_);
	bool cppVar_10889 = (cppVar_10887 == 130);
	BIT_VEC cppVar_10890 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10891 = (cppVar_10890 << 3) | 2;
	cppVar_10891 = (cppVar_10891 & cppMask_un_5_);
	BIT_VEC cppVar_10892 = (0 << 5) | cppVar_10891;
	cppVar_10892 = (cppVar_10892 & cppMask_un_8_);
	bool cppVar_10894 = (cppVar_10892 == 131);
	BIT_VEC cppVar_10895 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10896 = (cppVar_10895 << 3) | 2;
	cppVar_10896 = (cppVar_10896 & cppMask_un_5_);
	BIT_VEC cppVar_10897 = (0 << 5) | cppVar_10896;
	cppVar_10897 = (cppVar_10897 & cppMask_un_8_);
	bool cppVar_10899 = (cppVar_10897 == 135);
	BIT_VEC cppVar_10900 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10901 = (cppVar_10900 << 3) | 2;
	cppVar_10901 = (cppVar_10901 & cppMask_un_5_);
	BIT_VEC cppVar_10902 = (0 << 5) | cppVar_10901;
	cppVar_10902 = (cppVar_10902 & cppMask_un_8_);
	bool cppVar_10904 = (cppVar_10902 == 136);
	BIT_VEC cppVar_10905 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10906 = (cppVar_10905 << 3) | 2;
	cppVar_10906 = (cppVar_10906 & cppMask_un_5_);
	BIT_VEC cppVar_10907 = (0 << 5) | cppVar_10906;
	cppVar_10907 = (cppVar_10907 & cppMask_un_8_);
	bool cppVar_10909 = (cppVar_10907 == 137);
	BIT_VEC cppVar_10910 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10911 = (cppVar_10910 << 3) | 2;
	cppVar_10911 = (cppVar_10911 & cppMask_un_5_);
	BIT_VEC cppVar_10912 = (0 << 5) | cppVar_10911;
	cppVar_10912 = (cppVar_10912 & cppMask_un_8_);
	bool cppVar_10914 = (cppVar_10912 == 138);
	BIT_VEC cppVar_10915 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10916 = (cppVar_10915 << 3) | 2;
	cppVar_10916 = (cppVar_10916 & cppMask_un_5_);
	BIT_VEC cppVar_10917 = (0 << 5) | cppVar_10916;
	cppVar_10917 = (cppVar_10917 & cppMask_un_8_);
	bool cppVar_10919 = (cppVar_10917 == 140);
	BIT_VEC cppVar_10920 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10921 = (cppVar_10920 << 3) | 2;
	cppVar_10921 = (cppVar_10921 & cppMask_un_5_);
	BIT_VEC cppVar_10922 = (0 << 5) | cppVar_10921;
	cppVar_10922 = (cppVar_10922 & cppMask_un_8_);
	bool cppVar_10924 = (cppVar_10922 == 139);
	BIT_VEC cppVar_10925 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10926 = (cppVar_10925 << 3) | 2;
	cppVar_10926 = (cppVar_10926 & cppMask_un_5_);
	BIT_VEC cppVar_10927 = (0 << 5) | cppVar_10926;
	cppVar_10927 = (cppVar_10927 & cppMask_un_8_);
	bool cppVar_10929 = (cppVar_10927 == 141);
	BIT_VEC cppVar_10930 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10931 = (cppVar_10930 << 3) | 2;
	cppVar_10931 = (cppVar_10931 & cppMask_un_5_);
	BIT_VEC cppVar_10932 = (0 << 5) | cppVar_10931;
	cppVar_10932 = (cppVar_10932 & cppMask_un_8_);
	bool cppVar_10934 = (cppVar_10932 == 144);
	BIT_VEC cppVar_10935 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10936 = (cppVar_10935 << 3) | 2;
	cppVar_10936 = (cppVar_10936 & cppMask_un_5_);
	BIT_VEC cppVar_10937 = (0 << 5) | cppVar_10936;
	cppVar_10937 = (cppVar_10937 & cppMask_un_8_);
	bool cppVar_10939 = (cppVar_10937 == 152);
	BIT_VEC cppVar_10940 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10941 = (cppVar_10940 << 3) | 2;
	cppVar_10941 = (cppVar_10941 & cppMask_un_5_);
	BIT_VEC cppVar_10942 = (0 << 5) | cppVar_10941;
	cppVar_10942 = (cppVar_10942 & cppMask_un_8_);
	bool cppVar_10944 = (cppVar_10942 == 153);
	BIT_VEC cppVar_10945 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10946 = (cppVar_10945 << 3) | 2;
	cppVar_10946 = (cppVar_10946 & cppMask_un_5_);
	BIT_VEC cppVar_10947 = (0 << 5) | cppVar_10946;
	cppVar_10947 = (cppVar_10947 & cppMask_un_8_);
	bool cppVar_10949 = (cppVar_10947 == 160);
	BIT_VEC cppVar_10950 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10951 = (cppVar_10950 << 3) | 2;
	cppVar_10951 = (cppVar_10951 & cppMask_un_5_);
	BIT_VEC cppVar_10952 = (0 << 5) | cppVar_10951;
	cppVar_10952 = (cppVar_10952 & cppMask_un_8_);
	bool cppVar_10954 = (cppVar_10952 == 168);
	BIT_VEC cppVar_10955 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10956 = (cppVar_10955 << 3) | 2;
	cppVar_10956 = (cppVar_10956 & cppMask_un_5_);
	BIT_VEC cppVar_10957 = (0 << 5) | cppVar_10956;
	cppVar_10957 = (cppVar_10957 & cppMask_un_8_);
	bool cppVar_10959 = (cppVar_10957 == 176);
	BIT_VEC cppVar_10960 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10961 = (cppVar_10960 << 3) | 2;
	cppVar_10961 = (cppVar_10961 & cppMask_un_5_);
	BIT_VEC cppVar_10962 = (0 << 5) | cppVar_10961;
	cppVar_10962 = (cppVar_10962 & cppMask_un_8_);
	bool cppVar_10964 = (cppVar_10962 == 184);
	BIT_VEC cppVar_10965 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10966 = (cppVar_10965 << 3) | 2;
	cppVar_10966 = (cppVar_10966 & cppMask_un_5_);
	BIT_VEC cppVar_10967 = (0 << 5) | cppVar_10966;
	cppVar_10967 = (cppVar_10967 & cppMask_un_8_);
	bool cppVar_10969 = (cppVar_10967 == 208);
	BIT_VEC cppVar_10970 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10971 = (cppVar_10970 << 3) | 2;
	cppVar_10971 = (cppVar_10971 & cppMask_un_5_);
	BIT_VEC cppVar_10972 = (0 << 5) | cppVar_10971;
	cppVar_10972 = (cppVar_10972 & cppMask_un_8_);
	bool cppVar_10974 = (cppVar_10972 == 224);
	BIT_VEC cppVar_10975 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_10976 = (cppVar_10975 << 3) | 2;
	cppVar_10976 = (cppVar_10976 & cppMask_un_5_);
	BIT_VEC cppVar_10977 = (0 << 5) | cppVar_10976;
	cppVar_10977 = (cppVar_10977 & cppMask_un_8_);
	bool cppVar_10979 = (cppVar_10977 == 240);
	BIT_VEC cppVar_10981 = (cppVar_10979) ? B : 0;
	BIT_VEC cppVar_10982 = (cppVar_10974) ? ACC : cppVar_10981;
	BIT_VEC cppVar_10983 = (cppVar_10969) ? PSW : cppVar_10982;
	BIT_VEC cppVar_10984 = (cppVar_10964) ? IP : cppVar_10983;
	BIT_VEC cppVar_10985 = (cppVar_10959) ? P3 : cppVar_10984;
	BIT_VEC cppVar_10986 = (cppVar_10954) ? IE : cppVar_10985;
	BIT_VEC cppVar_10987 = (cppVar_10949) ? P2 : cppVar_10986;
	BIT_VEC cppVar_10988 = (cppVar_10944) ? SBUF : cppVar_10987;
	BIT_VEC cppVar_10989 = (cppVar_10939) ? SCON : cppVar_10988;
	BIT_VEC cppVar_10990 = (cppVar_10934) ? P1 : cppVar_10989;
	BIT_VEC cppVar_10991 = (cppVar_10929) ? TH1 : cppVar_10990;
	BIT_VEC cppVar_10992 = (cppVar_10924) ? TL1 : cppVar_10991;
	BIT_VEC cppVar_10993 = (cppVar_10919) ? TH0 : cppVar_10992;
	BIT_VEC cppVar_10994 = (cppVar_10914) ? TL0 : cppVar_10993;
	BIT_VEC cppVar_10995 = (cppVar_10909) ? TMOD : cppVar_10994;
	BIT_VEC cppVar_10996 = (cppVar_10904) ? TCON : cppVar_10995;
	BIT_VEC cppVar_10997 = (cppVar_10899) ? PCON : cppVar_10996;
	BIT_VEC cppVar_10998 = (cppVar_10894) ? DPH : cppVar_10997;
	BIT_VEC cppVar_10999 = (cppVar_10889) ? DPL : cppVar_10998;
	BIT_VEC cppVar_11000 = (cppVar_10884) ? SP : cppVar_10999;
	BIT_VEC cppVar_11001 = (cppVar_10879) ? P0 : cppVar_11000;
	BIT_VEC cppVar_11002 = (cppVar_10870) ? cppVar_10874 : cppVar_11001;
	BIT_VEC cppVar_11003 = (cppVar_10862) ? cppVar_11002 : DPL;
	BIT_VEC cppVar_11004 = ROM.rd(PC);
	bool cppVar_11006 = (cppVar_11004 == 137);
	BIT_VEC cppVar_11008 = PC + 1;
	cppVar_11008 = (cppVar_11008 & cppMask_un_16_);
	BIT_VEC cppVar_11009 = ROM.rd(cppVar_11008);
	bool cppVar_11011 = (cppVar_11009 == 130);
	BIT_VEC cppVar_11013 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11015 = (cppVar_11013 << 3) | 1;
	cppVar_11015 = (cppVar_11015 & cppMask_un_5_);
	BIT_VEC cppVar_11016 = (0 << 5) | cppVar_11015;
	cppVar_11016 = (cppVar_11016 & cppMask_un_8_);
	BIT_VEC cppVar_11017 = (cppVar_11016 >> 7) & cppMask_un_1_;
	bool cppVar_11019 = (cppVar_11017 == 0);
	BIT_VEC cppVar_11020 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11021 = (cppVar_11020 << 3) | 1;
	cppVar_11021 = (cppVar_11021 & cppMask_un_5_);
	BIT_VEC cppVar_11022 = (0 << 5) | cppVar_11021;
	cppVar_11022 = (cppVar_11022 & cppMask_un_8_);
	BIT_VEC cppVar_11023 = IRAM.rd(cppVar_11022);
	BIT_VEC cppVar_11024 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11025 = (cppVar_11024 << 3) | 1;
	cppVar_11025 = (cppVar_11025 & cppMask_un_5_);
	BIT_VEC cppVar_11026 = (0 << 5) | cppVar_11025;
	cppVar_11026 = (cppVar_11026 & cppMask_un_8_);
	bool cppVar_11028 = (cppVar_11026 == 128);
	BIT_VEC cppVar_11029 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11030 = (cppVar_11029 << 3) | 1;
	cppVar_11030 = (cppVar_11030 & cppMask_un_5_);
	BIT_VEC cppVar_11031 = (0 << 5) | cppVar_11030;
	cppVar_11031 = (cppVar_11031 & cppMask_un_8_);
	bool cppVar_11033 = (cppVar_11031 == 129);
	BIT_VEC cppVar_11034 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11035 = (cppVar_11034 << 3) | 1;
	cppVar_11035 = (cppVar_11035 & cppMask_un_5_);
	BIT_VEC cppVar_11036 = (0 << 5) | cppVar_11035;
	cppVar_11036 = (cppVar_11036 & cppMask_un_8_);
	bool cppVar_11038 = (cppVar_11036 == 130);
	BIT_VEC cppVar_11039 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11040 = (cppVar_11039 << 3) | 1;
	cppVar_11040 = (cppVar_11040 & cppMask_un_5_);
	BIT_VEC cppVar_11041 = (0 << 5) | cppVar_11040;
	cppVar_11041 = (cppVar_11041 & cppMask_un_8_);
	bool cppVar_11043 = (cppVar_11041 == 131);
	BIT_VEC cppVar_11044 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11045 = (cppVar_11044 << 3) | 1;
	cppVar_11045 = (cppVar_11045 & cppMask_un_5_);
	BIT_VEC cppVar_11046 = (0 << 5) | cppVar_11045;
	cppVar_11046 = (cppVar_11046 & cppMask_un_8_);
	bool cppVar_11048 = (cppVar_11046 == 135);
	BIT_VEC cppVar_11049 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11050 = (cppVar_11049 << 3) | 1;
	cppVar_11050 = (cppVar_11050 & cppMask_un_5_);
	BIT_VEC cppVar_11051 = (0 << 5) | cppVar_11050;
	cppVar_11051 = (cppVar_11051 & cppMask_un_8_);
	bool cppVar_11053 = (cppVar_11051 == 136);
	BIT_VEC cppVar_11054 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11055 = (cppVar_11054 << 3) | 1;
	cppVar_11055 = (cppVar_11055 & cppMask_un_5_);
	BIT_VEC cppVar_11056 = (0 << 5) | cppVar_11055;
	cppVar_11056 = (cppVar_11056 & cppMask_un_8_);
	bool cppVar_11058 = (cppVar_11056 == 137);
	BIT_VEC cppVar_11059 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11060 = (cppVar_11059 << 3) | 1;
	cppVar_11060 = (cppVar_11060 & cppMask_un_5_);
	BIT_VEC cppVar_11061 = (0 << 5) | cppVar_11060;
	cppVar_11061 = (cppVar_11061 & cppMask_un_8_);
	bool cppVar_11063 = (cppVar_11061 == 138);
	BIT_VEC cppVar_11064 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11065 = (cppVar_11064 << 3) | 1;
	cppVar_11065 = (cppVar_11065 & cppMask_un_5_);
	BIT_VEC cppVar_11066 = (0 << 5) | cppVar_11065;
	cppVar_11066 = (cppVar_11066 & cppMask_un_8_);
	bool cppVar_11068 = (cppVar_11066 == 140);
	BIT_VEC cppVar_11069 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11070 = (cppVar_11069 << 3) | 1;
	cppVar_11070 = (cppVar_11070 & cppMask_un_5_);
	BIT_VEC cppVar_11071 = (0 << 5) | cppVar_11070;
	cppVar_11071 = (cppVar_11071 & cppMask_un_8_);
	bool cppVar_11073 = (cppVar_11071 == 139);
	BIT_VEC cppVar_11074 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11075 = (cppVar_11074 << 3) | 1;
	cppVar_11075 = (cppVar_11075 & cppMask_un_5_);
	BIT_VEC cppVar_11076 = (0 << 5) | cppVar_11075;
	cppVar_11076 = (cppVar_11076 & cppMask_un_8_);
	bool cppVar_11078 = (cppVar_11076 == 141);
	BIT_VEC cppVar_11079 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11080 = (cppVar_11079 << 3) | 1;
	cppVar_11080 = (cppVar_11080 & cppMask_un_5_);
	BIT_VEC cppVar_11081 = (0 << 5) | cppVar_11080;
	cppVar_11081 = (cppVar_11081 & cppMask_un_8_);
	bool cppVar_11083 = (cppVar_11081 == 144);
	BIT_VEC cppVar_11084 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11085 = (cppVar_11084 << 3) | 1;
	cppVar_11085 = (cppVar_11085 & cppMask_un_5_);
	BIT_VEC cppVar_11086 = (0 << 5) | cppVar_11085;
	cppVar_11086 = (cppVar_11086 & cppMask_un_8_);
	bool cppVar_11088 = (cppVar_11086 == 152);
	BIT_VEC cppVar_11089 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11090 = (cppVar_11089 << 3) | 1;
	cppVar_11090 = (cppVar_11090 & cppMask_un_5_);
	BIT_VEC cppVar_11091 = (0 << 5) | cppVar_11090;
	cppVar_11091 = (cppVar_11091 & cppMask_un_8_);
	bool cppVar_11093 = (cppVar_11091 == 153);
	BIT_VEC cppVar_11094 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11095 = (cppVar_11094 << 3) | 1;
	cppVar_11095 = (cppVar_11095 & cppMask_un_5_);
	BIT_VEC cppVar_11096 = (0 << 5) | cppVar_11095;
	cppVar_11096 = (cppVar_11096 & cppMask_un_8_);
	bool cppVar_11098 = (cppVar_11096 == 160);
	BIT_VEC cppVar_11099 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11100 = (cppVar_11099 << 3) | 1;
	cppVar_11100 = (cppVar_11100 & cppMask_un_5_);
	BIT_VEC cppVar_11101 = (0 << 5) | cppVar_11100;
	cppVar_11101 = (cppVar_11101 & cppMask_un_8_);
	bool cppVar_11103 = (cppVar_11101 == 168);
	BIT_VEC cppVar_11104 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11105 = (cppVar_11104 << 3) | 1;
	cppVar_11105 = (cppVar_11105 & cppMask_un_5_);
	BIT_VEC cppVar_11106 = (0 << 5) | cppVar_11105;
	cppVar_11106 = (cppVar_11106 & cppMask_un_8_);
	bool cppVar_11108 = (cppVar_11106 == 176);
	BIT_VEC cppVar_11109 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11110 = (cppVar_11109 << 3) | 1;
	cppVar_11110 = (cppVar_11110 & cppMask_un_5_);
	BIT_VEC cppVar_11111 = (0 << 5) | cppVar_11110;
	cppVar_11111 = (cppVar_11111 & cppMask_un_8_);
	bool cppVar_11113 = (cppVar_11111 == 184);
	BIT_VEC cppVar_11114 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11115 = (cppVar_11114 << 3) | 1;
	cppVar_11115 = (cppVar_11115 & cppMask_un_5_);
	BIT_VEC cppVar_11116 = (0 << 5) | cppVar_11115;
	cppVar_11116 = (cppVar_11116 & cppMask_un_8_);
	bool cppVar_11118 = (cppVar_11116 == 208);
	BIT_VEC cppVar_11119 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11120 = (cppVar_11119 << 3) | 1;
	cppVar_11120 = (cppVar_11120 & cppMask_un_5_);
	BIT_VEC cppVar_11121 = (0 << 5) | cppVar_11120;
	cppVar_11121 = (cppVar_11121 & cppMask_un_8_);
	bool cppVar_11123 = (cppVar_11121 == 224);
	BIT_VEC cppVar_11124 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11125 = (cppVar_11124 << 3) | 1;
	cppVar_11125 = (cppVar_11125 & cppMask_un_5_);
	BIT_VEC cppVar_11126 = (0 << 5) | cppVar_11125;
	cppVar_11126 = (cppVar_11126 & cppMask_un_8_);
	bool cppVar_11128 = (cppVar_11126 == 240);
	BIT_VEC cppVar_11130 = (cppVar_11128) ? B : 0;
	BIT_VEC cppVar_11131 = (cppVar_11123) ? ACC : cppVar_11130;
	BIT_VEC cppVar_11132 = (cppVar_11118) ? PSW : cppVar_11131;
	BIT_VEC cppVar_11133 = (cppVar_11113) ? IP : cppVar_11132;
	BIT_VEC cppVar_11134 = (cppVar_11108) ? P3 : cppVar_11133;
	BIT_VEC cppVar_11135 = (cppVar_11103) ? IE : cppVar_11134;
	BIT_VEC cppVar_11136 = (cppVar_11098) ? P2 : cppVar_11135;
	BIT_VEC cppVar_11137 = (cppVar_11093) ? SBUF : cppVar_11136;
	BIT_VEC cppVar_11138 = (cppVar_11088) ? SCON : cppVar_11137;
	BIT_VEC cppVar_11139 = (cppVar_11083) ? P1 : cppVar_11138;
	BIT_VEC cppVar_11140 = (cppVar_11078) ? TH1 : cppVar_11139;
	BIT_VEC cppVar_11141 = (cppVar_11073) ? TL1 : cppVar_11140;
	BIT_VEC cppVar_11142 = (cppVar_11068) ? TH0 : cppVar_11141;
	BIT_VEC cppVar_11143 = (cppVar_11063) ? TL0 : cppVar_11142;
	BIT_VEC cppVar_11144 = (cppVar_11058) ? TMOD : cppVar_11143;
	BIT_VEC cppVar_11145 = (cppVar_11053) ? TCON : cppVar_11144;
	BIT_VEC cppVar_11146 = (cppVar_11048) ? PCON : cppVar_11145;
	BIT_VEC cppVar_11147 = (cppVar_11043) ? DPH : cppVar_11146;
	BIT_VEC cppVar_11148 = (cppVar_11038) ? DPL : cppVar_11147;
	BIT_VEC cppVar_11149 = (cppVar_11033) ? SP : cppVar_11148;
	BIT_VEC cppVar_11150 = (cppVar_11028) ? P0 : cppVar_11149;
	BIT_VEC cppVar_11151 = (cppVar_11019) ? cppVar_11023 : cppVar_11150;
	BIT_VEC cppVar_11152 = (cppVar_11011) ? cppVar_11151 : DPL;
	BIT_VEC cppVar_11153 = ROM.rd(PC);
	bool cppVar_11155 = (cppVar_11153 == 136);
	BIT_VEC cppVar_11157 = PC + 1;
	cppVar_11157 = (cppVar_11157 & cppMask_un_16_);
	BIT_VEC cppVar_11158 = ROM.rd(cppVar_11157);
	bool cppVar_11160 = (cppVar_11158 == 130);
	BIT_VEC cppVar_11162 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11164 = (cppVar_11162 << 3) | 0;
	cppVar_11164 = (cppVar_11164 & cppMask_un_5_);
	BIT_VEC cppVar_11165 = (0 << 5) | cppVar_11164;
	cppVar_11165 = (cppVar_11165 & cppMask_un_8_);
	BIT_VEC cppVar_11166 = (cppVar_11165 >> 7) & cppMask_un_1_;
	bool cppVar_11168 = (cppVar_11166 == 0);
	BIT_VEC cppVar_11169 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11170 = (cppVar_11169 << 3) | 0;
	cppVar_11170 = (cppVar_11170 & cppMask_un_5_);
	BIT_VEC cppVar_11171 = (0 << 5) | cppVar_11170;
	cppVar_11171 = (cppVar_11171 & cppMask_un_8_);
	BIT_VEC cppVar_11172 = IRAM.rd(cppVar_11171);
	BIT_VEC cppVar_11173 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11174 = (cppVar_11173 << 3) | 0;
	cppVar_11174 = (cppVar_11174 & cppMask_un_5_);
	BIT_VEC cppVar_11175 = (0 << 5) | cppVar_11174;
	cppVar_11175 = (cppVar_11175 & cppMask_un_8_);
	bool cppVar_11177 = (cppVar_11175 == 128);
	BIT_VEC cppVar_11178 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11179 = (cppVar_11178 << 3) | 0;
	cppVar_11179 = (cppVar_11179 & cppMask_un_5_);
	BIT_VEC cppVar_11180 = (0 << 5) | cppVar_11179;
	cppVar_11180 = (cppVar_11180 & cppMask_un_8_);
	bool cppVar_11182 = (cppVar_11180 == 129);
	BIT_VEC cppVar_11183 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11184 = (cppVar_11183 << 3) | 0;
	cppVar_11184 = (cppVar_11184 & cppMask_un_5_);
	BIT_VEC cppVar_11185 = (0 << 5) | cppVar_11184;
	cppVar_11185 = (cppVar_11185 & cppMask_un_8_);
	bool cppVar_11187 = (cppVar_11185 == 130);
	BIT_VEC cppVar_11188 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11189 = (cppVar_11188 << 3) | 0;
	cppVar_11189 = (cppVar_11189 & cppMask_un_5_);
	BIT_VEC cppVar_11190 = (0 << 5) | cppVar_11189;
	cppVar_11190 = (cppVar_11190 & cppMask_un_8_);
	bool cppVar_11192 = (cppVar_11190 == 131);
	BIT_VEC cppVar_11193 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11194 = (cppVar_11193 << 3) | 0;
	cppVar_11194 = (cppVar_11194 & cppMask_un_5_);
	BIT_VEC cppVar_11195 = (0 << 5) | cppVar_11194;
	cppVar_11195 = (cppVar_11195 & cppMask_un_8_);
	bool cppVar_11197 = (cppVar_11195 == 135);
	BIT_VEC cppVar_11198 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11199 = (cppVar_11198 << 3) | 0;
	cppVar_11199 = (cppVar_11199 & cppMask_un_5_);
	BIT_VEC cppVar_11200 = (0 << 5) | cppVar_11199;
	cppVar_11200 = (cppVar_11200 & cppMask_un_8_);
	bool cppVar_11202 = (cppVar_11200 == 136);
	BIT_VEC cppVar_11203 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11204 = (cppVar_11203 << 3) | 0;
	cppVar_11204 = (cppVar_11204 & cppMask_un_5_);
	BIT_VEC cppVar_11205 = (0 << 5) | cppVar_11204;
	cppVar_11205 = (cppVar_11205 & cppMask_un_8_);
	bool cppVar_11207 = (cppVar_11205 == 137);
	BIT_VEC cppVar_11208 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11209 = (cppVar_11208 << 3) | 0;
	cppVar_11209 = (cppVar_11209 & cppMask_un_5_);
	BIT_VEC cppVar_11210 = (0 << 5) | cppVar_11209;
	cppVar_11210 = (cppVar_11210 & cppMask_un_8_);
	bool cppVar_11212 = (cppVar_11210 == 138);
	BIT_VEC cppVar_11213 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11214 = (cppVar_11213 << 3) | 0;
	cppVar_11214 = (cppVar_11214 & cppMask_un_5_);
	BIT_VEC cppVar_11215 = (0 << 5) | cppVar_11214;
	cppVar_11215 = (cppVar_11215 & cppMask_un_8_);
	bool cppVar_11217 = (cppVar_11215 == 140);
	BIT_VEC cppVar_11218 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11219 = (cppVar_11218 << 3) | 0;
	cppVar_11219 = (cppVar_11219 & cppMask_un_5_);
	BIT_VEC cppVar_11220 = (0 << 5) | cppVar_11219;
	cppVar_11220 = (cppVar_11220 & cppMask_un_8_);
	bool cppVar_11222 = (cppVar_11220 == 139);
	BIT_VEC cppVar_11223 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11224 = (cppVar_11223 << 3) | 0;
	cppVar_11224 = (cppVar_11224 & cppMask_un_5_);
	BIT_VEC cppVar_11225 = (0 << 5) | cppVar_11224;
	cppVar_11225 = (cppVar_11225 & cppMask_un_8_);
	bool cppVar_11227 = (cppVar_11225 == 141);
	BIT_VEC cppVar_11228 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11229 = (cppVar_11228 << 3) | 0;
	cppVar_11229 = (cppVar_11229 & cppMask_un_5_);
	BIT_VEC cppVar_11230 = (0 << 5) | cppVar_11229;
	cppVar_11230 = (cppVar_11230 & cppMask_un_8_);
	bool cppVar_11232 = (cppVar_11230 == 144);
	BIT_VEC cppVar_11233 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11234 = (cppVar_11233 << 3) | 0;
	cppVar_11234 = (cppVar_11234 & cppMask_un_5_);
	BIT_VEC cppVar_11235 = (0 << 5) | cppVar_11234;
	cppVar_11235 = (cppVar_11235 & cppMask_un_8_);
	bool cppVar_11237 = (cppVar_11235 == 152);
	BIT_VEC cppVar_11238 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11239 = (cppVar_11238 << 3) | 0;
	cppVar_11239 = (cppVar_11239 & cppMask_un_5_);
	BIT_VEC cppVar_11240 = (0 << 5) | cppVar_11239;
	cppVar_11240 = (cppVar_11240 & cppMask_un_8_);
	bool cppVar_11242 = (cppVar_11240 == 153);
	BIT_VEC cppVar_11243 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11244 = (cppVar_11243 << 3) | 0;
	cppVar_11244 = (cppVar_11244 & cppMask_un_5_);
	BIT_VEC cppVar_11245 = (0 << 5) | cppVar_11244;
	cppVar_11245 = (cppVar_11245 & cppMask_un_8_);
	bool cppVar_11247 = (cppVar_11245 == 160);
	BIT_VEC cppVar_11248 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11249 = (cppVar_11248 << 3) | 0;
	cppVar_11249 = (cppVar_11249 & cppMask_un_5_);
	BIT_VEC cppVar_11250 = (0 << 5) | cppVar_11249;
	cppVar_11250 = (cppVar_11250 & cppMask_un_8_);
	bool cppVar_11252 = (cppVar_11250 == 168);
	BIT_VEC cppVar_11253 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11254 = (cppVar_11253 << 3) | 0;
	cppVar_11254 = (cppVar_11254 & cppMask_un_5_);
	BIT_VEC cppVar_11255 = (0 << 5) | cppVar_11254;
	cppVar_11255 = (cppVar_11255 & cppMask_un_8_);
	bool cppVar_11257 = (cppVar_11255 == 176);
	BIT_VEC cppVar_11258 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11259 = (cppVar_11258 << 3) | 0;
	cppVar_11259 = (cppVar_11259 & cppMask_un_5_);
	BIT_VEC cppVar_11260 = (0 << 5) | cppVar_11259;
	cppVar_11260 = (cppVar_11260 & cppMask_un_8_);
	bool cppVar_11262 = (cppVar_11260 == 184);
	BIT_VEC cppVar_11263 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11264 = (cppVar_11263 << 3) | 0;
	cppVar_11264 = (cppVar_11264 & cppMask_un_5_);
	BIT_VEC cppVar_11265 = (0 << 5) | cppVar_11264;
	cppVar_11265 = (cppVar_11265 & cppMask_un_8_);
	bool cppVar_11267 = (cppVar_11265 == 208);
	BIT_VEC cppVar_11268 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11269 = (cppVar_11268 << 3) | 0;
	cppVar_11269 = (cppVar_11269 & cppMask_un_5_);
	BIT_VEC cppVar_11270 = (0 << 5) | cppVar_11269;
	cppVar_11270 = (cppVar_11270 & cppMask_un_8_);
	bool cppVar_11272 = (cppVar_11270 == 224);
	BIT_VEC cppVar_11273 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11274 = (cppVar_11273 << 3) | 0;
	cppVar_11274 = (cppVar_11274 & cppMask_un_5_);
	BIT_VEC cppVar_11275 = (0 << 5) | cppVar_11274;
	cppVar_11275 = (cppVar_11275 & cppMask_un_8_);
	bool cppVar_11277 = (cppVar_11275 == 240);
	BIT_VEC cppVar_11279 = (cppVar_11277) ? B : 0;
	BIT_VEC cppVar_11280 = (cppVar_11272) ? ACC : cppVar_11279;
	BIT_VEC cppVar_11281 = (cppVar_11267) ? PSW : cppVar_11280;
	BIT_VEC cppVar_11282 = (cppVar_11262) ? IP : cppVar_11281;
	BIT_VEC cppVar_11283 = (cppVar_11257) ? P3 : cppVar_11282;
	BIT_VEC cppVar_11284 = (cppVar_11252) ? IE : cppVar_11283;
	BIT_VEC cppVar_11285 = (cppVar_11247) ? P2 : cppVar_11284;
	BIT_VEC cppVar_11286 = (cppVar_11242) ? SBUF : cppVar_11285;
	BIT_VEC cppVar_11287 = (cppVar_11237) ? SCON : cppVar_11286;
	BIT_VEC cppVar_11288 = (cppVar_11232) ? P1 : cppVar_11287;
	BIT_VEC cppVar_11289 = (cppVar_11227) ? TH1 : cppVar_11288;
	BIT_VEC cppVar_11290 = (cppVar_11222) ? TL1 : cppVar_11289;
	BIT_VEC cppVar_11291 = (cppVar_11217) ? TH0 : cppVar_11290;
	BIT_VEC cppVar_11292 = (cppVar_11212) ? TL0 : cppVar_11291;
	BIT_VEC cppVar_11293 = (cppVar_11207) ? TMOD : cppVar_11292;
	BIT_VEC cppVar_11294 = (cppVar_11202) ? TCON : cppVar_11293;
	BIT_VEC cppVar_11295 = (cppVar_11197) ? PCON : cppVar_11294;
	BIT_VEC cppVar_11296 = (cppVar_11192) ? DPH : cppVar_11295;
	BIT_VEC cppVar_11297 = (cppVar_11187) ? DPL : cppVar_11296;
	BIT_VEC cppVar_11298 = (cppVar_11182) ? SP : cppVar_11297;
	BIT_VEC cppVar_11299 = (cppVar_11177) ? P0 : cppVar_11298;
	BIT_VEC cppVar_11300 = (cppVar_11168) ? cppVar_11172 : cppVar_11299;
	BIT_VEC cppVar_11301 = (cppVar_11160) ? cppVar_11300 : DPL;
	BIT_VEC cppVar_11302 = ROM.rd(PC);
	bool cppVar_11304 = (cppVar_11302 == 135);
	BIT_VEC cppVar_11306 = PC + 1;
	cppVar_11306 = (cppVar_11306 & cppMask_un_16_);
	BIT_VEC cppVar_11307 = ROM.rd(cppVar_11306);
	bool cppVar_11309 = (cppVar_11307 == 130);
	BIT_VEC cppVar_11311 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11313 = (cppVar_11311 << 3) | 1;
	cppVar_11313 = (cppVar_11313 & cppMask_un_5_);
	BIT_VEC cppVar_11314 = (0 << 5) | cppVar_11313;
	cppVar_11314 = (cppVar_11314 & cppMask_un_8_);
	BIT_VEC cppVar_11315 = IRAM.rd(cppVar_11314);
	BIT_VEC cppVar_11316 = IRAM.rd(cppVar_11315);
	BIT_VEC cppVar_11317 = (cppVar_11309) ? cppVar_11316 : DPL;
	BIT_VEC cppVar_11318 = ROM.rd(PC);
	bool cppVar_11320 = (cppVar_11318 == 134);
	BIT_VEC cppVar_11322 = PC + 1;
	cppVar_11322 = (cppVar_11322 & cppMask_un_16_);
	BIT_VEC cppVar_11323 = ROM.rd(cppVar_11322);
	bool cppVar_11325 = (cppVar_11323 == 130);
	BIT_VEC cppVar_11327 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_11329 = (cppVar_11327 << 3) | 0;
	cppVar_11329 = (cppVar_11329 & cppMask_un_5_);
	BIT_VEC cppVar_11330 = (0 << 5) | cppVar_11329;
	cppVar_11330 = (cppVar_11330 & cppMask_un_8_);
	BIT_VEC cppVar_11331 = IRAM.rd(cppVar_11330);
	BIT_VEC cppVar_11332 = IRAM.rd(cppVar_11331);
	BIT_VEC cppVar_11333 = (cppVar_11325) ? cppVar_11332 : DPL;
	BIT_VEC cppVar_11334 = ROM.rd(PC);
	bool cppVar_11336 = (cppVar_11334 == 133);
	BIT_VEC cppVar_11338 = PC + 2;
	cppVar_11338 = (cppVar_11338 & cppMask_un_16_);
	BIT_VEC cppVar_11339 = ROM.rd(cppVar_11338);
	bool cppVar_11341 = (cppVar_11339 == 130);
	BIT_VEC cppVar_11343 = PC + 1;
	cppVar_11343 = (cppVar_11343 & cppMask_un_16_);
	BIT_VEC cppVar_11344 = ROM.rd(cppVar_11343);
	BIT_VEC cppVar_11345 = (cppVar_11344 >> 7) & cppMask_un_1_;
	bool cppVar_11347 = (cppVar_11345 == 0);
	BIT_VEC cppVar_11348 = PC + 1;
	cppVar_11348 = (cppVar_11348 & cppMask_un_16_);
	BIT_VEC cppVar_11349 = ROM.rd(cppVar_11348);
	BIT_VEC cppVar_11350 = IRAM.rd(cppVar_11349);
	BIT_VEC cppVar_11351 = PC + 1;
	cppVar_11351 = (cppVar_11351 & cppMask_un_16_);
	BIT_VEC cppVar_11352 = ROM.rd(cppVar_11351);
	bool cppVar_11354 = (cppVar_11352 == 128);
	BIT_VEC cppVar_11355 = PC + 1;
	cppVar_11355 = (cppVar_11355 & cppMask_un_16_);
	BIT_VEC cppVar_11356 = ROM.rd(cppVar_11355);
	bool cppVar_11358 = (cppVar_11356 == 129);
	BIT_VEC cppVar_11359 = PC + 1;
	cppVar_11359 = (cppVar_11359 & cppMask_un_16_);
	BIT_VEC cppVar_11360 = ROM.rd(cppVar_11359);
	bool cppVar_11362 = (cppVar_11360 == 130);
	BIT_VEC cppVar_11363 = PC + 1;
	cppVar_11363 = (cppVar_11363 & cppMask_un_16_);
	BIT_VEC cppVar_11364 = ROM.rd(cppVar_11363);
	bool cppVar_11366 = (cppVar_11364 == 131);
	BIT_VEC cppVar_11367 = PC + 1;
	cppVar_11367 = (cppVar_11367 & cppMask_un_16_);
	BIT_VEC cppVar_11368 = ROM.rd(cppVar_11367);
	bool cppVar_11370 = (cppVar_11368 == 135);
	BIT_VEC cppVar_11371 = PC + 1;
	cppVar_11371 = (cppVar_11371 & cppMask_un_16_);
	BIT_VEC cppVar_11372 = ROM.rd(cppVar_11371);
	bool cppVar_11374 = (cppVar_11372 == 136);
	BIT_VEC cppVar_11375 = PC + 1;
	cppVar_11375 = (cppVar_11375 & cppMask_un_16_);
	BIT_VEC cppVar_11376 = ROM.rd(cppVar_11375);
	bool cppVar_11378 = (cppVar_11376 == 137);
	BIT_VEC cppVar_11379 = PC + 1;
	cppVar_11379 = (cppVar_11379 & cppMask_un_16_);
	BIT_VEC cppVar_11380 = ROM.rd(cppVar_11379);
	bool cppVar_11382 = (cppVar_11380 == 138);
	BIT_VEC cppVar_11383 = PC + 1;
	cppVar_11383 = (cppVar_11383 & cppMask_un_16_);
	BIT_VEC cppVar_11384 = ROM.rd(cppVar_11383);
	bool cppVar_11386 = (cppVar_11384 == 140);
	BIT_VEC cppVar_11387 = PC + 1;
	cppVar_11387 = (cppVar_11387 & cppMask_un_16_);
	BIT_VEC cppVar_11388 = ROM.rd(cppVar_11387);
	bool cppVar_11390 = (cppVar_11388 == 139);
	BIT_VEC cppVar_11391 = PC + 1;
	cppVar_11391 = (cppVar_11391 & cppMask_un_16_);
	BIT_VEC cppVar_11392 = ROM.rd(cppVar_11391);
	bool cppVar_11394 = (cppVar_11392 == 141);
	BIT_VEC cppVar_11395 = PC + 1;
	cppVar_11395 = (cppVar_11395 & cppMask_un_16_);
	BIT_VEC cppVar_11396 = ROM.rd(cppVar_11395);
	bool cppVar_11398 = (cppVar_11396 == 144);
	BIT_VEC cppVar_11399 = PC + 1;
	cppVar_11399 = (cppVar_11399 & cppMask_un_16_);
	BIT_VEC cppVar_11400 = ROM.rd(cppVar_11399);
	bool cppVar_11402 = (cppVar_11400 == 152);
	BIT_VEC cppVar_11403 = PC + 1;
	cppVar_11403 = (cppVar_11403 & cppMask_un_16_);
	BIT_VEC cppVar_11404 = ROM.rd(cppVar_11403);
	bool cppVar_11406 = (cppVar_11404 == 153);
	BIT_VEC cppVar_11407 = PC + 1;
	cppVar_11407 = (cppVar_11407 & cppMask_un_16_);
	BIT_VEC cppVar_11408 = ROM.rd(cppVar_11407);
	bool cppVar_11410 = (cppVar_11408 == 160);
	BIT_VEC cppVar_11411 = PC + 1;
	cppVar_11411 = (cppVar_11411 & cppMask_un_16_);
	BIT_VEC cppVar_11412 = ROM.rd(cppVar_11411);
	bool cppVar_11414 = (cppVar_11412 == 168);
	BIT_VEC cppVar_11415 = PC + 1;
	cppVar_11415 = (cppVar_11415 & cppMask_un_16_);
	BIT_VEC cppVar_11416 = ROM.rd(cppVar_11415);
	bool cppVar_11418 = (cppVar_11416 == 176);
	BIT_VEC cppVar_11419 = PC + 1;
	cppVar_11419 = (cppVar_11419 & cppMask_un_16_);
	BIT_VEC cppVar_11420 = ROM.rd(cppVar_11419);
	bool cppVar_11422 = (cppVar_11420 == 184);
	BIT_VEC cppVar_11423 = PC + 1;
	cppVar_11423 = (cppVar_11423 & cppMask_un_16_);
	BIT_VEC cppVar_11424 = ROM.rd(cppVar_11423);
	bool cppVar_11426 = (cppVar_11424 == 208);
	BIT_VEC cppVar_11427 = PC + 1;
	cppVar_11427 = (cppVar_11427 & cppMask_un_16_);
	BIT_VEC cppVar_11428 = ROM.rd(cppVar_11427);
	bool cppVar_11430 = (cppVar_11428 == 224);
	BIT_VEC cppVar_11431 = PC + 1;
	cppVar_11431 = (cppVar_11431 & cppMask_un_16_);
	BIT_VEC cppVar_11432 = ROM.rd(cppVar_11431);
	bool cppVar_11434 = (cppVar_11432 == 240);
	BIT_VEC cppVar_11436 = (cppVar_11434) ? B : 0;
	BIT_VEC cppVar_11437 = (cppVar_11430) ? ACC : cppVar_11436;
	BIT_VEC cppVar_11438 = (cppVar_11426) ? PSW : cppVar_11437;
	BIT_VEC cppVar_11439 = (cppVar_11422) ? IP : cppVar_11438;
	BIT_VEC cppVar_11440 = (cppVar_11418) ? P3 : cppVar_11439;
	BIT_VEC cppVar_11441 = (cppVar_11414) ? IE : cppVar_11440;
	BIT_VEC cppVar_11442 = (cppVar_11410) ? P2 : cppVar_11441;
	BIT_VEC cppVar_11443 = (cppVar_11406) ? SBUF : cppVar_11442;
	BIT_VEC cppVar_11444 = (cppVar_11402) ? SCON : cppVar_11443;
	BIT_VEC cppVar_11445 = (cppVar_11398) ? P1 : cppVar_11444;
	BIT_VEC cppVar_11446 = (cppVar_11394) ? TH1 : cppVar_11445;
	BIT_VEC cppVar_11447 = (cppVar_11390) ? TL1 : cppVar_11446;
	BIT_VEC cppVar_11448 = (cppVar_11386) ? TH0 : cppVar_11447;
	BIT_VEC cppVar_11449 = (cppVar_11382) ? TL0 : cppVar_11448;
	BIT_VEC cppVar_11450 = (cppVar_11378) ? TMOD : cppVar_11449;
	BIT_VEC cppVar_11451 = (cppVar_11374) ? TCON : cppVar_11450;
	BIT_VEC cppVar_11452 = (cppVar_11370) ? PCON : cppVar_11451;
	BIT_VEC cppVar_11453 = (cppVar_11366) ? DPH : cppVar_11452;
	BIT_VEC cppVar_11454 = (cppVar_11362) ? DPL : cppVar_11453;
	BIT_VEC cppVar_11455 = (cppVar_11358) ? SP : cppVar_11454;
	BIT_VEC cppVar_11456 = (cppVar_11354) ? P0 : cppVar_11455;
	BIT_VEC cppVar_11457 = (cppVar_11347) ? cppVar_11350 : cppVar_11456;
	BIT_VEC cppVar_11458 = (cppVar_11341) ? cppVar_11457 : DPL;
	BIT_VEC cppVar_11459 = ROM.rd(PC);
	bool cppVar_11461 = (cppVar_11459 == 117);
	BIT_VEC cppVar_11463 = PC + 1;
	cppVar_11463 = (cppVar_11463 & cppMask_un_16_);
	BIT_VEC cppVar_11464 = ROM.rd(cppVar_11463);
	bool cppVar_11466 = (cppVar_11464 == 130);
	BIT_VEC cppVar_11468 = PC + 2;
	cppVar_11468 = (cppVar_11468 & cppMask_un_16_);
	BIT_VEC cppVar_11469 = ROM.rd(cppVar_11468);
	BIT_VEC cppVar_11470 = (cppVar_11466) ? cppVar_11469 : DPL;
	BIT_VEC cppVar_11471 = ROM.rd(PC);
	bool cppVar_11473 = (cppVar_11471 == 99);
	BIT_VEC cppVar_11475 = PC + 1;
	cppVar_11475 = (cppVar_11475 & cppMask_un_16_);
	BIT_VEC cppVar_11476 = ROM.rd(cppVar_11475);
	bool cppVar_11478 = (cppVar_11476 == 130);
	BIT_VEC cppVar_11479 = PC + 1;
	cppVar_11479 = (cppVar_11479 & cppMask_un_16_);
	BIT_VEC cppVar_11480 = ROM.rd(cppVar_11479);
	BIT_VEC cppVar_11481 = (cppVar_11480 >> 7) & cppMask_un_1_;
	bool cppVar_11483 = (cppVar_11481 == 0);
	BIT_VEC cppVar_11484 = PC + 1;
	cppVar_11484 = (cppVar_11484 & cppMask_un_16_);
	BIT_VEC cppVar_11485 = ROM.rd(cppVar_11484);
	BIT_VEC cppVar_11486 = IRAM.rd(cppVar_11485);
	BIT_VEC cppVar_11487 = PC + 1;
	cppVar_11487 = (cppVar_11487 & cppMask_un_16_);
	BIT_VEC cppVar_11488 = ROM.rd(cppVar_11487);
	bool cppVar_11490 = (cppVar_11488 == 128);
	BIT_VEC cppVar_11491 = PC + 1;
	cppVar_11491 = (cppVar_11491 & cppMask_un_16_);
	BIT_VEC cppVar_11492 = ROM.rd(cppVar_11491);
	bool cppVar_11494 = (cppVar_11492 == 129);
	BIT_VEC cppVar_11495 = PC + 1;
	cppVar_11495 = (cppVar_11495 & cppMask_un_16_);
	BIT_VEC cppVar_11496 = ROM.rd(cppVar_11495);
	bool cppVar_11498 = (cppVar_11496 == 130);
	BIT_VEC cppVar_11499 = PC + 1;
	cppVar_11499 = (cppVar_11499 & cppMask_un_16_);
	BIT_VEC cppVar_11500 = ROM.rd(cppVar_11499);
	bool cppVar_11502 = (cppVar_11500 == 131);
	BIT_VEC cppVar_11503 = PC + 1;
	cppVar_11503 = (cppVar_11503 & cppMask_un_16_);
	BIT_VEC cppVar_11504 = ROM.rd(cppVar_11503);
	bool cppVar_11506 = (cppVar_11504 == 135);
	BIT_VEC cppVar_11507 = PC + 1;
	cppVar_11507 = (cppVar_11507 & cppMask_un_16_);
	BIT_VEC cppVar_11508 = ROM.rd(cppVar_11507);
	bool cppVar_11510 = (cppVar_11508 == 136);
	BIT_VEC cppVar_11511 = PC + 1;
	cppVar_11511 = (cppVar_11511 & cppMask_un_16_);
	BIT_VEC cppVar_11512 = ROM.rd(cppVar_11511);
	bool cppVar_11514 = (cppVar_11512 == 137);
	BIT_VEC cppVar_11515 = PC + 1;
	cppVar_11515 = (cppVar_11515 & cppMask_un_16_);
	BIT_VEC cppVar_11516 = ROM.rd(cppVar_11515);
	bool cppVar_11518 = (cppVar_11516 == 138);
	BIT_VEC cppVar_11519 = PC + 1;
	cppVar_11519 = (cppVar_11519 & cppMask_un_16_);
	BIT_VEC cppVar_11520 = ROM.rd(cppVar_11519);
	bool cppVar_11522 = (cppVar_11520 == 140);
	BIT_VEC cppVar_11523 = PC + 1;
	cppVar_11523 = (cppVar_11523 & cppMask_un_16_);
	BIT_VEC cppVar_11524 = ROM.rd(cppVar_11523);
	bool cppVar_11526 = (cppVar_11524 == 139);
	BIT_VEC cppVar_11527 = PC + 1;
	cppVar_11527 = (cppVar_11527 & cppMask_un_16_);
	BIT_VEC cppVar_11528 = ROM.rd(cppVar_11527);
	bool cppVar_11530 = (cppVar_11528 == 141);
	BIT_VEC cppVar_11531 = PC + 1;
	cppVar_11531 = (cppVar_11531 & cppMask_un_16_);
	BIT_VEC cppVar_11532 = ROM.rd(cppVar_11531);
	bool cppVar_11534 = (cppVar_11532 == 144);
	BIT_VEC cppVar_11535 = PC + 1;
	cppVar_11535 = (cppVar_11535 & cppMask_un_16_);
	BIT_VEC cppVar_11536 = ROM.rd(cppVar_11535);
	bool cppVar_11538 = (cppVar_11536 == 152);
	BIT_VEC cppVar_11539 = PC + 1;
	cppVar_11539 = (cppVar_11539 & cppMask_un_16_);
	BIT_VEC cppVar_11540 = ROM.rd(cppVar_11539);
	bool cppVar_11542 = (cppVar_11540 == 153);
	BIT_VEC cppVar_11543 = PC + 1;
	cppVar_11543 = (cppVar_11543 & cppMask_un_16_);
	BIT_VEC cppVar_11544 = ROM.rd(cppVar_11543);
	bool cppVar_11546 = (cppVar_11544 == 160);
	BIT_VEC cppVar_11547 = PC + 1;
	cppVar_11547 = (cppVar_11547 & cppMask_un_16_);
	BIT_VEC cppVar_11548 = ROM.rd(cppVar_11547);
	bool cppVar_11550 = (cppVar_11548 == 168);
	BIT_VEC cppVar_11551 = PC + 1;
	cppVar_11551 = (cppVar_11551 & cppMask_un_16_);
	BIT_VEC cppVar_11552 = ROM.rd(cppVar_11551);
	bool cppVar_11554 = (cppVar_11552 == 176);
	BIT_VEC cppVar_11555 = PC + 1;
	cppVar_11555 = (cppVar_11555 & cppMask_un_16_);
	BIT_VEC cppVar_11556 = ROM.rd(cppVar_11555);
	bool cppVar_11558 = (cppVar_11556 == 184);
	BIT_VEC cppVar_11559 = PC + 1;
	cppVar_11559 = (cppVar_11559 & cppMask_un_16_);
	BIT_VEC cppVar_11560 = ROM.rd(cppVar_11559);
	bool cppVar_11562 = (cppVar_11560 == 208);
	BIT_VEC cppVar_11563 = PC + 1;
	cppVar_11563 = (cppVar_11563 & cppMask_un_16_);
	BIT_VEC cppVar_11564 = ROM.rd(cppVar_11563);
	bool cppVar_11566 = (cppVar_11564 == 224);
	BIT_VEC cppVar_11567 = PC + 1;
	cppVar_11567 = (cppVar_11567 & cppMask_un_16_);
	BIT_VEC cppVar_11568 = ROM.rd(cppVar_11567);
	bool cppVar_11570 = (cppVar_11568 == 240);
	BIT_VEC cppVar_11572 = (cppVar_11570) ? B : 0;
	BIT_VEC cppVar_11573 = (cppVar_11566) ? ACC : cppVar_11572;
	BIT_VEC cppVar_11574 = (cppVar_11562) ? PSW : cppVar_11573;
	BIT_VEC cppVar_11575 = (cppVar_11558) ? IP : cppVar_11574;
	BIT_VEC cppVar_11576 = (cppVar_11554) ? P3 : cppVar_11575;
	BIT_VEC cppVar_11577 = (cppVar_11550) ? IE : cppVar_11576;
	BIT_VEC cppVar_11578 = (cppVar_11546) ? P2 : cppVar_11577;
	BIT_VEC cppVar_11579 = (cppVar_11542) ? SBUF : cppVar_11578;
	BIT_VEC cppVar_11580 = (cppVar_11538) ? SCON : cppVar_11579;
	BIT_VEC cppVar_11581 = (cppVar_11534) ? P1 : cppVar_11580;
	BIT_VEC cppVar_11582 = (cppVar_11530) ? TH1 : cppVar_11581;
	BIT_VEC cppVar_11583 = (cppVar_11526) ? TL1 : cppVar_11582;
	BIT_VEC cppVar_11584 = (cppVar_11522) ? TH0 : cppVar_11583;
	BIT_VEC cppVar_11585 = (cppVar_11518) ? TL0 : cppVar_11584;
	BIT_VEC cppVar_11586 = (cppVar_11514) ? TMOD : cppVar_11585;
	BIT_VEC cppVar_11587 = (cppVar_11510) ? TCON : cppVar_11586;
	BIT_VEC cppVar_11588 = (cppVar_11506) ? PCON : cppVar_11587;
	BIT_VEC cppVar_11589 = (cppVar_11502) ? DPH : cppVar_11588;
	BIT_VEC cppVar_11590 = (cppVar_11498) ? DPL : cppVar_11589;
	BIT_VEC cppVar_11591 = (cppVar_11494) ? SP : cppVar_11590;
	BIT_VEC cppVar_11592 = (cppVar_11490) ? P0 : cppVar_11591;
	BIT_VEC cppVar_11593 = (cppVar_11483) ? cppVar_11486 : cppVar_11592;
	BIT_VEC cppVar_11595 = PC + 2;
	cppVar_11595 = (cppVar_11595 & cppMask_un_16_);
	BIT_VEC cppVar_11596 = ROM.rd(cppVar_11595);
	BIT_VEC cppVar_11597 = cppVar_11593 ^ cppVar_11596;
	BIT_VEC cppVar_11598 = (cppVar_11478) ? cppVar_11597 : DPL;
	BIT_VEC cppVar_11599 = ROM.rd(PC);
	bool cppVar_11601 = (cppVar_11599 == 98);
	BIT_VEC cppVar_11603 = PC + 1;
	cppVar_11603 = (cppVar_11603 & cppMask_un_16_);
	BIT_VEC cppVar_11604 = ROM.rd(cppVar_11603);
	bool cppVar_11606 = (cppVar_11604 == 130);
	BIT_VEC cppVar_11607 = PC + 1;
	cppVar_11607 = (cppVar_11607 & cppMask_un_16_);
	BIT_VEC cppVar_11608 = ROM.rd(cppVar_11607);
	BIT_VEC cppVar_11609 = (cppVar_11608 >> 7) & cppMask_un_1_;
	bool cppVar_11611 = (cppVar_11609 == 0);
	BIT_VEC cppVar_11612 = PC + 1;
	cppVar_11612 = (cppVar_11612 & cppMask_un_16_);
	BIT_VEC cppVar_11613 = ROM.rd(cppVar_11612);
	BIT_VEC cppVar_11614 = IRAM.rd(cppVar_11613);
	BIT_VEC cppVar_11615 = PC + 1;
	cppVar_11615 = (cppVar_11615 & cppMask_un_16_);
	BIT_VEC cppVar_11616 = ROM.rd(cppVar_11615);
	bool cppVar_11618 = (cppVar_11616 == 128);
	BIT_VEC cppVar_11619 = PC + 1;
	cppVar_11619 = (cppVar_11619 & cppMask_un_16_);
	BIT_VEC cppVar_11620 = ROM.rd(cppVar_11619);
	bool cppVar_11622 = (cppVar_11620 == 129);
	BIT_VEC cppVar_11623 = PC + 1;
	cppVar_11623 = (cppVar_11623 & cppMask_un_16_);
	BIT_VEC cppVar_11624 = ROM.rd(cppVar_11623);
	bool cppVar_11626 = (cppVar_11624 == 130);
	BIT_VEC cppVar_11627 = PC + 1;
	cppVar_11627 = (cppVar_11627 & cppMask_un_16_);
	BIT_VEC cppVar_11628 = ROM.rd(cppVar_11627);
	bool cppVar_11630 = (cppVar_11628 == 131);
	BIT_VEC cppVar_11631 = PC + 1;
	cppVar_11631 = (cppVar_11631 & cppMask_un_16_);
	BIT_VEC cppVar_11632 = ROM.rd(cppVar_11631);
	bool cppVar_11634 = (cppVar_11632 == 135);
	BIT_VEC cppVar_11635 = PC + 1;
	cppVar_11635 = (cppVar_11635 & cppMask_un_16_);
	BIT_VEC cppVar_11636 = ROM.rd(cppVar_11635);
	bool cppVar_11638 = (cppVar_11636 == 136);
	BIT_VEC cppVar_11639 = PC + 1;
	cppVar_11639 = (cppVar_11639 & cppMask_un_16_);
	BIT_VEC cppVar_11640 = ROM.rd(cppVar_11639);
	bool cppVar_11642 = (cppVar_11640 == 137);
	BIT_VEC cppVar_11643 = PC + 1;
	cppVar_11643 = (cppVar_11643 & cppMask_un_16_);
	BIT_VEC cppVar_11644 = ROM.rd(cppVar_11643);
	bool cppVar_11646 = (cppVar_11644 == 138);
	BIT_VEC cppVar_11647 = PC + 1;
	cppVar_11647 = (cppVar_11647 & cppMask_un_16_);
	BIT_VEC cppVar_11648 = ROM.rd(cppVar_11647);
	bool cppVar_11650 = (cppVar_11648 == 140);
	BIT_VEC cppVar_11651 = PC + 1;
	cppVar_11651 = (cppVar_11651 & cppMask_un_16_);
	BIT_VEC cppVar_11652 = ROM.rd(cppVar_11651);
	bool cppVar_11654 = (cppVar_11652 == 139);
	BIT_VEC cppVar_11655 = PC + 1;
	cppVar_11655 = (cppVar_11655 & cppMask_un_16_);
	BIT_VEC cppVar_11656 = ROM.rd(cppVar_11655);
	bool cppVar_11658 = (cppVar_11656 == 141);
	BIT_VEC cppVar_11659 = PC + 1;
	cppVar_11659 = (cppVar_11659 & cppMask_un_16_);
	BIT_VEC cppVar_11660 = ROM.rd(cppVar_11659);
	bool cppVar_11662 = (cppVar_11660 == 144);
	BIT_VEC cppVar_11663 = PC + 1;
	cppVar_11663 = (cppVar_11663 & cppMask_un_16_);
	BIT_VEC cppVar_11664 = ROM.rd(cppVar_11663);
	bool cppVar_11666 = (cppVar_11664 == 152);
	BIT_VEC cppVar_11667 = PC + 1;
	cppVar_11667 = (cppVar_11667 & cppMask_un_16_);
	BIT_VEC cppVar_11668 = ROM.rd(cppVar_11667);
	bool cppVar_11670 = (cppVar_11668 == 153);
	BIT_VEC cppVar_11671 = PC + 1;
	cppVar_11671 = (cppVar_11671 & cppMask_un_16_);
	BIT_VEC cppVar_11672 = ROM.rd(cppVar_11671);
	bool cppVar_11674 = (cppVar_11672 == 160);
	BIT_VEC cppVar_11675 = PC + 1;
	cppVar_11675 = (cppVar_11675 & cppMask_un_16_);
	BIT_VEC cppVar_11676 = ROM.rd(cppVar_11675);
	bool cppVar_11678 = (cppVar_11676 == 168);
	BIT_VEC cppVar_11679 = PC + 1;
	cppVar_11679 = (cppVar_11679 & cppMask_un_16_);
	BIT_VEC cppVar_11680 = ROM.rd(cppVar_11679);
	bool cppVar_11682 = (cppVar_11680 == 176);
	BIT_VEC cppVar_11683 = PC + 1;
	cppVar_11683 = (cppVar_11683 & cppMask_un_16_);
	BIT_VEC cppVar_11684 = ROM.rd(cppVar_11683);
	bool cppVar_11686 = (cppVar_11684 == 184);
	BIT_VEC cppVar_11687 = PC + 1;
	cppVar_11687 = (cppVar_11687 & cppMask_un_16_);
	BIT_VEC cppVar_11688 = ROM.rd(cppVar_11687);
	bool cppVar_11690 = (cppVar_11688 == 208);
	BIT_VEC cppVar_11691 = PC + 1;
	cppVar_11691 = (cppVar_11691 & cppMask_un_16_);
	BIT_VEC cppVar_11692 = ROM.rd(cppVar_11691);
	bool cppVar_11694 = (cppVar_11692 == 224);
	BIT_VEC cppVar_11695 = PC + 1;
	cppVar_11695 = (cppVar_11695 & cppMask_un_16_);
	BIT_VEC cppVar_11696 = ROM.rd(cppVar_11695);
	bool cppVar_11698 = (cppVar_11696 == 240);
	BIT_VEC cppVar_11700 = (cppVar_11698) ? B : 0;
	BIT_VEC cppVar_11701 = (cppVar_11694) ? ACC : cppVar_11700;
	BIT_VEC cppVar_11702 = (cppVar_11690) ? PSW : cppVar_11701;
	BIT_VEC cppVar_11703 = (cppVar_11686) ? IP : cppVar_11702;
	BIT_VEC cppVar_11704 = (cppVar_11682) ? P3 : cppVar_11703;
	BIT_VEC cppVar_11705 = (cppVar_11678) ? IE : cppVar_11704;
	BIT_VEC cppVar_11706 = (cppVar_11674) ? P2 : cppVar_11705;
	BIT_VEC cppVar_11707 = (cppVar_11670) ? SBUF : cppVar_11706;
	BIT_VEC cppVar_11708 = (cppVar_11666) ? SCON : cppVar_11707;
	BIT_VEC cppVar_11709 = (cppVar_11662) ? P1 : cppVar_11708;
	BIT_VEC cppVar_11710 = (cppVar_11658) ? TH1 : cppVar_11709;
	BIT_VEC cppVar_11711 = (cppVar_11654) ? TL1 : cppVar_11710;
	BIT_VEC cppVar_11712 = (cppVar_11650) ? TH0 : cppVar_11711;
	BIT_VEC cppVar_11713 = (cppVar_11646) ? TL0 : cppVar_11712;
	BIT_VEC cppVar_11714 = (cppVar_11642) ? TMOD : cppVar_11713;
	BIT_VEC cppVar_11715 = (cppVar_11638) ? TCON : cppVar_11714;
	BIT_VEC cppVar_11716 = (cppVar_11634) ? PCON : cppVar_11715;
	BIT_VEC cppVar_11717 = (cppVar_11630) ? DPH : cppVar_11716;
	BIT_VEC cppVar_11718 = (cppVar_11626) ? DPL : cppVar_11717;
	BIT_VEC cppVar_11719 = (cppVar_11622) ? SP : cppVar_11718;
	BIT_VEC cppVar_11720 = (cppVar_11618) ? P0 : cppVar_11719;
	BIT_VEC cppVar_11721 = (cppVar_11611) ? cppVar_11614 : cppVar_11720;
	BIT_VEC cppVar_11722 = cppVar_11721 ^ ACC;
	BIT_VEC cppVar_11723 = (cppVar_11606) ? cppVar_11722 : DPL;
	BIT_VEC cppVar_11724 = ROM.rd(PC);
	bool cppVar_11726 = (cppVar_11724 == 83);
	BIT_VEC cppVar_11728 = PC + 1;
	cppVar_11728 = (cppVar_11728 & cppMask_un_16_);
	BIT_VEC cppVar_11729 = ROM.rd(cppVar_11728);
	bool cppVar_11731 = (cppVar_11729 == 130);
	BIT_VEC cppVar_11732 = PC + 1;
	cppVar_11732 = (cppVar_11732 & cppMask_un_16_);
	BIT_VEC cppVar_11733 = ROM.rd(cppVar_11732);
	BIT_VEC cppVar_11734 = (cppVar_11733 >> 7) & cppMask_un_1_;
	bool cppVar_11736 = (cppVar_11734 == 0);
	BIT_VEC cppVar_11737 = PC + 1;
	cppVar_11737 = (cppVar_11737 & cppMask_un_16_);
	BIT_VEC cppVar_11738 = ROM.rd(cppVar_11737);
	BIT_VEC cppVar_11739 = IRAM.rd(cppVar_11738);
	BIT_VEC cppVar_11740 = PC + 1;
	cppVar_11740 = (cppVar_11740 & cppMask_un_16_);
	BIT_VEC cppVar_11741 = ROM.rd(cppVar_11740);
	bool cppVar_11743 = (cppVar_11741 == 128);
	BIT_VEC cppVar_11744 = PC + 1;
	cppVar_11744 = (cppVar_11744 & cppMask_un_16_);
	BIT_VEC cppVar_11745 = ROM.rd(cppVar_11744);
	bool cppVar_11747 = (cppVar_11745 == 129);
	BIT_VEC cppVar_11748 = PC + 1;
	cppVar_11748 = (cppVar_11748 & cppMask_un_16_);
	BIT_VEC cppVar_11749 = ROM.rd(cppVar_11748);
	bool cppVar_11751 = (cppVar_11749 == 130);
	BIT_VEC cppVar_11752 = PC + 1;
	cppVar_11752 = (cppVar_11752 & cppMask_un_16_);
	BIT_VEC cppVar_11753 = ROM.rd(cppVar_11752);
	bool cppVar_11755 = (cppVar_11753 == 131);
	BIT_VEC cppVar_11756 = PC + 1;
	cppVar_11756 = (cppVar_11756 & cppMask_un_16_);
	BIT_VEC cppVar_11757 = ROM.rd(cppVar_11756);
	bool cppVar_11759 = (cppVar_11757 == 135);
	BIT_VEC cppVar_11760 = PC + 1;
	cppVar_11760 = (cppVar_11760 & cppMask_un_16_);
	BIT_VEC cppVar_11761 = ROM.rd(cppVar_11760);
	bool cppVar_11763 = (cppVar_11761 == 136);
	BIT_VEC cppVar_11764 = PC + 1;
	cppVar_11764 = (cppVar_11764 & cppMask_un_16_);
	BIT_VEC cppVar_11765 = ROM.rd(cppVar_11764);
	bool cppVar_11767 = (cppVar_11765 == 137);
	BIT_VEC cppVar_11768 = PC + 1;
	cppVar_11768 = (cppVar_11768 & cppMask_un_16_);
	BIT_VEC cppVar_11769 = ROM.rd(cppVar_11768);
	bool cppVar_11771 = (cppVar_11769 == 138);
	BIT_VEC cppVar_11772 = PC + 1;
	cppVar_11772 = (cppVar_11772 & cppMask_un_16_);
	BIT_VEC cppVar_11773 = ROM.rd(cppVar_11772);
	bool cppVar_11775 = (cppVar_11773 == 140);
	BIT_VEC cppVar_11776 = PC + 1;
	cppVar_11776 = (cppVar_11776 & cppMask_un_16_);
	BIT_VEC cppVar_11777 = ROM.rd(cppVar_11776);
	bool cppVar_11779 = (cppVar_11777 == 139);
	BIT_VEC cppVar_11780 = PC + 1;
	cppVar_11780 = (cppVar_11780 & cppMask_un_16_);
	BIT_VEC cppVar_11781 = ROM.rd(cppVar_11780);
	bool cppVar_11783 = (cppVar_11781 == 141);
	BIT_VEC cppVar_11784 = PC + 1;
	cppVar_11784 = (cppVar_11784 & cppMask_un_16_);
	BIT_VEC cppVar_11785 = ROM.rd(cppVar_11784);
	bool cppVar_11787 = (cppVar_11785 == 144);
	BIT_VEC cppVar_11788 = PC + 1;
	cppVar_11788 = (cppVar_11788 & cppMask_un_16_);
	BIT_VEC cppVar_11789 = ROM.rd(cppVar_11788);
	bool cppVar_11791 = (cppVar_11789 == 152);
	BIT_VEC cppVar_11792 = PC + 1;
	cppVar_11792 = (cppVar_11792 & cppMask_un_16_);
	BIT_VEC cppVar_11793 = ROM.rd(cppVar_11792);
	bool cppVar_11795 = (cppVar_11793 == 153);
	BIT_VEC cppVar_11796 = PC + 1;
	cppVar_11796 = (cppVar_11796 & cppMask_un_16_);
	BIT_VEC cppVar_11797 = ROM.rd(cppVar_11796);
	bool cppVar_11799 = (cppVar_11797 == 160);
	BIT_VEC cppVar_11800 = PC + 1;
	cppVar_11800 = (cppVar_11800 & cppMask_un_16_);
	BIT_VEC cppVar_11801 = ROM.rd(cppVar_11800);
	bool cppVar_11803 = (cppVar_11801 == 168);
	BIT_VEC cppVar_11804 = PC + 1;
	cppVar_11804 = (cppVar_11804 & cppMask_un_16_);
	BIT_VEC cppVar_11805 = ROM.rd(cppVar_11804);
	bool cppVar_11807 = (cppVar_11805 == 176);
	BIT_VEC cppVar_11808 = PC + 1;
	cppVar_11808 = (cppVar_11808 & cppMask_un_16_);
	BIT_VEC cppVar_11809 = ROM.rd(cppVar_11808);
	bool cppVar_11811 = (cppVar_11809 == 184);
	BIT_VEC cppVar_11812 = PC + 1;
	cppVar_11812 = (cppVar_11812 & cppMask_un_16_);
	BIT_VEC cppVar_11813 = ROM.rd(cppVar_11812);
	bool cppVar_11815 = (cppVar_11813 == 208);
	BIT_VEC cppVar_11816 = PC + 1;
	cppVar_11816 = (cppVar_11816 & cppMask_un_16_);
	BIT_VEC cppVar_11817 = ROM.rd(cppVar_11816);
	bool cppVar_11819 = (cppVar_11817 == 224);
	BIT_VEC cppVar_11820 = PC + 1;
	cppVar_11820 = (cppVar_11820 & cppMask_un_16_);
	BIT_VEC cppVar_11821 = ROM.rd(cppVar_11820);
	bool cppVar_11823 = (cppVar_11821 == 240);
	BIT_VEC cppVar_11825 = (cppVar_11823) ? B : 0;
	BIT_VEC cppVar_11826 = (cppVar_11819) ? ACC : cppVar_11825;
	BIT_VEC cppVar_11827 = (cppVar_11815) ? PSW : cppVar_11826;
	BIT_VEC cppVar_11828 = (cppVar_11811) ? IP : cppVar_11827;
	BIT_VEC cppVar_11829 = (cppVar_11807) ? P3 : cppVar_11828;
	BIT_VEC cppVar_11830 = (cppVar_11803) ? IE : cppVar_11829;
	BIT_VEC cppVar_11831 = (cppVar_11799) ? P2 : cppVar_11830;
	BIT_VEC cppVar_11832 = (cppVar_11795) ? SBUF : cppVar_11831;
	BIT_VEC cppVar_11833 = (cppVar_11791) ? SCON : cppVar_11832;
	BIT_VEC cppVar_11834 = (cppVar_11787) ? P1 : cppVar_11833;
	BIT_VEC cppVar_11835 = (cppVar_11783) ? TH1 : cppVar_11834;
	BIT_VEC cppVar_11836 = (cppVar_11779) ? TL1 : cppVar_11835;
	BIT_VEC cppVar_11837 = (cppVar_11775) ? TH0 : cppVar_11836;
	BIT_VEC cppVar_11838 = (cppVar_11771) ? TL0 : cppVar_11837;
	BIT_VEC cppVar_11839 = (cppVar_11767) ? TMOD : cppVar_11838;
	BIT_VEC cppVar_11840 = (cppVar_11763) ? TCON : cppVar_11839;
	BIT_VEC cppVar_11841 = (cppVar_11759) ? PCON : cppVar_11840;
	BIT_VEC cppVar_11842 = (cppVar_11755) ? DPH : cppVar_11841;
	BIT_VEC cppVar_11843 = (cppVar_11751) ? DPL : cppVar_11842;
	BIT_VEC cppVar_11844 = (cppVar_11747) ? SP : cppVar_11843;
	BIT_VEC cppVar_11845 = (cppVar_11743) ? P0 : cppVar_11844;
	BIT_VEC cppVar_11846 = (cppVar_11736) ? cppVar_11739 : cppVar_11845;
	BIT_VEC cppVar_11848 = PC + 2;
	cppVar_11848 = (cppVar_11848 & cppMask_un_16_);
	BIT_VEC cppVar_11849 = ROM.rd(cppVar_11848);
	BIT_VEC cppVar_11850 = cppVar_11846 & cppVar_11849;
	BIT_VEC cppVar_11851 = (cppVar_11731) ? cppVar_11850 : DPL;
	BIT_VEC cppVar_11852 = ROM.rd(PC);
	bool cppVar_11854 = (cppVar_11852 == 82);
	BIT_VEC cppVar_11856 = PC + 1;
	cppVar_11856 = (cppVar_11856 & cppMask_un_16_);
	BIT_VEC cppVar_11857 = ROM.rd(cppVar_11856);
	bool cppVar_11859 = (cppVar_11857 == 130);
	BIT_VEC cppVar_11860 = PC + 1;
	cppVar_11860 = (cppVar_11860 & cppMask_un_16_);
	BIT_VEC cppVar_11861 = ROM.rd(cppVar_11860);
	BIT_VEC cppVar_11862 = (cppVar_11861 >> 7) & cppMask_un_1_;
	bool cppVar_11864 = (cppVar_11862 == 0);
	BIT_VEC cppVar_11865 = PC + 1;
	cppVar_11865 = (cppVar_11865 & cppMask_un_16_);
	BIT_VEC cppVar_11866 = ROM.rd(cppVar_11865);
	BIT_VEC cppVar_11867 = IRAM.rd(cppVar_11866);
	BIT_VEC cppVar_11868 = PC + 1;
	cppVar_11868 = (cppVar_11868 & cppMask_un_16_);
	BIT_VEC cppVar_11869 = ROM.rd(cppVar_11868);
	bool cppVar_11871 = (cppVar_11869 == 128);
	BIT_VEC cppVar_11872 = PC + 1;
	cppVar_11872 = (cppVar_11872 & cppMask_un_16_);
	BIT_VEC cppVar_11873 = ROM.rd(cppVar_11872);
	bool cppVar_11875 = (cppVar_11873 == 129);
	BIT_VEC cppVar_11876 = PC + 1;
	cppVar_11876 = (cppVar_11876 & cppMask_un_16_);
	BIT_VEC cppVar_11877 = ROM.rd(cppVar_11876);
	bool cppVar_11879 = (cppVar_11877 == 130);
	BIT_VEC cppVar_11880 = PC + 1;
	cppVar_11880 = (cppVar_11880 & cppMask_un_16_);
	BIT_VEC cppVar_11881 = ROM.rd(cppVar_11880);
	bool cppVar_11883 = (cppVar_11881 == 131);
	BIT_VEC cppVar_11884 = PC + 1;
	cppVar_11884 = (cppVar_11884 & cppMask_un_16_);
	BIT_VEC cppVar_11885 = ROM.rd(cppVar_11884);
	bool cppVar_11887 = (cppVar_11885 == 135);
	BIT_VEC cppVar_11888 = PC + 1;
	cppVar_11888 = (cppVar_11888 & cppMask_un_16_);
	BIT_VEC cppVar_11889 = ROM.rd(cppVar_11888);
	bool cppVar_11891 = (cppVar_11889 == 136);
	BIT_VEC cppVar_11892 = PC + 1;
	cppVar_11892 = (cppVar_11892 & cppMask_un_16_);
	BIT_VEC cppVar_11893 = ROM.rd(cppVar_11892);
	bool cppVar_11895 = (cppVar_11893 == 137);
	BIT_VEC cppVar_11896 = PC + 1;
	cppVar_11896 = (cppVar_11896 & cppMask_un_16_);
	BIT_VEC cppVar_11897 = ROM.rd(cppVar_11896);
	bool cppVar_11899 = (cppVar_11897 == 138);
	BIT_VEC cppVar_11900 = PC + 1;
	cppVar_11900 = (cppVar_11900 & cppMask_un_16_);
	BIT_VEC cppVar_11901 = ROM.rd(cppVar_11900);
	bool cppVar_11903 = (cppVar_11901 == 140);
	BIT_VEC cppVar_11904 = PC + 1;
	cppVar_11904 = (cppVar_11904 & cppMask_un_16_);
	BIT_VEC cppVar_11905 = ROM.rd(cppVar_11904);
	bool cppVar_11907 = (cppVar_11905 == 139);
	BIT_VEC cppVar_11908 = PC + 1;
	cppVar_11908 = (cppVar_11908 & cppMask_un_16_);
	BIT_VEC cppVar_11909 = ROM.rd(cppVar_11908);
	bool cppVar_11911 = (cppVar_11909 == 141);
	BIT_VEC cppVar_11912 = PC + 1;
	cppVar_11912 = (cppVar_11912 & cppMask_un_16_);
	BIT_VEC cppVar_11913 = ROM.rd(cppVar_11912);
	bool cppVar_11915 = (cppVar_11913 == 144);
	BIT_VEC cppVar_11916 = PC + 1;
	cppVar_11916 = (cppVar_11916 & cppMask_un_16_);
	BIT_VEC cppVar_11917 = ROM.rd(cppVar_11916);
	bool cppVar_11919 = (cppVar_11917 == 152);
	BIT_VEC cppVar_11920 = PC + 1;
	cppVar_11920 = (cppVar_11920 & cppMask_un_16_);
	BIT_VEC cppVar_11921 = ROM.rd(cppVar_11920);
	bool cppVar_11923 = (cppVar_11921 == 153);
	BIT_VEC cppVar_11924 = PC + 1;
	cppVar_11924 = (cppVar_11924 & cppMask_un_16_);
	BIT_VEC cppVar_11925 = ROM.rd(cppVar_11924);
	bool cppVar_11927 = (cppVar_11925 == 160);
	BIT_VEC cppVar_11928 = PC + 1;
	cppVar_11928 = (cppVar_11928 & cppMask_un_16_);
	BIT_VEC cppVar_11929 = ROM.rd(cppVar_11928);
	bool cppVar_11931 = (cppVar_11929 == 168);
	BIT_VEC cppVar_11932 = PC + 1;
	cppVar_11932 = (cppVar_11932 & cppMask_un_16_);
	BIT_VEC cppVar_11933 = ROM.rd(cppVar_11932);
	bool cppVar_11935 = (cppVar_11933 == 176);
	BIT_VEC cppVar_11936 = PC + 1;
	cppVar_11936 = (cppVar_11936 & cppMask_un_16_);
	BIT_VEC cppVar_11937 = ROM.rd(cppVar_11936);
	bool cppVar_11939 = (cppVar_11937 == 184);
	BIT_VEC cppVar_11940 = PC + 1;
	cppVar_11940 = (cppVar_11940 & cppMask_un_16_);
	BIT_VEC cppVar_11941 = ROM.rd(cppVar_11940);
	bool cppVar_11943 = (cppVar_11941 == 208);
	BIT_VEC cppVar_11944 = PC + 1;
	cppVar_11944 = (cppVar_11944 & cppMask_un_16_);
	BIT_VEC cppVar_11945 = ROM.rd(cppVar_11944);
	bool cppVar_11947 = (cppVar_11945 == 224);
	BIT_VEC cppVar_11948 = PC + 1;
	cppVar_11948 = (cppVar_11948 & cppMask_un_16_);
	BIT_VEC cppVar_11949 = ROM.rd(cppVar_11948);
	bool cppVar_11951 = (cppVar_11949 == 240);
	BIT_VEC cppVar_11953 = (cppVar_11951) ? B : 0;
	BIT_VEC cppVar_11954 = (cppVar_11947) ? ACC : cppVar_11953;
	BIT_VEC cppVar_11955 = (cppVar_11943) ? PSW : cppVar_11954;
	BIT_VEC cppVar_11956 = (cppVar_11939) ? IP : cppVar_11955;
	BIT_VEC cppVar_11957 = (cppVar_11935) ? P3 : cppVar_11956;
	BIT_VEC cppVar_11958 = (cppVar_11931) ? IE : cppVar_11957;
	BIT_VEC cppVar_11959 = (cppVar_11927) ? P2 : cppVar_11958;
	BIT_VEC cppVar_11960 = (cppVar_11923) ? SBUF : cppVar_11959;
	BIT_VEC cppVar_11961 = (cppVar_11919) ? SCON : cppVar_11960;
	BIT_VEC cppVar_11962 = (cppVar_11915) ? P1 : cppVar_11961;
	BIT_VEC cppVar_11963 = (cppVar_11911) ? TH1 : cppVar_11962;
	BIT_VEC cppVar_11964 = (cppVar_11907) ? TL1 : cppVar_11963;
	BIT_VEC cppVar_11965 = (cppVar_11903) ? TH0 : cppVar_11964;
	BIT_VEC cppVar_11966 = (cppVar_11899) ? TL0 : cppVar_11965;
	BIT_VEC cppVar_11967 = (cppVar_11895) ? TMOD : cppVar_11966;
	BIT_VEC cppVar_11968 = (cppVar_11891) ? TCON : cppVar_11967;
	BIT_VEC cppVar_11969 = (cppVar_11887) ? PCON : cppVar_11968;
	BIT_VEC cppVar_11970 = (cppVar_11883) ? DPH : cppVar_11969;
	BIT_VEC cppVar_11971 = (cppVar_11879) ? DPL : cppVar_11970;
	BIT_VEC cppVar_11972 = (cppVar_11875) ? SP : cppVar_11971;
	BIT_VEC cppVar_11973 = (cppVar_11871) ? P0 : cppVar_11972;
	BIT_VEC cppVar_11974 = (cppVar_11864) ? cppVar_11867 : cppVar_11973;
	BIT_VEC cppVar_11975 = cppVar_11974 & ACC;
	BIT_VEC cppVar_11976 = (cppVar_11859) ? cppVar_11975 : DPL;
	BIT_VEC cppVar_11977 = ROM.rd(PC);
	bool cppVar_11979 = (cppVar_11977 == 67);
	BIT_VEC cppVar_11981 = PC + 1;
	cppVar_11981 = (cppVar_11981 & cppMask_un_16_);
	BIT_VEC cppVar_11982 = ROM.rd(cppVar_11981);
	bool cppVar_11984 = (cppVar_11982 == 130);
	BIT_VEC cppVar_11985 = PC + 1;
	cppVar_11985 = (cppVar_11985 & cppMask_un_16_);
	BIT_VEC cppVar_11986 = ROM.rd(cppVar_11985);
	BIT_VEC cppVar_11987 = (cppVar_11986 >> 7) & cppMask_un_1_;
	bool cppVar_11989 = (cppVar_11987 == 0);
	BIT_VEC cppVar_11990 = PC + 1;
	cppVar_11990 = (cppVar_11990 & cppMask_un_16_);
	BIT_VEC cppVar_11991 = ROM.rd(cppVar_11990);
	BIT_VEC cppVar_11992 = IRAM.rd(cppVar_11991);
	BIT_VEC cppVar_11993 = PC + 1;
	cppVar_11993 = (cppVar_11993 & cppMask_un_16_);
	BIT_VEC cppVar_11994 = ROM.rd(cppVar_11993);
	bool cppVar_11996 = (cppVar_11994 == 128);
	BIT_VEC cppVar_11997 = PC + 1;
	cppVar_11997 = (cppVar_11997 & cppMask_un_16_);
	BIT_VEC cppVar_11998 = ROM.rd(cppVar_11997);
	bool cppVar_12000 = (cppVar_11998 == 129);
	BIT_VEC cppVar_12001 = PC + 1;
	cppVar_12001 = (cppVar_12001 & cppMask_un_16_);
	BIT_VEC cppVar_12002 = ROM.rd(cppVar_12001);
	bool cppVar_12004 = (cppVar_12002 == 130);
	BIT_VEC cppVar_12005 = PC + 1;
	cppVar_12005 = (cppVar_12005 & cppMask_un_16_);
	BIT_VEC cppVar_12006 = ROM.rd(cppVar_12005);
	bool cppVar_12008 = (cppVar_12006 == 131);
	BIT_VEC cppVar_12009 = PC + 1;
	cppVar_12009 = (cppVar_12009 & cppMask_un_16_);
	BIT_VEC cppVar_12010 = ROM.rd(cppVar_12009);
	bool cppVar_12012 = (cppVar_12010 == 135);
	BIT_VEC cppVar_12013 = PC + 1;
	cppVar_12013 = (cppVar_12013 & cppMask_un_16_);
	BIT_VEC cppVar_12014 = ROM.rd(cppVar_12013);
	bool cppVar_12016 = (cppVar_12014 == 136);
	BIT_VEC cppVar_12017 = PC + 1;
	cppVar_12017 = (cppVar_12017 & cppMask_un_16_);
	BIT_VEC cppVar_12018 = ROM.rd(cppVar_12017);
	bool cppVar_12020 = (cppVar_12018 == 137);
	BIT_VEC cppVar_12021 = PC + 1;
	cppVar_12021 = (cppVar_12021 & cppMask_un_16_);
	BIT_VEC cppVar_12022 = ROM.rd(cppVar_12021);
	bool cppVar_12024 = (cppVar_12022 == 138);
	BIT_VEC cppVar_12025 = PC + 1;
	cppVar_12025 = (cppVar_12025 & cppMask_un_16_);
	BIT_VEC cppVar_12026 = ROM.rd(cppVar_12025);
	bool cppVar_12028 = (cppVar_12026 == 140);
	BIT_VEC cppVar_12029 = PC + 1;
	cppVar_12029 = (cppVar_12029 & cppMask_un_16_);
	BIT_VEC cppVar_12030 = ROM.rd(cppVar_12029);
	bool cppVar_12032 = (cppVar_12030 == 139);
	BIT_VEC cppVar_12033 = PC + 1;
	cppVar_12033 = (cppVar_12033 & cppMask_un_16_);
	BIT_VEC cppVar_12034 = ROM.rd(cppVar_12033);
	bool cppVar_12036 = (cppVar_12034 == 141);
	BIT_VEC cppVar_12037 = PC + 1;
	cppVar_12037 = (cppVar_12037 & cppMask_un_16_);
	BIT_VEC cppVar_12038 = ROM.rd(cppVar_12037);
	bool cppVar_12040 = (cppVar_12038 == 144);
	BIT_VEC cppVar_12041 = PC + 1;
	cppVar_12041 = (cppVar_12041 & cppMask_un_16_);
	BIT_VEC cppVar_12042 = ROM.rd(cppVar_12041);
	bool cppVar_12044 = (cppVar_12042 == 152);
	BIT_VEC cppVar_12045 = PC + 1;
	cppVar_12045 = (cppVar_12045 & cppMask_un_16_);
	BIT_VEC cppVar_12046 = ROM.rd(cppVar_12045);
	bool cppVar_12048 = (cppVar_12046 == 153);
	BIT_VEC cppVar_12049 = PC + 1;
	cppVar_12049 = (cppVar_12049 & cppMask_un_16_);
	BIT_VEC cppVar_12050 = ROM.rd(cppVar_12049);
	bool cppVar_12052 = (cppVar_12050 == 160);
	BIT_VEC cppVar_12053 = PC + 1;
	cppVar_12053 = (cppVar_12053 & cppMask_un_16_);
	BIT_VEC cppVar_12054 = ROM.rd(cppVar_12053);
	bool cppVar_12056 = (cppVar_12054 == 168);
	BIT_VEC cppVar_12057 = PC + 1;
	cppVar_12057 = (cppVar_12057 & cppMask_un_16_);
	BIT_VEC cppVar_12058 = ROM.rd(cppVar_12057);
	bool cppVar_12060 = (cppVar_12058 == 176);
	BIT_VEC cppVar_12061 = PC + 1;
	cppVar_12061 = (cppVar_12061 & cppMask_un_16_);
	BIT_VEC cppVar_12062 = ROM.rd(cppVar_12061);
	bool cppVar_12064 = (cppVar_12062 == 184);
	BIT_VEC cppVar_12065 = PC + 1;
	cppVar_12065 = (cppVar_12065 & cppMask_un_16_);
	BIT_VEC cppVar_12066 = ROM.rd(cppVar_12065);
	bool cppVar_12068 = (cppVar_12066 == 208);
	BIT_VEC cppVar_12069 = PC + 1;
	cppVar_12069 = (cppVar_12069 & cppMask_un_16_);
	BIT_VEC cppVar_12070 = ROM.rd(cppVar_12069);
	bool cppVar_12072 = (cppVar_12070 == 224);
	BIT_VEC cppVar_12073 = PC + 1;
	cppVar_12073 = (cppVar_12073 & cppMask_un_16_);
	BIT_VEC cppVar_12074 = ROM.rd(cppVar_12073);
	bool cppVar_12076 = (cppVar_12074 == 240);
	BIT_VEC cppVar_12078 = (cppVar_12076) ? B : 0;
	BIT_VEC cppVar_12079 = (cppVar_12072) ? ACC : cppVar_12078;
	BIT_VEC cppVar_12080 = (cppVar_12068) ? PSW : cppVar_12079;
	BIT_VEC cppVar_12081 = (cppVar_12064) ? IP : cppVar_12080;
	BIT_VEC cppVar_12082 = (cppVar_12060) ? P3 : cppVar_12081;
	BIT_VEC cppVar_12083 = (cppVar_12056) ? IE : cppVar_12082;
	BIT_VEC cppVar_12084 = (cppVar_12052) ? P2 : cppVar_12083;
	BIT_VEC cppVar_12085 = (cppVar_12048) ? SBUF : cppVar_12084;
	BIT_VEC cppVar_12086 = (cppVar_12044) ? SCON : cppVar_12085;
	BIT_VEC cppVar_12087 = (cppVar_12040) ? P1 : cppVar_12086;
	BIT_VEC cppVar_12088 = (cppVar_12036) ? TH1 : cppVar_12087;
	BIT_VEC cppVar_12089 = (cppVar_12032) ? TL1 : cppVar_12088;
	BIT_VEC cppVar_12090 = (cppVar_12028) ? TH0 : cppVar_12089;
	BIT_VEC cppVar_12091 = (cppVar_12024) ? TL0 : cppVar_12090;
	BIT_VEC cppVar_12092 = (cppVar_12020) ? TMOD : cppVar_12091;
	BIT_VEC cppVar_12093 = (cppVar_12016) ? TCON : cppVar_12092;
	BIT_VEC cppVar_12094 = (cppVar_12012) ? PCON : cppVar_12093;
	BIT_VEC cppVar_12095 = (cppVar_12008) ? DPH : cppVar_12094;
	BIT_VEC cppVar_12096 = (cppVar_12004) ? DPL : cppVar_12095;
	BIT_VEC cppVar_12097 = (cppVar_12000) ? SP : cppVar_12096;
	BIT_VEC cppVar_12098 = (cppVar_11996) ? P0 : cppVar_12097;
	BIT_VEC cppVar_12099 = (cppVar_11989) ? cppVar_11992 : cppVar_12098;
	BIT_VEC cppVar_12101 = PC + 2;
	cppVar_12101 = (cppVar_12101 & cppMask_un_16_);
	BIT_VEC cppVar_12102 = ROM.rd(cppVar_12101);
	BIT_VEC cppVar_12103 = cppVar_12099 | cppVar_12102;
	BIT_VEC cppVar_12104 = (cppVar_11984) ? cppVar_12103 : DPL;
	BIT_VEC cppVar_12105 = ROM.rd(PC);
	bool cppVar_12107 = (cppVar_12105 == 66);
	BIT_VEC cppVar_12109 = PC + 1;
	cppVar_12109 = (cppVar_12109 & cppMask_un_16_);
	BIT_VEC cppVar_12110 = ROM.rd(cppVar_12109);
	bool cppVar_12112 = (cppVar_12110 == 130);
	BIT_VEC cppVar_12113 = PC + 1;
	cppVar_12113 = (cppVar_12113 & cppMask_un_16_);
	BIT_VEC cppVar_12114 = ROM.rd(cppVar_12113);
	BIT_VEC cppVar_12115 = (cppVar_12114 >> 7) & cppMask_un_1_;
	bool cppVar_12117 = (cppVar_12115 == 0);
	BIT_VEC cppVar_12118 = PC + 1;
	cppVar_12118 = (cppVar_12118 & cppMask_un_16_);
	BIT_VEC cppVar_12119 = ROM.rd(cppVar_12118);
	BIT_VEC cppVar_12120 = IRAM.rd(cppVar_12119);
	BIT_VEC cppVar_12121 = PC + 1;
	cppVar_12121 = (cppVar_12121 & cppMask_un_16_);
	BIT_VEC cppVar_12122 = ROM.rd(cppVar_12121);
	bool cppVar_12124 = (cppVar_12122 == 128);
	BIT_VEC cppVar_12125 = PC + 1;
	cppVar_12125 = (cppVar_12125 & cppMask_un_16_);
	BIT_VEC cppVar_12126 = ROM.rd(cppVar_12125);
	bool cppVar_12128 = (cppVar_12126 == 129);
	BIT_VEC cppVar_12129 = PC + 1;
	cppVar_12129 = (cppVar_12129 & cppMask_un_16_);
	BIT_VEC cppVar_12130 = ROM.rd(cppVar_12129);
	bool cppVar_12132 = (cppVar_12130 == 130);
	BIT_VEC cppVar_12133 = PC + 1;
	cppVar_12133 = (cppVar_12133 & cppMask_un_16_);
	BIT_VEC cppVar_12134 = ROM.rd(cppVar_12133);
	bool cppVar_12136 = (cppVar_12134 == 131);
	BIT_VEC cppVar_12137 = PC + 1;
	cppVar_12137 = (cppVar_12137 & cppMask_un_16_);
	BIT_VEC cppVar_12138 = ROM.rd(cppVar_12137);
	bool cppVar_12140 = (cppVar_12138 == 135);
	BIT_VEC cppVar_12141 = PC + 1;
	cppVar_12141 = (cppVar_12141 & cppMask_un_16_);
	BIT_VEC cppVar_12142 = ROM.rd(cppVar_12141);
	bool cppVar_12144 = (cppVar_12142 == 136);
	BIT_VEC cppVar_12145 = PC + 1;
	cppVar_12145 = (cppVar_12145 & cppMask_un_16_);
	BIT_VEC cppVar_12146 = ROM.rd(cppVar_12145);
	bool cppVar_12148 = (cppVar_12146 == 137);
	BIT_VEC cppVar_12149 = PC + 1;
	cppVar_12149 = (cppVar_12149 & cppMask_un_16_);
	BIT_VEC cppVar_12150 = ROM.rd(cppVar_12149);
	bool cppVar_12152 = (cppVar_12150 == 138);
	BIT_VEC cppVar_12153 = PC + 1;
	cppVar_12153 = (cppVar_12153 & cppMask_un_16_);
	BIT_VEC cppVar_12154 = ROM.rd(cppVar_12153);
	bool cppVar_12156 = (cppVar_12154 == 140);
	BIT_VEC cppVar_12157 = PC + 1;
	cppVar_12157 = (cppVar_12157 & cppMask_un_16_);
	BIT_VEC cppVar_12158 = ROM.rd(cppVar_12157);
	bool cppVar_12160 = (cppVar_12158 == 139);
	BIT_VEC cppVar_12161 = PC + 1;
	cppVar_12161 = (cppVar_12161 & cppMask_un_16_);
	BIT_VEC cppVar_12162 = ROM.rd(cppVar_12161);
	bool cppVar_12164 = (cppVar_12162 == 141);
	BIT_VEC cppVar_12165 = PC + 1;
	cppVar_12165 = (cppVar_12165 & cppMask_un_16_);
	BIT_VEC cppVar_12166 = ROM.rd(cppVar_12165);
	bool cppVar_12168 = (cppVar_12166 == 144);
	BIT_VEC cppVar_12169 = PC + 1;
	cppVar_12169 = (cppVar_12169 & cppMask_un_16_);
	BIT_VEC cppVar_12170 = ROM.rd(cppVar_12169);
	bool cppVar_12172 = (cppVar_12170 == 152);
	BIT_VEC cppVar_12173 = PC + 1;
	cppVar_12173 = (cppVar_12173 & cppMask_un_16_);
	BIT_VEC cppVar_12174 = ROM.rd(cppVar_12173);
	bool cppVar_12176 = (cppVar_12174 == 153);
	BIT_VEC cppVar_12177 = PC + 1;
	cppVar_12177 = (cppVar_12177 & cppMask_un_16_);
	BIT_VEC cppVar_12178 = ROM.rd(cppVar_12177);
	bool cppVar_12180 = (cppVar_12178 == 160);
	BIT_VEC cppVar_12181 = PC + 1;
	cppVar_12181 = (cppVar_12181 & cppMask_un_16_);
	BIT_VEC cppVar_12182 = ROM.rd(cppVar_12181);
	bool cppVar_12184 = (cppVar_12182 == 168);
	BIT_VEC cppVar_12185 = PC + 1;
	cppVar_12185 = (cppVar_12185 & cppMask_un_16_);
	BIT_VEC cppVar_12186 = ROM.rd(cppVar_12185);
	bool cppVar_12188 = (cppVar_12186 == 176);
	BIT_VEC cppVar_12189 = PC + 1;
	cppVar_12189 = (cppVar_12189 & cppMask_un_16_);
	BIT_VEC cppVar_12190 = ROM.rd(cppVar_12189);
	bool cppVar_12192 = (cppVar_12190 == 184);
	BIT_VEC cppVar_12193 = PC + 1;
	cppVar_12193 = (cppVar_12193 & cppMask_un_16_);
	BIT_VEC cppVar_12194 = ROM.rd(cppVar_12193);
	bool cppVar_12196 = (cppVar_12194 == 208);
	BIT_VEC cppVar_12197 = PC + 1;
	cppVar_12197 = (cppVar_12197 & cppMask_un_16_);
	BIT_VEC cppVar_12198 = ROM.rd(cppVar_12197);
	bool cppVar_12200 = (cppVar_12198 == 224);
	BIT_VEC cppVar_12201 = PC + 1;
	cppVar_12201 = (cppVar_12201 & cppMask_un_16_);
	BIT_VEC cppVar_12202 = ROM.rd(cppVar_12201);
	bool cppVar_12204 = (cppVar_12202 == 240);
	BIT_VEC cppVar_12206 = (cppVar_12204) ? B : 0;
	BIT_VEC cppVar_12207 = (cppVar_12200) ? ACC : cppVar_12206;
	BIT_VEC cppVar_12208 = (cppVar_12196) ? PSW : cppVar_12207;
	BIT_VEC cppVar_12209 = (cppVar_12192) ? IP : cppVar_12208;
	BIT_VEC cppVar_12210 = (cppVar_12188) ? P3 : cppVar_12209;
	BIT_VEC cppVar_12211 = (cppVar_12184) ? IE : cppVar_12210;
	BIT_VEC cppVar_12212 = (cppVar_12180) ? P2 : cppVar_12211;
	BIT_VEC cppVar_12213 = (cppVar_12176) ? SBUF : cppVar_12212;
	BIT_VEC cppVar_12214 = (cppVar_12172) ? SCON : cppVar_12213;
	BIT_VEC cppVar_12215 = (cppVar_12168) ? P1 : cppVar_12214;
	BIT_VEC cppVar_12216 = (cppVar_12164) ? TH1 : cppVar_12215;
	BIT_VEC cppVar_12217 = (cppVar_12160) ? TL1 : cppVar_12216;
	BIT_VEC cppVar_12218 = (cppVar_12156) ? TH0 : cppVar_12217;
	BIT_VEC cppVar_12219 = (cppVar_12152) ? TL0 : cppVar_12218;
	BIT_VEC cppVar_12220 = (cppVar_12148) ? TMOD : cppVar_12219;
	BIT_VEC cppVar_12221 = (cppVar_12144) ? TCON : cppVar_12220;
	BIT_VEC cppVar_12222 = (cppVar_12140) ? PCON : cppVar_12221;
	BIT_VEC cppVar_12223 = (cppVar_12136) ? DPH : cppVar_12222;
	BIT_VEC cppVar_12224 = (cppVar_12132) ? DPL : cppVar_12223;
	BIT_VEC cppVar_12225 = (cppVar_12128) ? SP : cppVar_12224;
	BIT_VEC cppVar_12226 = (cppVar_12124) ? P0 : cppVar_12225;
	BIT_VEC cppVar_12227 = (cppVar_12117) ? cppVar_12120 : cppVar_12226;
	BIT_VEC cppVar_12228 = cppVar_12227 | ACC;
	BIT_VEC cppVar_12229 = (cppVar_12112) ? cppVar_12228 : DPL;
	BIT_VEC cppVar_12230 = ROM.rd(PC);
	bool cppVar_12232 = (cppVar_12230 == 213);
	BIT_VEC cppVar_12233 = ROM.rd(PC);
	bool cppVar_12235 = (cppVar_12233 == 21);
	bool cppVar_12236 = cppVar_12232 || cppVar_12235;
	BIT_VEC cppVar_12238 = PC + 1;
	cppVar_12238 = (cppVar_12238 & cppMask_un_16_);
	BIT_VEC cppVar_12239 = ROM.rd(cppVar_12238);
	bool cppVar_12241 = (cppVar_12239 == 130);
	BIT_VEC cppVar_12242 = PC + 1;
	cppVar_12242 = (cppVar_12242 & cppMask_un_16_);
	BIT_VEC cppVar_12243 = ROM.rd(cppVar_12242);
	BIT_VEC cppVar_12244 = (cppVar_12243 >> 7) & cppMask_un_1_;
	bool cppVar_12246 = (cppVar_12244 == 0);
	BIT_VEC cppVar_12247 = PC + 1;
	cppVar_12247 = (cppVar_12247 & cppMask_un_16_);
	BIT_VEC cppVar_12248 = ROM.rd(cppVar_12247);
	BIT_VEC cppVar_12249 = IRAM.rd(cppVar_12248);
	BIT_VEC cppVar_12250 = PC + 1;
	cppVar_12250 = (cppVar_12250 & cppMask_un_16_);
	BIT_VEC cppVar_12251 = ROM.rd(cppVar_12250);
	bool cppVar_12253 = (cppVar_12251 == 128);
	BIT_VEC cppVar_12254 = PC + 1;
	cppVar_12254 = (cppVar_12254 & cppMask_un_16_);
	BIT_VEC cppVar_12255 = ROM.rd(cppVar_12254);
	bool cppVar_12257 = (cppVar_12255 == 129);
	BIT_VEC cppVar_12258 = PC + 1;
	cppVar_12258 = (cppVar_12258 & cppMask_un_16_);
	BIT_VEC cppVar_12259 = ROM.rd(cppVar_12258);
	bool cppVar_12261 = (cppVar_12259 == 130);
	BIT_VEC cppVar_12262 = PC + 1;
	cppVar_12262 = (cppVar_12262 & cppMask_un_16_);
	BIT_VEC cppVar_12263 = ROM.rd(cppVar_12262);
	bool cppVar_12265 = (cppVar_12263 == 131);
	BIT_VEC cppVar_12266 = PC + 1;
	cppVar_12266 = (cppVar_12266 & cppMask_un_16_);
	BIT_VEC cppVar_12267 = ROM.rd(cppVar_12266);
	bool cppVar_12269 = (cppVar_12267 == 135);
	BIT_VEC cppVar_12270 = PC + 1;
	cppVar_12270 = (cppVar_12270 & cppMask_un_16_);
	BIT_VEC cppVar_12271 = ROM.rd(cppVar_12270);
	bool cppVar_12273 = (cppVar_12271 == 136);
	BIT_VEC cppVar_12274 = PC + 1;
	cppVar_12274 = (cppVar_12274 & cppMask_un_16_);
	BIT_VEC cppVar_12275 = ROM.rd(cppVar_12274);
	bool cppVar_12277 = (cppVar_12275 == 137);
	BIT_VEC cppVar_12278 = PC + 1;
	cppVar_12278 = (cppVar_12278 & cppMask_un_16_);
	BIT_VEC cppVar_12279 = ROM.rd(cppVar_12278);
	bool cppVar_12281 = (cppVar_12279 == 138);
	BIT_VEC cppVar_12282 = PC + 1;
	cppVar_12282 = (cppVar_12282 & cppMask_un_16_);
	BIT_VEC cppVar_12283 = ROM.rd(cppVar_12282);
	bool cppVar_12285 = (cppVar_12283 == 140);
	BIT_VEC cppVar_12286 = PC + 1;
	cppVar_12286 = (cppVar_12286 & cppMask_un_16_);
	BIT_VEC cppVar_12287 = ROM.rd(cppVar_12286);
	bool cppVar_12289 = (cppVar_12287 == 139);
	BIT_VEC cppVar_12290 = PC + 1;
	cppVar_12290 = (cppVar_12290 & cppMask_un_16_);
	BIT_VEC cppVar_12291 = ROM.rd(cppVar_12290);
	bool cppVar_12293 = (cppVar_12291 == 141);
	BIT_VEC cppVar_12294 = PC + 1;
	cppVar_12294 = (cppVar_12294 & cppMask_un_16_);
	BIT_VEC cppVar_12295 = ROM.rd(cppVar_12294);
	bool cppVar_12297 = (cppVar_12295 == 144);
	BIT_VEC cppVar_12298 = PC + 1;
	cppVar_12298 = (cppVar_12298 & cppMask_un_16_);
	BIT_VEC cppVar_12299 = ROM.rd(cppVar_12298);
	bool cppVar_12301 = (cppVar_12299 == 152);
	BIT_VEC cppVar_12302 = PC + 1;
	cppVar_12302 = (cppVar_12302 & cppMask_un_16_);
	BIT_VEC cppVar_12303 = ROM.rd(cppVar_12302);
	bool cppVar_12305 = (cppVar_12303 == 153);
	BIT_VEC cppVar_12306 = PC + 1;
	cppVar_12306 = (cppVar_12306 & cppMask_un_16_);
	BIT_VEC cppVar_12307 = ROM.rd(cppVar_12306);
	bool cppVar_12309 = (cppVar_12307 == 160);
	BIT_VEC cppVar_12310 = PC + 1;
	cppVar_12310 = (cppVar_12310 & cppMask_un_16_);
	BIT_VEC cppVar_12311 = ROM.rd(cppVar_12310);
	bool cppVar_12313 = (cppVar_12311 == 168);
	BIT_VEC cppVar_12314 = PC + 1;
	cppVar_12314 = (cppVar_12314 & cppMask_un_16_);
	BIT_VEC cppVar_12315 = ROM.rd(cppVar_12314);
	bool cppVar_12317 = (cppVar_12315 == 176);
	BIT_VEC cppVar_12318 = PC + 1;
	cppVar_12318 = (cppVar_12318 & cppMask_un_16_);
	BIT_VEC cppVar_12319 = ROM.rd(cppVar_12318);
	bool cppVar_12321 = (cppVar_12319 == 184);
	BIT_VEC cppVar_12322 = PC + 1;
	cppVar_12322 = (cppVar_12322 & cppMask_un_16_);
	BIT_VEC cppVar_12323 = ROM.rd(cppVar_12322);
	bool cppVar_12325 = (cppVar_12323 == 208);
	BIT_VEC cppVar_12326 = PC + 1;
	cppVar_12326 = (cppVar_12326 & cppMask_un_16_);
	BIT_VEC cppVar_12327 = ROM.rd(cppVar_12326);
	bool cppVar_12329 = (cppVar_12327 == 224);
	BIT_VEC cppVar_12330 = PC + 1;
	cppVar_12330 = (cppVar_12330 & cppMask_un_16_);
	BIT_VEC cppVar_12331 = ROM.rd(cppVar_12330);
	bool cppVar_12333 = (cppVar_12331 == 240);
	BIT_VEC cppVar_12335 = (cppVar_12333) ? B : 0;
	BIT_VEC cppVar_12336 = (cppVar_12329) ? ACC : cppVar_12335;
	BIT_VEC cppVar_12337 = (cppVar_12325) ? PSW : cppVar_12336;
	BIT_VEC cppVar_12338 = (cppVar_12321) ? IP : cppVar_12337;
	BIT_VEC cppVar_12339 = (cppVar_12317) ? P3 : cppVar_12338;
	BIT_VEC cppVar_12340 = (cppVar_12313) ? IE : cppVar_12339;
	BIT_VEC cppVar_12341 = (cppVar_12309) ? P2 : cppVar_12340;
	BIT_VEC cppVar_12342 = (cppVar_12305) ? SBUF : cppVar_12341;
	BIT_VEC cppVar_12343 = (cppVar_12301) ? SCON : cppVar_12342;
	BIT_VEC cppVar_12344 = (cppVar_12297) ? P1 : cppVar_12343;
	BIT_VEC cppVar_12345 = (cppVar_12293) ? TH1 : cppVar_12344;
	BIT_VEC cppVar_12346 = (cppVar_12289) ? TL1 : cppVar_12345;
	BIT_VEC cppVar_12347 = (cppVar_12285) ? TH0 : cppVar_12346;
	BIT_VEC cppVar_12348 = (cppVar_12281) ? TL0 : cppVar_12347;
	BIT_VEC cppVar_12349 = (cppVar_12277) ? TMOD : cppVar_12348;
	BIT_VEC cppVar_12350 = (cppVar_12273) ? TCON : cppVar_12349;
	BIT_VEC cppVar_12351 = (cppVar_12269) ? PCON : cppVar_12350;
	BIT_VEC cppVar_12352 = (cppVar_12265) ? DPH : cppVar_12351;
	BIT_VEC cppVar_12353 = (cppVar_12261) ? DPL : cppVar_12352;
	BIT_VEC cppVar_12354 = (cppVar_12257) ? SP : cppVar_12353;
	BIT_VEC cppVar_12355 = (cppVar_12253) ? P0 : cppVar_12354;
	BIT_VEC cppVar_12356 = (cppVar_12246) ? cppVar_12249 : cppVar_12355;
	BIT_VEC cppVar_12358 = cppVar_12356 - 1;
	cppVar_12358 = (cppVar_12358 & cppMask_un_8_);
	BIT_VEC cppVar_12359 = (cppVar_12241) ? cppVar_12358 : DPL;
	BIT_VEC cppVar_12360 = ROM.rd(PC);
	bool cppVar_12362 = (cppVar_12360 == 5);
	BIT_VEC cppVar_12364 = PC + 1;
	cppVar_12364 = (cppVar_12364 & cppMask_un_16_);
	BIT_VEC cppVar_12365 = ROM.rd(cppVar_12364);
	bool cppVar_12367 = (cppVar_12365 == 130);
	BIT_VEC cppVar_12368 = PC + 1;
	cppVar_12368 = (cppVar_12368 & cppMask_un_16_);
	BIT_VEC cppVar_12369 = ROM.rd(cppVar_12368);
	BIT_VEC cppVar_12370 = (cppVar_12369 >> 7) & cppMask_un_1_;
	bool cppVar_12372 = (cppVar_12370 == 0);
	BIT_VEC cppVar_12373 = PC + 1;
	cppVar_12373 = (cppVar_12373 & cppMask_un_16_);
	BIT_VEC cppVar_12374 = ROM.rd(cppVar_12373);
	BIT_VEC cppVar_12375 = IRAM.rd(cppVar_12374);
	BIT_VEC cppVar_12376 = PC + 1;
	cppVar_12376 = (cppVar_12376 & cppMask_un_16_);
	BIT_VEC cppVar_12377 = ROM.rd(cppVar_12376);
	bool cppVar_12379 = (cppVar_12377 == 128);
	BIT_VEC cppVar_12380 = PC + 1;
	cppVar_12380 = (cppVar_12380 & cppMask_un_16_);
	BIT_VEC cppVar_12381 = ROM.rd(cppVar_12380);
	bool cppVar_12383 = (cppVar_12381 == 129);
	BIT_VEC cppVar_12384 = PC + 1;
	cppVar_12384 = (cppVar_12384 & cppMask_un_16_);
	BIT_VEC cppVar_12385 = ROM.rd(cppVar_12384);
	bool cppVar_12387 = (cppVar_12385 == 130);
	BIT_VEC cppVar_12388 = PC + 1;
	cppVar_12388 = (cppVar_12388 & cppMask_un_16_);
	BIT_VEC cppVar_12389 = ROM.rd(cppVar_12388);
	bool cppVar_12391 = (cppVar_12389 == 131);
	BIT_VEC cppVar_12392 = PC + 1;
	cppVar_12392 = (cppVar_12392 & cppMask_un_16_);
	BIT_VEC cppVar_12393 = ROM.rd(cppVar_12392);
	bool cppVar_12395 = (cppVar_12393 == 135);
	BIT_VEC cppVar_12396 = PC + 1;
	cppVar_12396 = (cppVar_12396 & cppMask_un_16_);
	BIT_VEC cppVar_12397 = ROM.rd(cppVar_12396);
	bool cppVar_12399 = (cppVar_12397 == 136);
	BIT_VEC cppVar_12400 = PC + 1;
	cppVar_12400 = (cppVar_12400 & cppMask_un_16_);
	BIT_VEC cppVar_12401 = ROM.rd(cppVar_12400);
	bool cppVar_12403 = (cppVar_12401 == 137);
	BIT_VEC cppVar_12404 = PC + 1;
	cppVar_12404 = (cppVar_12404 & cppMask_un_16_);
	BIT_VEC cppVar_12405 = ROM.rd(cppVar_12404);
	bool cppVar_12407 = (cppVar_12405 == 138);
	BIT_VEC cppVar_12408 = PC + 1;
	cppVar_12408 = (cppVar_12408 & cppMask_un_16_);
	BIT_VEC cppVar_12409 = ROM.rd(cppVar_12408);
	bool cppVar_12411 = (cppVar_12409 == 140);
	BIT_VEC cppVar_12412 = PC + 1;
	cppVar_12412 = (cppVar_12412 & cppMask_un_16_);
	BIT_VEC cppVar_12413 = ROM.rd(cppVar_12412);
	bool cppVar_12415 = (cppVar_12413 == 139);
	BIT_VEC cppVar_12416 = PC + 1;
	cppVar_12416 = (cppVar_12416 & cppMask_un_16_);
	BIT_VEC cppVar_12417 = ROM.rd(cppVar_12416);
	bool cppVar_12419 = (cppVar_12417 == 141);
	BIT_VEC cppVar_12420 = PC + 1;
	cppVar_12420 = (cppVar_12420 & cppMask_un_16_);
	BIT_VEC cppVar_12421 = ROM.rd(cppVar_12420);
	bool cppVar_12423 = (cppVar_12421 == 144);
	BIT_VEC cppVar_12424 = PC + 1;
	cppVar_12424 = (cppVar_12424 & cppMask_un_16_);
	BIT_VEC cppVar_12425 = ROM.rd(cppVar_12424);
	bool cppVar_12427 = (cppVar_12425 == 152);
	BIT_VEC cppVar_12428 = PC + 1;
	cppVar_12428 = (cppVar_12428 & cppMask_un_16_);
	BIT_VEC cppVar_12429 = ROM.rd(cppVar_12428);
	bool cppVar_12431 = (cppVar_12429 == 153);
	BIT_VEC cppVar_12432 = PC + 1;
	cppVar_12432 = (cppVar_12432 & cppMask_un_16_);
	BIT_VEC cppVar_12433 = ROM.rd(cppVar_12432);
	bool cppVar_12435 = (cppVar_12433 == 160);
	BIT_VEC cppVar_12436 = PC + 1;
	cppVar_12436 = (cppVar_12436 & cppMask_un_16_);
	BIT_VEC cppVar_12437 = ROM.rd(cppVar_12436);
	bool cppVar_12439 = (cppVar_12437 == 168);
	BIT_VEC cppVar_12440 = PC + 1;
	cppVar_12440 = (cppVar_12440 & cppMask_un_16_);
	BIT_VEC cppVar_12441 = ROM.rd(cppVar_12440);
	bool cppVar_12443 = (cppVar_12441 == 176);
	BIT_VEC cppVar_12444 = PC + 1;
	cppVar_12444 = (cppVar_12444 & cppMask_un_16_);
	BIT_VEC cppVar_12445 = ROM.rd(cppVar_12444);
	bool cppVar_12447 = (cppVar_12445 == 184);
	BIT_VEC cppVar_12448 = PC + 1;
	cppVar_12448 = (cppVar_12448 & cppMask_un_16_);
	BIT_VEC cppVar_12449 = ROM.rd(cppVar_12448);
	bool cppVar_12451 = (cppVar_12449 == 208);
	BIT_VEC cppVar_12452 = PC + 1;
	cppVar_12452 = (cppVar_12452 & cppMask_un_16_);
	BIT_VEC cppVar_12453 = ROM.rd(cppVar_12452);
	bool cppVar_12455 = (cppVar_12453 == 224);
	BIT_VEC cppVar_12456 = PC + 1;
	cppVar_12456 = (cppVar_12456 & cppMask_un_16_);
	BIT_VEC cppVar_12457 = ROM.rd(cppVar_12456);
	bool cppVar_12459 = (cppVar_12457 == 240);
	BIT_VEC cppVar_12461 = (cppVar_12459) ? B : 0;
	BIT_VEC cppVar_12462 = (cppVar_12455) ? ACC : cppVar_12461;
	BIT_VEC cppVar_12463 = (cppVar_12451) ? PSW : cppVar_12462;
	BIT_VEC cppVar_12464 = (cppVar_12447) ? IP : cppVar_12463;
	BIT_VEC cppVar_12465 = (cppVar_12443) ? P3 : cppVar_12464;
	BIT_VEC cppVar_12466 = (cppVar_12439) ? IE : cppVar_12465;
	BIT_VEC cppVar_12467 = (cppVar_12435) ? P2 : cppVar_12466;
	BIT_VEC cppVar_12468 = (cppVar_12431) ? SBUF : cppVar_12467;
	BIT_VEC cppVar_12469 = (cppVar_12427) ? SCON : cppVar_12468;
	BIT_VEC cppVar_12470 = (cppVar_12423) ? P1 : cppVar_12469;
	BIT_VEC cppVar_12471 = (cppVar_12419) ? TH1 : cppVar_12470;
	BIT_VEC cppVar_12472 = (cppVar_12415) ? TL1 : cppVar_12471;
	BIT_VEC cppVar_12473 = (cppVar_12411) ? TH0 : cppVar_12472;
	BIT_VEC cppVar_12474 = (cppVar_12407) ? TL0 : cppVar_12473;
	BIT_VEC cppVar_12475 = (cppVar_12403) ? TMOD : cppVar_12474;
	BIT_VEC cppVar_12476 = (cppVar_12399) ? TCON : cppVar_12475;
	BIT_VEC cppVar_12477 = (cppVar_12395) ? PCON : cppVar_12476;
	BIT_VEC cppVar_12478 = (cppVar_12391) ? DPH : cppVar_12477;
	BIT_VEC cppVar_12479 = (cppVar_12387) ? DPL : cppVar_12478;
	BIT_VEC cppVar_12480 = (cppVar_12383) ? SP : cppVar_12479;
	BIT_VEC cppVar_12481 = (cppVar_12379) ? P0 : cppVar_12480;
	BIT_VEC cppVar_12482 = (cppVar_12372) ? cppVar_12375 : cppVar_12481;
	BIT_VEC cppVar_12484 = cppVar_12482 + 1;
	cppVar_12484 = (cppVar_12484 & cppMask_un_8_);
	BIT_VEC cppVar_12485 = (cppVar_12367) ? cppVar_12484 : DPL;
	BIT_VEC cppVar_12486 = ROM.rd(PC);
	bool cppVar_12488 = (cppVar_12486 == 255);
	BIT_VEC cppVar_12489 = ROM.rd(PC);
	bool cppVar_12491 = (cppVar_12489 == 254);
	BIT_VEC cppVar_12492 = ROM.rd(PC);
	bool cppVar_12494 = (cppVar_12492 == 253);
	BIT_VEC cppVar_12495 = ROM.rd(PC);
	bool cppVar_12497 = (cppVar_12495 == 252);
	BIT_VEC cppVar_12498 = ROM.rd(PC);
	bool cppVar_12500 = (cppVar_12498 == 251);
	BIT_VEC cppVar_12501 = ROM.rd(PC);
	bool cppVar_12503 = (cppVar_12501 == 250);
	BIT_VEC cppVar_12504 = ROM.rd(PC);
	bool cppVar_12506 = (cppVar_12504 == 249);
	BIT_VEC cppVar_12507 = ROM.rd(PC);
	bool cppVar_12509 = (cppVar_12507 == 248);
	BIT_VEC cppVar_12510 = ROM.rd(PC);
	bool cppVar_12512 = (cppVar_12510 == 247);
	BIT_VEC cppVar_12513 = ROM.rd(PC);
	bool cppVar_12515 = (cppVar_12513 == 246);
	BIT_VEC cppVar_12516 = ROM.rd(PC);
	bool cppVar_12518 = (cppVar_12516 == 244);
	BIT_VEC cppVar_12519 = ROM.rd(PC);
	bool cppVar_12521 = (cppVar_12519 == 243);
	BIT_VEC cppVar_12522 = ROM.rd(PC);
	bool cppVar_12524 = (cppVar_12522 == 242);
	BIT_VEC cppVar_12525 = ROM.rd(PC);
	bool cppVar_12527 = (cppVar_12525 == 241);
	BIT_VEC cppVar_12528 = ROM.rd(PC);
	bool cppVar_12530 = (cppVar_12528 == 240);
	BIT_VEC cppVar_12531 = ROM.rd(PC);
	bool cppVar_12533 = (cppVar_12531 == 239);
	BIT_VEC cppVar_12534 = ROM.rd(PC);
	bool cppVar_12536 = (cppVar_12534 == 238);
	BIT_VEC cppVar_12537 = ROM.rd(PC);
	bool cppVar_12539 = (cppVar_12537 == 237);
	BIT_VEC cppVar_12540 = ROM.rd(PC);
	bool cppVar_12542 = (cppVar_12540 == 236);
	BIT_VEC cppVar_12543 = ROM.rd(PC);
	bool cppVar_12545 = (cppVar_12543 == 235);
	BIT_VEC cppVar_12546 = ROM.rd(PC);
	bool cppVar_12548 = (cppVar_12546 == 234);
	BIT_VEC cppVar_12549 = ROM.rd(PC);
	bool cppVar_12551 = (cppVar_12549 == 233);
	BIT_VEC cppVar_12552 = ROM.rd(PC);
	bool cppVar_12554 = (cppVar_12552 == 232);
	BIT_VEC cppVar_12555 = ROM.rd(PC);
	bool cppVar_12557 = (cppVar_12555 == 231);
	BIT_VEC cppVar_12558 = ROM.rd(PC);
	bool cppVar_12560 = (cppVar_12558 == 230);
	BIT_VEC cppVar_12561 = ROM.rd(PC);
	bool cppVar_12563 = (cppVar_12561 == 229);
	BIT_VEC cppVar_12564 = ROM.rd(PC);
	bool cppVar_12566 = (cppVar_12564 == 228);
	BIT_VEC cppVar_12567 = ROM.rd(PC);
	bool cppVar_12569 = (cppVar_12567 == 227);
	BIT_VEC cppVar_12570 = ROM.rd(PC);
	bool cppVar_12572 = (cppVar_12570 == 226);
	BIT_VEC cppVar_12573 = ROM.rd(PC);
	bool cppVar_12575 = (cppVar_12573 == 225);
	BIT_VEC cppVar_12576 = ROM.rd(PC);
	bool cppVar_12578 = (cppVar_12576 == 224);
	BIT_VEC cppVar_12579 = ROM.rd(PC);
	bool cppVar_12581 = (cppVar_12579 == 223);
	BIT_VEC cppVar_12582 = ROM.rd(PC);
	bool cppVar_12584 = (cppVar_12582 == 222);
	BIT_VEC cppVar_12585 = ROM.rd(PC);
	bool cppVar_12587 = (cppVar_12585 == 221);
	BIT_VEC cppVar_12588 = ROM.rd(PC);
	bool cppVar_12590 = (cppVar_12588 == 220);
	BIT_VEC cppVar_12591 = ROM.rd(PC);
	bool cppVar_12593 = (cppVar_12591 == 219);
	BIT_VEC cppVar_12594 = ROM.rd(PC);
	bool cppVar_12596 = (cppVar_12594 == 218);
	BIT_VEC cppVar_12597 = ROM.rd(PC);
	bool cppVar_12599 = (cppVar_12597 == 217);
	BIT_VEC cppVar_12600 = ROM.rd(PC);
	bool cppVar_12602 = (cppVar_12600 == 216);
	BIT_VEC cppVar_12603 = ROM.rd(PC);
	bool cppVar_12605 = (cppVar_12603 == 215);
	BIT_VEC cppVar_12606 = ROM.rd(PC);
	bool cppVar_12608 = (cppVar_12606 == 214);
	BIT_VEC cppVar_12609 = ROM.rd(PC);
	bool cppVar_12611 = (cppVar_12609 == 212);
	BIT_VEC cppVar_12612 = ROM.rd(PC);
	bool cppVar_12614 = (cppVar_12612 == 211);
	BIT_VEC cppVar_12615 = ROM.rd(PC);
	bool cppVar_12617 = (cppVar_12615 == 210);
	BIT_VEC cppVar_12618 = ROM.rd(PC);
	bool cppVar_12620 = (cppVar_12618 == 209);
	BIT_VEC cppVar_12621 = ROM.rd(PC);
	bool cppVar_12623 = (cppVar_12621 == 207);
	BIT_VEC cppVar_12624 = ROM.rd(PC);
	bool cppVar_12626 = (cppVar_12624 == 206);
	BIT_VEC cppVar_12627 = ROM.rd(PC);
	bool cppVar_12629 = (cppVar_12627 == 205);
	BIT_VEC cppVar_12630 = ROM.rd(PC);
	bool cppVar_12632 = (cppVar_12630 == 204);
	BIT_VEC cppVar_12633 = ROM.rd(PC);
	bool cppVar_12635 = (cppVar_12633 == 203);
	BIT_VEC cppVar_12636 = ROM.rd(PC);
	bool cppVar_12638 = (cppVar_12636 == 202);
	BIT_VEC cppVar_12639 = ROM.rd(PC);
	bool cppVar_12641 = (cppVar_12639 == 201);
	BIT_VEC cppVar_12642 = ROM.rd(PC);
	bool cppVar_12644 = (cppVar_12642 == 200);
	BIT_VEC cppVar_12645 = ROM.rd(PC);
	bool cppVar_12647 = (cppVar_12645 == 199);
	BIT_VEC cppVar_12648 = ROM.rd(PC);
	bool cppVar_12650 = (cppVar_12648 == 198);
	BIT_VEC cppVar_12651 = ROM.rd(PC);
	bool cppVar_12653 = (cppVar_12651 == 196);
	BIT_VEC cppVar_12654 = ROM.rd(PC);
	bool cppVar_12656 = (cppVar_12654 == 195);
	BIT_VEC cppVar_12657 = ROM.rd(PC);
	bool cppVar_12659 = (cppVar_12657 == 194);
	BIT_VEC cppVar_12660 = ROM.rd(PC);
	bool cppVar_12662 = (cppVar_12660 == 193);
	BIT_VEC cppVar_12663 = ROM.rd(PC);
	bool cppVar_12665 = (cppVar_12663 == 192);
	BIT_VEC cppVar_12666 = ROM.rd(PC);
	bool cppVar_12668 = (cppVar_12666 == 191);
	BIT_VEC cppVar_12669 = ROM.rd(PC);
	bool cppVar_12671 = (cppVar_12669 == 190);
	BIT_VEC cppVar_12672 = ROM.rd(PC);
	bool cppVar_12674 = (cppVar_12672 == 189);
	BIT_VEC cppVar_12675 = ROM.rd(PC);
	bool cppVar_12677 = (cppVar_12675 == 188);
	BIT_VEC cppVar_12678 = ROM.rd(PC);
	bool cppVar_12680 = (cppVar_12678 == 187);
	BIT_VEC cppVar_12681 = ROM.rd(PC);
	bool cppVar_12683 = (cppVar_12681 == 186);
	BIT_VEC cppVar_12684 = ROM.rd(PC);
	bool cppVar_12686 = (cppVar_12684 == 185);
	BIT_VEC cppVar_12687 = ROM.rd(PC);
	bool cppVar_12689 = (cppVar_12687 == 184);
	BIT_VEC cppVar_12690 = ROM.rd(PC);
	bool cppVar_12692 = (cppVar_12690 == 183);
	BIT_VEC cppVar_12693 = ROM.rd(PC);
	bool cppVar_12695 = (cppVar_12693 == 182);
	BIT_VEC cppVar_12696 = ROM.rd(PC);
	bool cppVar_12698 = (cppVar_12696 == 181);
	BIT_VEC cppVar_12699 = ROM.rd(PC);
	bool cppVar_12701 = (cppVar_12699 == 180);
	BIT_VEC cppVar_12702 = ROM.rd(PC);
	bool cppVar_12704 = (cppVar_12702 == 179);
	BIT_VEC cppVar_12705 = ROM.rd(PC);
	bool cppVar_12707 = (cppVar_12705 == 178);
	BIT_VEC cppVar_12708 = ROM.rd(PC);
	bool cppVar_12710 = (cppVar_12708 == 177);
	BIT_VEC cppVar_12711 = ROM.rd(PC);
	bool cppVar_12713 = (cppVar_12711 == 176);
	BIT_VEC cppVar_12714 = ROM.rd(PC);
	bool cppVar_12716 = (cppVar_12714 == 175);
	BIT_VEC cppVar_12717 = ROM.rd(PC);
	bool cppVar_12719 = (cppVar_12717 == 174);
	BIT_VEC cppVar_12720 = ROM.rd(PC);
	bool cppVar_12722 = (cppVar_12720 == 173);
	BIT_VEC cppVar_12723 = ROM.rd(PC);
	bool cppVar_12725 = (cppVar_12723 == 172);
	BIT_VEC cppVar_12726 = ROM.rd(PC);
	bool cppVar_12728 = (cppVar_12726 == 171);
	BIT_VEC cppVar_12729 = ROM.rd(PC);
	bool cppVar_12731 = (cppVar_12729 == 170);
	BIT_VEC cppVar_12732 = ROM.rd(PC);
	bool cppVar_12734 = (cppVar_12732 == 169);
	BIT_VEC cppVar_12735 = ROM.rd(PC);
	bool cppVar_12737 = (cppVar_12735 == 168);
	BIT_VEC cppVar_12738 = ROM.rd(PC);
	bool cppVar_12740 = (cppVar_12738 == 167);
	BIT_VEC cppVar_12741 = ROM.rd(PC);
	bool cppVar_12743 = (cppVar_12741 == 166);
	BIT_VEC cppVar_12744 = ROM.rd(PC);
	bool cppVar_12746 = (cppVar_12744 == 165);
	BIT_VEC cppVar_12747 = ROM.rd(PC);
	bool cppVar_12749 = (cppVar_12747 == 164);
	BIT_VEC cppVar_12750 = ROM.rd(PC);
	bool cppVar_12752 = (cppVar_12750 == 162);
	BIT_VEC cppVar_12753 = ROM.rd(PC);
	bool cppVar_12755 = (cppVar_12753 == 161);
	BIT_VEC cppVar_12756 = ROM.rd(PC);
	bool cppVar_12758 = (cppVar_12756 == 160);
	BIT_VEC cppVar_12759 = ROM.rd(PC);
	bool cppVar_12761 = (cppVar_12759 == 159);
	BIT_VEC cppVar_12762 = ROM.rd(PC);
	bool cppVar_12764 = (cppVar_12762 == 158);
	BIT_VEC cppVar_12765 = ROM.rd(PC);
	bool cppVar_12767 = (cppVar_12765 == 157);
	BIT_VEC cppVar_12768 = ROM.rd(PC);
	bool cppVar_12770 = (cppVar_12768 == 156);
	BIT_VEC cppVar_12771 = ROM.rd(PC);
	bool cppVar_12773 = (cppVar_12771 == 155);
	BIT_VEC cppVar_12774 = ROM.rd(PC);
	bool cppVar_12776 = (cppVar_12774 == 154);
	BIT_VEC cppVar_12777 = ROM.rd(PC);
	bool cppVar_12779 = (cppVar_12777 == 153);
	BIT_VEC cppVar_12780 = ROM.rd(PC);
	bool cppVar_12782 = (cppVar_12780 == 152);
	BIT_VEC cppVar_12783 = ROM.rd(PC);
	bool cppVar_12785 = (cppVar_12783 == 151);
	BIT_VEC cppVar_12786 = ROM.rd(PC);
	bool cppVar_12788 = (cppVar_12786 == 150);
	BIT_VEC cppVar_12789 = ROM.rd(PC);
	bool cppVar_12791 = (cppVar_12789 == 149);
	BIT_VEC cppVar_12792 = ROM.rd(PC);
	bool cppVar_12794 = (cppVar_12792 == 148);
	BIT_VEC cppVar_12795 = ROM.rd(PC);
	bool cppVar_12797 = (cppVar_12795 == 147);
	BIT_VEC cppVar_12798 = ROM.rd(PC);
	bool cppVar_12800 = (cppVar_12798 == 146);
	BIT_VEC cppVar_12801 = ROM.rd(PC);
	bool cppVar_12803 = (cppVar_12801 == 145);
	BIT_VEC cppVar_12804 = ROM.rd(PC);
	bool cppVar_12806 = (cppVar_12804 == 132);
	BIT_VEC cppVar_12807 = ROM.rd(PC);
	bool cppVar_12809 = (cppVar_12807 == 131);
	BIT_VEC cppVar_12810 = ROM.rd(PC);
	bool cppVar_12812 = (cppVar_12810 == 130);
	BIT_VEC cppVar_12813 = ROM.rd(PC);
	bool cppVar_12815 = (cppVar_12813 == 129);
	BIT_VEC cppVar_12816 = ROM.rd(PC);
	bool cppVar_12818 = (cppVar_12816 == 128);
	BIT_VEC cppVar_12819 = ROM.rd(PC);
	bool cppVar_12821 = (cppVar_12819 == 127);
	BIT_VEC cppVar_12822 = ROM.rd(PC);
	bool cppVar_12824 = (cppVar_12822 == 126);
	BIT_VEC cppVar_12825 = ROM.rd(PC);
	bool cppVar_12827 = (cppVar_12825 == 125);
	BIT_VEC cppVar_12828 = ROM.rd(PC);
	bool cppVar_12830 = (cppVar_12828 == 124);
	BIT_VEC cppVar_12831 = ROM.rd(PC);
	bool cppVar_12833 = (cppVar_12831 == 123);
	BIT_VEC cppVar_12834 = ROM.rd(PC);
	bool cppVar_12836 = (cppVar_12834 == 122);
	BIT_VEC cppVar_12837 = ROM.rd(PC);
	bool cppVar_12839 = (cppVar_12837 == 121);
	BIT_VEC cppVar_12840 = ROM.rd(PC);
	bool cppVar_12842 = (cppVar_12840 == 120);
	BIT_VEC cppVar_12843 = ROM.rd(PC);
	bool cppVar_12845 = (cppVar_12843 == 119);
	BIT_VEC cppVar_12846 = ROM.rd(PC);
	bool cppVar_12848 = (cppVar_12846 == 118);
	BIT_VEC cppVar_12849 = ROM.rd(PC);
	bool cppVar_12851 = (cppVar_12849 == 116);
	BIT_VEC cppVar_12852 = ROM.rd(PC);
	bool cppVar_12854 = (cppVar_12852 == 115);
	BIT_VEC cppVar_12855 = ROM.rd(PC);
	bool cppVar_12857 = (cppVar_12855 == 114);
	BIT_VEC cppVar_12858 = ROM.rd(PC);
	bool cppVar_12860 = (cppVar_12858 == 113);
	BIT_VEC cppVar_12861 = ROM.rd(PC);
	bool cppVar_12863 = (cppVar_12861 == 112);
	BIT_VEC cppVar_12864 = ROM.rd(PC);
	bool cppVar_12866 = (cppVar_12864 == 111);
	BIT_VEC cppVar_12867 = ROM.rd(PC);
	bool cppVar_12869 = (cppVar_12867 == 110);
	BIT_VEC cppVar_12870 = ROM.rd(PC);
	bool cppVar_12872 = (cppVar_12870 == 109);
	BIT_VEC cppVar_12873 = ROM.rd(PC);
	bool cppVar_12875 = (cppVar_12873 == 108);
	BIT_VEC cppVar_12876 = ROM.rd(PC);
	bool cppVar_12878 = (cppVar_12876 == 107);
	BIT_VEC cppVar_12879 = ROM.rd(PC);
	bool cppVar_12881 = (cppVar_12879 == 106);
	BIT_VEC cppVar_12882 = ROM.rd(PC);
	bool cppVar_12884 = (cppVar_12882 == 105);
	BIT_VEC cppVar_12885 = ROM.rd(PC);
	bool cppVar_12887 = (cppVar_12885 == 104);
	BIT_VEC cppVar_12888 = ROM.rd(PC);
	bool cppVar_12890 = (cppVar_12888 == 103);
	BIT_VEC cppVar_12891 = ROM.rd(PC);
	bool cppVar_12893 = (cppVar_12891 == 102);
	BIT_VEC cppVar_12894 = ROM.rd(PC);
	bool cppVar_12896 = (cppVar_12894 == 101);
	BIT_VEC cppVar_12897 = ROM.rd(PC);
	bool cppVar_12899 = (cppVar_12897 == 100);
	BIT_VEC cppVar_12900 = ROM.rd(PC);
	bool cppVar_12902 = (cppVar_12900 == 97);
	BIT_VEC cppVar_12903 = ROM.rd(PC);
	bool cppVar_12905 = (cppVar_12903 == 96);
	BIT_VEC cppVar_12906 = ROM.rd(PC);
	bool cppVar_12908 = (cppVar_12906 == 95);
	BIT_VEC cppVar_12909 = ROM.rd(PC);
	bool cppVar_12911 = (cppVar_12909 == 94);
	BIT_VEC cppVar_12912 = ROM.rd(PC);
	bool cppVar_12914 = (cppVar_12912 == 93);
	BIT_VEC cppVar_12915 = ROM.rd(PC);
	bool cppVar_12917 = (cppVar_12915 == 92);
	BIT_VEC cppVar_12918 = ROM.rd(PC);
	bool cppVar_12920 = (cppVar_12918 == 91);
	BIT_VEC cppVar_12921 = ROM.rd(PC);
	bool cppVar_12923 = (cppVar_12921 == 90);
	BIT_VEC cppVar_12924 = ROM.rd(PC);
	bool cppVar_12926 = (cppVar_12924 == 89);
	BIT_VEC cppVar_12927 = ROM.rd(PC);
	bool cppVar_12929 = (cppVar_12927 == 88);
	BIT_VEC cppVar_12930 = ROM.rd(PC);
	bool cppVar_12932 = (cppVar_12930 == 87);
	BIT_VEC cppVar_12933 = ROM.rd(PC);
	bool cppVar_12935 = (cppVar_12933 == 86);
	BIT_VEC cppVar_12936 = ROM.rd(PC);
	bool cppVar_12938 = (cppVar_12936 == 85);
	BIT_VEC cppVar_12939 = ROM.rd(PC);
	bool cppVar_12941 = (cppVar_12939 == 84);
	BIT_VEC cppVar_12942 = ROM.rd(PC);
	bool cppVar_12944 = (cppVar_12942 == 81);
	BIT_VEC cppVar_12945 = ROM.rd(PC);
	bool cppVar_12947 = (cppVar_12945 == 80);
	BIT_VEC cppVar_12948 = ROM.rd(PC);
	bool cppVar_12950 = (cppVar_12948 == 79);
	BIT_VEC cppVar_12951 = ROM.rd(PC);
	bool cppVar_12953 = (cppVar_12951 == 78);
	BIT_VEC cppVar_12954 = ROM.rd(PC);
	bool cppVar_12956 = (cppVar_12954 == 77);
	BIT_VEC cppVar_12957 = ROM.rd(PC);
	bool cppVar_12959 = (cppVar_12957 == 76);
	BIT_VEC cppVar_12960 = ROM.rd(PC);
	bool cppVar_12962 = (cppVar_12960 == 75);
	BIT_VEC cppVar_12963 = ROM.rd(PC);
	bool cppVar_12965 = (cppVar_12963 == 74);
	BIT_VEC cppVar_12966 = ROM.rd(PC);
	bool cppVar_12968 = (cppVar_12966 == 73);
	BIT_VEC cppVar_12969 = ROM.rd(PC);
	bool cppVar_12971 = (cppVar_12969 == 72);
	BIT_VEC cppVar_12972 = ROM.rd(PC);
	bool cppVar_12974 = (cppVar_12972 == 71);
	BIT_VEC cppVar_12975 = ROM.rd(PC);
	bool cppVar_12977 = (cppVar_12975 == 70);
	BIT_VEC cppVar_12978 = ROM.rd(PC);
	bool cppVar_12980 = (cppVar_12978 == 69);
	BIT_VEC cppVar_12981 = ROM.rd(PC);
	bool cppVar_12983 = (cppVar_12981 == 68);
	BIT_VEC cppVar_12984 = ROM.rd(PC);
	bool cppVar_12986 = (cppVar_12984 == 65);
	BIT_VEC cppVar_12987 = ROM.rd(PC);
	bool cppVar_12989 = (cppVar_12987 == 64);
	BIT_VEC cppVar_12990 = ROM.rd(PC);
	bool cppVar_12992 = (cppVar_12990 == 63);
	BIT_VEC cppVar_12993 = ROM.rd(PC);
	bool cppVar_12995 = (cppVar_12993 == 62);
	BIT_VEC cppVar_12996 = ROM.rd(PC);
	bool cppVar_12998 = (cppVar_12996 == 61);
	BIT_VEC cppVar_12999 = ROM.rd(PC);
	bool cppVar_13001 = (cppVar_12999 == 60);
	BIT_VEC cppVar_13002 = ROM.rd(PC);
	bool cppVar_13004 = (cppVar_13002 == 59);
	BIT_VEC cppVar_13005 = ROM.rd(PC);
	bool cppVar_13007 = (cppVar_13005 == 58);
	BIT_VEC cppVar_13008 = ROM.rd(PC);
	bool cppVar_13010 = (cppVar_13008 == 57);
	BIT_VEC cppVar_13011 = ROM.rd(PC);
	bool cppVar_13013 = (cppVar_13011 == 56);
	BIT_VEC cppVar_13014 = ROM.rd(PC);
	bool cppVar_13016 = (cppVar_13014 == 55);
	BIT_VEC cppVar_13017 = ROM.rd(PC);
	bool cppVar_13019 = (cppVar_13017 == 54);
	BIT_VEC cppVar_13020 = ROM.rd(PC);
	bool cppVar_13022 = (cppVar_13020 == 53);
	BIT_VEC cppVar_13023 = ROM.rd(PC);
	bool cppVar_13025 = (cppVar_13023 == 52);
	BIT_VEC cppVar_13026 = ROM.rd(PC);
	bool cppVar_13028 = (cppVar_13026 == 51);
	BIT_VEC cppVar_13029 = ROM.rd(PC);
	bool cppVar_13031 = (cppVar_13029 == 50);
	BIT_VEC cppVar_13032 = ROM.rd(PC);
	bool cppVar_13034 = (cppVar_13032 == 49);
	BIT_VEC cppVar_13035 = ROM.rd(PC);
	bool cppVar_13037 = (cppVar_13035 == 48);
	BIT_VEC cppVar_13038 = ROM.rd(PC);
	bool cppVar_13040 = (cppVar_13038 == 47);
	BIT_VEC cppVar_13041 = ROM.rd(PC);
	bool cppVar_13043 = (cppVar_13041 == 46);
	BIT_VEC cppVar_13044 = ROM.rd(PC);
	bool cppVar_13046 = (cppVar_13044 == 45);
	BIT_VEC cppVar_13047 = ROM.rd(PC);
	bool cppVar_13049 = (cppVar_13047 == 44);
	BIT_VEC cppVar_13050 = ROM.rd(PC);
	bool cppVar_13052 = (cppVar_13050 == 43);
	BIT_VEC cppVar_13053 = ROM.rd(PC);
	bool cppVar_13055 = (cppVar_13053 == 42);
	BIT_VEC cppVar_13056 = ROM.rd(PC);
	bool cppVar_13058 = (cppVar_13056 == 41);
	BIT_VEC cppVar_13059 = ROM.rd(PC);
	bool cppVar_13061 = (cppVar_13059 == 40);
	BIT_VEC cppVar_13062 = ROM.rd(PC);
	bool cppVar_13064 = (cppVar_13062 == 39);
	BIT_VEC cppVar_13065 = ROM.rd(PC);
	bool cppVar_13067 = (cppVar_13065 == 38);
	BIT_VEC cppVar_13068 = ROM.rd(PC);
	bool cppVar_13070 = (cppVar_13068 == 37);
	BIT_VEC cppVar_13071 = ROM.rd(PC);
	bool cppVar_13073 = (cppVar_13071 == 36);
	BIT_VEC cppVar_13074 = ROM.rd(PC);
	bool cppVar_13076 = (cppVar_13074 == 35);
	BIT_VEC cppVar_13077 = ROM.rd(PC);
	bool cppVar_13079 = (cppVar_13077 == 34);
	BIT_VEC cppVar_13080 = ROM.rd(PC);
	bool cppVar_13082 = (cppVar_13080 == 33);
	BIT_VEC cppVar_13083 = ROM.rd(PC);
	bool cppVar_13085 = (cppVar_13083 == 32);
	BIT_VEC cppVar_13086 = ROM.rd(PC);
	bool cppVar_13088 = (cppVar_13086 == 31);
	BIT_VEC cppVar_13089 = ROM.rd(PC);
	bool cppVar_13091 = (cppVar_13089 == 30);
	BIT_VEC cppVar_13092 = ROM.rd(PC);
	bool cppVar_13094 = (cppVar_13092 == 29);
	BIT_VEC cppVar_13095 = ROM.rd(PC);
	bool cppVar_13097 = (cppVar_13095 == 28);
	BIT_VEC cppVar_13098 = ROM.rd(PC);
	bool cppVar_13100 = (cppVar_13098 == 27);
	BIT_VEC cppVar_13101 = ROM.rd(PC);
	bool cppVar_13103 = (cppVar_13101 == 26);
	BIT_VEC cppVar_13104 = ROM.rd(PC);
	bool cppVar_13106 = (cppVar_13104 == 25);
	BIT_VEC cppVar_13107 = ROM.rd(PC);
	bool cppVar_13109 = (cppVar_13107 == 24);
	BIT_VEC cppVar_13110 = ROM.rd(PC);
	bool cppVar_13112 = (cppVar_13110 == 23);
	BIT_VEC cppVar_13113 = ROM.rd(PC);
	bool cppVar_13115 = (cppVar_13113 == 22);
	BIT_VEC cppVar_13116 = ROM.rd(PC);
	bool cppVar_13118 = (cppVar_13116 == 20);
	BIT_VEC cppVar_13119 = ROM.rd(PC);
	bool cppVar_13121 = (cppVar_13119 == 19);
	BIT_VEC cppVar_13122 = ROM.rd(PC);
	bool cppVar_13124 = (cppVar_13122 == 18);
	BIT_VEC cppVar_13125 = ROM.rd(PC);
	bool cppVar_13127 = (cppVar_13125 == 17);
	BIT_VEC cppVar_13128 = ROM.rd(PC);
	bool cppVar_13130 = (cppVar_13128 == 16);
	BIT_VEC cppVar_13131 = ROM.rd(PC);
	bool cppVar_13133 = (cppVar_13131 == 15);
	BIT_VEC cppVar_13134 = ROM.rd(PC);
	bool cppVar_13136 = (cppVar_13134 == 14);
	BIT_VEC cppVar_13137 = ROM.rd(PC);
	bool cppVar_13139 = (cppVar_13137 == 13);
	BIT_VEC cppVar_13140 = ROM.rd(PC);
	bool cppVar_13142 = (cppVar_13140 == 12);
	BIT_VEC cppVar_13143 = ROM.rd(PC);
	bool cppVar_13145 = (cppVar_13143 == 11);
	BIT_VEC cppVar_13146 = ROM.rd(PC);
	bool cppVar_13148 = (cppVar_13146 == 10);
	BIT_VEC cppVar_13149 = ROM.rd(PC);
	bool cppVar_13151 = (cppVar_13149 == 9);
	BIT_VEC cppVar_13152 = ROM.rd(PC);
	bool cppVar_13154 = (cppVar_13152 == 8);
	BIT_VEC cppVar_13155 = ROM.rd(PC);
	bool cppVar_13157 = (cppVar_13155 == 7);
	BIT_VEC cppVar_13158 = ROM.rd(PC);
	bool cppVar_13160 = (cppVar_13158 == 6);
	BIT_VEC cppVar_13161 = ROM.rd(PC);
	bool cppVar_13163 = (cppVar_13161 == 4);
	BIT_VEC cppVar_13164 = ROM.rd(PC);
	bool cppVar_13166 = (cppVar_13164 == 3);
	BIT_VEC cppVar_13167 = ROM.rd(PC);
	bool cppVar_13169 = (cppVar_13167 == 2);
	BIT_VEC cppVar_13170 = ROM.rd(PC);
	bool cppVar_13172 = (cppVar_13170 == 1);
	BIT_VEC cppVar_13173 = ROM.rd(PC);
	bool cppVar_13175 = (cppVar_13173 == 0);
	bool cppVar_13176 = cppVar_13172 || cppVar_13175;
	bool cppVar_13177 = cppVar_13169 || cppVar_13176;
	bool cppVar_13178 = cppVar_13166 || cppVar_13177;
	bool cppVar_13179 = cppVar_13163 || cppVar_13178;
	bool cppVar_13180 = cppVar_13160 || cppVar_13179;
	bool cppVar_13181 = cppVar_13157 || cppVar_13180;
	bool cppVar_13182 = cppVar_13154 || cppVar_13181;
	bool cppVar_13183 = cppVar_13151 || cppVar_13182;
	bool cppVar_13184 = cppVar_13148 || cppVar_13183;
	bool cppVar_13185 = cppVar_13145 || cppVar_13184;
	bool cppVar_13186 = cppVar_13142 || cppVar_13185;
	bool cppVar_13187 = cppVar_13139 || cppVar_13186;
	bool cppVar_13188 = cppVar_13136 || cppVar_13187;
	bool cppVar_13189 = cppVar_13133 || cppVar_13188;
	bool cppVar_13190 = cppVar_13130 || cppVar_13189;
	bool cppVar_13191 = cppVar_13127 || cppVar_13190;
	bool cppVar_13192 = cppVar_13124 || cppVar_13191;
	bool cppVar_13193 = cppVar_13121 || cppVar_13192;
	bool cppVar_13194 = cppVar_13118 || cppVar_13193;
	bool cppVar_13195 = cppVar_13115 || cppVar_13194;
	bool cppVar_13196 = cppVar_13112 || cppVar_13195;
	bool cppVar_13197 = cppVar_13109 || cppVar_13196;
	bool cppVar_13198 = cppVar_13106 || cppVar_13197;
	bool cppVar_13199 = cppVar_13103 || cppVar_13198;
	bool cppVar_13200 = cppVar_13100 || cppVar_13199;
	bool cppVar_13201 = cppVar_13097 || cppVar_13200;
	bool cppVar_13202 = cppVar_13094 || cppVar_13201;
	bool cppVar_13203 = cppVar_13091 || cppVar_13202;
	bool cppVar_13204 = cppVar_13088 || cppVar_13203;
	bool cppVar_13205 = cppVar_13085 || cppVar_13204;
	bool cppVar_13206 = cppVar_13082 || cppVar_13205;
	bool cppVar_13207 = cppVar_13079 || cppVar_13206;
	bool cppVar_13208 = cppVar_13076 || cppVar_13207;
	bool cppVar_13209 = cppVar_13073 || cppVar_13208;
	bool cppVar_13210 = cppVar_13070 || cppVar_13209;
	bool cppVar_13211 = cppVar_13067 || cppVar_13210;
	bool cppVar_13212 = cppVar_13064 || cppVar_13211;
	bool cppVar_13213 = cppVar_13061 || cppVar_13212;
	bool cppVar_13214 = cppVar_13058 || cppVar_13213;
	bool cppVar_13215 = cppVar_13055 || cppVar_13214;
	bool cppVar_13216 = cppVar_13052 || cppVar_13215;
	bool cppVar_13217 = cppVar_13049 || cppVar_13216;
	bool cppVar_13218 = cppVar_13046 || cppVar_13217;
	bool cppVar_13219 = cppVar_13043 || cppVar_13218;
	bool cppVar_13220 = cppVar_13040 || cppVar_13219;
	bool cppVar_13221 = cppVar_13037 || cppVar_13220;
	bool cppVar_13222 = cppVar_13034 || cppVar_13221;
	bool cppVar_13223 = cppVar_13031 || cppVar_13222;
	bool cppVar_13224 = cppVar_13028 || cppVar_13223;
	bool cppVar_13225 = cppVar_13025 || cppVar_13224;
	bool cppVar_13226 = cppVar_13022 || cppVar_13225;
	bool cppVar_13227 = cppVar_13019 || cppVar_13226;
	bool cppVar_13228 = cppVar_13016 || cppVar_13227;
	bool cppVar_13229 = cppVar_13013 || cppVar_13228;
	bool cppVar_13230 = cppVar_13010 || cppVar_13229;
	bool cppVar_13231 = cppVar_13007 || cppVar_13230;
	bool cppVar_13232 = cppVar_13004 || cppVar_13231;
	bool cppVar_13233 = cppVar_13001 || cppVar_13232;
	bool cppVar_13234 = cppVar_12998 || cppVar_13233;
	bool cppVar_13235 = cppVar_12995 || cppVar_13234;
	bool cppVar_13236 = cppVar_12992 || cppVar_13235;
	bool cppVar_13237 = cppVar_12989 || cppVar_13236;
	bool cppVar_13238 = cppVar_12986 || cppVar_13237;
	bool cppVar_13239 = cppVar_12983 || cppVar_13238;
	bool cppVar_13240 = cppVar_12980 || cppVar_13239;
	bool cppVar_13241 = cppVar_12977 || cppVar_13240;
	bool cppVar_13242 = cppVar_12974 || cppVar_13241;
	bool cppVar_13243 = cppVar_12971 || cppVar_13242;
	bool cppVar_13244 = cppVar_12968 || cppVar_13243;
	bool cppVar_13245 = cppVar_12965 || cppVar_13244;
	bool cppVar_13246 = cppVar_12962 || cppVar_13245;
	bool cppVar_13247 = cppVar_12959 || cppVar_13246;
	bool cppVar_13248 = cppVar_12956 || cppVar_13247;
	bool cppVar_13249 = cppVar_12953 || cppVar_13248;
	bool cppVar_13250 = cppVar_12950 || cppVar_13249;
	bool cppVar_13251 = cppVar_12947 || cppVar_13250;
	bool cppVar_13252 = cppVar_12944 || cppVar_13251;
	bool cppVar_13253 = cppVar_12941 || cppVar_13252;
	bool cppVar_13254 = cppVar_12938 || cppVar_13253;
	bool cppVar_13255 = cppVar_12935 || cppVar_13254;
	bool cppVar_13256 = cppVar_12932 || cppVar_13255;
	bool cppVar_13257 = cppVar_12929 || cppVar_13256;
	bool cppVar_13258 = cppVar_12926 || cppVar_13257;
	bool cppVar_13259 = cppVar_12923 || cppVar_13258;
	bool cppVar_13260 = cppVar_12920 || cppVar_13259;
	bool cppVar_13261 = cppVar_12917 || cppVar_13260;
	bool cppVar_13262 = cppVar_12914 || cppVar_13261;
	bool cppVar_13263 = cppVar_12911 || cppVar_13262;
	bool cppVar_13264 = cppVar_12908 || cppVar_13263;
	bool cppVar_13265 = cppVar_12905 || cppVar_13264;
	bool cppVar_13266 = cppVar_12902 || cppVar_13265;
	bool cppVar_13267 = cppVar_12899 || cppVar_13266;
	bool cppVar_13268 = cppVar_12896 || cppVar_13267;
	bool cppVar_13269 = cppVar_12893 || cppVar_13268;
	bool cppVar_13270 = cppVar_12890 || cppVar_13269;
	bool cppVar_13271 = cppVar_12887 || cppVar_13270;
	bool cppVar_13272 = cppVar_12884 || cppVar_13271;
	bool cppVar_13273 = cppVar_12881 || cppVar_13272;
	bool cppVar_13274 = cppVar_12878 || cppVar_13273;
	bool cppVar_13275 = cppVar_12875 || cppVar_13274;
	bool cppVar_13276 = cppVar_12872 || cppVar_13275;
	bool cppVar_13277 = cppVar_12869 || cppVar_13276;
	bool cppVar_13278 = cppVar_12866 || cppVar_13277;
	bool cppVar_13279 = cppVar_12863 || cppVar_13278;
	bool cppVar_13280 = cppVar_12860 || cppVar_13279;
	bool cppVar_13281 = cppVar_12857 || cppVar_13280;
	bool cppVar_13282 = cppVar_12854 || cppVar_13281;
	bool cppVar_13283 = cppVar_12851 || cppVar_13282;
	bool cppVar_13284 = cppVar_12848 || cppVar_13283;
	bool cppVar_13285 = cppVar_12845 || cppVar_13284;
	bool cppVar_13286 = cppVar_12842 || cppVar_13285;
	bool cppVar_13287 = cppVar_12839 || cppVar_13286;
	bool cppVar_13288 = cppVar_12836 || cppVar_13287;
	bool cppVar_13289 = cppVar_12833 || cppVar_13288;
	bool cppVar_13290 = cppVar_12830 || cppVar_13289;
	bool cppVar_13291 = cppVar_12827 || cppVar_13290;
	bool cppVar_13292 = cppVar_12824 || cppVar_13291;
	bool cppVar_13293 = cppVar_12821 || cppVar_13292;
	bool cppVar_13294 = cppVar_12818 || cppVar_13293;
	bool cppVar_13295 = cppVar_12815 || cppVar_13294;
	bool cppVar_13296 = cppVar_12812 || cppVar_13295;
	bool cppVar_13297 = cppVar_12809 || cppVar_13296;
	bool cppVar_13298 = cppVar_12806 || cppVar_13297;
	bool cppVar_13299 = cppVar_12803 || cppVar_13298;
	bool cppVar_13300 = cppVar_12800 || cppVar_13299;
	bool cppVar_13301 = cppVar_12797 || cppVar_13300;
	bool cppVar_13302 = cppVar_12794 || cppVar_13301;
	bool cppVar_13303 = cppVar_12791 || cppVar_13302;
	bool cppVar_13304 = cppVar_12788 || cppVar_13303;
	bool cppVar_13305 = cppVar_12785 || cppVar_13304;
	bool cppVar_13306 = cppVar_12782 || cppVar_13305;
	bool cppVar_13307 = cppVar_12779 || cppVar_13306;
	bool cppVar_13308 = cppVar_12776 || cppVar_13307;
	bool cppVar_13309 = cppVar_12773 || cppVar_13308;
	bool cppVar_13310 = cppVar_12770 || cppVar_13309;
	bool cppVar_13311 = cppVar_12767 || cppVar_13310;
	bool cppVar_13312 = cppVar_12764 || cppVar_13311;
	bool cppVar_13313 = cppVar_12761 || cppVar_13312;
	bool cppVar_13314 = cppVar_12758 || cppVar_13313;
	bool cppVar_13315 = cppVar_12755 || cppVar_13314;
	bool cppVar_13316 = cppVar_12752 || cppVar_13315;
	bool cppVar_13317 = cppVar_12749 || cppVar_13316;
	bool cppVar_13318 = cppVar_12746 || cppVar_13317;
	bool cppVar_13319 = cppVar_12743 || cppVar_13318;
	bool cppVar_13320 = cppVar_12740 || cppVar_13319;
	bool cppVar_13321 = cppVar_12737 || cppVar_13320;
	bool cppVar_13322 = cppVar_12734 || cppVar_13321;
	bool cppVar_13323 = cppVar_12731 || cppVar_13322;
	bool cppVar_13324 = cppVar_12728 || cppVar_13323;
	bool cppVar_13325 = cppVar_12725 || cppVar_13324;
	bool cppVar_13326 = cppVar_12722 || cppVar_13325;
	bool cppVar_13327 = cppVar_12719 || cppVar_13326;
	bool cppVar_13328 = cppVar_12716 || cppVar_13327;
	bool cppVar_13329 = cppVar_12713 || cppVar_13328;
	bool cppVar_13330 = cppVar_12710 || cppVar_13329;
	bool cppVar_13331 = cppVar_12707 || cppVar_13330;
	bool cppVar_13332 = cppVar_12704 || cppVar_13331;
	bool cppVar_13333 = cppVar_12701 || cppVar_13332;
	bool cppVar_13334 = cppVar_12698 || cppVar_13333;
	bool cppVar_13335 = cppVar_12695 || cppVar_13334;
	bool cppVar_13336 = cppVar_12692 || cppVar_13335;
	bool cppVar_13337 = cppVar_12689 || cppVar_13336;
	bool cppVar_13338 = cppVar_12686 || cppVar_13337;
	bool cppVar_13339 = cppVar_12683 || cppVar_13338;
	bool cppVar_13340 = cppVar_12680 || cppVar_13339;
	bool cppVar_13341 = cppVar_12677 || cppVar_13340;
	bool cppVar_13342 = cppVar_12674 || cppVar_13341;
	bool cppVar_13343 = cppVar_12671 || cppVar_13342;
	bool cppVar_13344 = cppVar_12668 || cppVar_13343;
	bool cppVar_13345 = cppVar_12665 || cppVar_13344;
	bool cppVar_13346 = cppVar_12662 || cppVar_13345;
	bool cppVar_13347 = cppVar_12659 || cppVar_13346;
	bool cppVar_13348 = cppVar_12656 || cppVar_13347;
	bool cppVar_13349 = cppVar_12653 || cppVar_13348;
	bool cppVar_13350 = cppVar_12650 || cppVar_13349;
	bool cppVar_13351 = cppVar_12647 || cppVar_13350;
	bool cppVar_13352 = cppVar_12644 || cppVar_13351;
	bool cppVar_13353 = cppVar_12641 || cppVar_13352;
	bool cppVar_13354 = cppVar_12638 || cppVar_13353;
	bool cppVar_13355 = cppVar_12635 || cppVar_13354;
	bool cppVar_13356 = cppVar_12632 || cppVar_13355;
	bool cppVar_13357 = cppVar_12629 || cppVar_13356;
	bool cppVar_13358 = cppVar_12626 || cppVar_13357;
	bool cppVar_13359 = cppVar_12623 || cppVar_13358;
	bool cppVar_13360 = cppVar_12620 || cppVar_13359;
	bool cppVar_13361 = cppVar_12617 || cppVar_13360;
	bool cppVar_13362 = cppVar_12614 || cppVar_13361;
	bool cppVar_13363 = cppVar_12611 || cppVar_13362;
	bool cppVar_13364 = cppVar_12608 || cppVar_13363;
	bool cppVar_13365 = cppVar_12605 || cppVar_13364;
	bool cppVar_13366 = cppVar_12602 || cppVar_13365;
	bool cppVar_13367 = cppVar_12599 || cppVar_13366;
	bool cppVar_13368 = cppVar_12596 || cppVar_13367;
	bool cppVar_13369 = cppVar_12593 || cppVar_13368;
	bool cppVar_13370 = cppVar_12590 || cppVar_13369;
	bool cppVar_13371 = cppVar_12587 || cppVar_13370;
	bool cppVar_13372 = cppVar_12584 || cppVar_13371;
	bool cppVar_13373 = cppVar_12581 || cppVar_13372;
	bool cppVar_13374 = cppVar_12578 || cppVar_13373;
	bool cppVar_13375 = cppVar_12575 || cppVar_13374;
	bool cppVar_13376 = cppVar_12572 || cppVar_13375;
	bool cppVar_13377 = cppVar_12569 || cppVar_13376;
	bool cppVar_13378 = cppVar_12566 || cppVar_13377;
	bool cppVar_13379 = cppVar_12563 || cppVar_13378;
	bool cppVar_13380 = cppVar_12560 || cppVar_13379;
	bool cppVar_13381 = cppVar_12557 || cppVar_13380;
	bool cppVar_13382 = cppVar_12554 || cppVar_13381;
	bool cppVar_13383 = cppVar_12551 || cppVar_13382;
	bool cppVar_13384 = cppVar_12548 || cppVar_13383;
	bool cppVar_13385 = cppVar_12545 || cppVar_13384;
	bool cppVar_13386 = cppVar_12542 || cppVar_13385;
	bool cppVar_13387 = cppVar_12539 || cppVar_13386;
	bool cppVar_13388 = cppVar_12536 || cppVar_13387;
	bool cppVar_13389 = cppVar_12533 || cppVar_13388;
	bool cppVar_13390 = cppVar_12530 || cppVar_13389;
	bool cppVar_13391 = cppVar_12527 || cppVar_13390;
	bool cppVar_13392 = cppVar_12524 || cppVar_13391;
	bool cppVar_13393 = cppVar_12521 || cppVar_13392;
	bool cppVar_13394 = cppVar_12518 || cppVar_13393;
	bool cppVar_13395 = cppVar_12515 || cppVar_13394;
	bool cppVar_13396 = cppVar_12512 || cppVar_13395;
	bool cppVar_13397 = cppVar_12509 || cppVar_13396;
	bool cppVar_13398 = cppVar_12506 || cppVar_13397;
	bool cppVar_13399 = cppVar_12503 || cppVar_13398;
	bool cppVar_13400 = cppVar_12500 || cppVar_13399;
	bool cppVar_13401 = cppVar_12497 || cppVar_13400;
	bool cppVar_13402 = cppVar_12494 || cppVar_13401;
	bool cppVar_13403 = cppVar_12491 || cppVar_13402;
	bool cppVar_13404 = cppVar_12488 || cppVar_13403;
	BIT_VEC cppVar_13405 = (DPH << 8) | DPL;
	cppVar_13405 = (cppVar_13405 & cppMask_un_16_);
	BIT_VEC cppVar_13406 = (cppVar_13405 >> 0) & cppMask_un_8_;
	BIT_VEC cppVar_13407 = (cppVar_13404) ? cppVar_13406 : DPL;
	BIT_VEC cppVar_13408 = (cppVar_12362) ? cppVar_12485 : cppVar_13407;
	BIT_VEC cppVar_13409 = (cppVar_12236) ? cppVar_12359 : cppVar_13408;
	BIT_VEC cppVar_13410 = (cppVar_12107) ? cppVar_12229 : cppVar_13409;
	BIT_VEC cppVar_13411 = (cppVar_11979) ? cppVar_12104 : cppVar_13410;
	BIT_VEC cppVar_13412 = (cppVar_11854) ? cppVar_11976 : cppVar_13411;
	BIT_VEC cppVar_13413 = (cppVar_11726) ? cppVar_11851 : cppVar_13412;
	BIT_VEC cppVar_13414 = (cppVar_11601) ? cppVar_11723 : cppVar_13413;
	BIT_VEC cppVar_13415 = (cppVar_11473) ? cppVar_11598 : cppVar_13414;
	BIT_VEC cppVar_13416 = (cppVar_11461) ? cppVar_11470 : cppVar_13415;
	BIT_VEC cppVar_13417 = (cppVar_11336) ? cppVar_11458 : cppVar_13416;
	BIT_VEC cppVar_13418 = (cppVar_11320) ? cppVar_11333 : cppVar_13417;
	BIT_VEC cppVar_13419 = (cppVar_11304) ? cppVar_11317 : cppVar_13418;
	BIT_VEC cppVar_13420 = (cppVar_11155) ? cppVar_11301 : cppVar_13419;
	BIT_VEC cppVar_13421 = (cppVar_11006) ? cppVar_11152 : cppVar_13420;
	BIT_VEC cppVar_13422 = (cppVar_10857) ? cppVar_11003 : cppVar_13421;
	BIT_VEC cppVar_13423 = (cppVar_10708) ? cppVar_10854 : cppVar_13422;
	BIT_VEC cppVar_13424 = (cppVar_10559) ? cppVar_10705 : cppVar_13423;
	BIT_VEC cppVar_13425 = (cppVar_10410) ? cppVar_10556 : cppVar_13424;
	BIT_VEC cppVar_13426 = (cppVar_10261) ? cppVar_10407 : cppVar_13425;
	BIT_VEC cppVar_13427 = (cppVar_10112) ? cppVar_10258 : cppVar_13426;
	BIT_VEC cppVar_13428 = (cppVar_10101) ? cppVar_10109 : cppVar_13427;
	BIT_VEC cppVar_13429 = (cppVar_9975) ? cppVar_10098 : cppVar_13428;
	BIT_VEC cppVar_13430 = (cppVar_9966) ? cppVar_9972 : cppVar_13429;
	BIT_VEC cppVar_13431 = (cppVar_9952) ? cppVar_9959 : cppVar_13430;
	return cppVar_13431;
}
