#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_IP()
{
	BIT_VEC cppVar_17985 = ROM.rd(PC);
	bool cppVar_17987 = (cppVar_17985 == 210);
	BIT_VEC cppVar_17989 = PC + 1;
	cppVar_17989 = (cppVar_17989 & cppMask_un_16_);
	BIT_VEC cppVar_17990 = ROM.rd(cppVar_17989);
	BIT_VEC cppVar_17991 = (cppVar_17990 >> 7) & cppMask_un_1_;
	bool cppVar_17993 = (cppVar_17991 == 1);
	BIT_VEC cppVar_17994 = PC + 1;
	cppVar_17994 = (cppVar_17994 & cppMask_un_16_);
	BIT_VEC cppVar_17995 = ROM.rd(cppVar_17994);
	BIT_VEC cppVar_17996 = (cppVar_17995 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_17998 = (cppVar_17996 << 3) | 0;
	cppVar_17998 = (cppVar_17998 & cppMask_un_8_);
	BIT_VEC cppVar_17999 = PC + 1;
	cppVar_17999 = (cppVar_17999 & cppMask_un_16_);
	BIT_VEC cppVar_18000 = ROM.rd(cppVar_17999);
	BIT_VEC cppVar_18001 = (cppVar_18000 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18002 = (cppVar_18001 & cppMask_un_5_);
	BIT_VEC cppVar_18004 = cppVar_18002 + 32;
	cppVar_18004 = (cppVar_18004 & cppMask_un_8_);
	BIT_VEC cppVar_18005 = (cppVar_17993) ? cppVar_17998 : cppVar_18004;
	bool cppVar_18007 = (cppVar_18005 == 184);
	BIT_VEC cppVar_18009 = PC + 1;
	cppVar_18009 = (cppVar_18009 & cppMask_un_16_);
	BIT_VEC cppVar_18010 = ROM.rd(cppVar_18009);
	BIT_VEC cppVar_18011 = (cppVar_18010 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_18012 = (cppVar_18011 & cppMask_un_3_);
	BIT_VEC cppVar_18013 = 1 << static_cast<unsigned>(cppVar_18012);
	cppVar_18013 = (cppVar_18013 & cppMask_un_8_);
	BIT_VEC cppVar_18014 = ~cppVar_18013;
	BIT_VEC cppVar_18015 = PC + 1;
	cppVar_18015 = (cppVar_18015 & cppMask_un_16_);
	BIT_VEC cppVar_18016 = ROM.rd(cppVar_18015);
	BIT_VEC cppVar_18017 = (cppVar_18016 >> 7) & cppMask_un_1_;
	bool cppVar_18018 = (cppVar_18017 == 1);
	BIT_VEC cppVar_18019 = PC + 1;
	cppVar_18019 = (cppVar_18019 & cppMask_un_16_);
	BIT_VEC cppVar_18020 = ROM.rd(cppVar_18019);
	BIT_VEC cppVar_18021 = (cppVar_18020 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18022 = (cppVar_18021 << 3) | 0;
	cppVar_18022 = (cppVar_18022 & cppMask_un_8_);
	BIT_VEC cppVar_18023 = PC + 1;
	cppVar_18023 = (cppVar_18023 & cppMask_un_16_);
	BIT_VEC cppVar_18024 = ROM.rd(cppVar_18023);
	BIT_VEC cppVar_18025 = (cppVar_18024 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18026 = (cppVar_18025 & cppMask_un_5_);
	BIT_VEC cppVar_18027 = cppVar_18026 + 32;
	cppVar_18027 = (cppVar_18027 & cppMask_un_8_);
	BIT_VEC cppVar_18028 = (cppVar_18018) ? cppVar_18022 : cppVar_18027;
	BIT_VEC cppVar_18029 = (cppVar_18028 >> 7) & cppMask_un_1_;
	bool cppVar_18031 = (cppVar_18029 == 0);
	BIT_VEC cppVar_18032 = PC + 1;
	cppVar_18032 = (cppVar_18032 & cppMask_un_16_);
	BIT_VEC cppVar_18033 = ROM.rd(cppVar_18032);
	BIT_VEC cppVar_18034 = (cppVar_18033 >> 7) & cppMask_un_1_;
	bool cppVar_18035 = (cppVar_18034 == 1);
	BIT_VEC cppVar_18036 = PC + 1;
	cppVar_18036 = (cppVar_18036 & cppMask_un_16_);
	BIT_VEC cppVar_18037 = ROM.rd(cppVar_18036);
	BIT_VEC cppVar_18038 = (cppVar_18037 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18039 = (cppVar_18038 << 3) | 0;
	cppVar_18039 = (cppVar_18039 & cppMask_un_8_);
	BIT_VEC cppVar_18040 = PC + 1;
	cppVar_18040 = (cppVar_18040 & cppMask_un_16_);
	BIT_VEC cppVar_18041 = ROM.rd(cppVar_18040);
	BIT_VEC cppVar_18042 = (cppVar_18041 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18043 = (cppVar_18042 & cppMask_un_5_);
	BIT_VEC cppVar_18044 = cppVar_18043 + 32;
	cppVar_18044 = (cppVar_18044 & cppMask_un_8_);
	BIT_VEC cppVar_18045 = (cppVar_18035) ? cppVar_18039 : cppVar_18044;
	BIT_VEC cppVar_18046 = IRAM.rd(cppVar_18045);
	BIT_VEC cppVar_18047 = PC + 1;
	cppVar_18047 = (cppVar_18047 & cppMask_un_16_);
	BIT_VEC cppVar_18048 = ROM.rd(cppVar_18047);
	BIT_VEC cppVar_18049 = (cppVar_18048 >> 7) & cppMask_un_1_;
	bool cppVar_18050 = (cppVar_18049 == 1);
	BIT_VEC cppVar_18051 = PC + 1;
	cppVar_18051 = (cppVar_18051 & cppMask_un_16_);
	BIT_VEC cppVar_18052 = ROM.rd(cppVar_18051);
	BIT_VEC cppVar_18053 = (cppVar_18052 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18054 = (cppVar_18053 << 3) | 0;
	cppVar_18054 = (cppVar_18054 & cppMask_un_8_);
	BIT_VEC cppVar_18055 = PC + 1;
	cppVar_18055 = (cppVar_18055 & cppMask_un_16_);
	BIT_VEC cppVar_18056 = ROM.rd(cppVar_18055);
	BIT_VEC cppVar_18057 = (cppVar_18056 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18058 = (cppVar_18057 & cppMask_un_5_);
	BIT_VEC cppVar_18059 = cppVar_18058 + 32;
	cppVar_18059 = (cppVar_18059 & cppMask_un_8_);
	BIT_VEC cppVar_18060 = (cppVar_18050) ? cppVar_18054 : cppVar_18059;
	bool cppVar_18062 = (cppVar_18060 == 128);
	BIT_VEC cppVar_18063 = PC + 1;
	cppVar_18063 = (cppVar_18063 & cppMask_un_16_);
	BIT_VEC cppVar_18064 = ROM.rd(cppVar_18063);
	BIT_VEC cppVar_18065 = (cppVar_18064 >> 7) & cppMask_un_1_;
	bool cppVar_18066 = (cppVar_18065 == 1);
	BIT_VEC cppVar_18067 = PC + 1;
	cppVar_18067 = (cppVar_18067 & cppMask_un_16_);
	BIT_VEC cppVar_18068 = ROM.rd(cppVar_18067);
	BIT_VEC cppVar_18069 = (cppVar_18068 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18070 = (cppVar_18069 << 3) | 0;
	cppVar_18070 = (cppVar_18070 & cppMask_un_8_);
	BIT_VEC cppVar_18071 = PC + 1;
	cppVar_18071 = (cppVar_18071 & cppMask_un_16_);
	BIT_VEC cppVar_18072 = ROM.rd(cppVar_18071);
	BIT_VEC cppVar_18073 = (cppVar_18072 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18074 = (cppVar_18073 & cppMask_un_5_);
	BIT_VEC cppVar_18075 = cppVar_18074 + 32;
	cppVar_18075 = (cppVar_18075 & cppMask_un_8_);
	BIT_VEC cppVar_18076 = (cppVar_18066) ? cppVar_18070 : cppVar_18075;
	bool cppVar_18078 = (cppVar_18076 == 129);
	BIT_VEC cppVar_18079 = PC + 1;
	cppVar_18079 = (cppVar_18079 & cppMask_un_16_);
	BIT_VEC cppVar_18080 = ROM.rd(cppVar_18079);
	BIT_VEC cppVar_18081 = (cppVar_18080 >> 7) & cppMask_un_1_;
	bool cppVar_18082 = (cppVar_18081 == 1);
	BIT_VEC cppVar_18083 = PC + 1;
	cppVar_18083 = (cppVar_18083 & cppMask_un_16_);
	BIT_VEC cppVar_18084 = ROM.rd(cppVar_18083);
	BIT_VEC cppVar_18085 = (cppVar_18084 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18086 = (cppVar_18085 << 3) | 0;
	cppVar_18086 = (cppVar_18086 & cppMask_un_8_);
	BIT_VEC cppVar_18087 = PC + 1;
	cppVar_18087 = (cppVar_18087 & cppMask_un_16_);
	BIT_VEC cppVar_18088 = ROM.rd(cppVar_18087);
	BIT_VEC cppVar_18089 = (cppVar_18088 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18090 = (cppVar_18089 & cppMask_un_5_);
	BIT_VEC cppVar_18091 = cppVar_18090 + 32;
	cppVar_18091 = (cppVar_18091 & cppMask_un_8_);
	BIT_VEC cppVar_18092 = (cppVar_18082) ? cppVar_18086 : cppVar_18091;
	bool cppVar_18094 = (cppVar_18092 == 130);
	BIT_VEC cppVar_18095 = PC + 1;
	cppVar_18095 = (cppVar_18095 & cppMask_un_16_);
	BIT_VEC cppVar_18096 = ROM.rd(cppVar_18095);
	BIT_VEC cppVar_18097 = (cppVar_18096 >> 7) & cppMask_un_1_;
	bool cppVar_18098 = (cppVar_18097 == 1);
	BIT_VEC cppVar_18099 = PC + 1;
	cppVar_18099 = (cppVar_18099 & cppMask_un_16_);
	BIT_VEC cppVar_18100 = ROM.rd(cppVar_18099);
	BIT_VEC cppVar_18101 = (cppVar_18100 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18102 = (cppVar_18101 << 3) | 0;
	cppVar_18102 = (cppVar_18102 & cppMask_un_8_);
	BIT_VEC cppVar_18103 = PC + 1;
	cppVar_18103 = (cppVar_18103 & cppMask_un_16_);
	BIT_VEC cppVar_18104 = ROM.rd(cppVar_18103);
	BIT_VEC cppVar_18105 = (cppVar_18104 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18106 = (cppVar_18105 & cppMask_un_5_);
	BIT_VEC cppVar_18107 = cppVar_18106 + 32;
	cppVar_18107 = (cppVar_18107 & cppMask_un_8_);
	BIT_VEC cppVar_18108 = (cppVar_18098) ? cppVar_18102 : cppVar_18107;
	bool cppVar_18110 = (cppVar_18108 == 131);
	BIT_VEC cppVar_18111 = PC + 1;
	cppVar_18111 = (cppVar_18111 & cppMask_un_16_);
	BIT_VEC cppVar_18112 = ROM.rd(cppVar_18111);
	BIT_VEC cppVar_18113 = (cppVar_18112 >> 7) & cppMask_un_1_;
	bool cppVar_18114 = (cppVar_18113 == 1);
	BIT_VEC cppVar_18115 = PC + 1;
	cppVar_18115 = (cppVar_18115 & cppMask_un_16_);
	BIT_VEC cppVar_18116 = ROM.rd(cppVar_18115);
	BIT_VEC cppVar_18117 = (cppVar_18116 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18118 = (cppVar_18117 << 3) | 0;
	cppVar_18118 = (cppVar_18118 & cppMask_un_8_);
	BIT_VEC cppVar_18119 = PC + 1;
	cppVar_18119 = (cppVar_18119 & cppMask_un_16_);
	BIT_VEC cppVar_18120 = ROM.rd(cppVar_18119);
	BIT_VEC cppVar_18121 = (cppVar_18120 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18122 = (cppVar_18121 & cppMask_un_5_);
	BIT_VEC cppVar_18123 = cppVar_18122 + 32;
	cppVar_18123 = (cppVar_18123 & cppMask_un_8_);
	BIT_VEC cppVar_18124 = (cppVar_18114) ? cppVar_18118 : cppVar_18123;
	bool cppVar_18126 = (cppVar_18124 == 135);
	BIT_VEC cppVar_18127 = PC + 1;
	cppVar_18127 = (cppVar_18127 & cppMask_un_16_);
	BIT_VEC cppVar_18128 = ROM.rd(cppVar_18127);
	BIT_VEC cppVar_18129 = (cppVar_18128 >> 7) & cppMask_un_1_;
	bool cppVar_18130 = (cppVar_18129 == 1);
	BIT_VEC cppVar_18131 = PC + 1;
	cppVar_18131 = (cppVar_18131 & cppMask_un_16_);
	BIT_VEC cppVar_18132 = ROM.rd(cppVar_18131);
	BIT_VEC cppVar_18133 = (cppVar_18132 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18134 = (cppVar_18133 << 3) | 0;
	cppVar_18134 = (cppVar_18134 & cppMask_un_8_);
	BIT_VEC cppVar_18135 = PC + 1;
	cppVar_18135 = (cppVar_18135 & cppMask_un_16_);
	BIT_VEC cppVar_18136 = ROM.rd(cppVar_18135);
	BIT_VEC cppVar_18137 = (cppVar_18136 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18138 = (cppVar_18137 & cppMask_un_5_);
	BIT_VEC cppVar_18139 = cppVar_18138 + 32;
	cppVar_18139 = (cppVar_18139 & cppMask_un_8_);
	BIT_VEC cppVar_18140 = (cppVar_18130) ? cppVar_18134 : cppVar_18139;
	bool cppVar_18142 = (cppVar_18140 == 136);
	BIT_VEC cppVar_18143 = PC + 1;
	cppVar_18143 = (cppVar_18143 & cppMask_un_16_);
	BIT_VEC cppVar_18144 = ROM.rd(cppVar_18143);
	BIT_VEC cppVar_18145 = (cppVar_18144 >> 7) & cppMask_un_1_;
	bool cppVar_18146 = (cppVar_18145 == 1);
	BIT_VEC cppVar_18147 = PC + 1;
	cppVar_18147 = (cppVar_18147 & cppMask_un_16_);
	BIT_VEC cppVar_18148 = ROM.rd(cppVar_18147);
	BIT_VEC cppVar_18149 = (cppVar_18148 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18150 = (cppVar_18149 << 3) | 0;
	cppVar_18150 = (cppVar_18150 & cppMask_un_8_);
	BIT_VEC cppVar_18151 = PC + 1;
	cppVar_18151 = (cppVar_18151 & cppMask_un_16_);
	BIT_VEC cppVar_18152 = ROM.rd(cppVar_18151);
	BIT_VEC cppVar_18153 = (cppVar_18152 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18154 = (cppVar_18153 & cppMask_un_5_);
	BIT_VEC cppVar_18155 = cppVar_18154 + 32;
	cppVar_18155 = (cppVar_18155 & cppMask_un_8_);
	BIT_VEC cppVar_18156 = (cppVar_18146) ? cppVar_18150 : cppVar_18155;
	bool cppVar_18158 = (cppVar_18156 == 137);
	BIT_VEC cppVar_18159 = PC + 1;
	cppVar_18159 = (cppVar_18159 & cppMask_un_16_);
	BIT_VEC cppVar_18160 = ROM.rd(cppVar_18159);
	BIT_VEC cppVar_18161 = (cppVar_18160 >> 7) & cppMask_un_1_;
	bool cppVar_18162 = (cppVar_18161 == 1);
	BIT_VEC cppVar_18163 = PC + 1;
	cppVar_18163 = (cppVar_18163 & cppMask_un_16_);
	BIT_VEC cppVar_18164 = ROM.rd(cppVar_18163);
	BIT_VEC cppVar_18165 = (cppVar_18164 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18166 = (cppVar_18165 << 3) | 0;
	cppVar_18166 = (cppVar_18166 & cppMask_un_8_);
	BIT_VEC cppVar_18167 = PC + 1;
	cppVar_18167 = (cppVar_18167 & cppMask_un_16_);
	BIT_VEC cppVar_18168 = ROM.rd(cppVar_18167);
	BIT_VEC cppVar_18169 = (cppVar_18168 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18170 = (cppVar_18169 & cppMask_un_5_);
	BIT_VEC cppVar_18171 = cppVar_18170 + 32;
	cppVar_18171 = (cppVar_18171 & cppMask_un_8_);
	BIT_VEC cppVar_18172 = (cppVar_18162) ? cppVar_18166 : cppVar_18171;
	bool cppVar_18174 = (cppVar_18172 == 138);
	BIT_VEC cppVar_18175 = PC + 1;
	cppVar_18175 = (cppVar_18175 & cppMask_un_16_);
	BIT_VEC cppVar_18176 = ROM.rd(cppVar_18175);
	BIT_VEC cppVar_18177 = (cppVar_18176 >> 7) & cppMask_un_1_;
	bool cppVar_18178 = (cppVar_18177 == 1);
	BIT_VEC cppVar_18179 = PC + 1;
	cppVar_18179 = (cppVar_18179 & cppMask_un_16_);
	BIT_VEC cppVar_18180 = ROM.rd(cppVar_18179);
	BIT_VEC cppVar_18181 = (cppVar_18180 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18182 = (cppVar_18181 << 3) | 0;
	cppVar_18182 = (cppVar_18182 & cppMask_un_8_);
	BIT_VEC cppVar_18183 = PC + 1;
	cppVar_18183 = (cppVar_18183 & cppMask_un_16_);
	BIT_VEC cppVar_18184 = ROM.rd(cppVar_18183);
	BIT_VEC cppVar_18185 = (cppVar_18184 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18186 = (cppVar_18185 & cppMask_un_5_);
	BIT_VEC cppVar_18187 = cppVar_18186 + 32;
	cppVar_18187 = (cppVar_18187 & cppMask_un_8_);
	BIT_VEC cppVar_18188 = (cppVar_18178) ? cppVar_18182 : cppVar_18187;
	bool cppVar_18190 = (cppVar_18188 == 140);
	BIT_VEC cppVar_18191 = PC + 1;
	cppVar_18191 = (cppVar_18191 & cppMask_un_16_);
	BIT_VEC cppVar_18192 = ROM.rd(cppVar_18191);
	BIT_VEC cppVar_18193 = (cppVar_18192 >> 7) & cppMask_un_1_;
	bool cppVar_18194 = (cppVar_18193 == 1);
	BIT_VEC cppVar_18195 = PC + 1;
	cppVar_18195 = (cppVar_18195 & cppMask_un_16_);
	BIT_VEC cppVar_18196 = ROM.rd(cppVar_18195);
	BIT_VEC cppVar_18197 = (cppVar_18196 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18198 = (cppVar_18197 << 3) | 0;
	cppVar_18198 = (cppVar_18198 & cppMask_un_8_);
	BIT_VEC cppVar_18199 = PC + 1;
	cppVar_18199 = (cppVar_18199 & cppMask_un_16_);
	BIT_VEC cppVar_18200 = ROM.rd(cppVar_18199);
	BIT_VEC cppVar_18201 = (cppVar_18200 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18202 = (cppVar_18201 & cppMask_un_5_);
	BIT_VEC cppVar_18203 = cppVar_18202 + 32;
	cppVar_18203 = (cppVar_18203 & cppMask_un_8_);
	BIT_VEC cppVar_18204 = (cppVar_18194) ? cppVar_18198 : cppVar_18203;
	bool cppVar_18206 = (cppVar_18204 == 139);
	BIT_VEC cppVar_18207 = PC + 1;
	cppVar_18207 = (cppVar_18207 & cppMask_un_16_);
	BIT_VEC cppVar_18208 = ROM.rd(cppVar_18207);
	BIT_VEC cppVar_18209 = (cppVar_18208 >> 7) & cppMask_un_1_;
	bool cppVar_18210 = (cppVar_18209 == 1);
	BIT_VEC cppVar_18211 = PC + 1;
	cppVar_18211 = (cppVar_18211 & cppMask_un_16_);
	BIT_VEC cppVar_18212 = ROM.rd(cppVar_18211);
	BIT_VEC cppVar_18213 = (cppVar_18212 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18214 = (cppVar_18213 << 3) | 0;
	cppVar_18214 = (cppVar_18214 & cppMask_un_8_);
	BIT_VEC cppVar_18215 = PC + 1;
	cppVar_18215 = (cppVar_18215 & cppMask_un_16_);
	BIT_VEC cppVar_18216 = ROM.rd(cppVar_18215);
	BIT_VEC cppVar_18217 = (cppVar_18216 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18218 = (cppVar_18217 & cppMask_un_5_);
	BIT_VEC cppVar_18219 = cppVar_18218 + 32;
	cppVar_18219 = (cppVar_18219 & cppMask_un_8_);
	BIT_VEC cppVar_18220 = (cppVar_18210) ? cppVar_18214 : cppVar_18219;
	bool cppVar_18222 = (cppVar_18220 == 141);
	BIT_VEC cppVar_18223 = PC + 1;
	cppVar_18223 = (cppVar_18223 & cppMask_un_16_);
	BIT_VEC cppVar_18224 = ROM.rd(cppVar_18223);
	BIT_VEC cppVar_18225 = (cppVar_18224 >> 7) & cppMask_un_1_;
	bool cppVar_18226 = (cppVar_18225 == 1);
	BIT_VEC cppVar_18227 = PC + 1;
	cppVar_18227 = (cppVar_18227 & cppMask_un_16_);
	BIT_VEC cppVar_18228 = ROM.rd(cppVar_18227);
	BIT_VEC cppVar_18229 = (cppVar_18228 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18230 = (cppVar_18229 << 3) | 0;
	cppVar_18230 = (cppVar_18230 & cppMask_un_8_);
	BIT_VEC cppVar_18231 = PC + 1;
	cppVar_18231 = (cppVar_18231 & cppMask_un_16_);
	BIT_VEC cppVar_18232 = ROM.rd(cppVar_18231);
	BIT_VEC cppVar_18233 = (cppVar_18232 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18234 = (cppVar_18233 & cppMask_un_5_);
	BIT_VEC cppVar_18235 = cppVar_18234 + 32;
	cppVar_18235 = (cppVar_18235 & cppMask_un_8_);
	BIT_VEC cppVar_18236 = (cppVar_18226) ? cppVar_18230 : cppVar_18235;
	bool cppVar_18238 = (cppVar_18236 == 144);
	BIT_VEC cppVar_18239 = PC + 1;
	cppVar_18239 = (cppVar_18239 & cppMask_un_16_);
	BIT_VEC cppVar_18240 = ROM.rd(cppVar_18239);
	BIT_VEC cppVar_18241 = (cppVar_18240 >> 7) & cppMask_un_1_;
	bool cppVar_18242 = (cppVar_18241 == 1);
	BIT_VEC cppVar_18243 = PC + 1;
	cppVar_18243 = (cppVar_18243 & cppMask_un_16_);
	BIT_VEC cppVar_18244 = ROM.rd(cppVar_18243);
	BIT_VEC cppVar_18245 = (cppVar_18244 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18246 = (cppVar_18245 << 3) | 0;
	cppVar_18246 = (cppVar_18246 & cppMask_un_8_);
	BIT_VEC cppVar_18247 = PC + 1;
	cppVar_18247 = (cppVar_18247 & cppMask_un_16_);
	BIT_VEC cppVar_18248 = ROM.rd(cppVar_18247);
	BIT_VEC cppVar_18249 = (cppVar_18248 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18250 = (cppVar_18249 & cppMask_un_5_);
	BIT_VEC cppVar_18251 = cppVar_18250 + 32;
	cppVar_18251 = (cppVar_18251 & cppMask_un_8_);
	BIT_VEC cppVar_18252 = (cppVar_18242) ? cppVar_18246 : cppVar_18251;
	bool cppVar_18254 = (cppVar_18252 == 152);
	BIT_VEC cppVar_18255 = PC + 1;
	cppVar_18255 = (cppVar_18255 & cppMask_un_16_);
	BIT_VEC cppVar_18256 = ROM.rd(cppVar_18255);
	BIT_VEC cppVar_18257 = (cppVar_18256 >> 7) & cppMask_un_1_;
	bool cppVar_18258 = (cppVar_18257 == 1);
	BIT_VEC cppVar_18259 = PC + 1;
	cppVar_18259 = (cppVar_18259 & cppMask_un_16_);
	BIT_VEC cppVar_18260 = ROM.rd(cppVar_18259);
	BIT_VEC cppVar_18261 = (cppVar_18260 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18262 = (cppVar_18261 << 3) | 0;
	cppVar_18262 = (cppVar_18262 & cppMask_un_8_);
	BIT_VEC cppVar_18263 = PC + 1;
	cppVar_18263 = (cppVar_18263 & cppMask_un_16_);
	BIT_VEC cppVar_18264 = ROM.rd(cppVar_18263);
	BIT_VEC cppVar_18265 = (cppVar_18264 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18266 = (cppVar_18265 & cppMask_un_5_);
	BIT_VEC cppVar_18267 = cppVar_18266 + 32;
	cppVar_18267 = (cppVar_18267 & cppMask_un_8_);
	BIT_VEC cppVar_18268 = (cppVar_18258) ? cppVar_18262 : cppVar_18267;
	bool cppVar_18270 = (cppVar_18268 == 153);
	BIT_VEC cppVar_18271 = PC + 1;
	cppVar_18271 = (cppVar_18271 & cppMask_un_16_);
	BIT_VEC cppVar_18272 = ROM.rd(cppVar_18271);
	BIT_VEC cppVar_18273 = (cppVar_18272 >> 7) & cppMask_un_1_;
	bool cppVar_18274 = (cppVar_18273 == 1);
	BIT_VEC cppVar_18275 = PC + 1;
	cppVar_18275 = (cppVar_18275 & cppMask_un_16_);
	BIT_VEC cppVar_18276 = ROM.rd(cppVar_18275);
	BIT_VEC cppVar_18277 = (cppVar_18276 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18278 = (cppVar_18277 << 3) | 0;
	cppVar_18278 = (cppVar_18278 & cppMask_un_8_);
	BIT_VEC cppVar_18279 = PC + 1;
	cppVar_18279 = (cppVar_18279 & cppMask_un_16_);
	BIT_VEC cppVar_18280 = ROM.rd(cppVar_18279);
	BIT_VEC cppVar_18281 = (cppVar_18280 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18282 = (cppVar_18281 & cppMask_un_5_);
	BIT_VEC cppVar_18283 = cppVar_18282 + 32;
	cppVar_18283 = (cppVar_18283 & cppMask_un_8_);
	BIT_VEC cppVar_18284 = (cppVar_18274) ? cppVar_18278 : cppVar_18283;
	bool cppVar_18286 = (cppVar_18284 == 160);
	BIT_VEC cppVar_18287 = PC + 1;
	cppVar_18287 = (cppVar_18287 & cppMask_un_16_);
	BIT_VEC cppVar_18288 = ROM.rd(cppVar_18287);
	BIT_VEC cppVar_18289 = (cppVar_18288 >> 7) & cppMask_un_1_;
	bool cppVar_18290 = (cppVar_18289 == 1);
	BIT_VEC cppVar_18291 = PC + 1;
	cppVar_18291 = (cppVar_18291 & cppMask_un_16_);
	BIT_VEC cppVar_18292 = ROM.rd(cppVar_18291);
	BIT_VEC cppVar_18293 = (cppVar_18292 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18294 = (cppVar_18293 << 3) | 0;
	cppVar_18294 = (cppVar_18294 & cppMask_un_8_);
	BIT_VEC cppVar_18295 = PC + 1;
	cppVar_18295 = (cppVar_18295 & cppMask_un_16_);
	BIT_VEC cppVar_18296 = ROM.rd(cppVar_18295);
	BIT_VEC cppVar_18297 = (cppVar_18296 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18298 = (cppVar_18297 & cppMask_un_5_);
	BIT_VEC cppVar_18299 = cppVar_18298 + 32;
	cppVar_18299 = (cppVar_18299 & cppMask_un_8_);
	BIT_VEC cppVar_18300 = (cppVar_18290) ? cppVar_18294 : cppVar_18299;
	bool cppVar_18302 = (cppVar_18300 == 168);
	BIT_VEC cppVar_18303 = PC + 1;
	cppVar_18303 = (cppVar_18303 & cppMask_un_16_);
	BIT_VEC cppVar_18304 = ROM.rd(cppVar_18303);
	BIT_VEC cppVar_18305 = (cppVar_18304 >> 7) & cppMask_un_1_;
	bool cppVar_18306 = (cppVar_18305 == 1);
	BIT_VEC cppVar_18307 = PC + 1;
	cppVar_18307 = (cppVar_18307 & cppMask_un_16_);
	BIT_VEC cppVar_18308 = ROM.rd(cppVar_18307);
	BIT_VEC cppVar_18309 = (cppVar_18308 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18310 = (cppVar_18309 << 3) | 0;
	cppVar_18310 = (cppVar_18310 & cppMask_un_8_);
	BIT_VEC cppVar_18311 = PC + 1;
	cppVar_18311 = (cppVar_18311 & cppMask_un_16_);
	BIT_VEC cppVar_18312 = ROM.rd(cppVar_18311);
	BIT_VEC cppVar_18313 = (cppVar_18312 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18314 = (cppVar_18313 & cppMask_un_5_);
	BIT_VEC cppVar_18315 = cppVar_18314 + 32;
	cppVar_18315 = (cppVar_18315 & cppMask_un_8_);
	BIT_VEC cppVar_18316 = (cppVar_18306) ? cppVar_18310 : cppVar_18315;
	bool cppVar_18318 = (cppVar_18316 == 176);
	BIT_VEC cppVar_18319 = PC + 1;
	cppVar_18319 = (cppVar_18319 & cppMask_un_16_);
	BIT_VEC cppVar_18320 = ROM.rd(cppVar_18319);
	BIT_VEC cppVar_18321 = (cppVar_18320 >> 7) & cppMask_un_1_;
	bool cppVar_18322 = (cppVar_18321 == 1);
	BIT_VEC cppVar_18323 = PC + 1;
	cppVar_18323 = (cppVar_18323 & cppMask_un_16_);
	BIT_VEC cppVar_18324 = ROM.rd(cppVar_18323);
	BIT_VEC cppVar_18325 = (cppVar_18324 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18326 = (cppVar_18325 << 3) | 0;
	cppVar_18326 = (cppVar_18326 & cppMask_un_8_);
	BIT_VEC cppVar_18327 = PC + 1;
	cppVar_18327 = (cppVar_18327 & cppMask_un_16_);
	BIT_VEC cppVar_18328 = ROM.rd(cppVar_18327);
	BIT_VEC cppVar_18329 = (cppVar_18328 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18330 = (cppVar_18329 & cppMask_un_5_);
	BIT_VEC cppVar_18331 = cppVar_18330 + 32;
	cppVar_18331 = (cppVar_18331 & cppMask_un_8_);
	BIT_VEC cppVar_18332 = (cppVar_18322) ? cppVar_18326 : cppVar_18331;
	bool cppVar_18334 = (cppVar_18332 == 184);
	BIT_VEC cppVar_18335 = PC + 1;
	cppVar_18335 = (cppVar_18335 & cppMask_un_16_);
	BIT_VEC cppVar_18336 = ROM.rd(cppVar_18335);
	BIT_VEC cppVar_18337 = (cppVar_18336 >> 7) & cppMask_un_1_;
	bool cppVar_18338 = (cppVar_18337 == 1);
	BIT_VEC cppVar_18339 = PC + 1;
	cppVar_18339 = (cppVar_18339 & cppMask_un_16_);
	BIT_VEC cppVar_18340 = ROM.rd(cppVar_18339);
	BIT_VEC cppVar_18341 = (cppVar_18340 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18342 = (cppVar_18341 << 3) | 0;
	cppVar_18342 = (cppVar_18342 & cppMask_un_8_);
	BIT_VEC cppVar_18343 = PC + 1;
	cppVar_18343 = (cppVar_18343 & cppMask_un_16_);
	BIT_VEC cppVar_18344 = ROM.rd(cppVar_18343);
	BIT_VEC cppVar_18345 = (cppVar_18344 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18346 = (cppVar_18345 & cppMask_un_5_);
	BIT_VEC cppVar_18347 = cppVar_18346 + 32;
	cppVar_18347 = (cppVar_18347 & cppMask_un_8_);
	BIT_VEC cppVar_18348 = (cppVar_18338) ? cppVar_18342 : cppVar_18347;
	bool cppVar_18350 = (cppVar_18348 == 208);
	BIT_VEC cppVar_18351 = PC + 1;
	cppVar_18351 = (cppVar_18351 & cppMask_un_16_);
	BIT_VEC cppVar_18352 = ROM.rd(cppVar_18351);
	BIT_VEC cppVar_18353 = (cppVar_18352 >> 7) & cppMask_un_1_;
	bool cppVar_18354 = (cppVar_18353 == 1);
	BIT_VEC cppVar_18355 = PC + 1;
	cppVar_18355 = (cppVar_18355 & cppMask_un_16_);
	BIT_VEC cppVar_18356 = ROM.rd(cppVar_18355);
	BIT_VEC cppVar_18357 = (cppVar_18356 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18358 = (cppVar_18357 << 3) | 0;
	cppVar_18358 = (cppVar_18358 & cppMask_un_8_);
	BIT_VEC cppVar_18359 = PC + 1;
	cppVar_18359 = (cppVar_18359 & cppMask_un_16_);
	BIT_VEC cppVar_18360 = ROM.rd(cppVar_18359);
	BIT_VEC cppVar_18361 = (cppVar_18360 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18362 = (cppVar_18361 & cppMask_un_5_);
	BIT_VEC cppVar_18363 = cppVar_18362 + 32;
	cppVar_18363 = (cppVar_18363 & cppMask_un_8_);
	BIT_VEC cppVar_18364 = (cppVar_18354) ? cppVar_18358 : cppVar_18363;
	bool cppVar_18366 = (cppVar_18364 == 224);
	BIT_VEC cppVar_18367 = PC + 1;
	cppVar_18367 = (cppVar_18367 & cppMask_un_16_);
	BIT_VEC cppVar_18368 = ROM.rd(cppVar_18367);
	BIT_VEC cppVar_18369 = (cppVar_18368 >> 7) & cppMask_un_1_;
	bool cppVar_18370 = (cppVar_18369 == 1);
	BIT_VEC cppVar_18371 = PC + 1;
	cppVar_18371 = (cppVar_18371 & cppMask_un_16_);
	BIT_VEC cppVar_18372 = ROM.rd(cppVar_18371);
	BIT_VEC cppVar_18373 = (cppVar_18372 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18374 = (cppVar_18373 << 3) | 0;
	cppVar_18374 = (cppVar_18374 & cppMask_un_8_);
	BIT_VEC cppVar_18375 = PC + 1;
	cppVar_18375 = (cppVar_18375 & cppMask_un_16_);
	BIT_VEC cppVar_18376 = ROM.rd(cppVar_18375);
	BIT_VEC cppVar_18377 = (cppVar_18376 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18378 = (cppVar_18377 & cppMask_un_5_);
	BIT_VEC cppVar_18379 = cppVar_18378 + 32;
	cppVar_18379 = (cppVar_18379 & cppMask_un_8_);
	BIT_VEC cppVar_18380 = (cppVar_18370) ? cppVar_18374 : cppVar_18379;
	bool cppVar_18382 = (cppVar_18380 == 240);
	BIT_VEC cppVar_18384 = (cppVar_18382) ? B : 0;
	BIT_VEC cppVar_18385 = (cppVar_18366) ? ACC : cppVar_18384;
	BIT_VEC cppVar_18386 = (cppVar_18350) ? PSW : cppVar_18385;
	BIT_VEC cppVar_18387 = (cppVar_18334) ? IP : cppVar_18386;
	BIT_VEC cppVar_18388 = (cppVar_18318) ? P3 : cppVar_18387;
	BIT_VEC cppVar_18389 = (cppVar_18302) ? IE : cppVar_18388;
	BIT_VEC cppVar_18390 = (cppVar_18286) ? P2 : cppVar_18389;
	BIT_VEC cppVar_18391 = (cppVar_18270) ? SBUF : cppVar_18390;
	BIT_VEC cppVar_18392 = (cppVar_18254) ? SCON : cppVar_18391;
	BIT_VEC cppVar_18393 = (cppVar_18238) ? P1 : cppVar_18392;
	BIT_VEC cppVar_18394 = (cppVar_18222) ? TH1 : cppVar_18393;
	BIT_VEC cppVar_18395 = (cppVar_18206) ? TL1 : cppVar_18394;
	BIT_VEC cppVar_18396 = (cppVar_18190) ? TH0 : cppVar_18395;
	BIT_VEC cppVar_18397 = (cppVar_18174) ? TL0 : cppVar_18396;
	BIT_VEC cppVar_18398 = (cppVar_18158) ? TMOD : cppVar_18397;
	BIT_VEC cppVar_18399 = (cppVar_18142) ? TCON : cppVar_18398;
	BIT_VEC cppVar_18400 = (cppVar_18126) ? PCON : cppVar_18399;
	BIT_VEC cppVar_18401 = (cppVar_18110) ? DPH : cppVar_18400;
	BIT_VEC cppVar_18402 = (cppVar_18094) ? DPL : cppVar_18401;
	BIT_VEC cppVar_18403 = (cppVar_18078) ? SP : cppVar_18402;
	BIT_VEC cppVar_18404 = (cppVar_18062) ? P0 : cppVar_18403;
	BIT_VEC cppVar_18405 = (cppVar_18031) ? cppVar_18046 : cppVar_18404;
	BIT_VEC cppVar_18406 = cppVar_18014 & cppVar_18405;
	BIT_VEC cppVar_18408 = 1;
	BIT_VEC cppVar_18409 = PC + 1;
	cppVar_18409 = (cppVar_18409 & cppMask_un_16_);
	BIT_VEC cppVar_18410 = ROM.rd(cppVar_18409);
	BIT_VEC cppVar_18411 = (cppVar_18410 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_18412 = (cppVar_18411 & cppMask_un_3_);
	BIT_VEC cppVar_18413 = cppVar_18408 << static_cast<unsigned>(cppVar_18412);
	cppVar_18413 = (cppVar_18413 & cppMask_un_8_);
	BIT_VEC cppVar_18414 = cppVar_18406 | cppVar_18413;
	BIT_VEC cppVar_18415 = (cppVar_18007) ? cppVar_18414 : IP;
	BIT_VEC cppVar_18416 = ROM.rd(PC);
	bool cppVar_18418 = (cppVar_18416 == 208);
	BIT_VEC cppVar_18420 = PC + 1;
	cppVar_18420 = (cppVar_18420 & cppMask_un_16_);
	BIT_VEC cppVar_18421 = ROM.rd(cppVar_18420);
	bool cppVar_18423 = (cppVar_18421 == 184);
	BIT_VEC cppVar_18424 = IRAM.rd(SP);
	BIT_VEC cppVar_18425 = (cppVar_18423) ? cppVar_18424 : IP;
	BIT_VEC cppVar_18426 = ROM.rd(PC);
	bool cppVar_18428 = (cppVar_18426 == 245);
	BIT_VEC cppVar_18429 = ROM.rd(PC);
	bool cppVar_18431 = (cppVar_18429 == 197);
	bool cppVar_18432 = cppVar_18428 || cppVar_18431;
	BIT_VEC cppVar_18434 = PC + 1;
	cppVar_18434 = (cppVar_18434 & cppMask_un_16_);
	BIT_VEC cppVar_18435 = ROM.rd(cppVar_18434);
	bool cppVar_18437 = (cppVar_18435 == 184);
	BIT_VEC cppVar_18438 = (cppVar_18437) ? ACC : IP;
	BIT_VEC cppVar_18439 = ROM.rd(PC);
	bool cppVar_18441 = (cppVar_18439 == 178);
	BIT_VEC cppVar_18443 = PC + 1;
	cppVar_18443 = (cppVar_18443 & cppMask_un_16_);
	BIT_VEC cppVar_18444 = ROM.rd(cppVar_18443);
	BIT_VEC cppVar_18445 = (cppVar_18444 >> 7) & cppMask_un_1_;
	bool cppVar_18447 = (cppVar_18445 == 1);
	BIT_VEC cppVar_18448 = PC + 1;
	cppVar_18448 = (cppVar_18448 & cppMask_un_16_);
	BIT_VEC cppVar_18449 = ROM.rd(cppVar_18448);
	BIT_VEC cppVar_18450 = (cppVar_18449 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18452 = (cppVar_18450 << 3) | 0;
	cppVar_18452 = (cppVar_18452 & cppMask_un_8_);
	BIT_VEC cppVar_18453 = PC + 1;
	cppVar_18453 = (cppVar_18453 & cppMask_un_16_);
	BIT_VEC cppVar_18454 = ROM.rd(cppVar_18453);
	BIT_VEC cppVar_18455 = (cppVar_18454 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18456 = (cppVar_18455 & cppMask_un_5_);
	BIT_VEC cppVar_18458 = cppVar_18456 + 32;
	cppVar_18458 = (cppVar_18458 & cppMask_un_8_);
	BIT_VEC cppVar_18459 = (cppVar_18447) ? cppVar_18452 : cppVar_18458;
	bool cppVar_18461 = (cppVar_18459 == 184);
	BIT_VEC cppVar_18463 = PC + 1;
	cppVar_18463 = (cppVar_18463 & cppMask_un_16_);
	BIT_VEC cppVar_18464 = ROM.rd(cppVar_18463);
	BIT_VEC cppVar_18465 = (cppVar_18464 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_18466 = (cppVar_18465 & cppMask_un_3_);
	BIT_VEC cppVar_18467 = 1 << static_cast<unsigned>(cppVar_18466);
	cppVar_18467 = (cppVar_18467 & cppMask_un_8_);
	BIT_VEC cppVar_18468 = ~cppVar_18467;
	BIT_VEC cppVar_18469 = PC + 1;
	cppVar_18469 = (cppVar_18469 & cppMask_un_16_);
	BIT_VEC cppVar_18470 = ROM.rd(cppVar_18469);
	BIT_VEC cppVar_18471 = (cppVar_18470 >> 7) & cppMask_un_1_;
	bool cppVar_18472 = (cppVar_18471 == 1);
	BIT_VEC cppVar_18473 = PC + 1;
	cppVar_18473 = (cppVar_18473 & cppMask_un_16_);
	BIT_VEC cppVar_18474 = ROM.rd(cppVar_18473);
	BIT_VEC cppVar_18475 = (cppVar_18474 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18476 = (cppVar_18475 << 3) | 0;
	cppVar_18476 = (cppVar_18476 & cppMask_un_8_);
	BIT_VEC cppVar_18477 = PC + 1;
	cppVar_18477 = (cppVar_18477 & cppMask_un_16_);
	BIT_VEC cppVar_18478 = ROM.rd(cppVar_18477);
	BIT_VEC cppVar_18479 = (cppVar_18478 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18480 = (cppVar_18479 & cppMask_un_5_);
	BIT_VEC cppVar_18481 = cppVar_18480 + 32;
	cppVar_18481 = (cppVar_18481 & cppMask_un_8_);
	BIT_VEC cppVar_18482 = (cppVar_18472) ? cppVar_18476 : cppVar_18481;
	BIT_VEC cppVar_18483 = (cppVar_18482 >> 7) & cppMask_un_1_;
	bool cppVar_18485 = (cppVar_18483 == 0);
	BIT_VEC cppVar_18486 = PC + 1;
	cppVar_18486 = (cppVar_18486 & cppMask_un_16_);
	BIT_VEC cppVar_18487 = ROM.rd(cppVar_18486);
	BIT_VEC cppVar_18488 = (cppVar_18487 >> 7) & cppMask_un_1_;
	bool cppVar_18489 = (cppVar_18488 == 1);
	BIT_VEC cppVar_18490 = PC + 1;
	cppVar_18490 = (cppVar_18490 & cppMask_un_16_);
	BIT_VEC cppVar_18491 = ROM.rd(cppVar_18490);
	BIT_VEC cppVar_18492 = (cppVar_18491 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18493 = (cppVar_18492 << 3) | 0;
	cppVar_18493 = (cppVar_18493 & cppMask_un_8_);
	BIT_VEC cppVar_18494 = PC + 1;
	cppVar_18494 = (cppVar_18494 & cppMask_un_16_);
	BIT_VEC cppVar_18495 = ROM.rd(cppVar_18494);
	BIT_VEC cppVar_18496 = (cppVar_18495 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18497 = (cppVar_18496 & cppMask_un_5_);
	BIT_VEC cppVar_18498 = cppVar_18497 + 32;
	cppVar_18498 = (cppVar_18498 & cppMask_un_8_);
	BIT_VEC cppVar_18499 = (cppVar_18489) ? cppVar_18493 : cppVar_18498;
	BIT_VEC cppVar_18500 = IRAM.rd(cppVar_18499);
	BIT_VEC cppVar_18501 = PC + 1;
	cppVar_18501 = (cppVar_18501 & cppMask_un_16_);
	BIT_VEC cppVar_18502 = ROM.rd(cppVar_18501);
	BIT_VEC cppVar_18503 = (cppVar_18502 >> 7) & cppMask_un_1_;
	bool cppVar_18504 = (cppVar_18503 == 1);
	BIT_VEC cppVar_18505 = PC + 1;
	cppVar_18505 = (cppVar_18505 & cppMask_un_16_);
	BIT_VEC cppVar_18506 = ROM.rd(cppVar_18505);
	BIT_VEC cppVar_18507 = (cppVar_18506 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18508 = (cppVar_18507 << 3) | 0;
	cppVar_18508 = (cppVar_18508 & cppMask_un_8_);
	BIT_VEC cppVar_18509 = PC + 1;
	cppVar_18509 = (cppVar_18509 & cppMask_un_16_);
	BIT_VEC cppVar_18510 = ROM.rd(cppVar_18509);
	BIT_VEC cppVar_18511 = (cppVar_18510 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18512 = (cppVar_18511 & cppMask_un_5_);
	BIT_VEC cppVar_18513 = cppVar_18512 + 32;
	cppVar_18513 = (cppVar_18513 & cppMask_un_8_);
	BIT_VEC cppVar_18514 = (cppVar_18504) ? cppVar_18508 : cppVar_18513;
	bool cppVar_18516 = (cppVar_18514 == 128);
	BIT_VEC cppVar_18517 = PC + 1;
	cppVar_18517 = (cppVar_18517 & cppMask_un_16_);
	BIT_VEC cppVar_18518 = ROM.rd(cppVar_18517);
	BIT_VEC cppVar_18519 = (cppVar_18518 >> 7) & cppMask_un_1_;
	bool cppVar_18520 = (cppVar_18519 == 1);
	BIT_VEC cppVar_18521 = PC + 1;
	cppVar_18521 = (cppVar_18521 & cppMask_un_16_);
	BIT_VEC cppVar_18522 = ROM.rd(cppVar_18521);
	BIT_VEC cppVar_18523 = (cppVar_18522 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18524 = (cppVar_18523 << 3) | 0;
	cppVar_18524 = (cppVar_18524 & cppMask_un_8_);
	BIT_VEC cppVar_18525 = PC + 1;
	cppVar_18525 = (cppVar_18525 & cppMask_un_16_);
	BIT_VEC cppVar_18526 = ROM.rd(cppVar_18525);
	BIT_VEC cppVar_18527 = (cppVar_18526 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18528 = (cppVar_18527 & cppMask_un_5_);
	BIT_VEC cppVar_18529 = cppVar_18528 + 32;
	cppVar_18529 = (cppVar_18529 & cppMask_un_8_);
	BIT_VEC cppVar_18530 = (cppVar_18520) ? cppVar_18524 : cppVar_18529;
	bool cppVar_18532 = (cppVar_18530 == 129);
	BIT_VEC cppVar_18533 = PC + 1;
	cppVar_18533 = (cppVar_18533 & cppMask_un_16_);
	BIT_VEC cppVar_18534 = ROM.rd(cppVar_18533);
	BIT_VEC cppVar_18535 = (cppVar_18534 >> 7) & cppMask_un_1_;
	bool cppVar_18536 = (cppVar_18535 == 1);
	BIT_VEC cppVar_18537 = PC + 1;
	cppVar_18537 = (cppVar_18537 & cppMask_un_16_);
	BIT_VEC cppVar_18538 = ROM.rd(cppVar_18537);
	BIT_VEC cppVar_18539 = (cppVar_18538 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18540 = (cppVar_18539 << 3) | 0;
	cppVar_18540 = (cppVar_18540 & cppMask_un_8_);
	BIT_VEC cppVar_18541 = PC + 1;
	cppVar_18541 = (cppVar_18541 & cppMask_un_16_);
	BIT_VEC cppVar_18542 = ROM.rd(cppVar_18541);
	BIT_VEC cppVar_18543 = (cppVar_18542 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18544 = (cppVar_18543 & cppMask_un_5_);
	BIT_VEC cppVar_18545 = cppVar_18544 + 32;
	cppVar_18545 = (cppVar_18545 & cppMask_un_8_);
	BIT_VEC cppVar_18546 = (cppVar_18536) ? cppVar_18540 : cppVar_18545;
	bool cppVar_18548 = (cppVar_18546 == 130);
	BIT_VEC cppVar_18549 = PC + 1;
	cppVar_18549 = (cppVar_18549 & cppMask_un_16_);
	BIT_VEC cppVar_18550 = ROM.rd(cppVar_18549);
	BIT_VEC cppVar_18551 = (cppVar_18550 >> 7) & cppMask_un_1_;
	bool cppVar_18552 = (cppVar_18551 == 1);
	BIT_VEC cppVar_18553 = PC + 1;
	cppVar_18553 = (cppVar_18553 & cppMask_un_16_);
	BIT_VEC cppVar_18554 = ROM.rd(cppVar_18553);
	BIT_VEC cppVar_18555 = (cppVar_18554 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18556 = (cppVar_18555 << 3) | 0;
	cppVar_18556 = (cppVar_18556 & cppMask_un_8_);
	BIT_VEC cppVar_18557 = PC + 1;
	cppVar_18557 = (cppVar_18557 & cppMask_un_16_);
	BIT_VEC cppVar_18558 = ROM.rd(cppVar_18557);
	BIT_VEC cppVar_18559 = (cppVar_18558 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18560 = (cppVar_18559 & cppMask_un_5_);
	BIT_VEC cppVar_18561 = cppVar_18560 + 32;
	cppVar_18561 = (cppVar_18561 & cppMask_un_8_);
	BIT_VEC cppVar_18562 = (cppVar_18552) ? cppVar_18556 : cppVar_18561;
	bool cppVar_18564 = (cppVar_18562 == 131);
	BIT_VEC cppVar_18565 = PC + 1;
	cppVar_18565 = (cppVar_18565 & cppMask_un_16_);
	BIT_VEC cppVar_18566 = ROM.rd(cppVar_18565);
	BIT_VEC cppVar_18567 = (cppVar_18566 >> 7) & cppMask_un_1_;
	bool cppVar_18568 = (cppVar_18567 == 1);
	BIT_VEC cppVar_18569 = PC + 1;
	cppVar_18569 = (cppVar_18569 & cppMask_un_16_);
	BIT_VEC cppVar_18570 = ROM.rd(cppVar_18569);
	BIT_VEC cppVar_18571 = (cppVar_18570 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18572 = (cppVar_18571 << 3) | 0;
	cppVar_18572 = (cppVar_18572 & cppMask_un_8_);
	BIT_VEC cppVar_18573 = PC + 1;
	cppVar_18573 = (cppVar_18573 & cppMask_un_16_);
	BIT_VEC cppVar_18574 = ROM.rd(cppVar_18573);
	BIT_VEC cppVar_18575 = (cppVar_18574 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18576 = (cppVar_18575 & cppMask_un_5_);
	BIT_VEC cppVar_18577 = cppVar_18576 + 32;
	cppVar_18577 = (cppVar_18577 & cppMask_un_8_);
	BIT_VEC cppVar_18578 = (cppVar_18568) ? cppVar_18572 : cppVar_18577;
	bool cppVar_18580 = (cppVar_18578 == 135);
	BIT_VEC cppVar_18581 = PC + 1;
	cppVar_18581 = (cppVar_18581 & cppMask_un_16_);
	BIT_VEC cppVar_18582 = ROM.rd(cppVar_18581);
	BIT_VEC cppVar_18583 = (cppVar_18582 >> 7) & cppMask_un_1_;
	bool cppVar_18584 = (cppVar_18583 == 1);
	BIT_VEC cppVar_18585 = PC + 1;
	cppVar_18585 = (cppVar_18585 & cppMask_un_16_);
	BIT_VEC cppVar_18586 = ROM.rd(cppVar_18585);
	BIT_VEC cppVar_18587 = (cppVar_18586 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18588 = (cppVar_18587 << 3) | 0;
	cppVar_18588 = (cppVar_18588 & cppMask_un_8_);
	BIT_VEC cppVar_18589 = PC + 1;
	cppVar_18589 = (cppVar_18589 & cppMask_un_16_);
	BIT_VEC cppVar_18590 = ROM.rd(cppVar_18589);
	BIT_VEC cppVar_18591 = (cppVar_18590 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18592 = (cppVar_18591 & cppMask_un_5_);
	BIT_VEC cppVar_18593 = cppVar_18592 + 32;
	cppVar_18593 = (cppVar_18593 & cppMask_un_8_);
	BIT_VEC cppVar_18594 = (cppVar_18584) ? cppVar_18588 : cppVar_18593;
	bool cppVar_18596 = (cppVar_18594 == 136);
	BIT_VEC cppVar_18597 = PC + 1;
	cppVar_18597 = (cppVar_18597 & cppMask_un_16_);
	BIT_VEC cppVar_18598 = ROM.rd(cppVar_18597);
	BIT_VEC cppVar_18599 = (cppVar_18598 >> 7) & cppMask_un_1_;
	bool cppVar_18600 = (cppVar_18599 == 1);
	BIT_VEC cppVar_18601 = PC + 1;
	cppVar_18601 = (cppVar_18601 & cppMask_un_16_);
	BIT_VEC cppVar_18602 = ROM.rd(cppVar_18601);
	BIT_VEC cppVar_18603 = (cppVar_18602 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18604 = (cppVar_18603 << 3) | 0;
	cppVar_18604 = (cppVar_18604 & cppMask_un_8_);
	BIT_VEC cppVar_18605 = PC + 1;
	cppVar_18605 = (cppVar_18605 & cppMask_un_16_);
	BIT_VEC cppVar_18606 = ROM.rd(cppVar_18605);
	BIT_VEC cppVar_18607 = (cppVar_18606 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18608 = (cppVar_18607 & cppMask_un_5_);
	BIT_VEC cppVar_18609 = cppVar_18608 + 32;
	cppVar_18609 = (cppVar_18609 & cppMask_un_8_);
	BIT_VEC cppVar_18610 = (cppVar_18600) ? cppVar_18604 : cppVar_18609;
	bool cppVar_18612 = (cppVar_18610 == 137);
	BIT_VEC cppVar_18613 = PC + 1;
	cppVar_18613 = (cppVar_18613 & cppMask_un_16_);
	BIT_VEC cppVar_18614 = ROM.rd(cppVar_18613);
	BIT_VEC cppVar_18615 = (cppVar_18614 >> 7) & cppMask_un_1_;
	bool cppVar_18616 = (cppVar_18615 == 1);
	BIT_VEC cppVar_18617 = PC + 1;
	cppVar_18617 = (cppVar_18617 & cppMask_un_16_);
	BIT_VEC cppVar_18618 = ROM.rd(cppVar_18617);
	BIT_VEC cppVar_18619 = (cppVar_18618 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18620 = (cppVar_18619 << 3) | 0;
	cppVar_18620 = (cppVar_18620 & cppMask_un_8_);
	BIT_VEC cppVar_18621 = PC + 1;
	cppVar_18621 = (cppVar_18621 & cppMask_un_16_);
	BIT_VEC cppVar_18622 = ROM.rd(cppVar_18621);
	BIT_VEC cppVar_18623 = (cppVar_18622 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18624 = (cppVar_18623 & cppMask_un_5_);
	BIT_VEC cppVar_18625 = cppVar_18624 + 32;
	cppVar_18625 = (cppVar_18625 & cppMask_un_8_);
	BIT_VEC cppVar_18626 = (cppVar_18616) ? cppVar_18620 : cppVar_18625;
	bool cppVar_18628 = (cppVar_18626 == 138);
	BIT_VEC cppVar_18629 = PC + 1;
	cppVar_18629 = (cppVar_18629 & cppMask_un_16_);
	BIT_VEC cppVar_18630 = ROM.rd(cppVar_18629);
	BIT_VEC cppVar_18631 = (cppVar_18630 >> 7) & cppMask_un_1_;
	bool cppVar_18632 = (cppVar_18631 == 1);
	BIT_VEC cppVar_18633 = PC + 1;
	cppVar_18633 = (cppVar_18633 & cppMask_un_16_);
	BIT_VEC cppVar_18634 = ROM.rd(cppVar_18633);
	BIT_VEC cppVar_18635 = (cppVar_18634 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18636 = (cppVar_18635 << 3) | 0;
	cppVar_18636 = (cppVar_18636 & cppMask_un_8_);
	BIT_VEC cppVar_18637 = PC + 1;
	cppVar_18637 = (cppVar_18637 & cppMask_un_16_);
	BIT_VEC cppVar_18638 = ROM.rd(cppVar_18637);
	BIT_VEC cppVar_18639 = (cppVar_18638 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18640 = (cppVar_18639 & cppMask_un_5_);
	BIT_VEC cppVar_18641 = cppVar_18640 + 32;
	cppVar_18641 = (cppVar_18641 & cppMask_un_8_);
	BIT_VEC cppVar_18642 = (cppVar_18632) ? cppVar_18636 : cppVar_18641;
	bool cppVar_18644 = (cppVar_18642 == 140);
	BIT_VEC cppVar_18645 = PC + 1;
	cppVar_18645 = (cppVar_18645 & cppMask_un_16_);
	BIT_VEC cppVar_18646 = ROM.rd(cppVar_18645);
	BIT_VEC cppVar_18647 = (cppVar_18646 >> 7) & cppMask_un_1_;
	bool cppVar_18648 = (cppVar_18647 == 1);
	BIT_VEC cppVar_18649 = PC + 1;
	cppVar_18649 = (cppVar_18649 & cppMask_un_16_);
	BIT_VEC cppVar_18650 = ROM.rd(cppVar_18649);
	BIT_VEC cppVar_18651 = (cppVar_18650 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18652 = (cppVar_18651 << 3) | 0;
	cppVar_18652 = (cppVar_18652 & cppMask_un_8_);
	BIT_VEC cppVar_18653 = PC + 1;
	cppVar_18653 = (cppVar_18653 & cppMask_un_16_);
	BIT_VEC cppVar_18654 = ROM.rd(cppVar_18653);
	BIT_VEC cppVar_18655 = (cppVar_18654 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18656 = (cppVar_18655 & cppMask_un_5_);
	BIT_VEC cppVar_18657 = cppVar_18656 + 32;
	cppVar_18657 = (cppVar_18657 & cppMask_un_8_);
	BIT_VEC cppVar_18658 = (cppVar_18648) ? cppVar_18652 : cppVar_18657;
	bool cppVar_18660 = (cppVar_18658 == 139);
	BIT_VEC cppVar_18661 = PC + 1;
	cppVar_18661 = (cppVar_18661 & cppMask_un_16_);
	BIT_VEC cppVar_18662 = ROM.rd(cppVar_18661);
	BIT_VEC cppVar_18663 = (cppVar_18662 >> 7) & cppMask_un_1_;
	bool cppVar_18664 = (cppVar_18663 == 1);
	BIT_VEC cppVar_18665 = PC + 1;
	cppVar_18665 = (cppVar_18665 & cppMask_un_16_);
	BIT_VEC cppVar_18666 = ROM.rd(cppVar_18665);
	BIT_VEC cppVar_18667 = (cppVar_18666 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18668 = (cppVar_18667 << 3) | 0;
	cppVar_18668 = (cppVar_18668 & cppMask_un_8_);
	BIT_VEC cppVar_18669 = PC + 1;
	cppVar_18669 = (cppVar_18669 & cppMask_un_16_);
	BIT_VEC cppVar_18670 = ROM.rd(cppVar_18669);
	BIT_VEC cppVar_18671 = (cppVar_18670 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18672 = (cppVar_18671 & cppMask_un_5_);
	BIT_VEC cppVar_18673 = cppVar_18672 + 32;
	cppVar_18673 = (cppVar_18673 & cppMask_un_8_);
	BIT_VEC cppVar_18674 = (cppVar_18664) ? cppVar_18668 : cppVar_18673;
	bool cppVar_18676 = (cppVar_18674 == 141);
	BIT_VEC cppVar_18677 = PC + 1;
	cppVar_18677 = (cppVar_18677 & cppMask_un_16_);
	BIT_VEC cppVar_18678 = ROM.rd(cppVar_18677);
	BIT_VEC cppVar_18679 = (cppVar_18678 >> 7) & cppMask_un_1_;
	bool cppVar_18680 = (cppVar_18679 == 1);
	BIT_VEC cppVar_18681 = PC + 1;
	cppVar_18681 = (cppVar_18681 & cppMask_un_16_);
	BIT_VEC cppVar_18682 = ROM.rd(cppVar_18681);
	BIT_VEC cppVar_18683 = (cppVar_18682 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18684 = (cppVar_18683 << 3) | 0;
	cppVar_18684 = (cppVar_18684 & cppMask_un_8_);
	BIT_VEC cppVar_18685 = PC + 1;
	cppVar_18685 = (cppVar_18685 & cppMask_un_16_);
	BIT_VEC cppVar_18686 = ROM.rd(cppVar_18685);
	BIT_VEC cppVar_18687 = (cppVar_18686 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18688 = (cppVar_18687 & cppMask_un_5_);
	BIT_VEC cppVar_18689 = cppVar_18688 + 32;
	cppVar_18689 = (cppVar_18689 & cppMask_un_8_);
	BIT_VEC cppVar_18690 = (cppVar_18680) ? cppVar_18684 : cppVar_18689;
	bool cppVar_18692 = (cppVar_18690 == 144);
	BIT_VEC cppVar_18693 = PC + 1;
	cppVar_18693 = (cppVar_18693 & cppMask_un_16_);
	BIT_VEC cppVar_18694 = ROM.rd(cppVar_18693);
	BIT_VEC cppVar_18695 = (cppVar_18694 >> 7) & cppMask_un_1_;
	bool cppVar_18696 = (cppVar_18695 == 1);
	BIT_VEC cppVar_18697 = PC + 1;
	cppVar_18697 = (cppVar_18697 & cppMask_un_16_);
	BIT_VEC cppVar_18698 = ROM.rd(cppVar_18697);
	BIT_VEC cppVar_18699 = (cppVar_18698 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18700 = (cppVar_18699 << 3) | 0;
	cppVar_18700 = (cppVar_18700 & cppMask_un_8_);
	BIT_VEC cppVar_18701 = PC + 1;
	cppVar_18701 = (cppVar_18701 & cppMask_un_16_);
	BIT_VEC cppVar_18702 = ROM.rd(cppVar_18701);
	BIT_VEC cppVar_18703 = (cppVar_18702 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18704 = (cppVar_18703 & cppMask_un_5_);
	BIT_VEC cppVar_18705 = cppVar_18704 + 32;
	cppVar_18705 = (cppVar_18705 & cppMask_un_8_);
	BIT_VEC cppVar_18706 = (cppVar_18696) ? cppVar_18700 : cppVar_18705;
	bool cppVar_18708 = (cppVar_18706 == 152);
	BIT_VEC cppVar_18709 = PC + 1;
	cppVar_18709 = (cppVar_18709 & cppMask_un_16_);
	BIT_VEC cppVar_18710 = ROM.rd(cppVar_18709);
	BIT_VEC cppVar_18711 = (cppVar_18710 >> 7) & cppMask_un_1_;
	bool cppVar_18712 = (cppVar_18711 == 1);
	BIT_VEC cppVar_18713 = PC + 1;
	cppVar_18713 = (cppVar_18713 & cppMask_un_16_);
	BIT_VEC cppVar_18714 = ROM.rd(cppVar_18713);
	BIT_VEC cppVar_18715 = (cppVar_18714 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18716 = (cppVar_18715 << 3) | 0;
	cppVar_18716 = (cppVar_18716 & cppMask_un_8_);
	BIT_VEC cppVar_18717 = PC + 1;
	cppVar_18717 = (cppVar_18717 & cppMask_un_16_);
	BIT_VEC cppVar_18718 = ROM.rd(cppVar_18717);
	BIT_VEC cppVar_18719 = (cppVar_18718 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18720 = (cppVar_18719 & cppMask_un_5_);
	BIT_VEC cppVar_18721 = cppVar_18720 + 32;
	cppVar_18721 = (cppVar_18721 & cppMask_un_8_);
	BIT_VEC cppVar_18722 = (cppVar_18712) ? cppVar_18716 : cppVar_18721;
	bool cppVar_18724 = (cppVar_18722 == 153);
	BIT_VEC cppVar_18725 = PC + 1;
	cppVar_18725 = (cppVar_18725 & cppMask_un_16_);
	BIT_VEC cppVar_18726 = ROM.rd(cppVar_18725);
	BIT_VEC cppVar_18727 = (cppVar_18726 >> 7) & cppMask_un_1_;
	bool cppVar_18728 = (cppVar_18727 == 1);
	BIT_VEC cppVar_18729 = PC + 1;
	cppVar_18729 = (cppVar_18729 & cppMask_un_16_);
	BIT_VEC cppVar_18730 = ROM.rd(cppVar_18729);
	BIT_VEC cppVar_18731 = (cppVar_18730 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18732 = (cppVar_18731 << 3) | 0;
	cppVar_18732 = (cppVar_18732 & cppMask_un_8_);
	BIT_VEC cppVar_18733 = PC + 1;
	cppVar_18733 = (cppVar_18733 & cppMask_un_16_);
	BIT_VEC cppVar_18734 = ROM.rd(cppVar_18733);
	BIT_VEC cppVar_18735 = (cppVar_18734 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18736 = (cppVar_18735 & cppMask_un_5_);
	BIT_VEC cppVar_18737 = cppVar_18736 + 32;
	cppVar_18737 = (cppVar_18737 & cppMask_un_8_);
	BIT_VEC cppVar_18738 = (cppVar_18728) ? cppVar_18732 : cppVar_18737;
	bool cppVar_18740 = (cppVar_18738 == 160);
	BIT_VEC cppVar_18741 = PC + 1;
	cppVar_18741 = (cppVar_18741 & cppMask_un_16_);
	BIT_VEC cppVar_18742 = ROM.rd(cppVar_18741);
	BIT_VEC cppVar_18743 = (cppVar_18742 >> 7) & cppMask_un_1_;
	bool cppVar_18744 = (cppVar_18743 == 1);
	BIT_VEC cppVar_18745 = PC + 1;
	cppVar_18745 = (cppVar_18745 & cppMask_un_16_);
	BIT_VEC cppVar_18746 = ROM.rd(cppVar_18745);
	BIT_VEC cppVar_18747 = (cppVar_18746 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18748 = (cppVar_18747 << 3) | 0;
	cppVar_18748 = (cppVar_18748 & cppMask_un_8_);
	BIT_VEC cppVar_18749 = PC + 1;
	cppVar_18749 = (cppVar_18749 & cppMask_un_16_);
	BIT_VEC cppVar_18750 = ROM.rd(cppVar_18749);
	BIT_VEC cppVar_18751 = (cppVar_18750 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18752 = (cppVar_18751 & cppMask_un_5_);
	BIT_VEC cppVar_18753 = cppVar_18752 + 32;
	cppVar_18753 = (cppVar_18753 & cppMask_un_8_);
	BIT_VEC cppVar_18754 = (cppVar_18744) ? cppVar_18748 : cppVar_18753;
	bool cppVar_18756 = (cppVar_18754 == 168);
	BIT_VEC cppVar_18757 = PC + 1;
	cppVar_18757 = (cppVar_18757 & cppMask_un_16_);
	BIT_VEC cppVar_18758 = ROM.rd(cppVar_18757);
	BIT_VEC cppVar_18759 = (cppVar_18758 >> 7) & cppMask_un_1_;
	bool cppVar_18760 = (cppVar_18759 == 1);
	BIT_VEC cppVar_18761 = PC + 1;
	cppVar_18761 = (cppVar_18761 & cppMask_un_16_);
	BIT_VEC cppVar_18762 = ROM.rd(cppVar_18761);
	BIT_VEC cppVar_18763 = (cppVar_18762 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18764 = (cppVar_18763 << 3) | 0;
	cppVar_18764 = (cppVar_18764 & cppMask_un_8_);
	BIT_VEC cppVar_18765 = PC + 1;
	cppVar_18765 = (cppVar_18765 & cppMask_un_16_);
	BIT_VEC cppVar_18766 = ROM.rd(cppVar_18765);
	BIT_VEC cppVar_18767 = (cppVar_18766 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18768 = (cppVar_18767 & cppMask_un_5_);
	BIT_VEC cppVar_18769 = cppVar_18768 + 32;
	cppVar_18769 = (cppVar_18769 & cppMask_un_8_);
	BIT_VEC cppVar_18770 = (cppVar_18760) ? cppVar_18764 : cppVar_18769;
	bool cppVar_18772 = (cppVar_18770 == 176);
	BIT_VEC cppVar_18773 = PC + 1;
	cppVar_18773 = (cppVar_18773 & cppMask_un_16_);
	BIT_VEC cppVar_18774 = ROM.rd(cppVar_18773);
	BIT_VEC cppVar_18775 = (cppVar_18774 >> 7) & cppMask_un_1_;
	bool cppVar_18776 = (cppVar_18775 == 1);
	BIT_VEC cppVar_18777 = PC + 1;
	cppVar_18777 = (cppVar_18777 & cppMask_un_16_);
	BIT_VEC cppVar_18778 = ROM.rd(cppVar_18777);
	BIT_VEC cppVar_18779 = (cppVar_18778 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18780 = (cppVar_18779 << 3) | 0;
	cppVar_18780 = (cppVar_18780 & cppMask_un_8_);
	BIT_VEC cppVar_18781 = PC + 1;
	cppVar_18781 = (cppVar_18781 & cppMask_un_16_);
	BIT_VEC cppVar_18782 = ROM.rd(cppVar_18781);
	BIT_VEC cppVar_18783 = (cppVar_18782 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18784 = (cppVar_18783 & cppMask_un_5_);
	BIT_VEC cppVar_18785 = cppVar_18784 + 32;
	cppVar_18785 = (cppVar_18785 & cppMask_un_8_);
	BIT_VEC cppVar_18786 = (cppVar_18776) ? cppVar_18780 : cppVar_18785;
	bool cppVar_18788 = (cppVar_18786 == 184);
	BIT_VEC cppVar_18789 = PC + 1;
	cppVar_18789 = (cppVar_18789 & cppMask_un_16_);
	BIT_VEC cppVar_18790 = ROM.rd(cppVar_18789);
	BIT_VEC cppVar_18791 = (cppVar_18790 >> 7) & cppMask_un_1_;
	bool cppVar_18792 = (cppVar_18791 == 1);
	BIT_VEC cppVar_18793 = PC + 1;
	cppVar_18793 = (cppVar_18793 & cppMask_un_16_);
	BIT_VEC cppVar_18794 = ROM.rd(cppVar_18793);
	BIT_VEC cppVar_18795 = (cppVar_18794 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18796 = (cppVar_18795 << 3) | 0;
	cppVar_18796 = (cppVar_18796 & cppMask_un_8_);
	BIT_VEC cppVar_18797 = PC + 1;
	cppVar_18797 = (cppVar_18797 & cppMask_un_16_);
	BIT_VEC cppVar_18798 = ROM.rd(cppVar_18797);
	BIT_VEC cppVar_18799 = (cppVar_18798 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18800 = (cppVar_18799 & cppMask_un_5_);
	BIT_VEC cppVar_18801 = cppVar_18800 + 32;
	cppVar_18801 = (cppVar_18801 & cppMask_un_8_);
	BIT_VEC cppVar_18802 = (cppVar_18792) ? cppVar_18796 : cppVar_18801;
	bool cppVar_18804 = (cppVar_18802 == 208);
	BIT_VEC cppVar_18805 = PC + 1;
	cppVar_18805 = (cppVar_18805 & cppMask_un_16_);
	BIT_VEC cppVar_18806 = ROM.rd(cppVar_18805);
	BIT_VEC cppVar_18807 = (cppVar_18806 >> 7) & cppMask_un_1_;
	bool cppVar_18808 = (cppVar_18807 == 1);
	BIT_VEC cppVar_18809 = PC + 1;
	cppVar_18809 = (cppVar_18809 & cppMask_un_16_);
	BIT_VEC cppVar_18810 = ROM.rd(cppVar_18809);
	BIT_VEC cppVar_18811 = (cppVar_18810 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18812 = (cppVar_18811 << 3) | 0;
	cppVar_18812 = (cppVar_18812 & cppMask_un_8_);
	BIT_VEC cppVar_18813 = PC + 1;
	cppVar_18813 = (cppVar_18813 & cppMask_un_16_);
	BIT_VEC cppVar_18814 = ROM.rd(cppVar_18813);
	BIT_VEC cppVar_18815 = (cppVar_18814 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18816 = (cppVar_18815 & cppMask_un_5_);
	BIT_VEC cppVar_18817 = cppVar_18816 + 32;
	cppVar_18817 = (cppVar_18817 & cppMask_un_8_);
	BIT_VEC cppVar_18818 = (cppVar_18808) ? cppVar_18812 : cppVar_18817;
	bool cppVar_18820 = (cppVar_18818 == 224);
	BIT_VEC cppVar_18821 = PC + 1;
	cppVar_18821 = (cppVar_18821 & cppMask_un_16_);
	BIT_VEC cppVar_18822 = ROM.rd(cppVar_18821);
	BIT_VEC cppVar_18823 = (cppVar_18822 >> 7) & cppMask_un_1_;
	bool cppVar_18824 = (cppVar_18823 == 1);
	BIT_VEC cppVar_18825 = PC + 1;
	cppVar_18825 = (cppVar_18825 & cppMask_un_16_);
	BIT_VEC cppVar_18826 = ROM.rd(cppVar_18825);
	BIT_VEC cppVar_18827 = (cppVar_18826 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18828 = (cppVar_18827 << 3) | 0;
	cppVar_18828 = (cppVar_18828 & cppMask_un_8_);
	BIT_VEC cppVar_18829 = PC + 1;
	cppVar_18829 = (cppVar_18829 & cppMask_un_16_);
	BIT_VEC cppVar_18830 = ROM.rd(cppVar_18829);
	BIT_VEC cppVar_18831 = (cppVar_18830 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18832 = (cppVar_18831 & cppMask_un_5_);
	BIT_VEC cppVar_18833 = cppVar_18832 + 32;
	cppVar_18833 = (cppVar_18833 & cppMask_un_8_);
	BIT_VEC cppVar_18834 = (cppVar_18824) ? cppVar_18828 : cppVar_18833;
	bool cppVar_18836 = (cppVar_18834 == 240);
	BIT_VEC cppVar_18838 = (cppVar_18836) ? B : 0;
	BIT_VEC cppVar_18839 = (cppVar_18820) ? ACC : cppVar_18838;
	BIT_VEC cppVar_18840 = (cppVar_18804) ? PSW : cppVar_18839;
	BIT_VEC cppVar_18841 = (cppVar_18788) ? IP : cppVar_18840;
	BIT_VEC cppVar_18842 = (cppVar_18772) ? P3 : cppVar_18841;
	BIT_VEC cppVar_18843 = (cppVar_18756) ? IE : cppVar_18842;
	BIT_VEC cppVar_18844 = (cppVar_18740) ? P2 : cppVar_18843;
	BIT_VEC cppVar_18845 = (cppVar_18724) ? SBUF : cppVar_18844;
	BIT_VEC cppVar_18846 = (cppVar_18708) ? SCON : cppVar_18845;
	BIT_VEC cppVar_18847 = (cppVar_18692) ? P1 : cppVar_18846;
	BIT_VEC cppVar_18848 = (cppVar_18676) ? TH1 : cppVar_18847;
	BIT_VEC cppVar_18849 = (cppVar_18660) ? TL1 : cppVar_18848;
	BIT_VEC cppVar_18850 = (cppVar_18644) ? TH0 : cppVar_18849;
	BIT_VEC cppVar_18851 = (cppVar_18628) ? TL0 : cppVar_18850;
	BIT_VEC cppVar_18852 = (cppVar_18612) ? TMOD : cppVar_18851;
	BIT_VEC cppVar_18853 = (cppVar_18596) ? TCON : cppVar_18852;
	BIT_VEC cppVar_18854 = (cppVar_18580) ? PCON : cppVar_18853;
	BIT_VEC cppVar_18855 = (cppVar_18564) ? DPH : cppVar_18854;
	BIT_VEC cppVar_18856 = (cppVar_18548) ? DPL : cppVar_18855;
	BIT_VEC cppVar_18857 = (cppVar_18532) ? SP : cppVar_18856;
	BIT_VEC cppVar_18858 = (cppVar_18516) ? P0 : cppVar_18857;
	BIT_VEC cppVar_18859 = (cppVar_18485) ? cppVar_18500 : cppVar_18858;
	BIT_VEC cppVar_18860 = cppVar_18468 & cppVar_18859;
	BIT_VEC cppVar_18861 = PC + 1;
	cppVar_18861 = (cppVar_18861 & cppMask_un_16_);
	BIT_VEC cppVar_18862 = ROM.rd(cppVar_18861);
	BIT_VEC cppVar_18863 = (cppVar_18862 >> 7) & cppMask_un_1_;
	bool cppVar_18865 = (cppVar_18863 == 1);
	BIT_VEC cppVar_18866 = PC + 1;
	cppVar_18866 = (cppVar_18866 & cppMask_un_16_);
	BIT_VEC cppVar_18867 = ROM.rd(cppVar_18866);
	BIT_VEC cppVar_18868 = (cppVar_18867 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18870 = (cppVar_18868 << 3) | 0;
	cppVar_18870 = (cppVar_18870 & cppMask_un_8_);
	BIT_VEC cppVar_18871 = PC + 1;
	cppVar_18871 = (cppVar_18871 & cppMask_un_16_);
	BIT_VEC cppVar_18872 = ROM.rd(cppVar_18871);
	BIT_VEC cppVar_18873 = (cppVar_18872 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18874 = (cppVar_18873 & cppMask_un_5_);
	BIT_VEC cppVar_18876 = cppVar_18874 + 32;
	cppVar_18876 = (cppVar_18876 & cppMask_un_8_);
	BIT_VEC cppVar_18877 = (cppVar_18865) ? cppVar_18870 : cppVar_18876;
	BIT_VEC cppVar_18878 = (cppVar_18877 >> 7) & cppMask_un_1_;
	bool cppVar_18880 = (cppVar_18878 == 0);
	BIT_VEC cppVar_18881 = PC + 1;
	cppVar_18881 = (cppVar_18881 & cppMask_un_16_);
	BIT_VEC cppVar_18882 = ROM.rd(cppVar_18881);
	BIT_VEC cppVar_18883 = (cppVar_18882 >> 7) & cppMask_un_1_;
	bool cppVar_18884 = (cppVar_18883 == 1);
	BIT_VEC cppVar_18885 = PC + 1;
	cppVar_18885 = (cppVar_18885 & cppMask_un_16_);
	BIT_VEC cppVar_18886 = ROM.rd(cppVar_18885);
	BIT_VEC cppVar_18887 = (cppVar_18886 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18888 = (cppVar_18887 << 3) | 0;
	cppVar_18888 = (cppVar_18888 & cppMask_un_8_);
	BIT_VEC cppVar_18889 = PC + 1;
	cppVar_18889 = (cppVar_18889 & cppMask_un_16_);
	BIT_VEC cppVar_18890 = ROM.rd(cppVar_18889);
	BIT_VEC cppVar_18891 = (cppVar_18890 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18892 = (cppVar_18891 & cppMask_un_5_);
	BIT_VEC cppVar_18893 = cppVar_18892 + 32;
	cppVar_18893 = (cppVar_18893 & cppMask_un_8_);
	BIT_VEC cppVar_18894 = (cppVar_18884) ? cppVar_18888 : cppVar_18893;
	BIT_VEC cppVar_18895 = IRAM.rd(cppVar_18894);
	BIT_VEC cppVar_18896 = PC + 1;
	cppVar_18896 = (cppVar_18896 & cppMask_un_16_);
	BIT_VEC cppVar_18897 = ROM.rd(cppVar_18896);
	BIT_VEC cppVar_18898 = (cppVar_18897 >> 7) & cppMask_un_1_;
	bool cppVar_18899 = (cppVar_18898 == 1);
	BIT_VEC cppVar_18900 = PC + 1;
	cppVar_18900 = (cppVar_18900 & cppMask_un_16_);
	BIT_VEC cppVar_18901 = ROM.rd(cppVar_18900);
	BIT_VEC cppVar_18902 = (cppVar_18901 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18903 = (cppVar_18902 << 3) | 0;
	cppVar_18903 = (cppVar_18903 & cppMask_un_8_);
	BIT_VEC cppVar_18904 = PC + 1;
	cppVar_18904 = (cppVar_18904 & cppMask_un_16_);
	BIT_VEC cppVar_18905 = ROM.rd(cppVar_18904);
	BIT_VEC cppVar_18906 = (cppVar_18905 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18907 = (cppVar_18906 & cppMask_un_5_);
	BIT_VEC cppVar_18908 = cppVar_18907 + 32;
	cppVar_18908 = (cppVar_18908 & cppMask_un_8_);
	BIT_VEC cppVar_18909 = (cppVar_18899) ? cppVar_18903 : cppVar_18908;
	bool cppVar_18911 = (cppVar_18909 == 128);
	BIT_VEC cppVar_18912 = PC + 1;
	cppVar_18912 = (cppVar_18912 & cppMask_un_16_);
	BIT_VEC cppVar_18913 = ROM.rd(cppVar_18912);
	BIT_VEC cppVar_18914 = (cppVar_18913 >> 7) & cppMask_un_1_;
	bool cppVar_18915 = (cppVar_18914 == 1);
	BIT_VEC cppVar_18916 = PC + 1;
	cppVar_18916 = (cppVar_18916 & cppMask_un_16_);
	BIT_VEC cppVar_18917 = ROM.rd(cppVar_18916);
	BIT_VEC cppVar_18918 = (cppVar_18917 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18919 = (cppVar_18918 << 3) | 0;
	cppVar_18919 = (cppVar_18919 & cppMask_un_8_);
	BIT_VEC cppVar_18920 = PC + 1;
	cppVar_18920 = (cppVar_18920 & cppMask_un_16_);
	BIT_VEC cppVar_18921 = ROM.rd(cppVar_18920);
	BIT_VEC cppVar_18922 = (cppVar_18921 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18923 = (cppVar_18922 & cppMask_un_5_);
	BIT_VEC cppVar_18924 = cppVar_18923 + 32;
	cppVar_18924 = (cppVar_18924 & cppMask_un_8_);
	BIT_VEC cppVar_18925 = (cppVar_18915) ? cppVar_18919 : cppVar_18924;
	bool cppVar_18927 = (cppVar_18925 == 129);
	BIT_VEC cppVar_18928 = PC + 1;
	cppVar_18928 = (cppVar_18928 & cppMask_un_16_);
	BIT_VEC cppVar_18929 = ROM.rd(cppVar_18928);
	BIT_VEC cppVar_18930 = (cppVar_18929 >> 7) & cppMask_un_1_;
	bool cppVar_18931 = (cppVar_18930 == 1);
	BIT_VEC cppVar_18932 = PC + 1;
	cppVar_18932 = (cppVar_18932 & cppMask_un_16_);
	BIT_VEC cppVar_18933 = ROM.rd(cppVar_18932);
	BIT_VEC cppVar_18934 = (cppVar_18933 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18935 = (cppVar_18934 << 3) | 0;
	cppVar_18935 = (cppVar_18935 & cppMask_un_8_);
	BIT_VEC cppVar_18936 = PC + 1;
	cppVar_18936 = (cppVar_18936 & cppMask_un_16_);
	BIT_VEC cppVar_18937 = ROM.rd(cppVar_18936);
	BIT_VEC cppVar_18938 = (cppVar_18937 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18939 = (cppVar_18938 & cppMask_un_5_);
	BIT_VEC cppVar_18940 = cppVar_18939 + 32;
	cppVar_18940 = (cppVar_18940 & cppMask_un_8_);
	BIT_VEC cppVar_18941 = (cppVar_18931) ? cppVar_18935 : cppVar_18940;
	bool cppVar_18943 = (cppVar_18941 == 130);
	BIT_VEC cppVar_18944 = PC + 1;
	cppVar_18944 = (cppVar_18944 & cppMask_un_16_);
	BIT_VEC cppVar_18945 = ROM.rd(cppVar_18944);
	BIT_VEC cppVar_18946 = (cppVar_18945 >> 7) & cppMask_un_1_;
	bool cppVar_18947 = (cppVar_18946 == 1);
	BIT_VEC cppVar_18948 = PC + 1;
	cppVar_18948 = (cppVar_18948 & cppMask_un_16_);
	BIT_VEC cppVar_18949 = ROM.rd(cppVar_18948);
	BIT_VEC cppVar_18950 = (cppVar_18949 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18951 = (cppVar_18950 << 3) | 0;
	cppVar_18951 = (cppVar_18951 & cppMask_un_8_);
	BIT_VEC cppVar_18952 = PC + 1;
	cppVar_18952 = (cppVar_18952 & cppMask_un_16_);
	BIT_VEC cppVar_18953 = ROM.rd(cppVar_18952);
	BIT_VEC cppVar_18954 = (cppVar_18953 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18955 = (cppVar_18954 & cppMask_un_5_);
	BIT_VEC cppVar_18956 = cppVar_18955 + 32;
	cppVar_18956 = (cppVar_18956 & cppMask_un_8_);
	BIT_VEC cppVar_18957 = (cppVar_18947) ? cppVar_18951 : cppVar_18956;
	bool cppVar_18959 = (cppVar_18957 == 131);
	BIT_VEC cppVar_18960 = PC + 1;
	cppVar_18960 = (cppVar_18960 & cppMask_un_16_);
	BIT_VEC cppVar_18961 = ROM.rd(cppVar_18960);
	BIT_VEC cppVar_18962 = (cppVar_18961 >> 7) & cppMask_un_1_;
	bool cppVar_18963 = (cppVar_18962 == 1);
	BIT_VEC cppVar_18964 = PC + 1;
	cppVar_18964 = (cppVar_18964 & cppMask_un_16_);
	BIT_VEC cppVar_18965 = ROM.rd(cppVar_18964);
	BIT_VEC cppVar_18966 = (cppVar_18965 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18967 = (cppVar_18966 << 3) | 0;
	cppVar_18967 = (cppVar_18967 & cppMask_un_8_);
	BIT_VEC cppVar_18968 = PC + 1;
	cppVar_18968 = (cppVar_18968 & cppMask_un_16_);
	BIT_VEC cppVar_18969 = ROM.rd(cppVar_18968);
	BIT_VEC cppVar_18970 = (cppVar_18969 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18971 = (cppVar_18970 & cppMask_un_5_);
	BIT_VEC cppVar_18972 = cppVar_18971 + 32;
	cppVar_18972 = (cppVar_18972 & cppMask_un_8_);
	BIT_VEC cppVar_18973 = (cppVar_18963) ? cppVar_18967 : cppVar_18972;
	bool cppVar_18975 = (cppVar_18973 == 135);
	BIT_VEC cppVar_18976 = PC + 1;
	cppVar_18976 = (cppVar_18976 & cppMask_un_16_);
	BIT_VEC cppVar_18977 = ROM.rd(cppVar_18976);
	BIT_VEC cppVar_18978 = (cppVar_18977 >> 7) & cppMask_un_1_;
	bool cppVar_18979 = (cppVar_18978 == 1);
	BIT_VEC cppVar_18980 = PC + 1;
	cppVar_18980 = (cppVar_18980 & cppMask_un_16_);
	BIT_VEC cppVar_18981 = ROM.rd(cppVar_18980);
	BIT_VEC cppVar_18982 = (cppVar_18981 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18983 = (cppVar_18982 << 3) | 0;
	cppVar_18983 = (cppVar_18983 & cppMask_un_8_);
	BIT_VEC cppVar_18984 = PC + 1;
	cppVar_18984 = (cppVar_18984 & cppMask_un_16_);
	BIT_VEC cppVar_18985 = ROM.rd(cppVar_18984);
	BIT_VEC cppVar_18986 = (cppVar_18985 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18987 = (cppVar_18986 & cppMask_un_5_);
	BIT_VEC cppVar_18988 = cppVar_18987 + 32;
	cppVar_18988 = (cppVar_18988 & cppMask_un_8_);
	BIT_VEC cppVar_18989 = (cppVar_18979) ? cppVar_18983 : cppVar_18988;
	bool cppVar_18991 = (cppVar_18989 == 136);
	BIT_VEC cppVar_18992 = PC + 1;
	cppVar_18992 = (cppVar_18992 & cppMask_un_16_);
	BIT_VEC cppVar_18993 = ROM.rd(cppVar_18992);
	BIT_VEC cppVar_18994 = (cppVar_18993 >> 7) & cppMask_un_1_;
	bool cppVar_18995 = (cppVar_18994 == 1);
	BIT_VEC cppVar_18996 = PC + 1;
	cppVar_18996 = (cppVar_18996 & cppMask_un_16_);
	BIT_VEC cppVar_18997 = ROM.rd(cppVar_18996);
	BIT_VEC cppVar_18998 = (cppVar_18997 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_18999 = (cppVar_18998 << 3) | 0;
	cppVar_18999 = (cppVar_18999 & cppMask_un_8_);
	BIT_VEC cppVar_19000 = PC + 1;
	cppVar_19000 = (cppVar_19000 & cppMask_un_16_);
	BIT_VEC cppVar_19001 = ROM.rd(cppVar_19000);
	BIT_VEC cppVar_19002 = (cppVar_19001 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19003 = (cppVar_19002 & cppMask_un_5_);
	BIT_VEC cppVar_19004 = cppVar_19003 + 32;
	cppVar_19004 = (cppVar_19004 & cppMask_un_8_);
	BIT_VEC cppVar_19005 = (cppVar_18995) ? cppVar_18999 : cppVar_19004;
	bool cppVar_19007 = (cppVar_19005 == 137);
	BIT_VEC cppVar_19008 = PC + 1;
	cppVar_19008 = (cppVar_19008 & cppMask_un_16_);
	BIT_VEC cppVar_19009 = ROM.rd(cppVar_19008);
	BIT_VEC cppVar_19010 = (cppVar_19009 >> 7) & cppMask_un_1_;
	bool cppVar_19011 = (cppVar_19010 == 1);
	BIT_VEC cppVar_19012 = PC + 1;
	cppVar_19012 = (cppVar_19012 & cppMask_un_16_);
	BIT_VEC cppVar_19013 = ROM.rd(cppVar_19012);
	BIT_VEC cppVar_19014 = (cppVar_19013 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19015 = (cppVar_19014 << 3) | 0;
	cppVar_19015 = (cppVar_19015 & cppMask_un_8_);
	BIT_VEC cppVar_19016 = PC + 1;
	cppVar_19016 = (cppVar_19016 & cppMask_un_16_);
	BIT_VEC cppVar_19017 = ROM.rd(cppVar_19016);
	BIT_VEC cppVar_19018 = (cppVar_19017 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19019 = (cppVar_19018 & cppMask_un_5_);
	BIT_VEC cppVar_19020 = cppVar_19019 + 32;
	cppVar_19020 = (cppVar_19020 & cppMask_un_8_);
	BIT_VEC cppVar_19021 = (cppVar_19011) ? cppVar_19015 : cppVar_19020;
	bool cppVar_19023 = (cppVar_19021 == 138);
	BIT_VEC cppVar_19024 = PC + 1;
	cppVar_19024 = (cppVar_19024 & cppMask_un_16_);
	BIT_VEC cppVar_19025 = ROM.rd(cppVar_19024);
	BIT_VEC cppVar_19026 = (cppVar_19025 >> 7) & cppMask_un_1_;
	bool cppVar_19027 = (cppVar_19026 == 1);
	BIT_VEC cppVar_19028 = PC + 1;
	cppVar_19028 = (cppVar_19028 & cppMask_un_16_);
	BIT_VEC cppVar_19029 = ROM.rd(cppVar_19028);
	BIT_VEC cppVar_19030 = (cppVar_19029 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19031 = (cppVar_19030 << 3) | 0;
	cppVar_19031 = (cppVar_19031 & cppMask_un_8_);
	BIT_VEC cppVar_19032 = PC + 1;
	cppVar_19032 = (cppVar_19032 & cppMask_un_16_);
	BIT_VEC cppVar_19033 = ROM.rd(cppVar_19032);
	BIT_VEC cppVar_19034 = (cppVar_19033 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19035 = (cppVar_19034 & cppMask_un_5_);
	BIT_VEC cppVar_19036 = cppVar_19035 + 32;
	cppVar_19036 = (cppVar_19036 & cppMask_un_8_);
	BIT_VEC cppVar_19037 = (cppVar_19027) ? cppVar_19031 : cppVar_19036;
	bool cppVar_19039 = (cppVar_19037 == 140);
	BIT_VEC cppVar_19040 = PC + 1;
	cppVar_19040 = (cppVar_19040 & cppMask_un_16_);
	BIT_VEC cppVar_19041 = ROM.rd(cppVar_19040);
	BIT_VEC cppVar_19042 = (cppVar_19041 >> 7) & cppMask_un_1_;
	bool cppVar_19043 = (cppVar_19042 == 1);
	BIT_VEC cppVar_19044 = PC + 1;
	cppVar_19044 = (cppVar_19044 & cppMask_un_16_);
	BIT_VEC cppVar_19045 = ROM.rd(cppVar_19044);
	BIT_VEC cppVar_19046 = (cppVar_19045 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19047 = (cppVar_19046 << 3) | 0;
	cppVar_19047 = (cppVar_19047 & cppMask_un_8_);
	BIT_VEC cppVar_19048 = PC + 1;
	cppVar_19048 = (cppVar_19048 & cppMask_un_16_);
	BIT_VEC cppVar_19049 = ROM.rd(cppVar_19048);
	BIT_VEC cppVar_19050 = (cppVar_19049 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19051 = (cppVar_19050 & cppMask_un_5_);
	BIT_VEC cppVar_19052 = cppVar_19051 + 32;
	cppVar_19052 = (cppVar_19052 & cppMask_un_8_);
	BIT_VEC cppVar_19053 = (cppVar_19043) ? cppVar_19047 : cppVar_19052;
	bool cppVar_19055 = (cppVar_19053 == 139);
	BIT_VEC cppVar_19056 = PC + 1;
	cppVar_19056 = (cppVar_19056 & cppMask_un_16_);
	BIT_VEC cppVar_19057 = ROM.rd(cppVar_19056);
	BIT_VEC cppVar_19058 = (cppVar_19057 >> 7) & cppMask_un_1_;
	bool cppVar_19059 = (cppVar_19058 == 1);
	BIT_VEC cppVar_19060 = PC + 1;
	cppVar_19060 = (cppVar_19060 & cppMask_un_16_);
	BIT_VEC cppVar_19061 = ROM.rd(cppVar_19060);
	BIT_VEC cppVar_19062 = (cppVar_19061 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19063 = (cppVar_19062 << 3) | 0;
	cppVar_19063 = (cppVar_19063 & cppMask_un_8_);
	BIT_VEC cppVar_19064 = PC + 1;
	cppVar_19064 = (cppVar_19064 & cppMask_un_16_);
	BIT_VEC cppVar_19065 = ROM.rd(cppVar_19064);
	BIT_VEC cppVar_19066 = (cppVar_19065 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19067 = (cppVar_19066 & cppMask_un_5_);
	BIT_VEC cppVar_19068 = cppVar_19067 + 32;
	cppVar_19068 = (cppVar_19068 & cppMask_un_8_);
	BIT_VEC cppVar_19069 = (cppVar_19059) ? cppVar_19063 : cppVar_19068;
	bool cppVar_19071 = (cppVar_19069 == 141);
	BIT_VEC cppVar_19072 = PC + 1;
	cppVar_19072 = (cppVar_19072 & cppMask_un_16_);
	BIT_VEC cppVar_19073 = ROM.rd(cppVar_19072);
	BIT_VEC cppVar_19074 = (cppVar_19073 >> 7) & cppMask_un_1_;
	bool cppVar_19075 = (cppVar_19074 == 1);
	BIT_VEC cppVar_19076 = PC + 1;
	cppVar_19076 = (cppVar_19076 & cppMask_un_16_);
	BIT_VEC cppVar_19077 = ROM.rd(cppVar_19076);
	BIT_VEC cppVar_19078 = (cppVar_19077 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19079 = (cppVar_19078 << 3) | 0;
	cppVar_19079 = (cppVar_19079 & cppMask_un_8_);
	BIT_VEC cppVar_19080 = PC + 1;
	cppVar_19080 = (cppVar_19080 & cppMask_un_16_);
	BIT_VEC cppVar_19081 = ROM.rd(cppVar_19080);
	BIT_VEC cppVar_19082 = (cppVar_19081 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19083 = (cppVar_19082 & cppMask_un_5_);
	BIT_VEC cppVar_19084 = cppVar_19083 + 32;
	cppVar_19084 = (cppVar_19084 & cppMask_un_8_);
	BIT_VEC cppVar_19085 = (cppVar_19075) ? cppVar_19079 : cppVar_19084;
	bool cppVar_19087 = (cppVar_19085 == 144);
	BIT_VEC cppVar_19088 = PC + 1;
	cppVar_19088 = (cppVar_19088 & cppMask_un_16_);
	BIT_VEC cppVar_19089 = ROM.rd(cppVar_19088);
	BIT_VEC cppVar_19090 = (cppVar_19089 >> 7) & cppMask_un_1_;
	bool cppVar_19091 = (cppVar_19090 == 1);
	BIT_VEC cppVar_19092 = PC + 1;
	cppVar_19092 = (cppVar_19092 & cppMask_un_16_);
	BIT_VEC cppVar_19093 = ROM.rd(cppVar_19092);
	BIT_VEC cppVar_19094 = (cppVar_19093 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19095 = (cppVar_19094 << 3) | 0;
	cppVar_19095 = (cppVar_19095 & cppMask_un_8_);
	BIT_VEC cppVar_19096 = PC + 1;
	cppVar_19096 = (cppVar_19096 & cppMask_un_16_);
	BIT_VEC cppVar_19097 = ROM.rd(cppVar_19096);
	BIT_VEC cppVar_19098 = (cppVar_19097 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19099 = (cppVar_19098 & cppMask_un_5_);
	BIT_VEC cppVar_19100 = cppVar_19099 + 32;
	cppVar_19100 = (cppVar_19100 & cppMask_un_8_);
	BIT_VEC cppVar_19101 = (cppVar_19091) ? cppVar_19095 : cppVar_19100;
	bool cppVar_19103 = (cppVar_19101 == 152);
	BIT_VEC cppVar_19104 = PC + 1;
	cppVar_19104 = (cppVar_19104 & cppMask_un_16_);
	BIT_VEC cppVar_19105 = ROM.rd(cppVar_19104);
	BIT_VEC cppVar_19106 = (cppVar_19105 >> 7) & cppMask_un_1_;
	bool cppVar_19107 = (cppVar_19106 == 1);
	BIT_VEC cppVar_19108 = PC + 1;
	cppVar_19108 = (cppVar_19108 & cppMask_un_16_);
	BIT_VEC cppVar_19109 = ROM.rd(cppVar_19108);
	BIT_VEC cppVar_19110 = (cppVar_19109 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19111 = (cppVar_19110 << 3) | 0;
	cppVar_19111 = (cppVar_19111 & cppMask_un_8_);
	BIT_VEC cppVar_19112 = PC + 1;
	cppVar_19112 = (cppVar_19112 & cppMask_un_16_);
	BIT_VEC cppVar_19113 = ROM.rd(cppVar_19112);
	BIT_VEC cppVar_19114 = (cppVar_19113 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19115 = (cppVar_19114 & cppMask_un_5_);
	BIT_VEC cppVar_19116 = cppVar_19115 + 32;
	cppVar_19116 = (cppVar_19116 & cppMask_un_8_);
	BIT_VEC cppVar_19117 = (cppVar_19107) ? cppVar_19111 : cppVar_19116;
	bool cppVar_19119 = (cppVar_19117 == 153);
	BIT_VEC cppVar_19120 = PC + 1;
	cppVar_19120 = (cppVar_19120 & cppMask_un_16_);
	BIT_VEC cppVar_19121 = ROM.rd(cppVar_19120);
	BIT_VEC cppVar_19122 = (cppVar_19121 >> 7) & cppMask_un_1_;
	bool cppVar_19123 = (cppVar_19122 == 1);
	BIT_VEC cppVar_19124 = PC + 1;
	cppVar_19124 = (cppVar_19124 & cppMask_un_16_);
	BIT_VEC cppVar_19125 = ROM.rd(cppVar_19124);
	BIT_VEC cppVar_19126 = (cppVar_19125 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19127 = (cppVar_19126 << 3) | 0;
	cppVar_19127 = (cppVar_19127 & cppMask_un_8_);
	BIT_VEC cppVar_19128 = PC + 1;
	cppVar_19128 = (cppVar_19128 & cppMask_un_16_);
	BIT_VEC cppVar_19129 = ROM.rd(cppVar_19128);
	BIT_VEC cppVar_19130 = (cppVar_19129 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19131 = (cppVar_19130 & cppMask_un_5_);
	BIT_VEC cppVar_19132 = cppVar_19131 + 32;
	cppVar_19132 = (cppVar_19132 & cppMask_un_8_);
	BIT_VEC cppVar_19133 = (cppVar_19123) ? cppVar_19127 : cppVar_19132;
	bool cppVar_19135 = (cppVar_19133 == 160);
	BIT_VEC cppVar_19136 = PC + 1;
	cppVar_19136 = (cppVar_19136 & cppMask_un_16_);
	BIT_VEC cppVar_19137 = ROM.rd(cppVar_19136);
	BIT_VEC cppVar_19138 = (cppVar_19137 >> 7) & cppMask_un_1_;
	bool cppVar_19139 = (cppVar_19138 == 1);
	BIT_VEC cppVar_19140 = PC + 1;
	cppVar_19140 = (cppVar_19140 & cppMask_un_16_);
	BIT_VEC cppVar_19141 = ROM.rd(cppVar_19140);
	BIT_VEC cppVar_19142 = (cppVar_19141 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19143 = (cppVar_19142 << 3) | 0;
	cppVar_19143 = (cppVar_19143 & cppMask_un_8_);
	BIT_VEC cppVar_19144 = PC + 1;
	cppVar_19144 = (cppVar_19144 & cppMask_un_16_);
	BIT_VEC cppVar_19145 = ROM.rd(cppVar_19144);
	BIT_VEC cppVar_19146 = (cppVar_19145 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19147 = (cppVar_19146 & cppMask_un_5_);
	BIT_VEC cppVar_19148 = cppVar_19147 + 32;
	cppVar_19148 = (cppVar_19148 & cppMask_un_8_);
	BIT_VEC cppVar_19149 = (cppVar_19139) ? cppVar_19143 : cppVar_19148;
	bool cppVar_19151 = (cppVar_19149 == 168);
	BIT_VEC cppVar_19152 = PC + 1;
	cppVar_19152 = (cppVar_19152 & cppMask_un_16_);
	BIT_VEC cppVar_19153 = ROM.rd(cppVar_19152);
	BIT_VEC cppVar_19154 = (cppVar_19153 >> 7) & cppMask_un_1_;
	bool cppVar_19155 = (cppVar_19154 == 1);
	BIT_VEC cppVar_19156 = PC + 1;
	cppVar_19156 = (cppVar_19156 & cppMask_un_16_);
	BIT_VEC cppVar_19157 = ROM.rd(cppVar_19156);
	BIT_VEC cppVar_19158 = (cppVar_19157 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19159 = (cppVar_19158 << 3) | 0;
	cppVar_19159 = (cppVar_19159 & cppMask_un_8_);
	BIT_VEC cppVar_19160 = PC + 1;
	cppVar_19160 = (cppVar_19160 & cppMask_un_16_);
	BIT_VEC cppVar_19161 = ROM.rd(cppVar_19160);
	BIT_VEC cppVar_19162 = (cppVar_19161 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19163 = (cppVar_19162 & cppMask_un_5_);
	BIT_VEC cppVar_19164 = cppVar_19163 + 32;
	cppVar_19164 = (cppVar_19164 & cppMask_un_8_);
	BIT_VEC cppVar_19165 = (cppVar_19155) ? cppVar_19159 : cppVar_19164;
	bool cppVar_19167 = (cppVar_19165 == 176);
	BIT_VEC cppVar_19168 = PC + 1;
	cppVar_19168 = (cppVar_19168 & cppMask_un_16_);
	BIT_VEC cppVar_19169 = ROM.rd(cppVar_19168);
	BIT_VEC cppVar_19170 = (cppVar_19169 >> 7) & cppMask_un_1_;
	bool cppVar_19171 = (cppVar_19170 == 1);
	BIT_VEC cppVar_19172 = PC + 1;
	cppVar_19172 = (cppVar_19172 & cppMask_un_16_);
	BIT_VEC cppVar_19173 = ROM.rd(cppVar_19172);
	BIT_VEC cppVar_19174 = (cppVar_19173 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19175 = (cppVar_19174 << 3) | 0;
	cppVar_19175 = (cppVar_19175 & cppMask_un_8_);
	BIT_VEC cppVar_19176 = PC + 1;
	cppVar_19176 = (cppVar_19176 & cppMask_un_16_);
	BIT_VEC cppVar_19177 = ROM.rd(cppVar_19176);
	BIT_VEC cppVar_19178 = (cppVar_19177 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19179 = (cppVar_19178 & cppMask_un_5_);
	BIT_VEC cppVar_19180 = cppVar_19179 + 32;
	cppVar_19180 = (cppVar_19180 & cppMask_un_8_);
	BIT_VEC cppVar_19181 = (cppVar_19171) ? cppVar_19175 : cppVar_19180;
	bool cppVar_19183 = (cppVar_19181 == 184);
	BIT_VEC cppVar_19184 = PC + 1;
	cppVar_19184 = (cppVar_19184 & cppMask_un_16_);
	BIT_VEC cppVar_19185 = ROM.rd(cppVar_19184);
	BIT_VEC cppVar_19186 = (cppVar_19185 >> 7) & cppMask_un_1_;
	bool cppVar_19187 = (cppVar_19186 == 1);
	BIT_VEC cppVar_19188 = PC + 1;
	cppVar_19188 = (cppVar_19188 & cppMask_un_16_);
	BIT_VEC cppVar_19189 = ROM.rd(cppVar_19188);
	BIT_VEC cppVar_19190 = (cppVar_19189 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19191 = (cppVar_19190 << 3) | 0;
	cppVar_19191 = (cppVar_19191 & cppMask_un_8_);
	BIT_VEC cppVar_19192 = PC + 1;
	cppVar_19192 = (cppVar_19192 & cppMask_un_16_);
	BIT_VEC cppVar_19193 = ROM.rd(cppVar_19192);
	BIT_VEC cppVar_19194 = (cppVar_19193 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19195 = (cppVar_19194 & cppMask_un_5_);
	BIT_VEC cppVar_19196 = cppVar_19195 + 32;
	cppVar_19196 = (cppVar_19196 & cppMask_un_8_);
	BIT_VEC cppVar_19197 = (cppVar_19187) ? cppVar_19191 : cppVar_19196;
	bool cppVar_19199 = (cppVar_19197 == 208);
	BIT_VEC cppVar_19200 = PC + 1;
	cppVar_19200 = (cppVar_19200 & cppMask_un_16_);
	BIT_VEC cppVar_19201 = ROM.rd(cppVar_19200);
	BIT_VEC cppVar_19202 = (cppVar_19201 >> 7) & cppMask_un_1_;
	bool cppVar_19203 = (cppVar_19202 == 1);
	BIT_VEC cppVar_19204 = PC + 1;
	cppVar_19204 = (cppVar_19204 & cppMask_un_16_);
	BIT_VEC cppVar_19205 = ROM.rd(cppVar_19204);
	BIT_VEC cppVar_19206 = (cppVar_19205 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19207 = (cppVar_19206 << 3) | 0;
	cppVar_19207 = (cppVar_19207 & cppMask_un_8_);
	BIT_VEC cppVar_19208 = PC + 1;
	cppVar_19208 = (cppVar_19208 & cppMask_un_16_);
	BIT_VEC cppVar_19209 = ROM.rd(cppVar_19208);
	BIT_VEC cppVar_19210 = (cppVar_19209 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19211 = (cppVar_19210 & cppMask_un_5_);
	BIT_VEC cppVar_19212 = cppVar_19211 + 32;
	cppVar_19212 = (cppVar_19212 & cppMask_un_8_);
	BIT_VEC cppVar_19213 = (cppVar_19203) ? cppVar_19207 : cppVar_19212;
	bool cppVar_19215 = (cppVar_19213 == 224);
	BIT_VEC cppVar_19216 = PC + 1;
	cppVar_19216 = (cppVar_19216 & cppMask_un_16_);
	BIT_VEC cppVar_19217 = ROM.rd(cppVar_19216);
	BIT_VEC cppVar_19218 = (cppVar_19217 >> 7) & cppMask_un_1_;
	bool cppVar_19219 = (cppVar_19218 == 1);
	BIT_VEC cppVar_19220 = PC + 1;
	cppVar_19220 = (cppVar_19220 & cppMask_un_16_);
	BIT_VEC cppVar_19221 = ROM.rd(cppVar_19220);
	BIT_VEC cppVar_19222 = (cppVar_19221 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19223 = (cppVar_19222 << 3) | 0;
	cppVar_19223 = (cppVar_19223 & cppMask_un_8_);
	BIT_VEC cppVar_19224 = PC + 1;
	cppVar_19224 = (cppVar_19224 & cppMask_un_16_);
	BIT_VEC cppVar_19225 = ROM.rd(cppVar_19224);
	BIT_VEC cppVar_19226 = (cppVar_19225 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19227 = (cppVar_19226 & cppMask_un_5_);
	BIT_VEC cppVar_19228 = cppVar_19227 + 32;
	cppVar_19228 = (cppVar_19228 & cppMask_un_8_);
	BIT_VEC cppVar_19229 = (cppVar_19219) ? cppVar_19223 : cppVar_19228;
	bool cppVar_19231 = (cppVar_19229 == 240);
	BIT_VEC cppVar_19233 = (cppVar_19231) ? B : 0;
	BIT_VEC cppVar_19234 = (cppVar_19215) ? ACC : cppVar_19233;
	BIT_VEC cppVar_19235 = (cppVar_19199) ? PSW : cppVar_19234;
	BIT_VEC cppVar_19236 = (cppVar_19183) ? IP : cppVar_19235;
	BIT_VEC cppVar_19237 = (cppVar_19167) ? P3 : cppVar_19236;
	BIT_VEC cppVar_19238 = (cppVar_19151) ? IE : cppVar_19237;
	BIT_VEC cppVar_19239 = (cppVar_19135) ? P2 : cppVar_19238;
	BIT_VEC cppVar_19240 = (cppVar_19119) ? SBUF : cppVar_19239;
	BIT_VEC cppVar_19241 = (cppVar_19103) ? SCON : cppVar_19240;
	BIT_VEC cppVar_19242 = (cppVar_19087) ? P1 : cppVar_19241;
	BIT_VEC cppVar_19243 = (cppVar_19071) ? TH1 : cppVar_19242;
	BIT_VEC cppVar_19244 = (cppVar_19055) ? TL1 : cppVar_19243;
	BIT_VEC cppVar_19245 = (cppVar_19039) ? TH0 : cppVar_19244;
	BIT_VEC cppVar_19246 = (cppVar_19023) ? TL0 : cppVar_19245;
	BIT_VEC cppVar_19247 = (cppVar_19007) ? TMOD : cppVar_19246;
	BIT_VEC cppVar_19248 = (cppVar_18991) ? TCON : cppVar_19247;
	BIT_VEC cppVar_19249 = (cppVar_18975) ? PCON : cppVar_19248;
	BIT_VEC cppVar_19250 = (cppVar_18959) ? DPH : cppVar_19249;
	BIT_VEC cppVar_19251 = (cppVar_18943) ? DPL : cppVar_19250;
	BIT_VEC cppVar_19252 = (cppVar_18927) ? SP : cppVar_19251;
	BIT_VEC cppVar_19253 = (cppVar_18911) ? P0 : cppVar_19252;
	BIT_VEC cppVar_19254 = (cppVar_18880) ? cppVar_18895 : cppVar_19253;
	BIT_VEC cppVar_19255 = PC + 1;
	cppVar_19255 = (cppVar_19255 & cppMask_un_16_);
	BIT_VEC cppVar_19256 = ROM.rd(cppVar_19255);
	BIT_VEC cppVar_19257 = (cppVar_19256 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_19258 = (cppVar_19254 >> static_cast<unsigned>(cppVar_19257)) & 0x1;
	BIT_VEC cppVar_19259 = ~cppVar_19258;
	BIT_VEC cppVar_19260 = (cppVar_19259 & cppMask_un_1_);
	BIT_VEC cppVar_19261 = PC + 1;
	cppVar_19261 = (cppVar_19261 & cppMask_un_16_);
	BIT_VEC cppVar_19262 = ROM.rd(cppVar_19261);
	BIT_VEC cppVar_19263 = (cppVar_19262 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_19264 = (cppVar_19263 & cppMask_un_3_);
	BIT_VEC cppVar_19265 = cppVar_19260 << static_cast<unsigned>(cppVar_19264);
	cppVar_19265 = (cppVar_19265 & cppMask_un_8_);
	BIT_VEC cppVar_19266 = cppVar_18860 | cppVar_19265;
	BIT_VEC cppVar_19267 = (cppVar_18461) ? cppVar_19266 : IP;
	BIT_VEC cppVar_19268 = ROM.rd(PC);
	bool cppVar_19270 = (cppVar_19268 == 146);
	BIT_VEC cppVar_19272 = PC + 1;
	cppVar_19272 = (cppVar_19272 & cppMask_un_16_);
	BIT_VEC cppVar_19273 = ROM.rd(cppVar_19272);
	BIT_VEC cppVar_19274 = (cppVar_19273 >> 7) & cppMask_un_1_;
	bool cppVar_19276 = (cppVar_19274 == 1);
	BIT_VEC cppVar_19277 = PC + 1;
	cppVar_19277 = (cppVar_19277 & cppMask_un_16_);
	BIT_VEC cppVar_19278 = ROM.rd(cppVar_19277);
	BIT_VEC cppVar_19279 = (cppVar_19278 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19281 = (cppVar_19279 << 3) | 0;
	cppVar_19281 = (cppVar_19281 & cppMask_un_8_);
	BIT_VEC cppVar_19282 = PC + 1;
	cppVar_19282 = (cppVar_19282 & cppMask_un_16_);
	BIT_VEC cppVar_19283 = ROM.rd(cppVar_19282);
	BIT_VEC cppVar_19284 = (cppVar_19283 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19285 = (cppVar_19284 & cppMask_un_5_);
	BIT_VEC cppVar_19287 = cppVar_19285 + 32;
	cppVar_19287 = (cppVar_19287 & cppMask_un_8_);
	BIT_VEC cppVar_19288 = (cppVar_19276) ? cppVar_19281 : cppVar_19287;
	bool cppVar_19290 = (cppVar_19288 == 184);
	BIT_VEC cppVar_19292 = PC + 1;
	cppVar_19292 = (cppVar_19292 & cppMask_un_16_);
	BIT_VEC cppVar_19293 = ROM.rd(cppVar_19292);
	BIT_VEC cppVar_19294 = (cppVar_19293 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_19295 = (cppVar_19294 & cppMask_un_3_);
	BIT_VEC cppVar_19296 = 1 << static_cast<unsigned>(cppVar_19295);
	cppVar_19296 = (cppVar_19296 & cppMask_un_8_);
	BIT_VEC cppVar_19297 = ~cppVar_19296;
	BIT_VEC cppVar_19298 = PC + 1;
	cppVar_19298 = (cppVar_19298 & cppMask_un_16_);
	BIT_VEC cppVar_19299 = ROM.rd(cppVar_19298);
	BIT_VEC cppVar_19300 = (cppVar_19299 >> 7) & cppMask_un_1_;
	bool cppVar_19301 = (cppVar_19300 == 1);
	BIT_VEC cppVar_19302 = PC + 1;
	cppVar_19302 = (cppVar_19302 & cppMask_un_16_);
	BIT_VEC cppVar_19303 = ROM.rd(cppVar_19302);
	BIT_VEC cppVar_19304 = (cppVar_19303 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19305 = (cppVar_19304 << 3) | 0;
	cppVar_19305 = (cppVar_19305 & cppMask_un_8_);
	BIT_VEC cppVar_19306 = PC + 1;
	cppVar_19306 = (cppVar_19306 & cppMask_un_16_);
	BIT_VEC cppVar_19307 = ROM.rd(cppVar_19306);
	BIT_VEC cppVar_19308 = (cppVar_19307 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19309 = (cppVar_19308 & cppMask_un_5_);
	BIT_VEC cppVar_19310 = cppVar_19309 + 32;
	cppVar_19310 = (cppVar_19310 & cppMask_un_8_);
	BIT_VEC cppVar_19311 = (cppVar_19301) ? cppVar_19305 : cppVar_19310;
	BIT_VEC cppVar_19312 = (cppVar_19311 >> 7) & cppMask_un_1_;
	bool cppVar_19314 = (cppVar_19312 == 0);
	BIT_VEC cppVar_19315 = PC + 1;
	cppVar_19315 = (cppVar_19315 & cppMask_un_16_);
	BIT_VEC cppVar_19316 = ROM.rd(cppVar_19315);
	BIT_VEC cppVar_19317 = (cppVar_19316 >> 7) & cppMask_un_1_;
	bool cppVar_19318 = (cppVar_19317 == 1);
	BIT_VEC cppVar_19319 = PC + 1;
	cppVar_19319 = (cppVar_19319 & cppMask_un_16_);
	BIT_VEC cppVar_19320 = ROM.rd(cppVar_19319);
	BIT_VEC cppVar_19321 = (cppVar_19320 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19322 = (cppVar_19321 << 3) | 0;
	cppVar_19322 = (cppVar_19322 & cppMask_un_8_);
	BIT_VEC cppVar_19323 = PC + 1;
	cppVar_19323 = (cppVar_19323 & cppMask_un_16_);
	BIT_VEC cppVar_19324 = ROM.rd(cppVar_19323);
	BIT_VEC cppVar_19325 = (cppVar_19324 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19326 = (cppVar_19325 & cppMask_un_5_);
	BIT_VEC cppVar_19327 = cppVar_19326 + 32;
	cppVar_19327 = (cppVar_19327 & cppMask_un_8_);
	BIT_VEC cppVar_19328 = (cppVar_19318) ? cppVar_19322 : cppVar_19327;
	BIT_VEC cppVar_19329 = IRAM.rd(cppVar_19328);
	BIT_VEC cppVar_19330 = PC + 1;
	cppVar_19330 = (cppVar_19330 & cppMask_un_16_);
	BIT_VEC cppVar_19331 = ROM.rd(cppVar_19330);
	BIT_VEC cppVar_19332 = (cppVar_19331 >> 7) & cppMask_un_1_;
	bool cppVar_19333 = (cppVar_19332 == 1);
	BIT_VEC cppVar_19334 = PC + 1;
	cppVar_19334 = (cppVar_19334 & cppMask_un_16_);
	BIT_VEC cppVar_19335 = ROM.rd(cppVar_19334);
	BIT_VEC cppVar_19336 = (cppVar_19335 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19337 = (cppVar_19336 << 3) | 0;
	cppVar_19337 = (cppVar_19337 & cppMask_un_8_);
	BIT_VEC cppVar_19338 = PC + 1;
	cppVar_19338 = (cppVar_19338 & cppMask_un_16_);
	BIT_VEC cppVar_19339 = ROM.rd(cppVar_19338);
	BIT_VEC cppVar_19340 = (cppVar_19339 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19341 = (cppVar_19340 & cppMask_un_5_);
	BIT_VEC cppVar_19342 = cppVar_19341 + 32;
	cppVar_19342 = (cppVar_19342 & cppMask_un_8_);
	BIT_VEC cppVar_19343 = (cppVar_19333) ? cppVar_19337 : cppVar_19342;
	bool cppVar_19345 = (cppVar_19343 == 128);
	BIT_VEC cppVar_19346 = PC + 1;
	cppVar_19346 = (cppVar_19346 & cppMask_un_16_);
	BIT_VEC cppVar_19347 = ROM.rd(cppVar_19346);
	BIT_VEC cppVar_19348 = (cppVar_19347 >> 7) & cppMask_un_1_;
	bool cppVar_19349 = (cppVar_19348 == 1);
	BIT_VEC cppVar_19350 = PC + 1;
	cppVar_19350 = (cppVar_19350 & cppMask_un_16_);
	BIT_VEC cppVar_19351 = ROM.rd(cppVar_19350);
	BIT_VEC cppVar_19352 = (cppVar_19351 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19353 = (cppVar_19352 << 3) | 0;
	cppVar_19353 = (cppVar_19353 & cppMask_un_8_);
	BIT_VEC cppVar_19354 = PC + 1;
	cppVar_19354 = (cppVar_19354 & cppMask_un_16_);
	BIT_VEC cppVar_19355 = ROM.rd(cppVar_19354);
	BIT_VEC cppVar_19356 = (cppVar_19355 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19357 = (cppVar_19356 & cppMask_un_5_);
	BIT_VEC cppVar_19358 = cppVar_19357 + 32;
	cppVar_19358 = (cppVar_19358 & cppMask_un_8_);
	BIT_VEC cppVar_19359 = (cppVar_19349) ? cppVar_19353 : cppVar_19358;
	bool cppVar_19361 = (cppVar_19359 == 129);
	BIT_VEC cppVar_19362 = PC + 1;
	cppVar_19362 = (cppVar_19362 & cppMask_un_16_);
	BIT_VEC cppVar_19363 = ROM.rd(cppVar_19362);
	BIT_VEC cppVar_19364 = (cppVar_19363 >> 7) & cppMask_un_1_;
	bool cppVar_19365 = (cppVar_19364 == 1);
	BIT_VEC cppVar_19366 = PC + 1;
	cppVar_19366 = (cppVar_19366 & cppMask_un_16_);
	BIT_VEC cppVar_19367 = ROM.rd(cppVar_19366);
	BIT_VEC cppVar_19368 = (cppVar_19367 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19369 = (cppVar_19368 << 3) | 0;
	cppVar_19369 = (cppVar_19369 & cppMask_un_8_);
	BIT_VEC cppVar_19370 = PC + 1;
	cppVar_19370 = (cppVar_19370 & cppMask_un_16_);
	BIT_VEC cppVar_19371 = ROM.rd(cppVar_19370);
	BIT_VEC cppVar_19372 = (cppVar_19371 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19373 = (cppVar_19372 & cppMask_un_5_);
	BIT_VEC cppVar_19374 = cppVar_19373 + 32;
	cppVar_19374 = (cppVar_19374 & cppMask_un_8_);
	BIT_VEC cppVar_19375 = (cppVar_19365) ? cppVar_19369 : cppVar_19374;
	bool cppVar_19377 = (cppVar_19375 == 130);
	BIT_VEC cppVar_19378 = PC + 1;
	cppVar_19378 = (cppVar_19378 & cppMask_un_16_);
	BIT_VEC cppVar_19379 = ROM.rd(cppVar_19378);
	BIT_VEC cppVar_19380 = (cppVar_19379 >> 7) & cppMask_un_1_;
	bool cppVar_19381 = (cppVar_19380 == 1);
	BIT_VEC cppVar_19382 = PC + 1;
	cppVar_19382 = (cppVar_19382 & cppMask_un_16_);
	BIT_VEC cppVar_19383 = ROM.rd(cppVar_19382);
	BIT_VEC cppVar_19384 = (cppVar_19383 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19385 = (cppVar_19384 << 3) | 0;
	cppVar_19385 = (cppVar_19385 & cppMask_un_8_);
	BIT_VEC cppVar_19386 = PC + 1;
	cppVar_19386 = (cppVar_19386 & cppMask_un_16_);
	BIT_VEC cppVar_19387 = ROM.rd(cppVar_19386);
	BIT_VEC cppVar_19388 = (cppVar_19387 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19389 = (cppVar_19388 & cppMask_un_5_);
	BIT_VEC cppVar_19390 = cppVar_19389 + 32;
	cppVar_19390 = (cppVar_19390 & cppMask_un_8_);
	BIT_VEC cppVar_19391 = (cppVar_19381) ? cppVar_19385 : cppVar_19390;
	bool cppVar_19393 = (cppVar_19391 == 131);
	BIT_VEC cppVar_19394 = PC + 1;
	cppVar_19394 = (cppVar_19394 & cppMask_un_16_);
	BIT_VEC cppVar_19395 = ROM.rd(cppVar_19394);
	BIT_VEC cppVar_19396 = (cppVar_19395 >> 7) & cppMask_un_1_;
	bool cppVar_19397 = (cppVar_19396 == 1);
	BIT_VEC cppVar_19398 = PC + 1;
	cppVar_19398 = (cppVar_19398 & cppMask_un_16_);
	BIT_VEC cppVar_19399 = ROM.rd(cppVar_19398);
	BIT_VEC cppVar_19400 = (cppVar_19399 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19401 = (cppVar_19400 << 3) | 0;
	cppVar_19401 = (cppVar_19401 & cppMask_un_8_);
	BIT_VEC cppVar_19402 = PC + 1;
	cppVar_19402 = (cppVar_19402 & cppMask_un_16_);
	BIT_VEC cppVar_19403 = ROM.rd(cppVar_19402);
	BIT_VEC cppVar_19404 = (cppVar_19403 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19405 = (cppVar_19404 & cppMask_un_5_);
	BIT_VEC cppVar_19406 = cppVar_19405 + 32;
	cppVar_19406 = (cppVar_19406 & cppMask_un_8_);
	BIT_VEC cppVar_19407 = (cppVar_19397) ? cppVar_19401 : cppVar_19406;
	bool cppVar_19409 = (cppVar_19407 == 135);
	BIT_VEC cppVar_19410 = PC + 1;
	cppVar_19410 = (cppVar_19410 & cppMask_un_16_);
	BIT_VEC cppVar_19411 = ROM.rd(cppVar_19410);
	BIT_VEC cppVar_19412 = (cppVar_19411 >> 7) & cppMask_un_1_;
	bool cppVar_19413 = (cppVar_19412 == 1);
	BIT_VEC cppVar_19414 = PC + 1;
	cppVar_19414 = (cppVar_19414 & cppMask_un_16_);
	BIT_VEC cppVar_19415 = ROM.rd(cppVar_19414);
	BIT_VEC cppVar_19416 = (cppVar_19415 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19417 = (cppVar_19416 << 3) | 0;
	cppVar_19417 = (cppVar_19417 & cppMask_un_8_);
	BIT_VEC cppVar_19418 = PC + 1;
	cppVar_19418 = (cppVar_19418 & cppMask_un_16_);
	BIT_VEC cppVar_19419 = ROM.rd(cppVar_19418);
	BIT_VEC cppVar_19420 = (cppVar_19419 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19421 = (cppVar_19420 & cppMask_un_5_);
	BIT_VEC cppVar_19422 = cppVar_19421 + 32;
	cppVar_19422 = (cppVar_19422 & cppMask_un_8_);
	BIT_VEC cppVar_19423 = (cppVar_19413) ? cppVar_19417 : cppVar_19422;
	bool cppVar_19425 = (cppVar_19423 == 136);
	BIT_VEC cppVar_19426 = PC + 1;
	cppVar_19426 = (cppVar_19426 & cppMask_un_16_);
	BIT_VEC cppVar_19427 = ROM.rd(cppVar_19426);
	BIT_VEC cppVar_19428 = (cppVar_19427 >> 7) & cppMask_un_1_;
	bool cppVar_19429 = (cppVar_19428 == 1);
	BIT_VEC cppVar_19430 = PC + 1;
	cppVar_19430 = (cppVar_19430 & cppMask_un_16_);
	BIT_VEC cppVar_19431 = ROM.rd(cppVar_19430);
	BIT_VEC cppVar_19432 = (cppVar_19431 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19433 = (cppVar_19432 << 3) | 0;
	cppVar_19433 = (cppVar_19433 & cppMask_un_8_);
	BIT_VEC cppVar_19434 = PC + 1;
	cppVar_19434 = (cppVar_19434 & cppMask_un_16_);
	BIT_VEC cppVar_19435 = ROM.rd(cppVar_19434);
	BIT_VEC cppVar_19436 = (cppVar_19435 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19437 = (cppVar_19436 & cppMask_un_5_);
	BIT_VEC cppVar_19438 = cppVar_19437 + 32;
	cppVar_19438 = (cppVar_19438 & cppMask_un_8_);
	BIT_VEC cppVar_19439 = (cppVar_19429) ? cppVar_19433 : cppVar_19438;
	bool cppVar_19441 = (cppVar_19439 == 137);
	BIT_VEC cppVar_19442 = PC + 1;
	cppVar_19442 = (cppVar_19442 & cppMask_un_16_);
	BIT_VEC cppVar_19443 = ROM.rd(cppVar_19442);
	BIT_VEC cppVar_19444 = (cppVar_19443 >> 7) & cppMask_un_1_;
	bool cppVar_19445 = (cppVar_19444 == 1);
	BIT_VEC cppVar_19446 = PC + 1;
	cppVar_19446 = (cppVar_19446 & cppMask_un_16_);
	BIT_VEC cppVar_19447 = ROM.rd(cppVar_19446);
	BIT_VEC cppVar_19448 = (cppVar_19447 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19449 = (cppVar_19448 << 3) | 0;
	cppVar_19449 = (cppVar_19449 & cppMask_un_8_);
	BIT_VEC cppVar_19450 = PC + 1;
	cppVar_19450 = (cppVar_19450 & cppMask_un_16_);
	BIT_VEC cppVar_19451 = ROM.rd(cppVar_19450);
	BIT_VEC cppVar_19452 = (cppVar_19451 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19453 = (cppVar_19452 & cppMask_un_5_);
	BIT_VEC cppVar_19454 = cppVar_19453 + 32;
	cppVar_19454 = (cppVar_19454 & cppMask_un_8_);
	BIT_VEC cppVar_19455 = (cppVar_19445) ? cppVar_19449 : cppVar_19454;
	bool cppVar_19457 = (cppVar_19455 == 138);
	BIT_VEC cppVar_19458 = PC + 1;
	cppVar_19458 = (cppVar_19458 & cppMask_un_16_);
	BIT_VEC cppVar_19459 = ROM.rd(cppVar_19458);
	BIT_VEC cppVar_19460 = (cppVar_19459 >> 7) & cppMask_un_1_;
	bool cppVar_19461 = (cppVar_19460 == 1);
	BIT_VEC cppVar_19462 = PC + 1;
	cppVar_19462 = (cppVar_19462 & cppMask_un_16_);
	BIT_VEC cppVar_19463 = ROM.rd(cppVar_19462);
	BIT_VEC cppVar_19464 = (cppVar_19463 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19465 = (cppVar_19464 << 3) | 0;
	cppVar_19465 = (cppVar_19465 & cppMask_un_8_);
	BIT_VEC cppVar_19466 = PC + 1;
	cppVar_19466 = (cppVar_19466 & cppMask_un_16_);
	BIT_VEC cppVar_19467 = ROM.rd(cppVar_19466);
	BIT_VEC cppVar_19468 = (cppVar_19467 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19469 = (cppVar_19468 & cppMask_un_5_);
	BIT_VEC cppVar_19470 = cppVar_19469 + 32;
	cppVar_19470 = (cppVar_19470 & cppMask_un_8_);
	BIT_VEC cppVar_19471 = (cppVar_19461) ? cppVar_19465 : cppVar_19470;
	bool cppVar_19473 = (cppVar_19471 == 140);
	BIT_VEC cppVar_19474 = PC + 1;
	cppVar_19474 = (cppVar_19474 & cppMask_un_16_);
	BIT_VEC cppVar_19475 = ROM.rd(cppVar_19474);
	BIT_VEC cppVar_19476 = (cppVar_19475 >> 7) & cppMask_un_1_;
	bool cppVar_19477 = (cppVar_19476 == 1);
	BIT_VEC cppVar_19478 = PC + 1;
	cppVar_19478 = (cppVar_19478 & cppMask_un_16_);
	BIT_VEC cppVar_19479 = ROM.rd(cppVar_19478);
	BIT_VEC cppVar_19480 = (cppVar_19479 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19481 = (cppVar_19480 << 3) | 0;
	cppVar_19481 = (cppVar_19481 & cppMask_un_8_);
	BIT_VEC cppVar_19482 = PC + 1;
	cppVar_19482 = (cppVar_19482 & cppMask_un_16_);
	BIT_VEC cppVar_19483 = ROM.rd(cppVar_19482);
	BIT_VEC cppVar_19484 = (cppVar_19483 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19485 = (cppVar_19484 & cppMask_un_5_);
	BIT_VEC cppVar_19486 = cppVar_19485 + 32;
	cppVar_19486 = (cppVar_19486 & cppMask_un_8_);
	BIT_VEC cppVar_19487 = (cppVar_19477) ? cppVar_19481 : cppVar_19486;
	bool cppVar_19489 = (cppVar_19487 == 139);
	BIT_VEC cppVar_19490 = PC + 1;
	cppVar_19490 = (cppVar_19490 & cppMask_un_16_);
	BIT_VEC cppVar_19491 = ROM.rd(cppVar_19490);
	BIT_VEC cppVar_19492 = (cppVar_19491 >> 7) & cppMask_un_1_;
	bool cppVar_19493 = (cppVar_19492 == 1);
	BIT_VEC cppVar_19494 = PC + 1;
	cppVar_19494 = (cppVar_19494 & cppMask_un_16_);
	BIT_VEC cppVar_19495 = ROM.rd(cppVar_19494);
	BIT_VEC cppVar_19496 = (cppVar_19495 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19497 = (cppVar_19496 << 3) | 0;
	cppVar_19497 = (cppVar_19497 & cppMask_un_8_);
	BIT_VEC cppVar_19498 = PC + 1;
	cppVar_19498 = (cppVar_19498 & cppMask_un_16_);
	BIT_VEC cppVar_19499 = ROM.rd(cppVar_19498);
	BIT_VEC cppVar_19500 = (cppVar_19499 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19501 = (cppVar_19500 & cppMask_un_5_);
	BIT_VEC cppVar_19502 = cppVar_19501 + 32;
	cppVar_19502 = (cppVar_19502 & cppMask_un_8_);
	BIT_VEC cppVar_19503 = (cppVar_19493) ? cppVar_19497 : cppVar_19502;
	bool cppVar_19505 = (cppVar_19503 == 141);
	BIT_VEC cppVar_19506 = PC + 1;
	cppVar_19506 = (cppVar_19506 & cppMask_un_16_);
	BIT_VEC cppVar_19507 = ROM.rd(cppVar_19506);
	BIT_VEC cppVar_19508 = (cppVar_19507 >> 7) & cppMask_un_1_;
	bool cppVar_19509 = (cppVar_19508 == 1);
	BIT_VEC cppVar_19510 = PC + 1;
	cppVar_19510 = (cppVar_19510 & cppMask_un_16_);
	BIT_VEC cppVar_19511 = ROM.rd(cppVar_19510);
	BIT_VEC cppVar_19512 = (cppVar_19511 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19513 = (cppVar_19512 << 3) | 0;
	cppVar_19513 = (cppVar_19513 & cppMask_un_8_);
	BIT_VEC cppVar_19514 = PC + 1;
	cppVar_19514 = (cppVar_19514 & cppMask_un_16_);
	BIT_VEC cppVar_19515 = ROM.rd(cppVar_19514);
	BIT_VEC cppVar_19516 = (cppVar_19515 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19517 = (cppVar_19516 & cppMask_un_5_);
	BIT_VEC cppVar_19518 = cppVar_19517 + 32;
	cppVar_19518 = (cppVar_19518 & cppMask_un_8_);
	BIT_VEC cppVar_19519 = (cppVar_19509) ? cppVar_19513 : cppVar_19518;
	bool cppVar_19521 = (cppVar_19519 == 144);
	BIT_VEC cppVar_19522 = PC + 1;
	cppVar_19522 = (cppVar_19522 & cppMask_un_16_);
	BIT_VEC cppVar_19523 = ROM.rd(cppVar_19522);
	BIT_VEC cppVar_19524 = (cppVar_19523 >> 7) & cppMask_un_1_;
	bool cppVar_19525 = (cppVar_19524 == 1);
	BIT_VEC cppVar_19526 = PC + 1;
	cppVar_19526 = (cppVar_19526 & cppMask_un_16_);
	BIT_VEC cppVar_19527 = ROM.rd(cppVar_19526);
	BIT_VEC cppVar_19528 = (cppVar_19527 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19529 = (cppVar_19528 << 3) | 0;
	cppVar_19529 = (cppVar_19529 & cppMask_un_8_);
	BIT_VEC cppVar_19530 = PC + 1;
	cppVar_19530 = (cppVar_19530 & cppMask_un_16_);
	BIT_VEC cppVar_19531 = ROM.rd(cppVar_19530);
	BIT_VEC cppVar_19532 = (cppVar_19531 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19533 = (cppVar_19532 & cppMask_un_5_);
	BIT_VEC cppVar_19534 = cppVar_19533 + 32;
	cppVar_19534 = (cppVar_19534 & cppMask_un_8_);
	BIT_VEC cppVar_19535 = (cppVar_19525) ? cppVar_19529 : cppVar_19534;
	bool cppVar_19537 = (cppVar_19535 == 152);
	BIT_VEC cppVar_19538 = PC + 1;
	cppVar_19538 = (cppVar_19538 & cppMask_un_16_);
	BIT_VEC cppVar_19539 = ROM.rd(cppVar_19538);
	BIT_VEC cppVar_19540 = (cppVar_19539 >> 7) & cppMask_un_1_;
	bool cppVar_19541 = (cppVar_19540 == 1);
	BIT_VEC cppVar_19542 = PC + 1;
	cppVar_19542 = (cppVar_19542 & cppMask_un_16_);
	BIT_VEC cppVar_19543 = ROM.rd(cppVar_19542);
	BIT_VEC cppVar_19544 = (cppVar_19543 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19545 = (cppVar_19544 << 3) | 0;
	cppVar_19545 = (cppVar_19545 & cppMask_un_8_);
	BIT_VEC cppVar_19546 = PC + 1;
	cppVar_19546 = (cppVar_19546 & cppMask_un_16_);
	BIT_VEC cppVar_19547 = ROM.rd(cppVar_19546);
	BIT_VEC cppVar_19548 = (cppVar_19547 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19549 = (cppVar_19548 & cppMask_un_5_);
	BIT_VEC cppVar_19550 = cppVar_19549 + 32;
	cppVar_19550 = (cppVar_19550 & cppMask_un_8_);
	BIT_VEC cppVar_19551 = (cppVar_19541) ? cppVar_19545 : cppVar_19550;
	bool cppVar_19553 = (cppVar_19551 == 153);
	BIT_VEC cppVar_19554 = PC + 1;
	cppVar_19554 = (cppVar_19554 & cppMask_un_16_);
	BIT_VEC cppVar_19555 = ROM.rd(cppVar_19554);
	BIT_VEC cppVar_19556 = (cppVar_19555 >> 7) & cppMask_un_1_;
	bool cppVar_19557 = (cppVar_19556 == 1);
	BIT_VEC cppVar_19558 = PC + 1;
	cppVar_19558 = (cppVar_19558 & cppMask_un_16_);
	BIT_VEC cppVar_19559 = ROM.rd(cppVar_19558);
	BIT_VEC cppVar_19560 = (cppVar_19559 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19561 = (cppVar_19560 << 3) | 0;
	cppVar_19561 = (cppVar_19561 & cppMask_un_8_);
	BIT_VEC cppVar_19562 = PC + 1;
	cppVar_19562 = (cppVar_19562 & cppMask_un_16_);
	BIT_VEC cppVar_19563 = ROM.rd(cppVar_19562);
	BIT_VEC cppVar_19564 = (cppVar_19563 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19565 = (cppVar_19564 & cppMask_un_5_);
	BIT_VEC cppVar_19566 = cppVar_19565 + 32;
	cppVar_19566 = (cppVar_19566 & cppMask_un_8_);
	BIT_VEC cppVar_19567 = (cppVar_19557) ? cppVar_19561 : cppVar_19566;
	bool cppVar_19569 = (cppVar_19567 == 160);
	BIT_VEC cppVar_19570 = PC + 1;
	cppVar_19570 = (cppVar_19570 & cppMask_un_16_);
	BIT_VEC cppVar_19571 = ROM.rd(cppVar_19570);
	BIT_VEC cppVar_19572 = (cppVar_19571 >> 7) & cppMask_un_1_;
	bool cppVar_19573 = (cppVar_19572 == 1);
	BIT_VEC cppVar_19574 = PC + 1;
	cppVar_19574 = (cppVar_19574 & cppMask_un_16_);
	BIT_VEC cppVar_19575 = ROM.rd(cppVar_19574);
	BIT_VEC cppVar_19576 = (cppVar_19575 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19577 = (cppVar_19576 << 3) | 0;
	cppVar_19577 = (cppVar_19577 & cppMask_un_8_);
	BIT_VEC cppVar_19578 = PC + 1;
	cppVar_19578 = (cppVar_19578 & cppMask_un_16_);
	BIT_VEC cppVar_19579 = ROM.rd(cppVar_19578);
	BIT_VEC cppVar_19580 = (cppVar_19579 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19581 = (cppVar_19580 & cppMask_un_5_);
	BIT_VEC cppVar_19582 = cppVar_19581 + 32;
	cppVar_19582 = (cppVar_19582 & cppMask_un_8_);
	BIT_VEC cppVar_19583 = (cppVar_19573) ? cppVar_19577 : cppVar_19582;
	bool cppVar_19585 = (cppVar_19583 == 168);
	BIT_VEC cppVar_19586 = PC + 1;
	cppVar_19586 = (cppVar_19586 & cppMask_un_16_);
	BIT_VEC cppVar_19587 = ROM.rd(cppVar_19586);
	BIT_VEC cppVar_19588 = (cppVar_19587 >> 7) & cppMask_un_1_;
	bool cppVar_19589 = (cppVar_19588 == 1);
	BIT_VEC cppVar_19590 = PC + 1;
	cppVar_19590 = (cppVar_19590 & cppMask_un_16_);
	BIT_VEC cppVar_19591 = ROM.rd(cppVar_19590);
	BIT_VEC cppVar_19592 = (cppVar_19591 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19593 = (cppVar_19592 << 3) | 0;
	cppVar_19593 = (cppVar_19593 & cppMask_un_8_);
	BIT_VEC cppVar_19594 = PC + 1;
	cppVar_19594 = (cppVar_19594 & cppMask_un_16_);
	BIT_VEC cppVar_19595 = ROM.rd(cppVar_19594);
	BIT_VEC cppVar_19596 = (cppVar_19595 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19597 = (cppVar_19596 & cppMask_un_5_);
	BIT_VEC cppVar_19598 = cppVar_19597 + 32;
	cppVar_19598 = (cppVar_19598 & cppMask_un_8_);
	BIT_VEC cppVar_19599 = (cppVar_19589) ? cppVar_19593 : cppVar_19598;
	bool cppVar_19601 = (cppVar_19599 == 176);
	BIT_VEC cppVar_19602 = PC + 1;
	cppVar_19602 = (cppVar_19602 & cppMask_un_16_);
	BIT_VEC cppVar_19603 = ROM.rd(cppVar_19602);
	BIT_VEC cppVar_19604 = (cppVar_19603 >> 7) & cppMask_un_1_;
	bool cppVar_19605 = (cppVar_19604 == 1);
	BIT_VEC cppVar_19606 = PC + 1;
	cppVar_19606 = (cppVar_19606 & cppMask_un_16_);
	BIT_VEC cppVar_19607 = ROM.rd(cppVar_19606);
	BIT_VEC cppVar_19608 = (cppVar_19607 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19609 = (cppVar_19608 << 3) | 0;
	cppVar_19609 = (cppVar_19609 & cppMask_un_8_);
	BIT_VEC cppVar_19610 = PC + 1;
	cppVar_19610 = (cppVar_19610 & cppMask_un_16_);
	BIT_VEC cppVar_19611 = ROM.rd(cppVar_19610);
	BIT_VEC cppVar_19612 = (cppVar_19611 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19613 = (cppVar_19612 & cppMask_un_5_);
	BIT_VEC cppVar_19614 = cppVar_19613 + 32;
	cppVar_19614 = (cppVar_19614 & cppMask_un_8_);
	BIT_VEC cppVar_19615 = (cppVar_19605) ? cppVar_19609 : cppVar_19614;
	bool cppVar_19617 = (cppVar_19615 == 184);
	BIT_VEC cppVar_19618 = PC + 1;
	cppVar_19618 = (cppVar_19618 & cppMask_un_16_);
	BIT_VEC cppVar_19619 = ROM.rd(cppVar_19618);
	BIT_VEC cppVar_19620 = (cppVar_19619 >> 7) & cppMask_un_1_;
	bool cppVar_19621 = (cppVar_19620 == 1);
	BIT_VEC cppVar_19622 = PC + 1;
	cppVar_19622 = (cppVar_19622 & cppMask_un_16_);
	BIT_VEC cppVar_19623 = ROM.rd(cppVar_19622);
	BIT_VEC cppVar_19624 = (cppVar_19623 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19625 = (cppVar_19624 << 3) | 0;
	cppVar_19625 = (cppVar_19625 & cppMask_un_8_);
	BIT_VEC cppVar_19626 = PC + 1;
	cppVar_19626 = (cppVar_19626 & cppMask_un_16_);
	BIT_VEC cppVar_19627 = ROM.rd(cppVar_19626);
	BIT_VEC cppVar_19628 = (cppVar_19627 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19629 = (cppVar_19628 & cppMask_un_5_);
	BIT_VEC cppVar_19630 = cppVar_19629 + 32;
	cppVar_19630 = (cppVar_19630 & cppMask_un_8_);
	BIT_VEC cppVar_19631 = (cppVar_19621) ? cppVar_19625 : cppVar_19630;
	bool cppVar_19633 = (cppVar_19631 == 208);
	BIT_VEC cppVar_19634 = PC + 1;
	cppVar_19634 = (cppVar_19634 & cppMask_un_16_);
	BIT_VEC cppVar_19635 = ROM.rd(cppVar_19634);
	BIT_VEC cppVar_19636 = (cppVar_19635 >> 7) & cppMask_un_1_;
	bool cppVar_19637 = (cppVar_19636 == 1);
	BIT_VEC cppVar_19638 = PC + 1;
	cppVar_19638 = (cppVar_19638 & cppMask_un_16_);
	BIT_VEC cppVar_19639 = ROM.rd(cppVar_19638);
	BIT_VEC cppVar_19640 = (cppVar_19639 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19641 = (cppVar_19640 << 3) | 0;
	cppVar_19641 = (cppVar_19641 & cppMask_un_8_);
	BIT_VEC cppVar_19642 = PC + 1;
	cppVar_19642 = (cppVar_19642 & cppMask_un_16_);
	BIT_VEC cppVar_19643 = ROM.rd(cppVar_19642);
	BIT_VEC cppVar_19644 = (cppVar_19643 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19645 = (cppVar_19644 & cppMask_un_5_);
	BIT_VEC cppVar_19646 = cppVar_19645 + 32;
	cppVar_19646 = (cppVar_19646 & cppMask_un_8_);
	BIT_VEC cppVar_19647 = (cppVar_19637) ? cppVar_19641 : cppVar_19646;
	bool cppVar_19649 = (cppVar_19647 == 224);
	BIT_VEC cppVar_19650 = PC + 1;
	cppVar_19650 = (cppVar_19650 & cppMask_un_16_);
	BIT_VEC cppVar_19651 = ROM.rd(cppVar_19650);
	BIT_VEC cppVar_19652 = (cppVar_19651 >> 7) & cppMask_un_1_;
	bool cppVar_19653 = (cppVar_19652 == 1);
	BIT_VEC cppVar_19654 = PC + 1;
	cppVar_19654 = (cppVar_19654 & cppMask_un_16_);
	BIT_VEC cppVar_19655 = ROM.rd(cppVar_19654);
	BIT_VEC cppVar_19656 = (cppVar_19655 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19657 = (cppVar_19656 << 3) | 0;
	cppVar_19657 = (cppVar_19657 & cppMask_un_8_);
	BIT_VEC cppVar_19658 = PC + 1;
	cppVar_19658 = (cppVar_19658 & cppMask_un_16_);
	BIT_VEC cppVar_19659 = ROM.rd(cppVar_19658);
	BIT_VEC cppVar_19660 = (cppVar_19659 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_19661 = (cppVar_19660 & cppMask_un_5_);
	BIT_VEC cppVar_19662 = cppVar_19661 + 32;
	cppVar_19662 = (cppVar_19662 & cppMask_un_8_);
	BIT_VEC cppVar_19663 = (cppVar_19653) ? cppVar_19657 : cppVar_19662;
	bool cppVar_19665 = (cppVar_19663 == 240);
	BIT_VEC cppVar_19667 = (cppVar_19665) ? B : 0;
	BIT_VEC cppVar_19668 = (cppVar_19649) ? ACC : cppVar_19667;
	BIT_VEC cppVar_19669 = (cppVar_19633) ? PSW : cppVar_19668;
	BIT_VEC cppVar_19670 = (cppVar_19617) ? IP : cppVar_19669;
	BIT_VEC cppVar_19671 = (cppVar_19601) ? P3 : cppVar_19670;
	BIT_VEC cppVar_19672 = (cppVar_19585) ? IE : cppVar_19671;
	BIT_VEC cppVar_19673 = (cppVar_19569) ? P2 : cppVar_19672;
	BIT_VEC cppVar_19674 = (cppVar_19553) ? SBUF : cppVar_19673;
	BIT_VEC cppVar_19675 = (cppVar_19537) ? SCON : cppVar_19674;
	BIT_VEC cppVar_19676 = (cppVar_19521) ? P1 : cppVar_19675;
	BIT_VEC cppVar_19677 = (cppVar_19505) ? TH1 : cppVar_19676;
	BIT_VEC cppVar_19678 = (cppVar_19489) ? TL1 : cppVar_19677;
	BIT_VEC cppVar_19679 = (cppVar_19473) ? TH0 : cppVar_19678;
	BIT_VEC cppVar_19680 = (cppVar_19457) ? TL0 : cppVar_19679;
	BIT_VEC cppVar_19681 = (cppVar_19441) ? TMOD : cppVar_19680;
	BIT_VEC cppVar_19682 = (cppVar_19425) ? TCON : cppVar_19681;
	BIT_VEC cppVar_19683 = (cppVar_19409) ? PCON : cppVar_19682;
	BIT_VEC cppVar_19684 = (cppVar_19393) ? DPH : cppVar_19683;
	BIT_VEC cppVar_19685 = (cppVar_19377) ? DPL : cppVar_19684;
	BIT_VEC cppVar_19686 = (cppVar_19361) ? SP : cppVar_19685;
	BIT_VEC cppVar_19687 = (cppVar_19345) ? P0 : cppVar_19686;
	BIT_VEC cppVar_19688 = (cppVar_19314) ? cppVar_19329 : cppVar_19687;
	BIT_VEC cppVar_19689 = cppVar_19297 & cppVar_19688;
	BIT_VEC cppVar_19690 = (PSW >> 7) & cppMask_un_1_;
	BIT_VEC cppVar_19691 = (cppVar_19690 & cppMask_un_1_);
	BIT_VEC cppVar_19692 = PC + 1;
	cppVar_19692 = (cppVar_19692 & cppMask_un_16_);
	BIT_VEC cppVar_19693 = ROM.rd(cppVar_19692);
	BIT_VEC cppVar_19694 = (cppVar_19693 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_19695 = (cppVar_19694 & cppMask_un_3_);
	BIT_VEC cppVar_19696 = cppVar_19691 << static_cast<unsigned>(cppVar_19695);
	cppVar_19696 = (cppVar_19696 & cppMask_un_8_);
	BIT_VEC cppVar_19697 = cppVar_19689 | cppVar_19696;
	BIT_VEC cppVar_19698 = (cppVar_19290) ? cppVar_19697 : IP;
	BIT_VEC cppVar_19699 = ROM.rd(PC);
	bool cppVar_19701 = (cppVar_19699 == 143);
	BIT_VEC cppVar_19703 = PC + 1;
	cppVar_19703 = (cppVar_19703 & cppMask_un_16_);
	BIT_VEC cppVar_19704 = ROM.rd(cppVar_19703);
	bool cppVar_19706 = (cppVar_19704 == 184);
	BIT_VEC cppVar_19708 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19710 = (cppVar_19708 << 3) | 7;
	cppVar_19710 = (cppVar_19710 & cppMask_un_5_);
	BIT_VEC cppVar_19711 = (0 << 5) | cppVar_19710;
	cppVar_19711 = (cppVar_19711 & cppMask_un_8_);
	BIT_VEC cppVar_19712 = (cppVar_19711 >> 7) & cppMask_un_1_;
	bool cppVar_19714 = (cppVar_19712 == 0);
	BIT_VEC cppVar_19715 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19716 = (cppVar_19715 << 3) | 7;
	cppVar_19716 = (cppVar_19716 & cppMask_un_5_);
	BIT_VEC cppVar_19717 = (0 << 5) | cppVar_19716;
	cppVar_19717 = (cppVar_19717 & cppMask_un_8_);
	BIT_VEC cppVar_19718 = IRAM.rd(cppVar_19717);
	BIT_VEC cppVar_19719 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19720 = (cppVar_19719 << 3) | 7;
	cppVar_19720 = (cppVar_19720 & cppMask_un_5_);
	BIT_VEC cppVar_19721 = (0 << 5) | cppVar_19720;
	cppVar_19721 = (cppVar_19721 & cppMask_un_8_);
	bool cppVar_19723 = (cppVar_19721 == 128);
	BIT_VEC cppVar_19724 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19725 = (cppVar_19724 << 3) | 7;
	cppVar_19725 = (cppVar_19725 & cppMask_un_5_);
	BIT_VEC cppVar_19726 = (0 << 5) | cppVar_19725;
	cppVar_19726 = (cppVar_19726 & cppMask_un_8_);
	bool cppVar_19728 = (cppVar_19726 == 129);
	BIT_VEC cppVar_19729 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19730 = (cppVar_19729 << 3) | 7;
	cppVar_19730 = (cppVar_19730 & cppMask_un_5_);
	BIT_VEC cppVar_19731 = (0 << 5) | cppVar_19730;
	cppVar_19731 = (cppVar_19731 & cppMask_un_8_);
	bool cppVar_19733 = (cppVar_19731 == 130);
	BIT_VEC cppVar_19734 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19735 = (cppVar_19734 << 3) | 7;
	cppVar_19735 = (cppVar_19735 & cppMask_un_5_);
	BIT_VEC cppVar_19736 = (0 << 5) | cppVar_19735;
	cppVar_19736 = (cppVar_19736 & cppMask_un_8_);
	bool cppVar_19738 = (cppVar_19736 == 131);
	BIT_VEC cppVar_19739 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19740 = (cppVar_19739 << 3) | 7;
	cppVar_19740 = (cppVar_19740 & cppMask_un_5_);
	BIT_VEC cppVar_19741 = (0 << 5) | cppVar_19740;
	cppVar_19741 = (cppVar_19741 & cppMask_un_8_);
	bool cppVar_19743 = (cppVar_19741 == 135);
	BIT_VEC cppVar_19744 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19745 = (cppVar_19744 << 3) | 7;
	cppVar_19745 = (cppVar_19745 & cppMask_un_5_);
	BIT_VEC cppVar_19746 = (0 << 5) | cppVar_19745;
	cppVar_19746 = (cppVar_19746 & cppMask_un_8_);
	bool cppVar_19748 = (cppVar_19746 == 136);
	BIT_VEC cppVar_19749 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19750 = (cppVar_19749 << 3) | 7;
	cppVar_19750 = (cppVar_19750 & cppMask_un_5_);
	BIT_VEC cppVar_19751 = (0 << 5) | cppVar_19750;
	cppVar_19751 = (cppVar_19751 & cppMask_un_8_);
	bool cppVar_19753 = (cppVar_19751 == 137);
	BIT_VEC cppVar_19754 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19755 = (cppVar_19754 << 3) | 7;
	cppVar_19755 = (cppVar_19755 & cppMask_un_5_);
	BIT_VEC cppVar_19756 = (0 << 5) | cppVar_19755;
	cppVar_19756 = (cppVar_19756 & cppMask_un_8_);
	bool cppVar_19758 = (cppVar_19756 == 138);
	BIT_VEC cppVar_19759 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19760 = (cppVar_19759 << 3) | 7;
	cppVar_19760 = (cppVar_19760 & cppMask_un_5_);
	BIT_VEC cppVar_19761 = (0 << 5) | cppVar_19760;
	cppVar_19761 = (cppVar_19761 & cppMask_un_8_);
	bool cppVar_19763 = (cppVar_19761 == 140);
	BIT_VEC cppVar_19764 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19765 = (cppVar_19764 << 3) | 7;
	cppVar_19765 = (cppVar_19765 & cppMask_un_5_);
	BIT_VEC cppVar_19766 = (0 << 5) | cppVar_19765;
	cppVar_19766 = (cppVar_19766 & cppMask_un_8_);
	bool cppVar_19768 = (cppVar_19766 == 139);
	BIT_VEC cppVar_19769 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19770 = (cppVar_19769 << 3) | 7;
	cppVar_19770 = (cppVar_19770 & cppMask_un_5_);
	BIT_VEC cppVar_19771 = (0 << 5) | cppVar_19770;
	cppVar_19771 = (cppVar_19771 & cppMask_un_8_);
	bool cppVar_19773 = (cppVar_19771 == 141);
	BIT_VEC cppVar_19774 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19775 = (cppVar_19774 << 3) | 7;
	cppVar_19775 = (cppVar_19775 & cppMask_un_5_);
	BIT_VEC cppVar_19776 = (0 << 5) | cppVar_19775;
	cppVar_19776 = (cppVar_19776 & cppMask_un_8_);
	bool cppVar_19778 = (cppVar_19776 == 144);
	BIT_VEC cppVar_19779 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19780 = (cppVar_19779 << 3) | 7;
	cppVar_19780 = (cppVar_19780 & cppMask_un_5_);
	BIT_VEC cppVar_19781 = (0 << 5) | cppVar_19780;
	cppVar_19781 = (cppVar_19781 & cppMask_un_8_);
	bool cppVar_19783 = (cppVar_19781 == 152);
	BIT_VEC cppVar_19784 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19785 = (cppVar_19784 << 3) | 7;
	cppVar_19785 = (cppVar_19785 & cppMask_un_5_);
	BIT_VEC cppVar_19786 = (0 << 5) | cppVar_19785;
	cppVar_19786 = (cppVar_19786 & cppMask_un_8_);
	bool cppVar_19788 = (cppVar_19786 == 153);
	BIT_VEC cppVar_19789 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19790 = (cppVar_19789 << 3) | 7;
	cppVar_19790 = (cppVar_19790 & cppMask_un_5_);
	BIT_VEC cppVar_19791 = (0 << 5) | cppVar_19790;
	cppVar_19791 = (cppVar_19791 & cppMask_un_8_);
	bool cppVar_19793 = (cppVar_19791 == 160);
	BIT_VEC cppVar_19794 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19795 = (cppVar_19794 << 3) | 7;
	cppVar_19795 = (cppVar_19795 & cppMask_un_5_);
	BIT_VEC cppVar_19796 = (0 << 5) | cppVar_19795;
	cppVar_19796 = (cppVar_19796 & cppMask_un_8_);
	bool cppVar_19798 = (cppVar_19796 == 168);
	BIT_VEC cppVar_19799 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19800 = (cppVar_19799 << 3) | 7;
	cppVar_19800 = (cppVar_19800 & cppMask_un_5_);
	BIT_VEC cppVar_19801 = (0 << 5) | cppVar_19800;
	cppVar_19801 = (cppVar_19801 & cppMask_un_8_);
	bool cppVar_19803 = (cppVar_19801 == 176);
	BIT_VEC cppVar_19804 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19805 = (cppVar_19804 << 3) | 7;
	cppVar_19805 = (cppVar_19805 & cppMask_un_5_);
	BIT_VEC cppVar_19806 = (0 << 5) | cppVar_19805;
	cppVar_19806 = (cppVar_19806 & cppMask_un_8_);
	bool cppVar_19808 = (cppVar_19806 == 184);
	BIT_VEC cppVar_19809 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19810 = (cppVar_19809 << 3) | 7;
	cppVar_19810 = (cppVar_19810 & cppMask_un_5_);
	BIT_VEC cppVar_19811 = (0 << 5) | cppVar_19810;
	cppVar_19811 = (cppVar_19811 & cppMask_un_8_);
	bool cppVar_19813 = (cppVar_19811 == 208);
	BIT_VEC cppVar_19814 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19815 = (cppVar_19814 << 3) | 7;
	cppVar_19815 = (cppVar_19815 & cppMask_un_5_);
	BIT_VEC cppVar_19816 = (0 << 5) | cppVar_19815;
	cppVar_19816 = (cppVar_19816 & cppMask_un_8_);
	bool cppVar_19818 = (cppVar_19816 == 224);
	BIT_VEC cppVar_19819 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19820 = (cppVar_19819 << 3) | 7;
	cppVar_19820 = (cppVar_19820 & cppMask_un_5_);
	BIT_VEC cppVar_19821 = (0 << 5) | cppVar_19820;
	cppVar_19821 = (cppVar_19821 & cppMask_un_8_);
	bool cppVar_19823 = (cppVar_19821 == 240);
	BIT_VEC cppVar_19825 = (cppVar_19823) ? B : 0;
	BIT_VEC cppVar_19826 = (cppVar_19818) ? ACC : cppVar_19825;
	BIT_VEC cppVar_19827 = (cppVar_19813) ? PSW : cppVar_19826;
	BIT_VEC cppVar_19828 = (cppVar_19808) ? IP : cppVar_19827;
	BIT_VEC cppVar_19829 = (cppVar_19803) ? P3 : cppVar_19828;
	BIT_VEC cppVar_19830 = (cppVar_19798) ? IE : cppVar_19829;
	BIT_VEC cppVar_19831 = (cppVar_19793) ? P2 : cppVar_19830;
	BIT_VEC cppVar_19832 = (cppVar_19788) ? SBUF : cppVar_19831;
	BIT_VEC cppVar_19833 = (cppVar_19783) ? SCON : cppVar_19832;
	BIT_VEC cppVar_19834 = (cppVar_19778) ? P1 : cppVar_19833;
	BIT_VEC cppVar_19835 = (cppVar_19773) ? TH1 : cppVar_19834;
	BIT_VEC cppVar_19836 = (cppVar_19768) ? TL1 : cppVar_19835;
	BIT_VEC cppVar_19837 = (cppVar_19763) ? TH0 : cppVar_19836;
	BIT_VEC cppVar_19838 = (cppVar_19758) ? TL0 : cppVar_19837;
	BIT_VEC cppVar_19839 = (cppVar_19753) ? TMOD : cppVar_19838;
	BIT_VEC cppVar_19840 = (cppVar_19748) ? TCON : cppVar_19839;
	BIT_VEC cppVar_19841 = (cppVar_19743) ? PCON : cppVar_19840;
	BIT_VEC cppVar_19842 = (cppVar_19738) ? DPH : cppVar_19841;
	BIT_VEC cppVar_19843 = (cppVar_19733) ? DPL : cppVar_19842;
	BIT_VEC cppVar_19844 = (cppVar_19728) ? SP : cppVar_19843;
	BIT_VEC cppVar_19845 = (cppVar_19723) ? P0 : cppVar_19844;
	BIT_VEC cppVar_19846 = (cppVar_19714) ? cppVar_19718 : cppVar_19845;
	BIT_VEC cppVar_19847 = (cppVar_19706) ? cppVar_19846 : IP;
	BIT_VEC cppVar_19848 = ROM.rd(PC);
	bool cppVar_19850 = (cppVar_19848 == 142);
	BIT_VEC cppVar_19852 = PC + 1;
	cppVar_19852 = (cppVar_19852 & cppMask_un_16_);
	BIT_VEC cppVar_19853 = ROM.rd(cppVar_19852);
	bool cppVar_19855 = (cppVar_19853 == 184);
	BIT_VEC cppVar_19857 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19859 = (cppVar_19857 << 3) | 6;
	cppVar_19859 = (cppVar_19859 & cppMask_un_5_);
	BIT_VEC cppVar_19860 = (0 << 5) | cppVar_19859;
	cppVar_19860 = (cppVar_19860 & cppMask_un_8_);
	BIT_VEC cppVar_19861 = (cppVar_19860 >> 7) & cppMask_un_1_;
	bool cppVar_19863 = (cppVar_19861 == 0);
	BIT_VEC cppVar_19864 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19865 = (cppVar_19864 << 3) | 6;
	cppVar_19865 = (cppVar_19865 & cppMask_un_5_);
	BIT_VEC cppVar_19866 = (0 << 5) | cppVar_19865;
	cppVar_19866 = (cppVar_19866 & cppMask_un_8_);
	BIT_VEC cppVar_19867 = IRAM.rd(cppVar_19866);
	BIT_VEC cppVar_19868 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19869 = (cppVar_19868 << 3) | 6;
	cppVar_19869 = (cppVar_19869 & cppMask_un_5_);
	BIT_VEC cppVar_19870 = (0 << 5) | cppVar_19869;
	cppVar_19870 = (cppVar_19870 & cppMask_un_8_);
	bool cppVar_19872 = (cppVar_19870 == 128);
	BIT_VEC cppVar_19873 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19874 = (cppVar_19873 << 3) | 6;
	cppVar_19874 = (cppVar_19874 & cppMask_un_5_);
	BIT_VEC cppVar_19875 = (0 << 5) | cppVar_19874;
	cppVar_19875 = (cppVar_19875 & cppMask_un_8_);
	bool cppVar_19877 = (cppVar_19875 == 129);
	BIT_VEC cppVar_19878 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19879 = (cppVar_19878 << 3) | 6;
	cppVar_19879 = (cppVar_19879 & cppMask_un_5_);
	BIT_VEC cppVar_19880 = (0 << 5) | cppVar_19879;
	cppVar_19880 = (cppVar_19880 & cppMask_un_8_);
	bool cppVar_19882 = (cppVar_19880 == 130);
	BIT_VEC cppVar_19883 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19884 = (cppVar_19883 << 3) | 6;
	cppVar_19884 = (cppVar_19884 & cppMask_un_5_);
	BIT_VEC cppVar_19885 = (0 << 5) | cppVar_19884;
	cppVar_19885 = (cppVar_19885 & cppMask_un_8_);
	bool cppVar_19887 = (cppVar_19885 == 131);
	BIT_VEC cppVar_19888 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19889 = (cppVar_19888 << 3) | 6;
	cppVar_19889 = (cppVar_19889 & cppMask_un_5_);
	BIT_VEC cppVar_19890 = (0 << 5) | cppVar_19889;
	cppVar_19890 = (cppVar_19890 & cppMask_un_8_);
	bool cppVar_19892 = (cppVar_19890 == 135);
	BIT_VEC cppVar_19893 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19894 = (cppVar_19893 << 3) | 6;
	cppVar_19894 = (cppVar_19894 & cppMask_un_5_);
	BIT_VEC cppVar_19895 = (0 << 5) | cppVar_19894;
	cppVar_19895 = (cppVar_19895 & cppMask_un_8_);
	bool cppVar_19897 = (cppVar_19895 == 136);
	BIT_VEC cppVar_19898 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19899 = (cppVar_19898 << 3) | 6;
	cppVar_19899 = (cppVar_19899 & cppMask_un_5_);
	BIT_VEC cppVar_19900 = (0 << 5) | cppVar_19899;
	cppVar_19900 = (cppVar_19900 & cppMask_un_8_);
	bool cppVar_19902 = (cppVar_19900 == 137);
	BIT_VEC cppVar_19903 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19904 = (cppVar_19903 << 3) | 6;
	cppVar_19904 = (cppVar_19904 & cppMask_un_5_);
	BIT_VEC cppVar_19905 = (0 << 5) | cppVar_19904;
	cppVar_19905 = (cppVar_19905 & cppMask_un_8_);
	bool cppVar_19907 = (cppVar_19905 == 138);
	BIT_VEC cppVar_19908 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19909 = (cppVar_19908 << 3) | 6;
	cppVar_19909 = (cppVar_19909 & cppMask_un_5_);
	BIT_VEC cppVar_19910 = (0 << 5) | cppVar_19909;
	cppVar_19910 = (cppVar_19910 & cppMask_un_8_);
	bool cppVar_19912 = (cppVar_19910 == 140);
	BIT_VEC cppVar_19913 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19914 = (cppVar_19913 << 3) | 6;
	cppVar_19914 = (cppVar_19914 & cppMask_un_5_);
	BIT_VEC cppVar_19915 = (0 << 5) | cppVar_19914;
	cppVar_19915 = (cppVar_19915 & cppMask_un_8_);
	bool cppVar_19917 = (cppVar_19915 == 139);
	BIT_VEC cppVar_19918 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19919 = (cppVar_19918 << 3) | 6;
	cppVar_19919 = (cppVar_19919 & cppMask_un_5_);
	BIT_VEC cppVar_19920 = (0 << 5) | cppVar_19919;
	cppVar_19920 = (cppVar_19920 & cppMask_un_8_);
	bool cppVar_19922 = (cppVar_19920 == 141);
	BIT_VEC cppVar_19923 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19924 = (cppVar_19923 << 3) | 6;
	cppVar_19924 = (cppVar_19924 & cppMask_un_5_);
	BIT_VEC cppVar_19925 = (0 << 5) | cppVar_19924;
	cppVar_19925 = (cppVar_19925 & cppMask_un_8_);
	bool cppVar_19927 = (cppVar_19925 == 144);
	BIT_VEC cppVar_19928 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19929 = (cppVar_19928 << 3) | 6;
	cppVar_19929 = (cppVar_19929 & cppMask_un_5_);
	BIT_VEC cppVar_19930 = (0 << 5) | cppVar_19929;
	cppVar_19930 = (cppVar_19930 & cppMask_un_8_);
	bool cppVar_19932 = (cppVar_19930 == 152);
	BIT_VEC cppVar_19933 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19934 = (cppVar_19933 << 3) | 6;
	cppVar_19934 = (cppVar_19934 & cppMask_un_5_);
	BIT_VEC cppVar_19935 = (0 << 5) | cppVar_19934;
	cppVar_19935 = (cppVar_19935 & cppMask_un_8_);
	bool cppVar_19937 = (cppVar_19935 == 153);
	BIT_VEC cppVar_19938 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19939 = (cppVar_19938 << 3) | 6;
	cppVar_19939 = (cppVar_19939 & cppMask_un_5_);
	BIT_VEC cppVar_19940 = (0 << 5) | cppVar_19939;
	cppVar_19940 = (cppVar_19940 & cppMask_un_8_);
	bool cppVar_19942 = (cppVar_19940 == 160);
	BIT_VEC cppVar_19943 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19944 = (cppVar_19943 << 3) | 6;
	cppVar_19944 = (cppVar_19944 & cppMask_un_5_);
	BIT_VEC cppVar_19945 = (0 << 5) | cppVar_19944;
	cppVar_19945 = (cppVar_19945 & cppMask_un_8_);
	bool cppVar_19947 = (cppVar_19945 == 168);
	BIT_VEC cppVar_19948 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19949 = (cppVar_19948 << 3) | 6;
	cppVar_19949 = (cppVar_19949 & cppMask_un_5_);
	BIT_VEC cppVar_19950 = (0 << 5) | cppVar_19949;
	cppVar_19950 = (cppVar_19950 & cppMask_un_8_);
	bool cppVar_19952 = (cppVar_19950 == 176);
	BIT_VEC cppVar_19953 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19954 = (cppVar_19953 << 3) | 6;
	cppVar_19954 = (cppVar_19954 & cppMask_un_5_);
	BIT_VEC cppVar_19955 = (0 << 5) | cppVar_19954;
	cppVar_19955 = (cppVar_19955 & cppMask_un_8_);
	bool cppVar_19957 = (cppVar_19955 == 184);
	BIT_VEC cppVar_19958 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19959 = (cppVar_19958 << 3) | 6;
	cppVar_19959 = (cppVar_19959 & cppMask_un_5_);
	BIT_VEC cppVar_19960 = (0 << 5) | cppVar_19959;
	cppVar_19960 = (cppVar_19960 & cppMask_un_8_);
	bool cppVar_19962 = (cppVar_19960 == 208);
	BIT_VEC cppVar_19963 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19964 = (cppVar_19963 << 3) | 6;
	cppVar_19964 = (cppVar_19964 & cppMask_un_5_);
	BIT_VEC cppVar_19965 = (0 << 5) | cppVar_19964;
	cppVar_19965 = (cppVar_19965 & cppMask_un_8_);
	bool cppVar_19967 = (cppVar_19965 == 224);
	BIT_VEC cppVar_19968 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_19969 = (cppVar_19968 << 3) | 6;
	cppVar_19969 = (cppVar_19969 & cppMask_un_5_);
	BIT_VEC cppVar_19970 = (0 << 5) | cppVar_19969;
	cppVar_19970 = (cppVar_19970 & cppMask_un_8_);
	bool cppVar_19972 = (cppVar_19970 == 240);
	BIT_VEC cppVar_19974 = (cppVar_19972) ? B : 0;
	BIT_VEC cppVar_19975 = (cppVar_19967) ? ACC : cppVar_19974;
	BIT_VEC cppVar_19976 = (cppVar_19962) ? PSW : cppVar_19975;
	BIT_VEC cppVar_19977 = (cppVar_19957) ? IP : cppVar_19976;
	BIT_VEC cppVar_19978 = (cppVar_19952) ? P3 : cppVar_19977;
	BIT_VEC cppVar_19979 = (cppVar_19947) ? IE : cppVar_19978;
	BIT_VEC cppVar_19980 = (cppVar_19942) ? P2 : cppVar_19979;
	BIT_VEC cppVar_19981 = (cppVar_19937) ? SBUF : cppVar_19980;
	BIT_VEC cppVar_19982 = (cppVar_19932) ? SCON : cppVar_19981;
	BIT_VEC cppVar_19983 = (cppVar_19927) ? P1 : cppVar_19982;
	BIT_VEC cppVar_19984 = (cppVar_19922) ? TH1 : cppVar_19983;
	BIT_VEC cppVar_19985 = (cppVar_19917) ? TL1 : cppVar_19984;
	BIT_VEC cppVar_19986 = (cppVar_19912) ? TH0 : cppVar_19985;
	BIT_VEC cppVar_19987 = (cppVar_19907) ? TL0 : cppVar_19986;
	BIT_VEC cppVar_19988 = (cppVar_19902) ? TMOD : cppVar_19987;
	BIT_VEC cppVar_19989 = (cppVar_19897) ? TCON : cppVar_19988;
	BIT_VEC cppVar_19990 = (cppVar_19892) ? PCON : cppVar_19989;
	BIT_VEC cppVar_19991 = (cppVar_19887) ? DPH : cppVar_19990;
	BIT_VEC cppVar_19992 = (cppVar_19882) ? DPL : cppVar_19991;
	BIT_VEC cppVar_19993 = (cppVar_19877) ? SP : cppVar_19992;
	BIT_VEC cppVar_19994 = (cppVar_19872) ? P0 : cppVar_19993;
	BIT_VEC cppVar_19995 = (cppVar_19863) ? cppVar_19867 : cppVar_19994;
	BIT_VEC cppVar_19996 = (cppVar_19855) ? cppVar_19995 : IP;
	BIT_VEC cppVar_19997 = ROM.rd(PC);
	bool cppVar_19999 = (cppVar_19997 == 141);
	BIT_VEC cppVar_20001 = PC + 1;
	cppVar_20001 = (cppVar_20001 & cppMask_un_16_);
	BIT_VEC cppVar_20002 = ROM.rd(cppVar_20001);
	bool cppVar_20004 = (cppVar_20002 == 184);
	BIT_VEC cppVar_20006 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20008 = (cppVar_20006 << 3) | 5;
	cppVar_20008 = (cppVar_20008 & cppMask_un_5_);
	BIT_VEC cppVar_20009 = (0 << 5) | cppVar_20008;
	cppVar_20009 = (cppVar_20009 & cppMask_un_8_);
	BIT_VEC cppVar_20010 = (cppVar_20009 >> 7) & cppMask_un_1_;
	bool cppVar_20012 = (cppVar_20010 == 0);
	BIT_VEC cppVar_20013 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20014 = (cppVar_20013 << 3) | 5;
	cppVar_20014 = (cppVar_20014 & cppMask_un_5_);
	BIT_VEC cppVar_20015 = (0 << 5) | cppVar_20014;
	cppVar_20015 = (cppVar_20015 & cppMask_un_8_);
	BIT_VEC cppVar_20016 = IRAM.rd(cppVar_20015);
	BIT_VEC cppVar_20017 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20018 = (cppVar_20017 << 3) | 5;
	cppVar_20018 = (cppVar_20018 & cppMask_un_5_);
	BIT_VEC cppVar_20019 = (0 << 5) | cppVar_20018;
	cppVar_20019 = (cppVar_20019 & cppMask_un_8_);
	bool cppVar_20021 = (cppVar_20019 == 128);
	BIT_VEC cppVar_20022 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20023 = (cppVar_20022 << 3) | 5;
	cppVar_20023 = (cppVar_20023 & cppMask_un_5_);
	BIT_VEC cppVar_20024 = (0 << 5) | cppVar_20023;
	cppVar_20024 = (cppVar_20024 & cppMask_un_8_);
	bool cppVar_20026 = (cppVar_20024 == 129);
	BIT_VEC cppVar_20027 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20028 = (cppVar_20027 << 3) | 5;
	cppVar_20028 = (cppVar_20028 & cppMask_un_5_);
	BIT_VEC cppVar_20029 = (0 << 5) | cppVar_20028;
	cppVar_20029 = (cppVar_20029 & cppMask_un_8_);
	bool cppVar_20031 = (cppVar_20029 == 130);
	BIT_VEC cppVar_20032 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20033 = (cppVar_20032 << 3) | 5;
	cppVar_20033 = (cppVar_20033 & cppMask_un_5_);
	BIT_VEC cppVar_20034 = (0 << 5) | cppVar_20033;
	cppVar_20034 = (cppVar_20034 & cppMask_un_8_);
	bool cppVar_20036 = (cppVar_20034 == 131);
	BIT_VEC cppVar_20037 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20038 = (cppVar_20037 << 3) | 5;
	cppVar_20038 = (cppVar_20038 & cppMask_un_5_);
	BIT_VEC cppVar_20039 = (0 << 5) | cppVar_20038;
	cppVar_20039 = (cppVar_20039 & cppMask_un_8_);
	bool cppVar_20041 = (cppVar_20039 == 135);
	BIT_VEC cppVar_20042 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20043 = (cppVar_20042 << 3) | 5;
	cppVar_20043 = (cppVar_20043 & cppMask_un_5_);
	BIT_VEC cppVar_20044 = (0 << 5) | cppVar_20043;
	cppVar_20044 = (cppVar_20044 & cppMask_un_8_);
	bool cppVar_20046 = (cppVar_20044 == 136);
	BIT_VEC cppVar_20047 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20048 = (cppVar_20047 << 3) | 5;
	cppVar_20048 = (cppVar_20048 & cppMask_un_5_);
	BIT_VEC cppVar_20049 = (0 << 5) | cppVar_20048;
	cppVar_20049 = (cppVar_20049 & cppMask_un_8_);
	bool cppVar_20051 = (cppVar_20049 == 137);
	BIT_VEC cppVar_20052 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20053 = (cppVar_20052 << 3) | 5;
	cppVar_20053 = (cppVar_20053 & cppMask_un_5_);
	BIT_VEC cppVar_20054 = (0 << 5) | cppVar_20053;
	cppVar_20054 = (cppVar_20054 & cppMask_un_8_);
	bool cppVar_20056 = (cppVar_20054 == 138);
	BIT_VEC cppVar_20057 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20058 = (cppVar_20057 << 3) | 5;
	cppVar_20058 = (cppVar_20058 & cppMask_un_5_);
	BIT_VEC cppVar_20059 = (0 << 5) | cppVar_20058;
	cppVar_20059 = (cppVar_20059 & cppMask_un_8_);
	bool cppVar_20061 = (cppVar_20059 == 140);
	BIT_VEC cppVar_20062 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20063 = (cppVar_20062 << 3) | 5;
	cppVar_20063 = (cppVar_20063 & cppMask_un_5_);
	BIT_VEC cppVar_20064 = (0 << 5) | cppVar_20063;
	cppVar_20064 = (cppVar_20064 & cppMask_un_8_);
	bool cppVar_20066 = (cppVar_20064 == 139);
	BIT_VEC cppVar_20067 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20068 = (cppVar_20067 << 3) | 5;
	cppVar_20068 = (cppVar_20068 & cppMask_un_5_);
	BIT_VEC cppVar_20069 = (0 << 5) | cppVar_20068;
	cppVar_20069 = (cppVar_20069 & cppMask_un_8_);
	bool cppVar_20071 = (cppVar_20069 == 141);
	BIT_VEC cppVar_20072 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20073 = (cppVar_20072 << 3) | 5;
	cppVar_20073 = (cppVar_20073 & cppMask_un_5_);
	BIT_VEC cppVar_20074 = (0 << 5) | cppVar_20073;
	cppVar_20074 = (cppVar_20074 & cppMask_un_8_);
	bool cppVar_20076 = (cppVar_20074 == 144);
	BIT_VEC cppVar_20077 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20078 = (cppVar_20077 << 3) | 5;
	cppVar_20078 = (cppVar_20078 & cppMask_un_5_);
	BIT_VEC cppVar_20079 = (0 << 5) | cppVar_20078;
	cppVar_20079 = (cppVar_20079 & cppMask_un_8_);
	bool cppVar_20081 = (cppVar_20079 == 152);
	BIT_VEC cppVar_20082 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20083 = (cppVar_20082 << 3) | 5;
	cppVar_20083 = (cppVar_20083 & cppMask_un_5_);
	BIT_VEC cppVar_20084 = (0 << 5) | cppVar_20083;
	cppVar_20084 = (cppVar_20084 & cppMask_un_8_);
	bool cppVar_20086 = (cppVar_20084 == 153);
	BIT_VEC cppVar_20087 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20088 = (cppVar_20087 << 3) | 5;
	cppVar_20088 = (cppVar_20088 & cppMask_un_5_);
	BIT_VEC cppVar_20089 = (0 << 5) | cppVar_20088;
	cppVar_20089 = (cppVar_20089 & cppMask_un_8_);
	bool cppVar_20091 = (cppVar_20089 == 160);
	BIT_VEC cppVar_20092 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20093 = (cppVar_20092 << 3) | 5;
	cppVar_20093 = (cppVar_20093 & cppMask_un_5_);
	BIT_VEC cppVar_20094 = (0 << 5) | cppVar_20093;
	cppVar_20094 = (cppVar_20094 & cppMask_un_8_);
	bool cppVar_20096 = (cppVar_20094 == 168);
	BIT_VEC cppVar_20097 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20098 = (cppVar_20097 << 3) | 5;
	cppVar_20098 = (cppVar_20098 & cppMask_un_5_);
	BIT_VEC cppVar_20099 = (0 << 5) | cppVar_20098;
	cppVar_20099 = (cppVar_20099 & cppMask_un_8_);
	bool cppVar_20101 = (cppVar_20099 == 176);
	BIT_VEC cppVar_20102 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20103 = (cppVar_20102 << 3) | 5;
	cppVar_20103 = (cppVar_20103 & cppMask_un_5_);
	BIT_VEC cppVar_20104 = (0 << 5) | cppVar_20103;
	cppVar_20104 = (cppVar_20104 & cppMask_un_8_);
	bool cppVar_20106 = (cppVar_20104 == 184);
	BIT_VEC cppVar_20107 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20108 = (cppVar_20107 << 3) | 5;
	cppVar_20108 = (cppVar_20108 & cppMask_un_5_);
	BIT_VEC cppVar_20109 = (0 << 5) | cppVar_20108;
	cppVar_20109 = (cppVar_20109 & cppMask_un_8_);
	bool cppVar_20111 = (cppVar_20109 == 208);
	BIT_VEC cppVar_20112 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20113 = (cppVar_20112 << 3) | 5;
	cppVar_20113 = (cppVar_20113 & cppMask_un_5_);
	BIT_VEC cppVar_20114 = (0 << 5) | cppVar_20113;
	cppVar_20114 = (cppVar_20114 & cppMask_un_8_);
	bool cppVar_20116 = (cppVar_20114 == 224);
	BIT_VEC cppVar_20117 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20118 = (cppVar_20117 << 3) | 5;
	cppVar_20118 = (cppVar_20118 & cppMask_un_5_);
	BIT_VEC cppVar_20119 = (0 << 5) | cppVar_20118;
	cppVar_20119 = (cppVar_20119 & cppMask_un_8_);
	bool cppVar_20121 = (cppVar_20119 == 240);
	BIT_VEC cppVar_20123 = (cppVar_20121) ? B : 0;
	BIT_VEC cppVar_20124 = (cppVar_20116) ? ACC : cppVar_20123;
	BIT_VEC cppVar_20125 = (cppVar_20111) ? PSW : cppVar_20124;
	BIT_VEC cppVar_20126 = (cppVar_20106) ? IP : cppVar_20125;
	BIT_VEC cppVar_20127 = (cppVar_20101) ? P3 : cppVar_20126;
	BIT_VEC cppVar_20128 = (cppVar_20096) ? IE : cppVar_20127;
	BIT_VEC cppVar_20129 = (cppVar_20091) ? P2 : cppVar_20128;
	BIT_VEC cppVar_20130 = (cppVar_20086) ? SBUF : cppVar_20129;
	BIT_VEC cppVar_20131 = (cppVar_20081) ? SCON : cppVar_20130;
	BIT_VEC cppVar_20132 = (cppVar_20076) ? P1 : cppVar_20131;
	BIT_VEC cppVar_20133 = (cppVar_20071) ? TH1 : cppVar_20132;
	BIT_VEC cppVar_20134 = (cppVar_20066) ? TL1 : cppVar_20133;
	BIT_VEC cppVar_20135 = (cppVar_20061) ? TH0 : cppVar_20134;
	BIT_VEC cppVar_20136 = (cppVar_20056) ? TL0 : cppVar_20135;
	BIT_VEC cppVar_20137 = (cppVar_20051) ? TMOD : cppVar_20136;
	BIT_VEC cppVar_20138 = (cppVar_20046) ? TCON : cppVar_20137;
	BIT_VEC cppVar_20139 = (cppVar_20041) ? PCON : cppVar_20138;
	BIT_VEC cppVar_20140 = (cppVar_20036) ? DPH : cppVar_20139;
	BIT_VEC cppVar_20141 = (cppVar_20031) ? DPL : cppVar_20140;
	BIT_VEC cppVar_20142 = (cppVar_20026) ? SP : cppVar_20141;
	BIT_VEC cppVar_20143 = (cppVar_20021) ? P0 : cppVar_20142;
	BIT_VEC cppVar_20144 = (cppVar_20012) ? cppVar_20016 : cppVar_20143;
	BIT_VEC cppVar_20145 = (cppVar_20004) ? cppVar_20144 : IP;
	BIT_VEC cppVar_20146 = ROM.rd(PC);
	bool cppVar_20148 = (cppVar_20146 == 140);
	BIT_VEC cppVar_20150 = PC + 1;
	cppVar_20150 = (cppVar_20150 & cppMask_un_16_);
	BIT_VEC cppVar_20151 = ROM.rd(cppVar_20150);
	bool cppVar_20153 = (cppVar_20151 == 184);
	BIT_VEC cppVar_20155 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20157 = (cppVar_20155 << 3) | 4;
	cppVar_20157 = (cppVar_20157 & cppMask_un_5_);
	BIT_VEC cppVar_20158 = (0 << 5) | cppVar_20157;
	cppVar_20158 = (cppVar_20158 & cppMask_un_8_);
	BIT_VEC cppVar_20159 = (cppVar_20158 >> 7) & cppMask_un_1_;
	bool cppVar_20161 = (cppVar_20159 == 0);
	BIT_VEC cppVar_20162 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20163 = (cppVar_20162 << 3) | 4;
	cppVar_20163 = (cppVar_20163 & cppMask_un_5_);
	BIT_VEC cppVar_20164 = (0 << 5) | cppVar_20163;
	cppVar_20164 = (cppVar_20164 & cppMask_un_8_);
	BIT_VEC cppVar_20165 = IRAM.rd(cppVar_20164);
	BIT_VEC cppVar_20166 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20167 = (cppVar_20166 << 3) | 4;
	cppVar_20167 = (cppVar_20167 & cppMask_un_5_);
	BIT_VEC cppVar_20168 = (0 << 5) | cppVar_20167;
	cppVar_20168 = (cppVar_20168 & cppMask_un_8_);
	bool cppVar_20170 = (cppVar_20168 == 128);
	BIT_VEC cppVar_20171 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20172 = (cppVar_20171 << 3) | 4;
	cppVar_20172 = (cppVar_20172 & cppMask_un_5_);
	BIT_VEC cppVar_20173 = (0 << 5) | cppVar_20172;
	cppVar_20173 = (cppVar_20173 & cppMask_un_8_);
	bool cppVar_20175 = (cppVar_20173 == 129);
	BIT_VEC cppVar_20176 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20177 = (cppVar_20176 << 3) | 4;
	cppVar_20177 = (cppVar_20177 & cppMask_un_5_);
	BIT_VEC cppVar_20178 = (0 << 5) | cppVar_20177;
	cppVar_20178 = (cppVar_20178 & cppMask_un_8_);
	bool cppVar_20180 = (cppVar_20178 == 130);
	BIT_VEC cppVar_20181 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20182 = (cppVar_20181 << 3) | 4;
	cppVar_20182 = (cppVar_20182 & cppMask_un_5_);
	BIT_VEC cppVar_20183 = (0 << 5) | cppVar_20182;
	cppVar_20183 = (cppVar_20183 & cppMask_un_8_);
	bool cppVar_20185 = (cppVar_20183 == 131);
	BIT_VEC cppVar_20186 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20187 = (cppVar_20186 << 3) | 4;
	cppVar_20187 = (cppVar_20187 & cppMask_un_5_);
	BIT_VEC cppVar_20188 = (0 << 5) | cppVar_20187;
	cppVar_20188 = (cppVar_20188 & cppMask_un_8_);
	bool cppVar_20190 = (cppVar_20188 == 135);
	BIT_VEC cppVar_20191 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20192 = (cppVar_20191 << 3) | 4;
	cppVar_20192 = (cppVar_20192 & cppMask_un_5_);
	BIT_VEC cppVar_20193 = (0 << 5) | cppVar_20192;
	cppVar_20193 = (cppVar_20193 & cppMask_un_8_);
	bool cppVar_20195 = (cppVar_20193 == 136);
	BIT_VEC cppVar_20196 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20197 = (cppVar_20196 << 3) | 4;
	cppVar_20197 = (cppVar_20197 & cppMask_un_5_);
	BIT_VEC cppVar_20198 = (0 << 5) | cppVar_20197;
	cppVar_20198 = (cppVar_20198 & cppMask_un_8_);
	bool cppVar_20200 = (cppVar_20198 == 137);
	BIT_VEC cppVar_20201 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20202 = (cppVar_20201 << 3) | 4;
	cppVar_20202 = (cppVar_20202 & cppMask_un_5_);
	BIT_VEC cppVar_20203 = (0 << 5) | cppVar_20202;
	cppVar_20203 = (cppVar_20203 & cppMask_un_8_);
	bool cppVar_20205 = (cppVar_20203 == 138);
	BIT_VEC cppVar_20206 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20207 = (cppVar_20206 << 3) | 4;
	cppVar_20207 = (cppVar_20207 & cppMask_un_5_);
	BIT_VEC cppVar_20208 = (0 << 5) | cppVar_20207;
	cppVar_20208 = (cppVar_20208 & cppMask_un_8_);
	bool cppVar_20210 = (cppVar_20208 == 140);
	BIT_VEC cppVar_20211 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20212 = (cppVar_20211 << 3) | 4;
	cppVar_20212 = (cppVar_20212 & cppMask_un_5_);
	BIT_VEC cppVar_20213 = (0 << 5) | cppVar_20212;
	cppVar_20213 = (cppVar_20213 & cppMask_un_8_);
	bool cppVar_20215 = (cppVar_20213 == 139);
	BIT_VEC cppVar_20216 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20217 = (cppVar_20216 << 3) | 4;
	cppVar_20217 = (cppVar_20217 & cppMask_un_5_);
	BIT_VEC cppVar_20218 = (0 << 5) | cppVar_20217;
	cppVar_20218 = (cppVar_20218 & cppMask_un_8_);
	bool cppVar_20220 = (cppVar_20218 == 141);
	BIT_VEC cppVar_20221 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20222 = (cppVar_20221 << 3) | 4;
	cppVar_20222 = (cppVar_20222 & cppMask_un_5_);
	BIT_VEC cppVar_20223 = (0 << 5) | cppVar_20222;
	cppVar_20223 = (cppVar_20223 & cppMask_un_8_);
	bool cppVar_20225 = (cppVar_20223 == 144);
	BIT_VEC cppVar_20226 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20227 = (cppVar_20226 << 3) | 4;
	cppVar_20227 = (cppVar_20227 & cppMask_un_5_);
	BIT_VEC cppVar_20228 = (0 << 5) | cppVar_20227;
	cppVar_20228 = (cppVar_20228 & cppMask_un_8_);
	bool cppVar_20230 = (cppVar_20228 == 152);
	BIT_VEC cppVar_20231 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20232 = (cppVar_20231 << 3) | 4;
	cppVar_20232 = (cppVar_20232 & cppMask_un_5_);
	BIT_VEC cppVar_20233 = (0 << 5) | cppVar_20232;
	cppVar_20233 = (cppVar_20233 & cppMask_un_8_);
	bool cppVar_20235 = (cppVar_20233 == 153);
	BIT_VEC cppVar_20236 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20237 = (cppVar_20236 << 3) | 4;
	cppVar_20237 = (cppVar_20237 & cppMask_un_5_);
	BIT_VEC cppVar_20238 = (0 << 5) | cppVar_20237;
	cppVar_20238 = (cppVar_20238 & cppMask_un_8_);
	bool cppVar_20240 = (cppVar_20238 == 160);
	BIT_VEC cppVar_20241 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20242 = (cppVar_20241 << 3) | 4;
	cppVar_20242 = (cppVar_20242 & cppMask_un_5_);
	BIT_VEC cppVar_20243 = (0 << 5) | cppVar_20242;
	cppVar_20243 = (cppVar_20243 & cppMask_un_8_);
	bool cppVar_20245 = (cppVar_20243 == 168);
	BIT_VEC cppVar_20246 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20247 = (cppVar_20246 << 3) | 4;
	cppVar_20247 = (cppVar_20247 & cppMask_un_5_);
	BIT_VEC cppVar_20248 = (0 << 5) | cppVar_20247;
	cppVar_20248 = (cppVar_20248 & cppMask_un_8_);
	bool cppVar_20250 = (cppVar_20248 == 176);
	BIT_VEC cppVar_20251 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20252 = (cppVar_20251 << 3) | 4;
	cppVar_20252 = (cppVar_20252 & cppMask_un_5_);
	BIT_VEC cppVar_20253 = (0 << 5) | cppVar_20252;
	cppVar_20253 = (cppVar_20253 & cppMask_un_8_);
	bool cppVar_20255 = (cppVar_20253 == 184);
	BIT_VEC cppVar_20256 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20257 = (cppVar_20256 << 3) | 4;
	cppVar_20257 = (cppVar_20257 & cppMask_un_5_);
	BIT_VEC cppVar_20258 = (0 << 5) | cppVar_20257;
	cppVar_20258 = (cppVar_20258 & cppMask_un_8_);
	bool cppVar_20260 = (cppVar_20258 == 208);
	BIT_VEC cppVar_20261 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20262 = (cppVar_20261 << 3) | 4;
	cppVar_20262 = (cppVar_20262 & cppMask_un_5_);
	BIT_VEC cppVar_20263 = (0 << 5) | cppVar_20262;
	cppVar_20263 = (cppVar_20263 & cppMask_un_8_);
	bool cppVar_20265 = (cppVar_20263 == 224);
	BIT_VEC cppVar_20266 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20267 = (cppVar_20266 << 3) | 4;
	cppVar_20267 = (cppVar_20267 & cppMask_un_5_);
	BIT_VEC cppVar_20268 = (0 << 5) | cppVar_20267;
	cppVar_20268 = (cppVar_20268 & cppMask_un_8_);
	bool cppVar_20270 = (cppVar_20268 == 240);
	BIT_VEC cppVar_20272 = (cppVar_20270) ? B : 0;
	BIT_VEC cppVar_20273 = (cppVar_20265) ? ACC : cppVar_20272;
	BIT_VEC cppVar_20274 = (cppVar_20260) ? PSW : cppVar_20273;
	BIT_VEC cppVar_20275 = (cppVar_20255) ? IP : cppVar_20274;
	BIT_VEC cppVar_20276 = (cppVar_20250) ? P3 : cppVar_20275;
	BIT_VEC cppVar_20277 = (cppVar_20245) ? IE : cppVar_20276;
	BIT_VEC cppVar_20278 = (cppVar_20240) ? P2 : cppVar_20277;
	BIT_VEC cppVar_20279 = (cppVar_20235) ? SBUF : cppVar_20278;
	BIT_VEC cppVar_20280 = (cppVar_20230) ? SCON : cppVar_20279;
	BIT_VEC cppVar_20281 = (cppVar_20225) ? P1 : cppVar_20280;
	BIT_VEC cppVar_20282 = (cppVar_20220) ? TH1 : cppVar_20281;
	BIT_VEC cppVar_20283 = (cppVar_20215) ? TL1 : cppVar_20282;
	BIT_VEC cppVar_20284 = (cppVar_20210) ? TH0 : cppVar_20283;
	BIT_VEC cppVar_20285 = (cppVar_20205) ? TL0 : cppVar_20284;
	BIT_VEC cppVar_20286 = (cppVar_20200) ? TMOD : cppVar_20285;
	BIT_VEC cppVar_20287 = (cppVar_20195) ? TCON : cppVar_20286;
	BIT_VEC cppVar_20288 = (cppVar_20190) ? PCON : cppVar_20287;
	BIT_VEC cppVar_20289 = (cppVar_20185) ? DPH : cppVar_20288;
	BIT_VEC cppVar_20290 = (cppVar_20180) ? DPL : cppVar_20289;
	BIT_VEC cppVar_20291 = (cppVar_20175) ? SP : cppVar_20290;
	BIT_VEC cppVar_20292 = (cppVar_20170) ? P0 : cppVar_20291;
	BIT_VEC cppVar_20293 = (cppVar_20161) ? cppVar_20165 : cppVar_20292;
	BIT_VEC cppVar_20294 = (cppVar_20153) ? cppVar_20293 : IP;
	BIT_VEC cppVar_20295 = ROM.rd(PC);
	bool cppVar_20297 = (cppVar_20295 == 139);
	BIT_VEC cppVar_20299 = PC + 1;
	cppVar_20299 = (cppVar_20299 & cppMask_un_16_);
	BIT_VEC cppVar_20300 = ROM.rd(cppVar_20299);
	bool cppVar_20302 = (cppVar_20300 == 184);
	BIT_VEC cppVar_20304 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20306 = (cppVar_20304 << 3) | 3;
	cppVar_20306 = (cppVar_20306 & cppMask_un_5_);
	BIT_VEC cppVar_20307 = (0 << 5) | cppVar_20306;
	cppVar_20307 = (cppVar_20307 & cppMask_un_8_);
	BIT_VEC cppVar_20308 = (cppVar_20307 >> 7) & cppMask_un_1_;
	bool cppVar_20310 = (cppVar_20308 == 0);
	BIT_VEC cppVar_20311 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20312 = (cppVar_20311 << 3) | 3;
	cppVar_20312 = (cppVar_20312 & cppMask_un_5_);
	BIT_VEC cppVar_20313 = (0 << 5) | cppVar_20312;
	cppVar_20313 = (cppVar_20313 & cppMask_un_8_);
	BIT_VEC cppVar_20314 = IRAM.rd(cppVar_20313);
	BIT_VEC cppVar_20315 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20316 = (cppVar_20315 << 3) | 3;
	cppVar_20316 = (cppVar_20316 & cppMask_un_5_);
	BIT_VEC cppVar_20317 = (0 << 5) | cppVar_20316;
	cppVar_20317 = (cppVar_20317 & cppMask_un_8_);
	bool cppVar_20319 = (cppVar_20317 == 128);
	BIT_VEC cppVar_20320 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20321 = (cppVar_20320 << 3) | 3;
	cppVar_20321 = (cppVar_20321 & cppMask_un_5_);
	BIT_VEC cppVar_20322 = (0 << 5) | cppVar_20321;
	cppVar_20322 = (cppVar_20322 & cppMask_un_8_);
	bool cppVar_20324 = (cppVar_20322 == 129);
	BIT_VEC cppVar_20325 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20326 = (cppVar_20325 << 3) | 3;
	cppVar_20326 = (cppVar_20326 & cppMask_un_5_);
	BIT_VEC cppVar_20327 = (0 << 5) | cppVar_20326;
	cppVar_20327 = (cppVar_20327 & cppMask_un_8_);
	bool cppVar_20329 = (cppVar_20327 == 130);
	BIT_VEC cppVar_20330 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20331 = (cppVar_20330 << 3) | 3;
	cppVar_20331 = (cppVar_20331 & cppMask_un_5_);
	BIT_VEC cppVar_20332 = (0 << 5) | cppVar_20331;
	cppVar_20332 = (cppVar_20332 & cppMask_un_8_);
	bool cppVar_20334 = (cppVar_20332 == 131);
	BIT_VEC cppVar_20335 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20336 = (cppVar_20335 << 3) | 3;
	cppVar_20336 = (cppVar_20336 & cppMask_un_5_);
	BIT_VEC cppVar_20337 = (0 << 5) | cppVar_20336;
	cppVar_20337 = (cppVar_20337 & cppMask_un_8_);
	bool cppVar_20339 = (cppVar_20337 == 135);
	BIT_VEC cppVar_20340 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20341 = (cppVar_20340 << 3) | 3;
	cppVar_20341 = (cppVar_20341 & cppMask_un_5_);
	BIT_VEC cppVar_20342 = (0 << 5) | cppVar_20341;
	cppVar_20342 = (cppVar_20342 & cppMask_un_8_);
	bool cppVar_20344 = (cppVar_20342 == 136);
	BIT_VEC cppVar_20345 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20346 = (cppVar_20345 << 3) | 3;
	cppVar_20346 = (cppVar_20346 & cppMask_un_5_);
	BIT_VEC cppVar_20347 = (0 << 5) | cppVar_20346;
	cppVar_20347 = (cppVar_20347 & cppMask_un_8_);
	bool cppVar_20349 = (cppVar_20347 == 137);
	BIT_VEC cppVar_20350 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20351 = (cppVar_20350 << 3) | 3;
	cppVar_20351 = (cppVar_20351 & cppMask_un_5_);
	BIT_VEC cppVar_20352 = (0 << 5) | cppVar_20351;
	cppVar_20352 = (cppVar_20352 & cppMask_un_8_);
	bool cppVar_20354 = (cppVar_20352 == 138);
	BIT_VEC cppVar_20355 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20356 = (cppVar_20355 << 3) | 3;
	cppVar_20356 = (cppVar_20356 & cppMask_un_5_);
	BIT_VEC cppVar_20357 = (0 << 5) | cppVar_20356;
	cppVar_20357 = (cppVar_20357 & cppMask_un_8_);
	bool cppVar_20359 = (cppVar_20357 == 140);
	BIT_VEC cppVar_20360 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20361 = (cppVar_20360 << 3) | 3;
	cppVar_20361 = (cppVar_20361 & cppMask_un_5_);
	BIT_VEC cppVar_20362 = (0 << 5) | cppVar_20361;
	cppVar_20362 = (cppVar_20362 & cppMask_un_8_);
	bool cppVar_20364 = (cppVar_20362 == 139);
	BIT_VEC cppVar_20365 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20366 = (cppVar_20365 << 3) | 3;
	cppVar_20366 = (cppVar_20366 & cppMask_un_5_);
	BIT_VEC cppVar_20367 = (0 << 5) | cppVar_20366;
	cppVar_20367 = (cppVar_20367 & cppMask_un_8_);
	bool cppVar_20369 = (cppVar_20367 == 141);
	BIT_VEC cppVar_20370 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20371 = (cppVar_20370 << 3) | 3;
	cppVar_20371 = (cppVar_20371 & cppMask_un_5_);
	BIT_VEC cppVar_20372 = (0 << 5) | cppVar_20371;
	cppVar_20372 = (cppVar_20372 & cppMask_un_8_);
	bool cppVar_20374 = (cppVar_20372 == 144);
	BIT_VEC cppVar_20375 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20376 = (cppVar_20375 << 3) | 3;
	cppVar_20376 = (cppVar_20376 & cppMask_un_5_);
	BIT_VEC cppVar_20377 = (0 << 5) | cppVar_20376;
	cppVar_20377 = (cppVar_20377 & cppMask_un_8_);
	bool cppVar_20379 = (cppVar_20377 == 152);
	BIT_VEC cppVar_20380 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20381 = (cppVar_20380 << 3) | 3;
	cppVar_20381 = (cppVar_20381 & cppMask_un_5_);
	BIT_VEC cppVar_20382 = (0 << 5) | cppVar_20381;
	cppVar_20382 = (cppVar_20382 & cppMask_un_8_);
	bool cppVar_20384 = (cppVar_20382 == 153);
	BIT_VEC cppVar_20385 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20386 = (cppVar_20385 << 3) | 3;
	cppVar_20386 = (cppVar_20386 & cppMask_un_5_);
	BIT_VEC cppVar_20387 = (0 << 5) | cppVar_20386;
	cppVar_20387 = (cppVar_20387 & cppMask_un_8_);
	bool cppVar_20389 = (cppVar_20387 == 160);
	BIT_VEC cppVar_20390 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20391 = (cppVar_20390 << 3) | 3;
	cppVar_20391 = (cppVar_20391 & cppMask_un_5_);
	BIT_VEC cppVar_20392 = (0 << 5) | cppVar_20391;
	cppVar_20392 = (cppVar_20392 & cppMask_un_8_);
	bool cppVar_20394 = (cppVar_20392 == 168);
	BIT_VEC cppVar_20395 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20396 = (cppVar_20395 << 3) | 3;
	cppVar_20396 = (cppVar_20396 & cppMask_un_5_);
	BIT_VEC cppVar_20397 = (0 << 5) | cppVar_20396;
	cppVar_20397 = (cppVar_20397 & cppMask_un_8_);
	bool cppVar_20399 = (cppVar_20397 == 176);
	BIT_VEC cppVar_20400 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20401 = (cppVar_20400 << 3) | 3;
	cppVar_20401 = (cppVar_20401 & cppMask_un_5_);
	BIT_VEC cppVar_20402 = (0 << 5) | cppVar_20401;
	cppVar_20402 = (cppVar_20402 & cppMask_un_8_);
	bool cppVar_20404 = (cppVar_20402 == 184);
	BIT_VEC cppVar_20405 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20406 = (cppVar_20405 << 3) | 3;
	cppVar_20406 = (cppVar_20406 & cppMask_un_5_);
	BIT_VEC cppVar_20407 = (0 << 5) | cppVar_20406;
	cppVar_20407 = (cppVar_20407 & cppMask_un_8_);
	bool cppVar_20409 = (cppVar_20407 == 208);
	BIT_VEC cppVar_20410 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20411 = (cppVar_20410 << 3) | 3;
	cppVar_20411 = (cppVar_20411 & cppMask_un_5_);
	BIT_VEC cppVar_20412 = (0 << 5) | cppVar_20411;
	cppVar_20412 = (cppVar_20412 & cppMask_un_8_);
	bool cppVar_20414 = (cppVar_20412 == 224);
	BIT_VEC cppVar_20415 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20416 = (cppVar_20415 << 3) | 3;
	cppVar_20416 = (cppVar_20416 & cppMask_un_5_);
	BIT_VEC cppVar_20417 = (0 << 5) | cppVar_20416;
	cppVar_20417 = (cppVar_20417 & cppMask_un_8_);
	bool cppVar_20419 = (cppVar_20417 == 240);
	BIT_VEC cppVar_20421 = (cppVar_20419) ? B : 0;
	BIT_VEC cppVar_20422 = (cppVar_20414) ? ACC : cppVar_20421;
	BIT_VEC cppVar_20423 = (cppVar_20409) ? PSW : cppVar_20422;
	BIT_VEC cppVar_20424 = (cppVar_20404) ? IP : cppVar_20423;
	BIT_VEC cppVar_20425 = (cppVar_20399) ? P3 : cppVar_20424;
	BIT_VEC cppVar_20426 = (cppVar_20394) ? IE : cppVar_20425;
	BIT_VEC cppVar_20427 = (cppVar_20389) ? P2 : cppVar_20426;
	BIT_VEC cppVar_20428 = (cppVar_20384) ? SBUF : cppVar_20427;
	BIT_VEC cppVar_20429 = (cppVar_20379) ? SCON : cppVar_20428;
	BIT_VEC cppVar_20430 = (cppVar_20374) ? P1 : cppVar_20429;
	BIT_VEC cppVar_20431 = (cppVar_20369) ? TH1 : cppVar_20430;
	BIT_VEC cppVar_20432 = (cppVar_20364) ? TL1 : cppVar_20431;
	BIT_VEC cppVar_20433 = (cppVar_20359) ? TH0 : cppVar_20432;
	BIT_VEC cppVar_20434 = (cppVar_20354) ? TL0 : cppVar_20433;
	BIT_VEC cppVar_20435 = (cppVar_20349) ? TMOD : cppVar_20434;
	BIT_VEC cppVar_20436 = (cppVar_20344) ? TCON : cppVar_20435;
	BIT_VEC cppVar_20437 = (cppVar_20339) ? PCON : cppVar_20436;
	BIT_VEC cppVar_20438 = (cppVar_20334) ? DPH : cppVar_20437;
	BIT_VEC cppVar_20439 = (cppVar_20329) ? DPL : cppVar_20438;
	BIT_VEC cppVar_20440 = (cppVar_20324) ? SP : cppVar_20439;
	BIT_VEC cppVar_20441 = (cppVar_20319) ? P0 : cppVar_20440;
	BIT_VEC cppVar_20442 = (cppVar_20310) ? cppVar_20314 : cppVar_20441;
	BIT_VEC cppVar_20443 = (cppVar_20302) ? cppVar_20442 : IP;
	BIT_VEC cppVar_20444 = ROM.rd(PC);
	bool cppVar_20446 = (cppVar_20444 == 138);
	BIT_VEC cppVar_20448 = PC + 1;
	cppVar_20448 = (cppVar_20448 & cppMask_un_16_);
	BIT_VEC cppVar_20449 = ROM.rd(cppVar_20448);
	bool cppVar_20451 = (cppVar_20449 == 184);
	BIT_VEC cppVar_20453 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20455 = (cppVar_20453 << 3) | 2;
	cppVar_20455 = (cppVar_20455 & cppMask_un_5_);
	BIT_VEC cppVar_20456 = (0 << 5) | cppVar_20455;
	cppVar_20456 = (cppVar_20456 & cppMask_un_8_);
	BIT_VEC cppVar_20457 = (cppVar_20456 >> 7) & cppMask_un_1_;
	bool cppVar_20459 = (cppVar_20457 == 0);
	BIT_VEC cppVar_20460 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20461 = (cppVar_20460 << 3) | 2;
	cppVar_20461 = (cppVar_20461 & cppMask_un_5_);
	BIT_VEC cppVar_20462 = (0 << 5) | cppVar_20461;
	cppVar_20462 = (cppVar_20462 & cppMask_un_8_);
	BIT_VEC cppVar_20463 = IRAM.rd(cppVar_20462);
	BIT_VEC cppVar_20464 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20465 = (cppVar_20464 << 3) | 2;
	cppVar_20465 = (cppVar_20465 & cppMask_un_5_);
	BIT_VEC cppVar_20466 = (0 << 5) | cppVar_20465;
	cppVar_20466 = (cppVar_20466 & cppMask_un_8_);
	bool cppVar_20468 = (cppVar_20466 == 128);
	BIT_VEC cppVar_20469 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20470 = (cppVar_20469 << 3) | 2;
	cppVar_20470 = (cppVar_20470 & cppMask_un_5_);
	BIT_VEC cppVar_20471 = (0 << 5) | cppVar_20470;
	cppVar_20471 = (cppVar_20471 & cppMask_un_8_);
	bool cppVar_20473 = (cppVar_20471 == 129);
	BIT_VEC cppVar_20474 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20475 = (cppVar_20474 << 3) | 2;
	cppVar_20475 = (cppVar_20475 & cppMask_un_5_);
	BIT_VEC cppVar_20476 = (0 << 5) | cppVar_20475;
	cppVar_20476 = (cppVar_20476 & cppMask_un_8_);
	bool cppVar_20478 = (cppVar_20476 == 130);
	BIT_VEC cppVar_20479 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20480 = (cppVar_20479 << 3) | 2;
	cppVar_20480 = (cppVar_20480 & cppMask_un_5_);
	BIT_VEC cppVar_20481 = (0 << 5) | cppVar_20480;
	cppVar_20481 = (cppVar_20481 & cppMask_un_8_);
	bool cppVar_20483 = (cppVar_20481 == 131);
	BIT_VEC cppVar_20484 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20485 = (cppVar_20484 << 3) | 2;
	cppVar_20485 = (cppVar_20485 & cppMask_un_5_);
	BIT_VEC cppVar_20486 = (0 << 5) | cppVar_20485;
	cppVar_20486 = (cppVar_20486 & cppMask_un_8_);
	bool cppVar_20488 = (cppVar_20486 == 135);
	BIT_VEC cppVar_20489 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20490 = (cppVar_20489 << 3) | 2;
	cppVar_20490 = (cppVar_20490 & cppMask_un_5_);
	BIT_VEC cppVar_20491 = (0 << 5) | cppVar_20490;
	cppVar_20491 = (cppVar_20491 & cppMask_un_8_);
	bool cppVar_20493 = (cppVar_20491 == 136);
	BIT_VEC cppVar_20494 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20495 = (cppVar_20494 << 3) | 2;
	cppVar_20495 = (cppVar_20495 & cppMask_un_5_);
	BIT_VEC cppVar_20496 = (0 << 5) | cppVar_20495;
	cppVar_20496 = (cppVar_20496 & cppMask_un_8_);
	bool cppVar_20498 = (cppVar_20496 == 137);
	BIT_VEC cppVar_20499 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20500 = (cppVar_20499 << 3) | 2;
	cppVar_20500 = (cppVar_20500 & cppMask_un_5_);
	BIT_VEC cppVar_20501 = (0 << 5) | cppVar_20500;
	cppVar_20501 = (cppVar_20501 & cppMask_un_8_);
	bool cppVar_20503 = (cppVar_20501 == 138);
	BIT_VEC cppVar_20504 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20505 = (cppVar_20504 << 3) | 2;
	cppVar_20505 = (cppVar_20505 & cppMask_un_5_);
	BIT_VEC cppVar_20506 = (0 << 5) | cppVar_20505;
	cppVar_20506 = (cppVar_20506 & cppMask_un_8_);
	bool cppVar_20508 = (cppVar_20506 == 140);
	BIT_VEC cppVar_20509 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20510 = (cppVar_20509 << 3) | 2;
	cppVar_20510 = (cppVar_20510 & cppMask_un_5_);
	BIT_VEC cppVar_20511 = (0 << 5) | cppVar_20510;
	cppVar_20511 = (cppVar_20511 & cppMask_un_8_);
	bool cppVar_20513 = (cppVar_20511 == 139);
	BIT_VEC cppVar_20514 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20515 = (cppVar_20514 << 3) | 2;
	cppVar_20515 = (cppVar_20515 & cppMask_un_5_);
	BIT_VEC cppVar_20516 = (0 << 5) | cppVar_20515;
	cppVar_20516 = (cppVar_20516 & cppMask_un_8_);
	bool cppVar_20518 = (cppVar_20516 == 141);
	BIT_VEC cppVar_20519 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20520 = (cppVar_20519 << 3) | 2;
	cppVar_20520 = (cppVar_20520 & cppMask_un_5_);
	BIT_VEC cppVar_20521 = (0 << 5) | cppVar_20520;
	cppVar_20521 = (cppVar_20521 & cppMask_un_8_);
	bool cppVar_20523 = (cppVar_20521 == 144);
	BIT_VEC cppVar_20524 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20525 = (cppVar_20524 << 3) | 2;
	cppVar_20525 = (cppVar_20525 & cppMask_un_5_);
	BIT_VEC cppVar_20526 = (0 << 5) | cppVar_20525;
	cppVar_20526 = (cppVar_20526 & cppMask_un_8_);
	bool cppVar_20528 = (cppVar_20526 == 152);
	BIT_VEC cppVar_20529 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20530 = (cppVar_20529 << 3) | 2;
	cppVar_20530 = (cppVar_20530 & cppMask_un_5_);
	BIT_VEC cppVar_20531 = (0 << 5) | cppVar_20530;
	cppVar_20531 = (cppVar_20531 & cppMask_un_8_);
	bool cppVar_20533 = (cppVar_20531 == 153);
	BIT_VEC cppVar_20534 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20535 = (cppVar_20534 << 3) | 2;
	cppVar_20535 = (cppVar_20535 & cppMask_un_5_);
	BIT_VEC cppVar_20536 = (0 << 5) | cppVar_20535;
	cppVar_20536 = (cppVar_20536 & cppMask_un_8_);
	bool cppVar_20538 = (cppVar_20536 == 160);
	BIT_VEC cppVar_20539 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20540 = (cppVar_20539 << 3) | 2;
	cppVar_20540 = (cppVar_20540 & cppMask_un_5_);
	BIT_VEC cppVar_20541 = (0 << 5) | cppVar_20540;
	cppVar_20541 = (cppVar_20541 & cppMask_un_8_);
	bool cppVar_20543 = (cppVar_20541 == 168);
	BIT_VEC cppVar_20544 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20545 = (cppVar_20544 << 3) | 2;
	cppVar_20545 = (cppVar_20545 & cppMask_un_5_);
	BIT_VEC cppVar_20546 = (0 << 5) | cppVar_20545;
	cppVar_20546 = (cppVar_20546 & cppMask_un_8_);
	bool cppVar_20548 = (cppVar_20546 == 176);
	BIT_VEC cppVar_20549 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20550 = (cppVar_20549 << 3) | 2;
	cppVar_20550 = (cppVar_20550 & cppMask_un_5_);
	BIT_VEC cppVar_20551 = (0 << 5) | cppVar_20550;
	cppVar_20551 = (cppVar_20551 & cppMask_un_8_);
	bool cppVar_20553 = (cppVar_20551 == 184);
	BIT_VEC cppVar_20554 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20555 = (cppVar_20554 << 3) | 2;
	cppVar_20555 = (cppVar_20555 & cppMask_un_5_);
	BIT_VEC cppVar_20556 = (0 << 5) | cppVar_20555;
	cppVar_20556 = (cppVar_20556 & cppMask_un_8_);
	bool cppVar_20558 = (cppVar_20556 == 208);
	BIT_VEC cppVar_20559 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20560 = (cppVar_20559 << 3) | 2;
	cppVar_20560 = (cppVar_20560 & cppMask_un_5_);
	BIT_VEC cppVar_20561 = (0 << 5) | cppVar_20560;
	cppVar_20561 = (cppVar_20561 & cppMask_un_8_);
	bool cppVar_20563 = (cppVar_20561 == 224);
	BIT_VEC cppVar_20564 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20565 = (cppVar_20564 << 3) | 2;
	cppVar_20565 = (cppVar_20565 & cppMask_un_5_);
	BIT_VEC cppVar_20566 = (0 << 5) | cppVar_20565;
	cppVar_20566 = (cppVar_20566 & cppMask_un_8_);
	bool cppVar_20568 = (cppVar_20566 == 240);
	BIT_VEC cppVar_20570 = (cppVar_20568) ? B : 0;
	BIT_VEC cppVar_20571 = (cppVar_20563) ? ACC : cppVar_20570;
	BIT_VEC cppVar_20572 = (cppVar_20558) ? PSW : cppVar_20571;
	BIT_VEC cppVar_20573 = (cppVar_20553) ? IP : cppVar_20572;
	BIT_VEC cppVar_20574 = (cppVar_20548) ? P3 : cppVar_20573;
	BIT_VEC cppVar_20575 = (cppVar_20543) ? IE : cppVar_20574;
	BIT_VEC cppVar_20576 = (cppVar_20538) ? P2 : cppVar_20575;
	BIT_VEC cppVar_20577 = (cppVar_20533) ? SBUF : cppVar_20576;
	BIT_VEC cppVar_20578 = (cppVar_20528) ? SCON : cppVar_20577;
	BIT_VEC cppVar_20579 = (cppVar_20523) ? P1 : cppVar_20578;
	BIT_VEC cppVar_20580 = (cppVar_20518) ? TH1 : cppVar_20579;
	BIT_VEC cppVar_20581 = (cppVar_20513) ? TL1 : cppVar_20580;
	BIT_VEC cppVar_20582 = (cppVar_20508) ? TH0 : cppVar_20581;
	BIT_VEC cppVar_20583 = (cppVar_20503) ? TL0 : cppVar_20582;
	BIT_VEC cppVar_20584 = (cppVar_20498) ? TMOD : cppVar_20583;
	BIT_VEC cppVar_20585 = (cppVar_20493) ? TCON : cppVar_20584;
	BIT_VEC cppVar_20586 = (cppVar_20488) ? PCON : cppVar_20585;
	BIT_VEC cppVar_20587 = (cppVar_20483) ? DPH : cppVar_20586;
	BIT_VEC cppVar_20588 = (cppVar_20478) ? DPL : cppVar_20587;
	BIT_VEC cppVar_20589 = (cppVar_20473) ? SP : cppVar_20588;
	BIT_VEC cppVar_20590 = (cppVar_20468) ? P0 : cppVar_20589;
	BIT_VEC cppVar_20591 = (cppVar_20459) ? cppVar_20463 : cppVar_20590;
	BIT_VEC cppVar_20592 = (cppVar_20451) ? cppVar_20591 : IP;
	BIT_VEC cppVar_20593 = ROM.rd(PC);
	bool cppVar_20595 = (cppVar_20593 == 137);
	BIT_VEC cppVar_20597 = PC + 1;
	cppVar_20597 = (cppVar_20597 & cppMask_un_16_);
	BIT_VEC cppVar_20598 = ROM.rd(cppVar_20597);
	bool cppVar_20600 = (cppVar_20598 == 184);
	BIT_VEC cppVar_20602 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20604 = (cppVar_20602 << 3) | 1;
	cppVar_20604 = (cppVar_20604 & cppMask_un_5_);
	BIT_VEC cppVar_20605 = (0 << 5) | cppVar_20604;
	cppVar_20605 = (cppVar_20605 & cppMask_un_8_);
	BIT_VEC cppVar_20606 = (cppVar_20605 >> 7) & cppMask_un_1_;
	bool cppVar_20608 = (cppVar_20606 == 0);
	BIT_VEC cppVar_20609 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20610 = (cppVar_20609 << 3) | 1;
	cppVar_20610 = (cppVar_20610 & cppMask_un_5_);
	BIT_VEC cppVar_20611 = (0 << 5) | cppVar_20610;
	cppVar_20611 = (cppVar_20611 & cppMask_un_8_);
	BIT_VEC cppVar_20612 = IRAM.rd(cppVar_20611);
	BIT_VEC cppVar_20613 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20614 = (cppVar_20613 << 3) | 1;
	cppVar_20614 = (cppVar_20614 & cppMask_un_5_);
	BIT_VEC cppVar_20615 = (0 << 5) | cppVar_20614;
	cppVar_20615 = (cppVar_20615 & cppMask_un_8_);
	bool cppVar_20617 = (cppVar_20615 == 128);
	BIT_VEC cppVar_20618 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20619 = (cppVar_20618 << 3) | 1;
	cppVar_20619 = (cppVar_20619 & cppMask_un_5_);
	BIT_VEC cppVar_20620 = (0 << 5) | cppVar_20619;
	cppVar_20620 = (cppVar_20620 & cppMask_un_8_);
	bool cppVar_20622 = (cppVar_20620 == 129);
	BIT_VEC cppVar_20623 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20624 = (cppVar_20623 << 3) | 1;
	cppVar_20624 = (cppVar_20624 & cppMask_un_5_);
	BIT_VEC cppVar_20625 = (0 << 5) | cppVar_20624;
	cppVar_20625 = (cppVar_20625 & cppMask_un_8_);
	bool cppVar_20627 = (cppVar_20625 == 130);
	BIT_VEC cppVar_20628 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20629 = (cppVar_20628 << 3) | 1;
	cppVar_20629 = (cppVar_20629 & cppMask_un_5_);
	BIT_VEC cppVar_20630 = (0 << 5) | cppVar_20629;
	cppVar_20630 = (cppVar_20630 & cppMask_un_8_);
	bool cppVar_20632 = (cppVar_20630 == 131);
	BIT_VEC cppVar_20633 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20634 = (cppVar_20633 << 3) | 1;
	cppVar_20634 = (cppVar_20634 & cppMask_un_5_);
	BIT_VEC cppVar_20635 = (0 << 5) | cppVar_20634;
	cppVar_20635 = (cppVar_20635 & cppMask_un_8_);
	bool cppVar_20637 = (cppVar_20635 == 135);
	BIT_VEC cppVar_20638 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20639 = (cppVar_20638 << 3) | 1;
	cppVar_20639 = (cppVar_20639 & cppMask_un_5_);
	BIT_VEC cppVar_20640 = (0 << 5) | cppVar_20639;
	cppVar_20640 = (cppVar_20640 & cppMask_un_8_);
	bool cppVar_20642 = (cppVar_20640 == 136);
	BIT_VEC cppVar_20643 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20644 = (cppVar_20643 << 3) | 1;
	cppVar_20644 = (cppVar_20644 & cppMask_un_5_);
	BIT_VEC cppVar_20645 = (0 << 5) | cppVar_20644;
	cppVar_20645 = (cppVar_20645 & cppMask_un_8_);
	bool cppVar_20647 = (cppVar_20645 == 137);
	BIT_VEC cppVar_20648 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20649 = (cppVar_20648 << 3) | 1;
	cppVar_20649 = (cppVar_20649 & cppMask_un_5_);
	BIT_VEC cppVar_20650 = (0 << 5) | cppVar_20649;
	cppVar_20650 = (cppVar_20650 & cppMask_un_8_);
	bool cppVar_20652 = (cppVar_20650 == 138);
	BIT_VEC cppVar_20653 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20654 = (cppVar_20653 << 3) | 1;
	cppVar_20654 = (cppVar_20654 & cppMask_un_5_);
	BIT_VEC cppVar_20655 = (0 << 5) | cppVar_20654;
	cppVar_20655 = (cppVar_20655 & cppMask_un_8_);
	bool cppVar_20657 = (cppVar_20655 == 140);
	BIT_VEC cppVar_20658 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20659 = (cppVar_20658 << 3) | 1;
	cppVar_20659 = (cppVar_20659 & cppMask_un_5_);
	BIT_VEC cppVar_20660 = (0 << 5) | cppVar_20659;
	cppVar_20660 = (cppVar_20660 & cppMask_un_8_);
	bool cppVar_20662 = (cppVar_20660 == 139);
	BIT_VEC cppVar_20663 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20664 = (cppVar_20663 << 3) | 1;
	cppVar_20664 = (cppVar_20664 & cppMask_un_5_);
	BIT_VEC cppVar_20665 = (0 << 5) | cppVar_20664;
	cppVar_20665 = (cppVar_20665 & cppMask_un_8_);
	bool cppVar_20667 = (cppVar_20665 == 141);
	BIT_VEC cppVar_20668 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20669 = (cppVar_20668 << 3) | 1;
	cppVar_20669 = (cppVar_20669 & cppMask_un_5_);
	BIT_VEC cppVar_20670 = (0 << 5) | cppVar_20669;
	cppVar_20670 = (cppVar_20670 & cppMask_un_8_);
	bool cppVar_20672 = (cppVar_20670 == 144);
	BIT_VEC cppVar_20673 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20674 = (cppVar_20673 << 3) | 1;
	cppVar_20674 = (cppVar_20674 & cppMask_un_5_);
	BIT_VEC cppVar_20675 = (0 << 5) | cppVar_20674;
	cppVar_20675 = (cppVar_20675 & cppMask_un_8_);
	bool cppVar_20677 = (cppVar_20675 == 152);
	BIT_VEC cppVar_20678 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20679 = (cppVar_20678 << 3) | 1;
	cppVar_20679 = (cppVar_20679 & cppMask_un_5_);
	BIT_VEC cppVar_20680 = (0 << 5) | cppVar_20679;
	cppVar_20680 = (cppVar_20680 & cppMask_un_8_);
	bool cppVar_20682 = (cppVar_20680 == 153);
	BIT_VEC cppVar_20683 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20684 = (cppVar_20683 << 3) | 1;
	cppVar_20684 = (cppVar_20684 & cppMask_un_5_);
	BIT_VEC cppVar_20685 = (0 << 5) | cppVar_20684;
	cppVar_20685 = (cppVar_20685 & cppMask_un_8_);
	bool cppVar_20687 = (cppVar_20685 == 160);
	BIT_VEC cppVar_20688 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20689 = (cppVar_20688 << 3) | 1;
	cppVar_20689 = (cppVar_20689 & cppMask_un_5_);
	BIT_VEC cppVar_20690 = (0 << 5) | cppVar_20689;
	cppVar_20690 = (cppVar_20690 & cppMask_un_8_);
	bool cppVar_20692 = (cppVar_20690 == 168);
	BIT_VEC cppVar_20693 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20694 = (cppVar_20693 << 3) | 1;
	cppVar_20694 = (cppVar_20694 & cppMask_un_5_);
	BIT_VEC cppVar_20695 = (0 << 5) | cppVar_20694;
	cppVar_20695 = (cppVar_20695 & cppMask_un_8_);
	bool cppVar_20697 = (cppVar_20695 == 176);
	BIT_VEC cppVar_20698 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20699 = (cppVar_20698 << 3) | 1;
	cppVar_20699 = (cppVar_20699 & cppMask_un_5_);
	BIT_VEC cppVar_20700 = (0 << 5) | cppVar_20699;
	cppVar_20700 = (cppVar_20700 & cppMask_un_8_);
	bool cppVar_20702 = (cppVar_20700 == 184);
	BIT_VEC cppVar_20703 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20704 = (cppVar_20703 << 3) | 1;
	cppVar_20704 = (cppVar_20704 & cppMask_un_5_);
	BIT_VEC cppVar_20705 = (0 << 5) | cppVar_20704;
	cppVar_20705 = (cppVar_20705 & cppMask_un_8_);
	bool cppVar_20707 = (cppVar_20705 == 208);
	BIT_VEC cppVar_20708 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20709 = (cppVar_20708 << 3) | 1;
	cppVar_20709 = (cppVar_20709 & cppMask_un_5_);
	BIT_VEC cppVar_20710 = (0 << 5) | cppVar_20709;
	cppVar_20710 = (cppVar_20710 & cppMask_un_8_);
	bool cppVar_20712 = (cppVar_20710 == 224);
	BIT_VEC cppVar_20713 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20714 = (cppVar_20713 << 3) | 1;
	cppVar_20714 = (cppVar_20714 & cppMask_un_5_);
	BIT_VEC cppVar_20715 = (0 << 5) | cppVar_20714;
	cppVar_20715 = (cppVar_20715 & cppMask_un_8_);
	bool cppVar_20717 = (cppVar_20715 == 240);
	BIT_VEC cppVar_20719 = (cppVar_20717) ? B : 0;
	BIT_VEC cppVar_20720 = (cppVar_20712) ? ACC : cppVar_20719;
	BIT_VEC cppVar_20721 = (cppVar_20707) ? PSW : cppVar_20720;
	BIT_VEC cppVar_20722 = (cppVar_20702) ? IP : cppVar_20721;
	BIT_VEC cppVar_20723 = (cppVar_20697) ? P3 : cppVar_20722;
	BIT_VEC cppVar_20724 = (cppVar_20692) ? IE : cppVar_20723;
	BIT_VEC cppVar_20725 = (cppVar_20687) ? P2 : cppVar_20724;
	BIT_VEC cppVar_20726 = (cppVar_20682) ? SBUF : cppVar_20725;
	BIT_VEC cppVar_20727 = (cppVar_20677) ? SCON : cppVar_20726;
	BIT_VEC cppVar_20728 = (cppVar_20672) ? P1 : cppVar_20727;
	BIT_VEC cppVar_20729 = (cppVar_20667) ? TH1 : cppVar_20728;
	BIT_VEC cppVar_20730 = (cppVar_20662) ? TL1 : cppVar_20729;
	BIT_VEC cppVar_20731 = (cppVar_20657) ? TH0 : cppVar_20730;
	BIT_VEC cppVar_20732 = (cppVar_20652) ? TL0 : cppVar_20731;
	BIT_VEC cppVar_20733 = (cppVar_20647) ? TMOD : cppVar_20732;
	BIT_VEC cppVar_20734 = (cppVar_20642) ? TCON : cppVar_20733;
	BIT_VEC cppVar_20735 = (cppVar_20637) ? PCON : cppVar_20734;
	BIT_VEC cppVar_20736 = (cppVar_20632) ? DPH : cppVar_20735;
	BIT_VEC cppVar_20737 = (cppVar_20627) ? DPL : cppVar_20736;
	BIT_VEC cppVar_20738 = (cppVar_20622) ? SP : cppVar_20737;
	BIT_VEC cppVar_20739 = (cppVar_20617) ? P0 : cppVar_20738;
	BIT_VEC cppVar_20740 = (cppVar_20608) ? cppVar_20612 : cppVar_20739;
	BIT_VEC cppVar_20741 = (cppVar_20600) ? cppVar_20740 : IP;
	BIT_VEC cppVar_20742 = ROM.rd(PC);
	bool cppVar_20744 = (cppVar_20742 == 136);
	BIT_VEC cppVar_20746 = PC + 1;
	cppVar_20746 = (cppVar_20746 & cppMask_un_16_);
	BIT_VEC cppVar_20747 = ROM.rd(cppVar_20746);
	bool cppVar_20749 = (cppVar_20747 == 184);
	BIT_VEC cppVar_20751 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20753 = (cppVar_20751 << 3) | 0;
	cppVar_20753 = (cppVar_20753 & cppMask_un_5_);
	BIT_VEC cppVar_20754 = (0 << 5) | cppVar_20753;
	cppVar_20754 = (cppVar_20754 & cppMask_un_8_);
	BIT_VEC cppVar_20755 = (cppVar_20754 >> 7) & cppMask_un_1_;
	bool cppVar_20757 = (cppVar_20755 == 0);
	BIT_VEC cppVar_20758 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20759 = (cppVar_20758 << 3) | 0;
	cppVar_20759 = (cppVar_20759 & cppMask_un_5_);
	BIT_VEC cppVar_20760 = (0 << 5) | cppVar_20759;
	cppVar_20760 = (cppVar_20760 & cppMask_un_8_);
	BIT_VEC cppVar_20761 = IRAM.rd(cppVar_20760);
	BIT_VEC cppVar_20762 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20763 = (cppVar_20762 << 3) | 0;
	cppVar_20763 = (cppVar_20763 & cppMask_un_5_);
	BIT_VEC cppVar_20764 = (0 << 5) | cppVar_20763;
	cppVar_20764 = (cppVar_20764 & cppMask_un_8_);
	bool cppVar_20766 = (cppVar_20764 == 128);
	BIT_VEC cppVar_20767 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20768 = (cppVar_20767 << 3) | 0;
	cppVar_20768 = (cppVar_20768 & cppMask_un_5_);
	BIT_VEC cppVar_20769 = (0 << 5) | cppVar_20768;
	cppVar_20769 = (cppVar_20769 & cppMask_un_8_);
	bool cppVar_20771 = (cppVar_20769 == 129);
	BIT_VEC cppVar_20772 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20773 = (cppVar_20772 << 3) | 0;
	cppVar_20773 = (cppVar_20773 & cppMask_un_5_);
	BIT_VEC cppVar_20774 = (0 << 5) | cppVar_20773;
	cppVar_20774 = (cppVar_20774 & cppMask_un_8_);
	bool cppVar_20776 = (cppVar_20774 == 130);
	BIT_VEC cppVar_20777 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20778 = (cppVar_20777 << 3) | 0;
	cppVar_20778 = (cppVar_20778 & cppMask_un_5_);
	BIT_VEC cppVar_20779 = (0 << 5) | cppVar_20778;
	cppVar_20779 = (cppVar_20779 & cppMask_un_8_);
	bool cppVar_20781 = (cppVar_20779 == 131);
	BIT_VEC cppVar_20782 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20783 = (cppVar_20782 << 3) | 0;
	cppVar_20783 = (cppVar_20783 & cppMask_un_5_);
	BIT_VEC cppVar_20784 = (0 << 5) | cppVar_20783;
	cppVar_20784 = (cppVar_20784 & cppMask_un_8_);
	bool cppVar_20786 = (cppVar_20784 == 135);
	BIT_VEC cppVar_20787 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20788 = (cppVar_20787 << 3) | 0;
	cppVar_20788 = (cppVar_20788 & cppMask_un_5_);
	BIT_VEC cppVar_20789 = (0 << 5) | cppVar_20788;
	cppVar_20789 = (cppVar_20789 & cppMask_un_8_);
	bool cppVar_20791 = (cppVar_20789 == 136);
	BIT_VEC cppVar_20792 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20793 = (cppVar_20792 << 3) | 0;
	cppVar_20793 = (cppVar_20793 & cppMask_un_5_);
	BIT_VEC cppVar_20794 = (0 << 5) | cppVar_20793;
	cppVar_20794 = (cppVar_20794 & cppMask_un_8_);
	bool cppVar_20796 = (cppVar_20794 == 137);
	BIT_VEC cppVar_20797 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20798 = (cppVar_20797 << 3) | 0;
	cppVar_20798 = (cppVar_20798 & cppMask_un_5_);
	BIT_VEC cppVar_20799 = (0 << 5) | cppVar_20798;
	cppVar_20799 = (cppVar_20799 & cppMask_un_8_);
	bool cppVar_20801 = (cppVar_20799 == 138);
	BIT_VEC cppVar_20802 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20803 = (cppVar_20802 << 3) | 0;
	cppVar_20803 = (cppVar_20803 & cppMask_un_5_);
	BIT_VEC cppVar_20804 = (0 << 5) | cppVar_20803;
	cppVar_20804 = (cppVar_20804 & cppMask_un_8_);
	bool cppVar_20806 = (cppVar_20804 == 140);
	BIT_VEC cppVar_20807 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20808 = (cppVar_20807 << 3) | 0;
	cppVar_20808 = (cppVar_20808 & cppMask_un_5_);
	BIT_VEC cppVar_20809 = (0 << 5) | cppVar_20808;
	cppVar_20809 = (cppVar_20809 & cppMask_un_8_);
	bool cppVar_20811 = (cppVar_20809 == 139);
	BIT_VEC cppVar_20812 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20813 = (cppVar_20812 << 3) | 0;
	cppVar_20813 = (cppVar_20813 & cppMask_un_5_);
	BIT_VEC cppVar_20814 = (0 << 5) | cppVar_20813;
	cppVar_20814 = (cppVar_20814 & cppMask_un_8_);
	bool cppVar_20816 = (cppVar_20814 == 141);
	BIT_VEC cppVar_20817 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20818 = (cppVar_20817 << 3) | 0;
	cppVar_20818 = (cppVar_20818 & cppMask_un_5_);
	BIT_VEC cppVar_20819 = (0 << 5) | cppVar_20818;
	cppVar_20819 = (cppVar_20819 & cppMask_un_8_);
	bool cppVar_20821 = (cppVar_20819 == 144);
	BIT_VEC cppVar_20822 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20823 = (cppVar_20822 << 3) | 0;
	cppVar_20823 = (cppVar_20823 & cppMask_un_5_);
	BIT_VEC cppVar_20824 = (0 << 5) | cppVar_20823;
	cppVar_20824 = (cppVar_20824 & cppMask_un_8_);
	bool cppVar_20826 = (cppVar_20824 == 152);
	BIT_VEC cppVar_20827 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20828 = (cppVar_20827 << 3) | 0;
	cppVar_20828 = (cppVar_20828 & cppMask_un_5_);
	BIT_VEC cppVar_20829 = (0 << 5) | cppVar_20828;
	cppVar_20829 = (cppVar_20829 & cppMask_un_8_);
	bool cppVar_20831 = (cppVar_20829 == 153);
	BIT_VEC cppVar_20832 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20833 = (cppVar_20832 << 3) | 0;
	cppVar_20833 = (cppVar_20833 & cppMask_un_5_);
	BIT_VEC cppVar_20834 = (0 << 5) | cppVar_20833;
	cppVar_20834 = (cppVar_20834 & cppMask_un_8_);
	bool cppVar_20836 = (cppVar_20834 == 160);
	BIT_VEC cppVar_20837 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20838 = (cppVar_20837 << 3) | 0;
	cppVar_20838 = (cppVar_20838 & cppMask_un_5_);
	BIT_VEC cppVar_20839 = (0 << 5) | cppVar_20838;
	cppVar_20839 = (cppVar_20839 & cppMask_un_8_);
	bool cppVar_20841 = (cppVar_20839 == 168);
	BIT_VEC cppVar_20842 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20843 = (cppVar_20842 << 3) | 0;
	cppVar_20843 = (cppVar_20843 & cppMask_un_5_);
	BIT_VEC cppVar_20844 = (0 << 5) | cppVar_20843;
	cppVar_20844 = (cppVar_20844 & cppMask_un_8_);
	bool cppVar_20846 = (cppVar_20844 == 176);
	BIT_VEC cppVar_20847 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20848 = (cppVar_20847 << 3) | 0;
	cppVar_20848 = (cppVar_20848 & cppMask_un_5_);
	BIT_VEC cppVar_20849 = (0 << 5) | cppVar_20848;
	cppVar_20849 = (cppVar_20849 & cppMask_un_8_);
	bool cppVar_20851 = (cppVar_20849 == 184);
	BIT_VEC cppVar_20852 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20853 = (cppVar_20852 << 3) | 0;
	cppVar_20853 = (cppVar_20853 & cppMask_un_5_);
	BIT_VEC cppVar_20854 = (0 << 5) | cppVar_20853;
	cppVar_20854 = (cppVar_20854 & cppMask_un_8_);
	bool cppVar_20856 = (cppVar_20854 == 208);
	BIT_VEC cppVar_20857 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20858 = (cppVar_20857 << 3) | 0;
	cppVar_20858 = (cppVar_20858 & cppMask_un_5_);
	BIT_VEC cppVar_20859 = (0 << 5) | cppVar_20858;
	cppVar_20859 = (cppVar_20859 & cppMask_un_8_);
	bool cppVar_20861 = (cppVar_20859 == 224);
	BIT_VEC cppVar_20862 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20863 = (cppVar_20862 << 3) | 0;
	cppVar_20863 = (cppVar_20863 & cppMask_un_5_);
	BIT_VEC cppVar_20864 = (0 << 5) | cppVar_20863;
	cppVar_20864 = (cppVar_20864 & cppMask_un_8_);
	bool cppVar_20866 = (cppVar_20864 == 240);
	BIT_VEC cppVar_20868 = (cppVar_20866) ? B : 0;
	BIT_VEC cppVar_20869 = (cppVar_20861) ? ACC : cppVar_20868;
	BIT_VEC cppVar_20870 = (cppVar_20856) ? PSW : cppVar_20869;
	BIT_VEC cppVar_20871 = (cppVar_20851) ? IP : cppVar_20870;
	BIT_VEC cppVar_20872 = (cppVar_20846) ? P3 : cppVar_20871;
	BIT_VEC cppVar_20873 = (cppVar_20841) ? IE : cppVar_20872;
	BIT_VEC cppVar_20874 = (cppVar_20836) ? P2 : cppVar_20873;
	BIT_VEC cppVar_20875 = (cppVar_20831) ? SBUF : cppVar_20874;
	BIT_VEC cppVar_20876 = (cppVar_20826) ? SCON : cppVar_20875;
	BIT_VEC cppVar_20877 = (cppVar_20821) ? P1 : cppVar_20876;
	BIT_VEC cppVar_20878 = (cppVar_20816) ? TH1 : cppVar_20877;
	BIT_VEC cppVar_20879 = (cppVar_20811) ? TL1 : cppVar_20878;
	BIT_VEC cppVar_20880 = (cppVar_20806) ? TH0 : cppVar_20879;
	BIT_VEC cppVar_20881 = (cppVar_20801) ? TL0 : cppVar_20880;
	BIT_VEC cppVar_20882 = (cppVar_20796) ? TMOD : cppVar_20881;
	BIT_VEC cppVar_20883 = (cppVar_20791) ? TCON : cppVar_20882;
	BIT_VEC cppVar_20884 = (cppVar_20786) ? PCON : cppVar_20883;
	BIT_VEC cppVar_20885 = (cppVar_20781) ? DPH : cppVar_20884;
	BIT_VEC cppVar_20886 = (cppVar_20776) ? DPL : cppVar_20885;
	BIT_VEC cppVar_20887 = (cppVar_20771) ? SP : cppVar_20886;
	BIT_VEC cppVar_20888 = (cppVar_20766) ? P0 : cppVar_20887;
	BIT_VEC cppVar_20889 = (cppVar_20757) ? cppVar_20761 : cppVar_20888;
	BIT_VEC cppVar_20890 = (cppVar_20749) ? cppVar_20889 : IP;
	BIT_VEC cppVar_20891 = ROM.rd(PC);
	bool cppVar_20893 = (cppVar_20891 == 135);
	BIT_VEC cppVar_20895 = PC + 1;
	cppVar_20895 = (cppVar_20895 & cppMask_un_16_);
	BIT_VEC cppVar_20896 = ROM.rd(cppVar_20895);
	bool cppVar_20898 = (cppVar_20896 == 184);
	BIT_VEC cppVar_20900 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20902 = (cppVar_20900 << 3) | 1;
	cppVar_20902 = (cppVar_20902 & cppMask_un_5_);
	BIT_VEC cppVar_20903 = (0 << 5) | cppVar_20902;
	cppVar_20903 = (cppVar_20903 & cppMask_un_8_);
	BIT_VEC cppVar_20904 = IRAM.rd(cppVar_20903);
	BIT_VEC cppVar_20905 = IRAM.rd(cppVar_20904);
	BIT_VEC cppVar_20906 = (cppVar_20898) ? cppVar_20905 : IP;
	BIT_VEC cppVar_20907 = ROM.rd(PC);
	bool cppVar_20909 = (cppVar_20907 == 134);
	BIT_VEC cppVar_20911 = PC + 1;
	cppVar_20911 = (cppVar_20911 & cppMask_un_16_);
	BIT_VEC cppVar_20912 = ROM.rd(cppVar_20911);
	bool cppVar_20914 = (cppVar_20912 == 184);
	BIT_VEC cppVar_20916 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_20918 = (cppVar_20916 << 3) | 0;
	cppVar_20918 = (cppVar_20918 & cppMask_un_5_);
	BIT_VEC cppVar_20919 = (0 << 5) | cppVar_20918;
	cppVar_20919 = (cppVar_20919 & cppMask_un_8_);
	BIT_VEC cppVar_20920 = IRAM.rd(cppVar_20919);
	BIT_VEC cppVar_20921 = IRAM.rd(cppVar_20920);
	BIT_VEC cppVar_20922 = (cppVar_20914) ? cppVar_20921 : IP;
	BIT_VEC cppVar_20923 = ROM.rd(PC);
	bool cppVar_20925 = (cppVar_20923 == 133);
	BIT_VEC cppVar_20927 = PC + 2;
	cppVar_20927 = (cppVar_20927 & cppMask_un_16_);
	BIT_VEC cppVar_20928 = ROM.rd(cppVar_20927);
	bool cppVar_20930 = (cppVar_20928 == 184);
	BIT_VEC cppVar_20932 = PC + 1;
	cppVar_20932 = (cppVar_20932 & cppMask_un_16_);
	BIT_VEC cppVar_20933 = ROM.rd(cppVar_20932);
	BIT_VEC cppVar_20934 = (cppVar_20933 >> 7) & cppMask_un_1_;
	bool cppVar_20936 = (cppVar_20934 == 0);
	BIT_VEC cppVar_20937 = PC + 1;
	cppVar_20937 = (cppVar_20937 & cppMask_un_16_);
	BIT_VEC cppVar_20938 = ROM.rd(cppVar_20937);
	BIT_VEC cppVar_20939 = IRAM.rd(cppVar_20938);
	BIT_VEC cppVar_20940 = PC + 1;
	cppVar_20940 = (cppVar_20940 & cppMask_un_16_);
	BIT_VEC cppVar_20941 = ROM.rd(cppVar_20940);
	bool cppVar_20943 = (cppVar_20941 == 128);
	BIT_VEC cppVar_20944 = PC + 1;
	cppVar_20944 = (cppVar_20944 & cppMask_un_16_);
	BIT_VEC cppVar_20945 = ROM.rd(cppVar_20944);
	bool cppVar_20947 = (cppVar_20945 == 129);
	BIT_VEC cppVar_20948 = PC + 1;
	cppVar_20948 = (cppVar_20948 & cppMask_un_16_);
	BIT_VEC cppVar_20949 = ROM.rd(cppVar_20948);
	bool cppVar_20951 = (cppVar_20949 == 130);
	BIT_VEC cppVar_20952 = PC + 1;
	cppVar_20952 = (cppVar_20952 & cppMask_un_16_);
	BIT_VEC cppVar_20953 = ROM.rd(cppVar_20952);
	bool cppVar_20955 = (cppVar_20953 == 131);
	BIT_VEC cppVar_20956 = PC + 1;
	cppVar_20956 = (cppVar_20956 & cppMask_un_16_);
	BIT_VEC cppVar_20957 = ROM.rd(cppVar_20956);
	bool cppVar_20959 = (cppVar_20957 == 135);
	BIT_VEC cppVar_20960 = PC + 1;
	cppVar_20960 = (cppVar_20960 & cppMask_un_16_);
	BIT_VEC cppVar_20961 = ROM.rd(cppVar_20960);
	bool cppVar_20963 = (cppVar_20961 == 136);
	BIT_VEC cppVar_20964 = PC + 1;
	cppVar_20964 = (cppVar_20964 & cppMask_un_16_);
	BIT_VEC cppVar_20965 = ROM.rd(cppVar_20964);
	bool cppVar_20967 = (cppVar_20965 == 137);
	BIT_VEC cppVar_20968 = PC + 1;
	cppVar_20968 = (cppVar_20968 & cppMask_un_16_);
	BIT_VEC cppVar_20969 = ROM.rd(cppVar_20968);
	bool cppVar_20971 = (cppVar_20969 == 138);
	BIT_VEC cppVar_20972 = PC + 1;
	cppVar_20972 = (cppVar_20972 & cppMask_un_16_);
	BIT_VEC cppVar_20973 = ROM.rd(cppVar_20972);
	bool cppVar_20975 = (cppVar_20973 == 140);
	BIT_VEC cppVar_20976 = PC + 1;
	cppVar_20976 = (cppVar_20976 & cppMask_un_16_);
	BIT_VEC cppVar_20977 = ROM.rd(cppVar_20976);
	bool cppVar_20979 = (cppVar_20977 == 139);
	BIT_VEC cppVar_20980 = PC + 1;
	cppVar_20980 = (cppVar_20980 & cppMask_un_16_);
	BIT_VEC cppVar_20981 = ROM.rd(cppVar_20980);
	bool cppVar_20983 = (cppVar_20981 == 141);
	BIT_VEC cppVar_20984 = PC + 1;
	cppVar_20984 = (cppVar_20984 & cppMask_un_16_);
	BIT_VEC cppVar_20985 = ROM.rd(cppVar_20984);
	bool cppVar_20987 = (cppVar_20985 == 144);
	BIT_VEC cppVar_20988 = PC + 1;
	cppVar_20988 = (cppVar_20988 & cppMask_un_16_);
	BIT_VEC cppVar_20989 = ROM.rd(cppVar_20988);
	bool cppVar_20991 = (cppVar_20989 == 152);
	BIT_VEC cppVar_20992 = PC + 1;
	cppVar_20992 = (cppVar_20992 & cppMask_un_16_);
	BIT_VEC cppVar_20993 = ROM.rd(cppVar_20992);
	bool cppVar_20995 = (cppVar_20993 == 153);
	BIT_VEC cppVar_20996 = PC + 1;
	cppVar_20996 = (cppVar_20996 & cppMask_un_16_);
	BIT_VEC cppVar_20997 = ROM.rd(cppVar_20996);
	bool cppVar_20999 = (cppVar_20997 == 160);
	BIT_VEC cppVar_21000 = PC + 1;
	cppVar_21000 = (cppVar_21000 & cppMask_un_16_);
	BIT_VEC cppVar_21001 = ROM.rd(cppVar_21000);
	bool cppVar_21003 = (cppVar_21001 == 168);
	BIT_VEC cppVar_21004 = PC + 1;
	cppVar_21004 = (cppVar_21004 & cppMask_un_16_);
	BIT_VEC cppVar_21005 = ROM.rd(cppVar_21004);
	bool cppVar_21007 = (cppVar_21005 == 176);
	BIT_VEC cppVar_21008 = PC + 1;
	cppVar_21008 = (cppVar_21008 & cppMask_un_16_);
	BIT_VEC cppVar_21009 = ROM.rd(cppVar_21008);
	bool cppVar_21011 = (cppVar_21009 == 184);
	BIT_VEC cppVar_21012 = PC + 1;
	cppVar_21012 = (cppVar_21012 & cppMask_un_16_);
	BIT_VEC cppVar_21013 = ROM.rd(cppVar_21012);
	bool cppVar_21015 = (cppVar_21013 == 208);
	BIT_VEC cppVar_21016 = PC + 1;
	cppVar_21016 = (cppVar_21016 & cppMask_un_16_);
	BIT_VEC cppVar_21017 = ROM.rd(cppVar_21016);
	bool cppVar_21019 = (cppVar_21017 == 224);
	BIT_VEC cppVar_21020 = PC + 1;
	cppVar_21020 = (cppVar_21020 & cppMask_un_16_);
	BIT_VEC cppVar_21021 = ROM.rd(cppVar_21020);
	bool cppVar_21023 = (cppVar_21021 == 240);
	BIT_VEC cppVar_21025 = (cppVar_21023) ? B : 0;
	BIT_VEC cppVar_21026 = (cppVar_21019) ? ACC : cppVar_21025;
	BIT_VEC cppVar_21027 = (cppVar_21015) ? PSW : cppVar_21026;
	BIT_VEC cppVar_21028 = (cppVar_21011) ? IP : cppVar_21027;
	BIT_VEC cppVar_21029 = (cppVar_21007) ? P3 : cppVar_21028;
	BIT_VEC cppVar_21030 = (cppVar_21003) ? IE : cppVar_21029;
	BIT_VEC cppVar_21031 = (cppVar_20999) ? P2 : cppVar_21030;
	BIT_VEC cppVar_21032 = (cppVar_20995) ? SBUF : cppVar_21031;
	BIT_VEC cppVar_21033 = (cppVar_20991) ? SCON : cppVar_21032;
	BIT_VEC cppVar_21034 = (cppVar_20987) ? P1 : cppVar_21033;
	BIT_VEC cppVar_21035 = (cppVar_20983) ? TH1 : cppVar_21034;
	BIT_VEC cppVar_21036 = (cppVar_20979) ? TL1 : cppVar_21035;
	BIT_VEC cppVar_21037 = (cppVar_20975) ? TH0 : cppVar_21036;
	BIT_VEC cppVar_21038 = (cppVar_20971) ? TL0 : cppVar_21037;
	BIT_VEC cppVar_21039 = (cppVar_20967) ? TMOD : cppVar_21038;
	BIT_VEC cppVar_21040 = (cppVar_20963) ? TCON : cppVar_21039;
	BIT_VEC cppVar_21041 = (cppVar_20959) ? PCON : cppVar_21040;
	BIT_VEC cppVar_21042 = (cppVar_20955) ? DPH : cppVar_21041;
	BIT_VEC cppVar_21043 = (cppVar_20951) ? DPL : cppVar_21042;
	BIT_VEC cppVar_21044 = (cppVar_20947) ? SP : cppVar_21043;
	BIT_VEC cppVar_21045 = (cppVar_20943) ? P0 : cppVar_21044;
	BIT_VEC cppVar_21046 = (cppVar_20936) ? cppVar_20939 : cppVar_21045;
	BIT_VEC cppVar_21047 = (cppVar_20930) ? cppVar_21046 : IP;
	BIT_VEC cppVar_21048 = ROM.rd(PC);
	bool cppVar_21050 = (cppVar_21048 == 117);
	BIT_VEC cppVar_21052 = PC + 1;
	cppVar_21052 = (cppVar_21052 & cppMask_un_16_);
	BIT_VEC cppVar_21053 = ROM.rd(cppVar_21052);
	bool cppVar_21055 = (cppVar_21053 == 184);
	BIT_VEC cppVar_21057 = PC + 2;
	cppVar_21057 = (cppVar_21057 & cppMask_un_16_);
	BIT_VEC cppVar_21058 = ROM.rd(cppVar_21057);
	BIT_VEC cppVar_21059 = (cppVar_21055) ? cppVar_21058 : IP;
	BIT_VEC cppVar_21060 = ROM.rd(PC);
	bool cppVar_21062 = (cppVar_21060 == 99);
	BIT_VEC cppVar_21064 = PC + 1;
	cppVar_21064 = (cppVar_21064 & cppMask_un_16_);
	BIT_VEC cppVar_21065 = ROM.rd(cppVar_21064);
	bool cppVar_21067 = (cppVar_21065 == 184);
	BIT_VEC cppVar_21068 = PC + 1;
	cppVar_21068 = (cppVar_21068 & cppMask_un_16_);
	BIT_VEC cppVar_21069 = ROM.rd(cppVar_21068);
	BIT_VEC cppVar_21070 = (cppVar_21069 >> 7) & cppMask_un_1_;
	bool cppVar_21072 = (cppVar_21070 == 0);
	BIT_VEC cppVar_21073 = PC + 1;
	cppVar_21073 = (cppVar_21073 & cppMask_un_16_);
	BIT_VEC cppVar_21074 = ROM.rd(cppVar_21073);
	BIT_VEC cppVar_21075 = IRAM.rd(cppVar_21074);
	BIT_VEC cppVar_21076 = PC + 1;
	cppVar_21076 = (cppVar_21076 & cppMask_un_16_);
	BIT_VEC cppVar_21077 = ROM.rd(cppVar_21076);
	bool cppVar_21079 = (cppVar_21077 == 128);
	BIT_VEC cppVar_21080 = PC + 1;
	cppVar_21080 = (cppVar_21080 & cppMask_un_16_);
	BIT_VEC cppVar_21081 = ROM.rd(cppVar_21080);
	bool cppVar_21083 = (cppVar_21081 == 129);
	BIT_VEC cppVar_21084 = PC + 1;
	cppVar_21084 = (cppVar_21084 & cppMask_un_16_);
	BIT_VEC cppVar_21085 = ROM.rd(cppVar_21084);
	bool cppVar_21087 = (cppVar_21085 == 130);
	BIT_VEC cppVar_21088 = PC + 1;
	cppVar_21088 = (cppVar_21088 & cppMask_un_16_);
	BIT_VEC cppVar_21089 = ROM.rd(cppVar_21088);
	bool cppVar_21091 = (cppVar_21089 == 131);
	BIT_VEC cppVar_21092 = PC + 1;
	cppVar_21092 = (cppVar_21092 & cppMask_un_16_);
	BIT_VEC cppVar_21093 = ROM.rd(cppVar_21092);
	bool cppVar_21095 = (cppVar_21093 == 135);
	BIT_VEC cppVar_21096 = PC + 1;
	cppVar_21096 = (cppVar_21096 & cppMask_un_16_);
	BIT_VEC cppVar_21097 = ROM.rd(cppVar_21096);
	bool cppVar_21099 = (cppVar_21097 == 136);
	BIT_VEC cppVar_21100 = PC + 1;
	cppVar_21100 = (cppVar_21100 & cppMask_un_16_);
	BIT_VEC cppVar_21101 = ROM.rd(cppVar_21100);
	bool cppVar_21103 = (cppVar_21101 == 137);
	BIT_VEC cppVar_21104 = PC + 1;
	cppVar_21104 = (cppVar_21104 & cppMask_un_16_);
	BIT_VEC cppVar_21105 = ROM.rd(cppVar_21104);
	bool cppVar_21107 = (cppVar_21105 == 138);
	BIT_VEC cppVar_21108 = PC + 1;
	cppVar_21108 = (cppVar_21108 & cppMask_un_16_);
	BIT_VEC cppVar_21109 = ROM.rd(cppVar_21108);
	bool cppVar_21111 = (cppVar_21109 == 140);
	BIT_VEC cppVar_21112 = PC + 1;
	cppVar_21112 = (cppVar_21112 & cppMask_un_16_);
	BIT_VEC cppVar_21113 = ROM.rd(cppVar_21112);
	bool cppVar_21115 = (cppVar_21113 == 139);
	BIT_VEC cppVar_21116 = PC + 1;
	cppVar_21116 = (cppVar_21116 & cppMask_un_16_);
	BIT_VEC cppVar_21117 = ROM.rd(cppVar_21116);
	bool cppVar_21119 = (cppVar_21117 == 141);
	BIT_VEC cppVar_21120 = PC + 1;
	cppVar_21120 = (cppVar_21120 & cppMask_un_16_);
	BIT_VEC cppVar_21121 = ROM.rd(cppVar_21120);
	bool cppVar_21123 = (cppVar_21121 == 144);
	BIT_VEC cppVar_21124 = PC + 1;
	cppVar_21124 = (cppVar_21124 & cppMask_un_16_);
	BIT_VEC cppVar_21125 = ROM.rd(cppVar_21124);
	bool cppVar_21127 = (cppVar_21125 == 152);
	BIT_VEC cppVar_21128 = PC + 1;
	cppVar_21128 = (cppVar_21128 & cppMask_un_16_);
	BIT_VEC cppVar_21129 = ROM.rd(cppVar_21128);
	bool cppVar_21131 = (cppVar_21129 == 153);
	BIT_VEC cppVar_21132 = PC + 1;
	cppVar_21132 = (cppVar_21132 & cppMask_un_16_);
	BIT_VEC cppVar_21133 = ROM.rd(cppVar_21132);
	bool cppVar_21135 = (cppVar_21133 == 160);
	BIT_VEC cppVar_21136 = PC + 1;
	cppVar_21136 = (cppVar_21136 & cppMask_un_16_);
	BIT_VEC cppVar_21137 = ROM.rd(cppVar_21136);
	bool cppVar_21139 = (cppVar_21137 == 168);
	BIT_VEC cppVar_21140 = PC + 1;
	cppVar_21140 = (cppVar_21140 & cppMask_un_16_);
	BIT_VEC cppVar_21141 = ROM.rd(cppVar_21140);
	bool cppVar_21143 = (cppVar_21141 == 176);
	BIT_VEC cppVar_21144 = PC + 1;
	cppVar_21144 = (cppVar_21144 & cppMask_un_16_);
	BIT_VEC cppVar_21145 = ROM.rd(cppVar_21144);
	bool cppVar_21147 = (cppVar_21145 == 184);
	BIT_VEC cppVar_21148 = PC + 1;
	cppVar_21148 = (cppVar_21148 & cppMask_un_16_);
	BIT_VEC cppVar_21149 = ROM.rd(cppVar_21148);
	bool cppVar_21151 = (cppVar_21149 == 208);
	BIT_VEC cppVar_21152 = PC + 1;
	cppVar_21152 = (cppVar_21152 & cppMask_un_16_);
	BIT_VEC cppVar_21153 = ROM.rd(cppVar_21152);
	bool cppVar_21155 = (cppVar_21153 == 224);
	BIT_VEC cppVar_21156 = PC + 1;
	cppVar_21156 = (cppVar_21156 & cppMask_un_16_);
	BIT_VEC cppVar_21157 = ROM.rd(cppVar_21156);
	bool cppVar_21159 = (cppVar_21157 == 240);
	BIT_VEC cppVar_21161 = (cppVar_21159) ? B : 0;
	BIT_VEC cppVar_21162 = (cppVar_21155) ? ACC : cppVar_21161;
	BIT_VEC cppVar_21163 = (cppVar_21151) ? PSW : cppVar_21162;
	BIT_VEC cppVar_21164 = (cppVar_21147) ? IP : cppVar_21163;
	BIT_VEC cppVar_21165 = (cppVar_21143) ? P3 : cppVar_21164;
	BIT_VEC cppVar_21166 = (cppVar_21139) ? IE : cppVar_21165;
	BIT_VEC cppVar_21167 = (cppVar_21135) ? P2 : cppVar_21166;
	BIT_VEC cppVar_21168 = (cppVar_21131) ? SBUF : cppVar_21167;
	BIT_VEC cppVar_21169 = (cppVar_21127) ? SCON : cppVar_21168;
	BIT_VEC cppVar_21170 = (cppVar_21123) ? P1 : cppVar_21169;
	BIT_VEC cppVar_21171 = (cppVar_21119) ? TH1 : cppVar_21170;
	BIT_VEC cppVar_21172 = (cppVar_21115) ? TL1 : cppVar_21171;
	BIT_VEC cppVar_21173 = (cppVar_21111) ? TH0 : cppVar_21172;
	BIT_VEC cppVar_21174 = (cppVar_21107) ? TL0 : cppVar_21173;
	BIT_VEC cppVar_21175 = (cppVar_21103) ? TMOD : cppVar_21174;
	BIT_VEC cppVar_21176 = (cppVar_21099) ? TCON : cppVar_21175;
	BIT_VEC cppVar_21177 = (cppVar_21095) ? PCON : cppVar_21176;
	BIT_VEC cppVar_21178 = (cppVar_21091) ? DPH : cppVar_21177;
	BIT_VEC cppVar_21179 = (cppVar_21087) ? DPL : cppVar_21178;
	BIT_VEC cppVar_21180 = (cppVar_21083) ? SP : cppVar_21179;
	BIT_VEC cppVar_21181 = (cppVar_21079) ? P0 : cppVar_21180;
	BIT_VEC cppVar_21182 = (cppVar_21072) ? cppVar_21075 : cppVar_21181;
	BIT_VEC cppVar_21184 = PC + 2;
	cppVar_21184 = (cppVar_21184 & cppMask_un_16_);
	BIT_VEC cppVar_21185 = ROM.rd(cppVar_21184);
	BIT_VEC cppVar_21186 = cppVar_21182 ^ cppVar_21185;
	BIT_VEC cppVar_21187 = (cppVar_21067) ? cppVar_21186 : IP;
	BIT_VEC cppVar_21188 = ROM.rd(PC);
	bool cppVar_21190 = (cppVar_21188 == 98);
	BIT_VEC cppVar_21192 = PC + 1;
	cppVar_21192 = (cppVar_21192 & cppMask_un_16_);
	BIT_VEC cppVar_21193 = ROM.rd(cppVar_21192);
	bool cppVar_21195 = (cppVar_21193 == 184);
	BIT_VEC cppVar_21196 = PC + 1;
	cppVar_21196 = (cppVar_21196 & cppMask_un_16_);
	BIT_VEC cppVar_21197 = ROM.rd(cppVar_21196);
	BIT_VEC cppVar_21198 = (cppVar_21197 >> 7) & cppMask_un_1_;
	bool cppVar_21200 = (cppVar_21198 == 0);
	BIT_VEC cppVar_21201 = PC + 1;
	cppVar_21201 = (cppVar_21201 & cppMask_un_16_);
	BIT_VEC cppVar_21202 = ROM.rd(cppVar_21201);
	BIT_VEC cppVar_21203 = IRAM.rd(cppVar_21202);
	BIT_VEC cppVar_21204 = PC + 1;
	cppVar_21204 = (cppVar_21204 & cppMask_un_16_);
	BIT_VEC cppVar_21205 = ROM.rd(cppVar_21204);
	bool cppVar_21207 = (cppVar_21205 == 128);
	BIT_VEC cppVar_21208 = PC + 1;
	cppVar_21208 = (cppVar_21208 & cppMask_un_16_);
	BIT_VEC cppVar_21209 = ROM.rd(cppVar_21208);
	bool cppVar_21211 = (cppVar_21209 == 129);
	BIT_VEC cppVar_21212 = PC + 1;
	cppVar_21212 = (cppVar_21212 & cppMask_un_16_);
	BIT_VEC cppVar_21213 = ROM.rd(cppVar_21212);
	bool cppVar_21215 = (cppVar_21213 == 130);
	BIT_VEC cppVar_21216 = PC + 1;
	cppVar_21216 = (cppVar_21216 & cppMask_un_16_);
	BIT_VEC cppVar_21217 = ROM.rd(cppVar_21216);
	bool cppVar_21219 = (cppVar_21217 == 131);
	BIT_VEC cppVar_21220 = PC + 1;
	cppVar_21220 = (cppVar_21220 & cppMask_un_16_);
	BIT_VEC cppVar_21221 = ROM.rd(cppVar_21220);
	bool cppVar_21223 = (cppVar_21221 == 135);
	BIT_VEC cppVar_21224 = PC + 1;
	cppVar_21224 = (cppVar_21224 & cppMask_un_16_);
	BIT_VEC cppVar_21225 = ROM.rd(cppVar_21224);
	bool cppVar_21227 = (cppVar_21225 == 136);
	BIT_VEC cppVar_21228 = PC + 1;
	cppVar_21228 = (cppVar_21228 & cppMask_un_16_);
	BIT_VEC cppVar_21229 = ROM.rd(cppVar_21228);
	bool cppVar_21231 = (cppVar_21229 == 137);
	BIT_VEC cppVar_21232 = PC + 1;
	cppVar_21232 = (cppVar_21232 & cppMask_un_16_);
	BIT_VEC cppVar_21233 = ROM.rd(cppVar_21232);
	bool cppVar_21235 = (cppVar_21233 == 138);
	BIT_VEC cppVar_21236 = PC + 1;
	cppVar_21236 = (cppVar_21236 & cppMask_un_16_);
	BIT_VEC cppVar_21237 = ROM.rd(cppVar_21236);
	bool cppVar_21239 = (cppVar_21237 == 140);
	BIT_VEC cppVar_21240 = PC + 1;
	cppVar_21240 = (cppVar_21240 & cppMask_un_16_);
	BIT_VEC cppVar_21241 = ROM.rd(cppVar_21240);
	bool cppVar_21243 = (cppVar_21241 == 139);
	BIT_VEC cppVar_21244 = PC + 1;
	cppVar_21244 = (cppVar_21244 & cppMask_un_16_);
	BIT_VEC cppVar_21245 = ROM.rd(cppVar_21244);
	bool cppVar_21247 = (cppVar_21245 == 141);
	BIT_VEC cppVar_21248 = PC + 1;
	cppVar_21248 = (cppVar_21248 & cppMask_un_16_);
	BIT_VEC cppVar_21249 = ROM.rd(cppVar_21248);
	bool cppVar_21251 = (cppVar_21249 == 144);
	BIT_VEC cppVar_21252 = PC + 1;
	cppVar_21252 = (cppVar_21252 & cppMask_un_16_);
	BIT_VEC cppVar_21253 = ROM.rd(cppVar_21252);
	bool cppVar_21255 = (cppVar_21253 == 152);
	BIT_VEC cppVar_21256 = PC + 1;
	cppVar_21256 = (cppVar_21256 & cppMask_un_16_);
	BIT_VEC cppVar_21257 = ROM.rd(cppVar_21256);
	bool cppVar_21259 = (cppVar_21257 == 153);
	BIT_VEC cppVar_21260 = PC + 1;
	cppVar_21260 = (cppVar_21260 & cppMask_un_16_);
	BIT_VEC cppVar_21261 = ROM.rd(cppVar_21260);
	bool cppVar_21263 = (cppVar_21261 == 160);
	BIT_VEC cppVar_21264 = PC + 1;
	cppVar_21264 = (cppVar_21264 & cppMask_un_16_);
	BIT_VEC cppVar_21265 = ROM.rd(cppVar_21264);
	bool cppVar_21267 = (cppVar_21265 == 168);
	BIT_VEC cppVar_21268 = PC + 1;
	cppVar_21268 = (cppVar_21268 & cppMask_un_16_);
	BIT_VEC cppVar_21269 = ROM.rd(cppVar_21268);
	bool cppVar_21271 = (cppVar_21269 == 176);
	BIT_VEC cppVar_21272 = PC + 1;
	cppVar_21272 = (cppVar_21272 & cppMask_un_16_);
	BIT_VEC cppVar_21273 = ROM.rd(cppVar_21272);
	bool cppVar_21275 = (cppVar_21273 == 184);
	BIT_VEC cppVar_21276 = PC + 1;
	cppVar_21276 = (cppVar_21276 & cppMask_un_16_);
	BIT_VEC cppVar_21277 = ROM.rd(cppVar_21276);
	bool cppVar_21279 = (cppVar_21277 == 208);
	BIT_VEC cppVar_21280 = PC + 1;
	cppVar_21280 = (cppVar_21280 & cppMask_un_16_);
	BIT_VEC cppVar_21281 = ROM.rd(cppVar_21280);
	bool cppVar_21283 = (cppVar_21281 == 224);
	BIT_VEC cppVar_21284 = PC + 1;
	cppVar_21284 = (cppVar_21284 & cppMask_un_16_);
	BIT_VEC cppVar_21285 = ROM.rd(cppVar_21284);
	bool cppVar_21287 = (cppVar_21285 == 240);
	BIT_VEC cppVar_21289 = (cppVar_21287) ? B : 0;
	BIT_VEC cppVar_21290 = (cppVar_21283) ? ACC : cppVar_21289;
	BIT_VEC cppVar_21291 = (cppVar_21279) ? PSW : cppVar_21290;
	BIT_VEC cppVar_21292 = (cppVar_21275) ? IP : cppVar_21291;
	BIT_VEC cppVar_21293 = (cppVar_21271) ? P3 : cppVar_21292;
	BIT_VEC cppVar_21294 = (cppVar_21267) ? IE : cppVar_21293;
	BIT_VEC cppVar_21295 = (cppVar_21263) ? P2 : cppVar_21294;
	BIT_VEC cppVar_21296 = (cppVar_21259) ? SBUF : cppVar_21295;
	BIT_VEC cppVar_21297 = (cppVar_21255) ? SCON : cppVar_21296;
	BIT_VEC cppVar_21298 = (cppVar_21251) ? P1 : cppVar_21297;
	BIT_VEC cppVar_21299 = (cppVar_21247) ? TH1 : cppVar_21298;
	BIT_VEC cppVar_21300 = (cppVar_21243) ? TL1 : cppVar_21299;
	BIT_VEC cppVar_21301 = (cppVar_21239) ? TH0 : cppVar_21300;
	BIT_VEC cppVar_21302 = (cppVar_21235) ? TL0 : cppVar_21301;
	BIT_VEC cppVar_21303 = (cppVar_21231) ? TMOD : cppVar_21302;
	BIT_VEC cppVar_21304 = (cppVar_21227) ? TCON : cppVar_21303;
	BIT_VEC cppVar_21305 = (cppVar_21223) ? PCON : cppVar_21304;
	BIT_VEC cppVar_21306 = (cppVar_21219) ? DPH : cppVar_21305;
	BIT_VEC cppVar_21307 = (cppVar_21215) ? DPL : cppVar_21306;
	BIT_VEC cppVar_21308 = (cppVar_21211) ? SP : cppVar_21307;
	BIT_VEC cppVar_21309 = (cppVar_21207) ? P0 : cppVar_21308;
	BIT_VEC cppVar_21310 = (cppVar_21200) ? cppVar_21203 : cppVar_21309;
	BIT_VEC cppVar_21311 = cppVar_21310 ^ ACC;
	BIT_VEC cppVar_21312 = (cppVar_21195) ? cppVar_21311 : IP;
	BIT_VEC cppVar_21313 = ROM.rd(PC);
	bool cppVar_21315 = (cppVar_21313 == 83);
	BIT_VEC cppVar_21317 = PC + 1;
	cppVar_21317 = (cppVar_21317 & cppMask_un_16_);
	BIT_VEC cppVar_21318 = ROM.rd(cppVar_21317);
	bool cppVar_21320 = (cppVar_21318 == 184);
	BIT_VEC cppVar_21321 = PC + 1;
	cppVar_21321 = (cppVar_21321 & cppMask_un_16_);
	BIT_VEC cppVar_21322 = ROM.rd(cppVar_21321);
	BIT_VEC cppVar_21323 = (cppVar_21322 >> 7) & cppMask_un_1_;
	bool cppVar_21325 = (cppVar_21323 == 0);
	BIT_VEC cppVar_21326 = PC + 1;
	cppVar_21326 = (cppVar_21326 & cppMask_un_16_);
	BIT_VEC cppVar_21327 = ROM.rd(cppVar_21326);
	BIT_VEC cppVar_21328 = IRAM.rd(cppVar_21327);
	BIT_VEC cppVar_21329 = PC + 1;
	cppVar_21329 = (cppVar_21329 & cppMask_un_16_);
	BIT_VEC cppVar_21330 = ROM.rd(cppVar_21329);
	bool cppVar_21332 = (cppVar_21330 == 128);
	BIT_VEC cppVar_21333 = PC + 1;
	cppVar_21333 = (cppVar_21333 & cppMask_un_16_);
	BIT_VEC cppVar_21334 = ROM.rd(cppVar_21333);
	bool cppVar_21336 = (cppVar_21334 == 129);
	BIT_VEC cppVar_21337 = PC + 1;
	cppVar_21337 = (cppVar_21337 & cppMask_un_16_);
	BIT_VEC cppVar_21338 = ROM.rd(cppVar_21337);
	bool cppVar_21340 = (cppVar_21338 == 130);
	BIT_VEC cppVar_21341 = PC + 1;
	cppVar_21341 = (cppVar_21341 & cppMask_un_16_);
	BIT_VEC cppVar_21342 = ROM.rd(cppVar_21341);
	bool cppVar_21344 = (cppVar_21342 == 131);
	BIT_VEC cppVar_21345 = PC + 1;
	cppVar_21345 = (cppVar_21345 & cppMask_un_16_);
	BIT_VEC cppVar_21346 = ROM.rd(cppVar_21345);
	bool cppVar_21348 = (cppVar_21346 == 135);
	BIT_VEC cppVar_21349 = PC + 1;
	cppVar_21349 = (cppVar_21349 & cppMask_un_16_);
	BIT_VEC cppVar_21350 = ROM.rd(cppVar_21349);
	bool cppVar_21352 = (cppVar_21350 == 136);
	BIT_VEC cppVar_21353 = PC + 1;
	cppVar_21353 = (cppVar_21353 & cppMask_un_16_);
	BIT_VEC cppVar_21354 = ROM.rd(cppVar_21353);
	bool cppVar_21356 = (cppVar_21354 == 137);
	BIT_VEC cppVar_21357 = PC + 1;
	cppVar_21357 = (cppVar_21357 & cppMask_un_16_);
	BIT_VEC cppVar_21358 = ROM.rd(cppVar_21357);
	bool cppVar_21360 = (cppVar_21358 == 138);
	BIT_VEC cppVar_21361 = PC + 1;
	cppVar_21361 = (cppVar_21361 & cppMask_un_16_);
	BIT_VEC cppVar_21362 = ROM.rd(cppVar_21361);
	bool cppVar_21364 = (cppVar_21362 == 140);
	BIT_VEC cppVar_21365 = PC + 1;
	cppVar_21365 = (cppVar_21365 & cppMask_un_16_);
	BIT_VEC cppVar_21366 = ROM.rd(cppVar_21365);
	bool cppVar_21368 = (cppVar_21366 == 139);
	BIT_VEC cppVar_21369 = PC + 1;
	cppVar_21369 = (cppVar_21369 & cppMask_un_16_);
	BIT_VEC cppVar_21370 = ROM.rd(cppVar_21369);
	bool cppVar_21372 = (cppVar_21370 == 141);
	BIT_VEC cppVar_21373 = PC + 1;
	cppVar_21373 = (cppVar_21373 & cppMask_un_16_);
	BIT_VEC cppVar_21374 = ROM.rd(cppVar_21373);
	bool cppVar_21376 = (cppVar_21374 == 144);
	BIT_VEC cppVar_21377 = PC + 1;
	cppVar_21377 = (cppVar_21377 & cppMask_un_16_);
	BIT_VEC cppVar_21378 = ROM.rd(cppVar_21377);
	bool cppVar_21380 = (cppVar_21378 == 152);
	BIT_VEC cppVar_21381 = PC + 1;
	cppVar_21381 = (cppVar_21381 & cppMask_un_16_);
	BIT_VEC cppVar_21382 = ROM.rd(cppVar_21381);
	bool cppVar_21384 = (cppVar_21382 == 153);
	BIT_VEC cppVar_21385 = PC + 1;
	cppVar_21385 = (cppVar_21385 & cppMask_un_16_);
	BIT_VEC cppVar_21386 = ROM.rd(cppVar_21385);
	bool cppVar_21388 = (cppVar_21386 == 160);
	BIT_VEC cppVar_21389 = PC + 1;
	cppVar_21389 = (cppVar_21389 & cppMask_un_16_);
	BIT_VEC cppVar_21390 = ROM.rd(cppVar_21389);
	bool cppVar_21392 = (cppVar_21390 == 168);
	BIT_VEC cppVar_21393 = PC + 1;
	cppVar_21393 = (cppVar_21393 & cppMask_un_16_);
	BIT_VEC cppVar_21394 = ROM.rd(cppVar_21393);
	bool cppVar_21396 = (cppVar_21394 == 176);
	BIT_VEC cppVar_21397 = PC + 1;
	cppVar_21397 = (cppVar_21397 & cppMask_un_16_);
	BIT_VEC cppVar_21398 = ROM.rd(cppVar_21397);
	bool cppVar_21400 = (cppVar_21398 == 184);
	BIT_VEC cppVar_21401 = PC + 1;
	cppVar_21401 = (cppVar_21401 & cppMask_un_16_);
	BIT_VEC cppVar_21402 = ROM.rd(cppVar_21401);
	bool cppVar_21404 = (cppVar_21402 == 208);
	BIT_VEC cppVar_21405 = PC + 1;
	cppVar_21405 = (cppVar_21405 & cppMask_un_16_);
	BIT_VEC cppVar_21406 = ROM.rd(cppVar_21405);
	bool cppVar_21408 = (cppVar_21406 == 224);
	BIT_VEC cppVar_21409 = PC + 1;
	cppVar_21409 = (cppVar_21409 & cppMask_un_16_);
	BIT_VEC cppVar_21410 = ROM.rd(cppVar_21409);
	bool cppVar_21412 = (cppVar_21410 == 240);
	BIT_VEC cppVar_21414 = (cppVar_21412) ? B : 0;
	BIT_VEC cppVar_21415 = (cppVar_21408) ? ACC : cppVar_21414;
	BIT_VEC cppVar_21416 = (cppVar_21404) ? PSW : cppVar_21415;
	BIT_VEC cppVar_21417 = (cppVar_21400) ? IP : cppVar_21416;
	BIT_VEC cppVar_21418 = (cppVar_21396) ? P3 : cppVar_21417;
	BIT_VEC cppVar_21419 = (cppVar_21392) ? IE : cppVar_21418;
	BIT_VEC cppVar_21420 = (cppVar_21388) ? P2 : cppVar_21419;
	BIT_VEC cppVar_21421 = (cppVar_21384) ? SBUF : cppVar_21420;
	BIT_VEC cppVar_21422 = (cppVar_21380) ? SCON : cppVar_21421;
	BIT_VEC cppVar_21423 = (cppVar_21376) ? P1 : cppVar_21422;
	BIT_VEC cppVar_21424 = (cppVar_21372) ? TH1 : cppVar_21423;
	BIT_VEC cppVar_21425 = (cppVar_21368) ? TL1 : cppVar_21424;
	BIT_VEC cppVar_21426 = (cppVar_21364) ? TH0 : cppVar_21425;
	BIT_VEC cppVar_21427 = (cppVar_21360) ? TL0 : cppVar_21426;
	BIT_VEC cppVar_21428 = (cppVar_21356) ? TMOD : cppVar_21427;
	BIT_VEC cppVar_21429 = (cppVar_21352) ? TCON : cppVar_21428;
	BIT_VEC cppVar_21430 = (cppVar_21348) ? PCON : cppVar_21429;
	BIT_VEC cppVar_21431 = (cppVar_21344) ? DPH : cppVar_21430;
	BIT_VEC cppVar_21432 = (cppVar_21340) ? DPL : cppVar_21431;
	BIT_VEC cppVar_21433 = (cppVar_21336) ? SP : cppVar_21432;
	BIT_VEC cppVar_21434 = (cppVar_21332) ? P0 : cppVar_21433;
	BIT_VEC cppVar_21435 = (cppVar_21325) ? cppVar_21328 : cppVar_21434;
	BIT_VEC cppVar_21437 = PC + 2;
	cppVar_21437 = (cppVar_21437 & cppMask_un_16_);
	BIT_VEC cppVar_21438 = ROM.rd(cppVar_21437);
	BIT_VEC cppVar_21439 = cppVar_21435 & cppVar_21438;
	BIT_VEC cppVar_21440 = (cppVar_21320) ? cppVar_21439 : IP;
	BIT_VEC cppVar_21441 = ROM.rd(PC);
	bool cppVar_21443 = (cppVar_21441 == 82);
	BIT_VEC cppVar_21445 = PC + 1;
	cppVar_21445 = (cppVar_21445 & cppMask_un_16_);
	BIT_VEC cppVar_21446 = ROM.rd(cppVar_21445);
	bool cppVar_21448 = (cppVar_21446 == 184);
	BIT_VEC cppVar_21449 = PC + 1;
	cppVar_21449 = (cppVar_21449 & cppMask_un_16_);
	BIT_VEC cppVar_21450 = ROM.rd(cppVar_21449);
	BIT_VEC cppVar_21451 = (cppVar_21450 >> 7) & cppMask_un_1_;
	bool cppVar_21453 = (cppVar_21451 == 0);
	BIT_VEC cppVar_21454 = PC + 1;
	cppVar_21454 = (cppVar_21454 & cppMask_un_16_);
	BIT_VEC cppVar_21455 = ROM.rd(cppVar_21454);
	BIT_VEC cppVar_21456 = IRAM.rd(cppVar_21455);
	BIT_VEC cppVar_21457 = PC + 1;
	cppVar_21457 = (cppVar_21457 & cppMask_un_16_);
	BIT_VEC cppVar_21458 = ROM.rd(cppVar_21457);
	bool cppVar_21460 = (cppVar_21458 == 128);
	BIT_VEC cppVar_21461 = PC + 1;
	cppVar_21461 = (cppVar_21461 & cppMask_un_16_);
	BIT_VEC cppVar_21462 = ROM.rd(cppVar_21461);
	bool cppVar_21464 = (cppVar_21462 == 129);
	BIT_VEC cppVar_21465 = PC + 1;
	cppVar_21465 = (cppVar_21465 & cppMask_un_16_);
	BIT_VEC cppVar_21466 = ROM.rd(cppVar_21465);
	bool cppVar_21468 = (cppVar_21466 == 130);
	BIT_VEC cppVar_21469 = PC + 1;
	cppVar_21469 = (cppVar_21469 & cppMask_un_16_);
	BIT_VEC cppVar_21470 = ROM.rd(cppVar_21469);
	bool cppVar_21472 = (cppVar_21470 == 131);
	BIT_VEC cppVar_21473 = PC + 1;
	cppVar_21473 = (cppVar_21473 & cppMask_un_16_);
	BIT_VEC cppVar_21474 = ROM.rd(cppVar_21473);
	bool cppVar_21476 = (cppVar_21474 == 135);
	BIT_VEC cppVar_21477 = PC + 1;
	cppVar_21477 = (cppVar_21477 & cppMask_un_16_);
	BIT_VEC cppVar_21478 = ROM.rd(cppVar_21477);
	bool cppVar_21480 = (cppVar_21478 == 136);
	BIT_VEC cppVar_21481 = PC + 1;
	cppVar_21481 = (cppVar_21481 & cppMask_un_16_);
	BIT_VEC cppVar_21482 = ROM.rd(cppVar_21481);
	bool cppVar_21484 = (cppVar_21482 == 137);
	BIT_VEC cppVar_21485 = PC + 1;
	cppVar_21485 = (cppVar_21485 & cppMask_un_16_);
	BIT_VEC cppVar_21486 = ROM.rd(cppVar_21485);
	bool cppVar_21488 = (cppVar_21486 == 138);
	BIT_VEC cppVar_21489 = PC + 1;
	cppVar_21489 = (cppVar_21489 & cppMask_un_16_);
	BIT_VEC cppVar_21490 = ROM.rd(cppVar_21489);
	bool cppVar_21492 = (cppVar_21490 == 140);
	BIT_VEC cppVar_21493 = PC + 1;
	cppVar_21493 = (cppVar_21493 & cppMask_un_16_);
	BIT_VEC cppVar_21494 = ROM.rd(cppVar_21493);
	bool cppVar_21496 = (cppVar_21494 == 139);
	BIT_VEC cppVar_21497 = PC + 1;
	cppVar_21497 = (cppVar_21497 & cppMask_un_16_);
	BIT_VEC cppVar_21498 = ROM.rd(cppVar_21497);
	bool cppVar_21500 = (cppVar_21498 == 141);
	BIT_VEC cppVar_21501 = PC + 1;
	cppVar_21501 = (cppVar_21501 & cppMask_un_16_);
	BIT_VEC cppVar_21502 = ROM.rd(cppVar_21501);
	bool cppVar_21504 = (cppVar_21502 == 144);
	BIT_VEC cppVar_21505 = PC + 1;
	cppVar_21505 = (cppVar_21505 & cppMask_un_16_);
	BIT_VEC cppVar_21506 = ROM.rd(cppVar_21505);
	bool cppVar_21508 = (cppVar_21506 == 152);
	BIT_VEC cppVar_21509 = PC + 1;
	cppVar_21509 = (cppVar_21509 & cppMask_un_16_);
	BIT_VEC cppVar_21510 = ROM.rd(cppVar_21509);
	bool cppVar_21512 = (cppVar_21510 == 153);
	BIT_VEC cppVar_21513 = PC + 1;
	cppVar_21513 = (cppVar_21513 & cppMask_un_16_);
	BIT_VEC cppVar_21514 = ROM.rd(cppVar_21513);
	bool cppVar_21516 = (cppVar_21514 == 160);
	BIT_VEC cppVar_21517 = PC + 1;
	cppVar_21517 = (cppVar_21517 & cppMask_un_16_);
	BIT_VEC cppVar_21518 = ROM.rd(cppVar_21517);
	bool cppVar_21520 = (cppVar_21518 == 168);
	BIT_VEC cppVar_21521 = PC + 1;
	cppVar_21521 = (cppVar_21521 & cppMask_un_16_);
	BIT_VEC cppVar_21522 = ROM.rd(cppVar_21521);
	bool cppVar_21524 = (cppVar_21522 == 176);
	BIT_VEC cppVar_21525 = PC + 1;
	cppVar_21525 = (cppVar_21525 & cppMask_un_16_);
	BIT_VEC cppVar_21526 = ROM.rd(cppVar_21525);
	bool cppVar_21528 = (cppVar_21526 == 184);
	BIT_VEC cppVar_21529 = PC + 1;
	cppVar_21529 = (cppVar_21529 & cppMask_un_16_);
	BIT_VEC cppVar_21530 = ROM.rd(cppVar_21529);
	bool cppVar_21532 = (cppVar_21530 == 208);
	BIT_VEC cppVar_21533 = PC + 1;
	cppVar_21533 = (cppVar_21533 & cppMask_un_16_);
	BIT_VEC cppVar_21534 = ROM.rd(cppVar_21533);
	bool cppVar_21536 = (cppVar_21534 == 224);
	BIT_VEC cppVar_21537 = PC + 1;
	cppVar_21537 = (cppVar_21537 & cppMask_un_16_);
	BIT_VEC cppVar_21538 = ROM.rd(cppVar_21537);
	bool cppVar_21540 = (cppVar_21538 == 240);
	BIT_VEC cppVar_21542 = (cppVar_21540) ? B : 0;
	BIT_VEC cppVar_21543 = (cppVar_21536) ? ACC : cppVar_21542;
	BIT_VEC cppVar_21544 = (cppVar_21532) ? PSW : cppVar_21543;
	BIT_VEC cppVar_21545 = (cppVar_21528) ? IP : cppVar_21544;
	BIT_VEC cppVar_21546 = (cppVar_21524) ? P3 : cppVar_21545;
	BIT_VEC cppVar_21547 = (cppVar_21520) ? IE : cppVar_21546;
	BIT_VEC cppVar_21548 = (cppVar_21516) ? P2 : cppVar_21547;
	BIT_VEC cppVar_21549 = (cppVar_21512) ? SBUF : cppVar_21548;
	BIT_VEC cppVar_21550 = (cppVar_21508) ? SCON : cppVar_21549;
	BIT_VEC cppVar_21551 = (cppVar_21504) ? P1 : cppVar_21550;
	BIT_VEC cppVar_21552 = (cppVar_21500) ? TH1 : cppVar_21551;
	BIT_VEC cppVar_21553 = (cppVar_21496) ? TL1 : cppVar_21552;
	BIT_VEC cppVar_21554 = (cppVar_21492) ? TH0 : cppVar_21553;
	BIT_VEC cppVar_21555 = (cppVar_21488) ? TL0 : cppVar_21554;
	BIT_VEC cppVar_21556 = (cppVar_21484) ? TMOD : cppVar_21555;
	BIT_VEC cppVar_21557 = (cppVar_21480) ? TCON : cppVar_21556;
	BIT_VEC cppVar_21558 = (cppVar_21476) ? PCON : cppVar_21557;
	BIT_VEC cppVar_21559 = (cppVar_21472) ? DPH : cppVar_21558;
	BIT_VEC cppVar_21560 = (cppVar_21468) ? DPL : cppVar_21559;
	BIT_VEC cppVar_21561 = (cppVar_21464) ? SP : cppVar_21560;
	BIT_VEC cppVar_21562 = (cppVar_21460) ? P0 : cppVar_21561;
	BIT_VEC cppVar_21563 = (cppVar_21453) ? cppVar_21456 : cppVar_21562;
	BIT_VEC cppVar_21564 = cppVar_21563 & ACC;
	BIT_VEC cppVar_21565 = (cppVar_21448) ? cppVar_21564 : IP;
	BIT_VEC cppVar_21566 = ROM.rd(PC);
	bool cppVar_21568 = (cppVar_21566 == 67);
	BIT_VEC cppVar_21570 = PC + 1;
	cppVar_21570 = (cppVar_21570 & cppMask_un_16_);
	BIT_VEC cppVar_21571 = ROM.rd(cppVar_21570);
	bool cppVar_21573 = (cppVar_21571 == 184);
	BIT_VEC cppVar_21574 = PC + 1;
	cppVar_21574 = (cppVar_21574 & cppMask_un_16_);
	BIT_VEC cppVar_21575 = ROM.rd(cppVar_21574);
	BIT_VEC cppVar_21576 = (cppVar_21575 >> 7) & cppMask_un_1_;
	bool cppVar_21578 = (cppVar_21576 == 0);
	BIT_VEC cppVar_21579 = PC + 1;
	cppVar_21579 = (cppVar_21579 & cppMask_un_16_);
	BIT_VEC cppVar_21580 = ROM.rd(cppVar_21579);
	BIT_VEC cppVar_21581 = IRAM.rd(cppVar_21580);
	BIT_VEC cppVar_21582 = PC + 1;
	cppVar_21582 = (cppVar_21582 & cppMask_un_16_);
	BIT_VEC cppVar_21583 = ROM.rd(cppVar_21582);
	bool cppVar_21585 = (cppVar_21583 == 128);
	BIT_VEC cppVar_21586 = PC + 1;
	cppVar_21586 = (cppVar_21586 & cppMask_un_16_);
	BIT_VEC cppVar_21587 = ROM.rd(cppVar_21586);
	bool cppVar_21589 = (cppVar_21587 == 129);
	BIT_VEC cppVar_21590 = PC + 1;
	cppVar_21590 = (cppVar_21590 & cppMask_un_16_);
	BIT_VEC cppVar_21591 = ROM.rd(cppVar_21590);
	bool cppVar_21593 = (cppVar_21591 == 130);
	BIT_VEC cppVar_21594 = PC + 1;
	cppVar_21594 = (cppVar_21594 & cppMask_un_16_);
	BIT_VEC cppVar_21595 = ROM.rd(cppVar_21594);
	bool cppVar_21597 = (cppVar_21595 == 131);
	BIT_VEC cppVar_21598 = PC + 1;
	cppVar_21598 = (cppVar_21598 & cppMask_un_16_);
	BIT_VEC cppVar_21599 = ROM.rd(cppVar_21598);
	bool cppVar_21601 = (cppVar_21599 == 135);
	BIT_VEC cppVar_21602 = PC + 1;
	cppVar_21602 = (cppVar_21602 & cppMask_un_16_);
	BIT_VEC cppVar_21603 = ROM.rd(cppVar_21602);
	bool cppVar_21605 = (cppVar_21603 == 136);
	BIT_VEC cppVar_21606 = PC + 1;
	cppVar_21606 = (cppVar_21606 & cppMask_un_16_);
	BIT_VEC cppVar_21607 = ROM.rd(cppVar_21606);
	bool cppVar_21609 = (cppVar_21607 == 137);
	BIT_VEC cppVar_21610 = PC + 1;
	cppVar_21610 = (cppVar_21610 & cppMask_un_16_);
	BIT_VEC cppVar_21611 = ROM.rd(cppVar_21610);
	bool cppVar_21613 = (cppVar_21611 == 138);
	BIT_VEC cppVar_21614 = PC + 1;
	cppVar_21614 = (cppVar_21614 & cppMask_un_16_);
	BIT_VEC cppVar_21615 = ROM.rd(cppVar_21614);
	bool cppVar_21617 = (cppVar_21615 == 140);
	BIT_VEC cppVar_21618 = PC + 1;
	cppVar_21618 = (cppVar_21618 & cppMask_un_16_);
	BIT_VEC cppVar_21619 = ROM.rd(cppVar_21618);
	bool cppVar_21621 = (cppVar_21619 == 139);
	BIT_VEC cppVar_21622 = PC + 1;
	cppVar_21622 = (cppVar_21622 & cppMask_un_16_);
	BIT_VEC cppVar_21623 = ROM.rd(cppVar_21622);
	bool cppVar_21625 = (cppVar_21623 == 141);
	BIT_VEC cppVar_21626 = PC + 1;
	cppVar_21626 = (cppVar_21626 & cppMask_un_16_);
	BIT_VEC cppVar_21627 = ROM.rd(cppVar_21626);
	bool cppVar_21629 = (cppVar_21627 == 144);
	BIT_VEC cppVar_21630 = PC + 1;
	cppVar_21630 = (cppVar_21630 & cppMask_un_16_);
	BIT_VEC cppVar_21631 = ROM.rd(cppVar_21630);
	bool cppVar_21633 = (cppVar_21631 == 152);
	BIT_VEC cppVar_21634 = PC + 1;
	cppVar_21634 = (cppVar_21634 & cppMask_un_16_);
	BIT_VEC cppVar_21635 = ROM.rd(cppVar_21634);
	bool cppVar_21637 = (cppVar_21635 == 153);
	BIT_VEC cppVar_21638 = PC + 1;
	cppVar_21638 = (cppVar_21638 & cppMask_un_16_);
	BIT_VEC cppVar_21639 = ROM.rd(cppVar_21638);
	bool cppVar_21641 = (cppVar_21639 == 160);
	BIT_VEC cppVar_21642 = PC + 1;
	cppVar_21642 = (cppVar_21642 & cppMask_un_16_);
	BIT_VEC cppVar_21643 = ROM.rd(cppVar_21642);
	bool cppVar_21645 = (cppVar_21643 == 168);
	BIT_VEC cppVar_21646 = PC + 1;
	cppVar_21646 = (cppVar_21646 & cppMask_un_16_);
	BIT_VEC cppVar_21647 = ROM.rd(cppVar_21646);
	bool cppVar_21649 = (cppVar_21647 == 176);
	BIT_VEC cppVar_21650 = PC + 1;
	cppVar_21650 = (cppVar_21650 & cppMask_un_16_);
	BIT_VEC cppVar_21651 = ROM.rd(cppVar_21650);
	bool cppVar_21653 = (cppVar_21651 == 184);
	BIT_VEC cppVar_21654 = PC + 1;
	cppVar_21654 = (cppVar_21654 & cppMask_un_16_);
	BIT_VEC cppVar_21655 = ROM.rd(cppVar_21654);
	bool cppVar_21657 = (cppVar_21655 == 208);
	BIT_VEC cppVar_21658 = PC + 1;
	cppVar_21658 = (cppVar_21658 & cppMask_un_16_);
	BIT_VEC cppVar_21659 = ROM.rd(cppVar_21658);
	bool cppVar_21661 = (cppVar_21659 == 224);
	BIT_VEC cppVar_21662 = PC + 1;
	cppVar_21662 = (cppVar_21662 & cppMask_un_16_);
	BIT_VEC cppVar_21663 = ROM.rd(cppVar_21662);
	bool cppVar_21665 = (cppVar_21663 == 240);
	BIT_VEC cppVar_21667 = (cppVar_21665) ? B : 0;
	BIT_VEC cppVar_21668 = (cppVar_21661) ? ACC : cppVar_21667;
	BIT_VEC cppVar_21669 = (cppVar_21657) ? PSW : cppVar_21668;
	BIT_VEC cppVar_21670 = (cppVar_21653) ? IP : cppVar_21669;
	BIT_VEC cppVar_21671 = (cppVar_21649) ? P3 : cppVar_21670;
	BIT_VEC cppVar_21672 = (cppVar_21645) ? IE : cppVar_21671;
	BIT_VEC cppVar_21673 = (cppVar_21641) ? P2 : cppVar_21672;
	BIT_VEC cppVar_21674 = (cppVar_21637) ? SBUF : cppVar_21673;
	BIT_VEC cppVar_21675 = (cppVar_21633) ? SCON : cppVar_21674;
	BIT_VEC cppVar_21676 = (cppVar_21629) ? P1 : cppVar_21675;
	BIT_VEC cppVar_21677 = (cppVar_21625) ? TH1 : cppVar_21676;
	BIT_VEC cppVar_21678 = (cppVar_21621) ? TL1 : cppVar_21677;
	BIT_VEC cppVar_21679 = (cppVar_21617) ? TH0 : cppVar_21678;
	BIT_VEC cppVar_21680 = (cppVar_21613) ? TL0 : cppVar_21679;
	BIT_VEC cppVar_21681 = (cppVar_21609) ? TMOD : cppVar_21680;
	BIT_VEC cppVar_21682 = (cppVar_21605) ? TCON : cppVar_21681;
	BIT_VEC cppVar_21683 = (cppVar_21601) ? PCON : cppVar_21682;
	BIT_VEC cppVar_21684 = (cppVar_21597) ? DPH : cppVar_21683;
	BIT_VEC cppVar_21685 = (cppVar_21593) ? DPL : cppVar_21684;
	BIT_VEC cppVar_21686 = (cppVar_21589) ? SP : cppVar_21685;
	BIT_VEC cppVar_21687 = (cppVar_21585) ? P0 : cppVar_21686;
	BIT_VEC cppVar_21688 = (cppVar_21578) ? cppVar_21581 : cppVar_21687;
	BIT_VEC cppVar_21690 = PC + 2;
	cppVar_21690 = (cppVar_21690 & cppMask_un_16_);
	BIT_VEC cppVar_21691 = ROM.rd(cppVar_21690);
	BIT_VEC cppVar_21692 = cppVar_21688 | cppVar_21691;
	BIT_VEC cppVar_21693 = (cppVar_21573) ? cppVar_21692 : IP;
	BIT_VEC cppVar_21694 = ROM.rd(PC);
	bool cppVar_21696 = (cppVar_21694 == 66);
	BIT_VEC cppVar_21698 = PC + 1;
	cppVar_21698 = (cppVar_21698 & cppMask_un_16_);
	BIT_VEC cppVar_21699 = ROM.rd(cppVar_21698);
	bool cppVar_21701 = (cppVar_21699 == 184);
	BIT_VEC cppVar_21702 = PC + 1;
	cppVar_21702 = (cppVar_21702 & cppMask_un_16_);
	BIT_VEC cppVar_21703 = ROM.rd(cppVar_21702);
	BIT_VEC cppVar_21704 = (cppVar_21703 >> 7) & cppMask_un_1_;
	bool cppVar_21706 = (cppVar_21704 == 0);
	BIT_VEC cppVar_21707 = PC + 1;
	cppVar_21707 = (cppVar_21707 & cppMask_un_16_);
	BIT_VEC cppVar_21708 = ROM.rd(cppVar_21707);
	BIT_VEC cppVar_21709 = IRAM.rd(cppVar_21708);
	BIT_VEC cppVar_21710 = PC + 1;
	cppVar_21710 = (cppVar_21710 & cppMask_un_16_);
	BIT_VEC cppVar_21711 = ROM.rd(cppVar_21710);
	bool cppVar_21713 = (cppVar_21711 == 128);
	BIT_VEC cppVar_21714 = PC + 1;
	cppVar_21714 = (cppVar_21714 & cppMask_un_16_);
	BIT_VEC cppVar_21715 = ROM.rd(cppVar_21714);
	bool cppVar_21717 = (cppVar_21715 == 129);
	BIT_VEC cppVar_21718 = PC + 1;
	cppVar_21718 = (cppVar_21718 & cppMask_un_16_);
	BIT_VEC cppVar_21719 = ROM.rd(cppVar_21718);
	bool cppVar_21721 = (cppVar_21719 == 130);
	BIT_VEC cppVar_21722 = PC + 1;
	cppVar_21722 = (cppVar_21722 & cppMask_un_16_);
	BIT_VEC cppVar_21723 = ROM.rd(cppVar_21722);
	bool cppVar_21725 = (cppVar_21723 == 131);
	BIT_VEC cppVar_21726 = PC + 1;
	cppVar_21726 = (cppVar_21726 & cppMask_un_16_);
	BIT_VEC cppVar_21727 = ROM.rd(cppVar_21726);
	bool cppVar_21729 = (cppVar_21727 == 135);
	BIT_VEC cppVar_21730 = PC + 1;
	cppVar_21730 = (cppVar_21730 & cppMask_un_16_);
	BIT_VEC cppVar_21731 = ROM.rd(cppVar_21730);
	bool cppVar_21733 = (cppVar_21731 == 136);
	BIT_VEC cppVar_21734 = PC + 1;
	cppVar_21734 = (cppVar_21734 & cppMask_un_16_);
	BIT_VEC cppVar_21735 = ROM.rd(cppVar_21734);
	bool cppVar_21737 = (cppVar_21735 == 137);
	BIT_VEC cppVar_21738 = PC + 1;
	cppVar_21738 = (cppVar_21738 & cppMask_un_16_);
	BIT_VEC cppVar_21739 = ROM.rd(cppVar_21738);
	bool cppVar_21741 = (cppVar_21739 == 138);
	BIT_VEC cppVar_21742 = PC + 1;
	cppVar_21742 = (cppVar_21742 & cppMask_un_16_);
	BIT_VEC cppVar_21743 = ROM.rd(cppVar_21742);
	bool cppVar_21745 = (cppVar_21743 == 140);
	BIT_VEC cppVar_21746 = PC + 1;
	cppVar_21746 = (cppVar_21746 & cppMask_un_16_);
	BIT_VEC cppVar_21747 = ROM.rd(cppVar_21746);
	bool cppVar_21749 = (cppVar_21747 == 139);
	BIT_VEC cppVar_21750 = PC + 1;
	cppVar_21750 = (cppVar_21750 & cppMask_un_16_);
	BIT_VEC cppVar_21751 = ROM.rd(cppVar_21750);
	bool cppVar_21753 = (cppVar_21751 == 141);
	BIT_VEC cppVar_21754 = PC + 1;
	cppVar_21754 = (cppVar_21754 & cppMask_un_16_);
	BIT_VEC cppVar_21755 = ROM.rd(cppVar_21754);
	bool cppVar_21757 = (cppVar_21755 == 144);
	BIT_VEC cppVar_21758 = PC + 1;
	cppVar_21758 = (cppVar_21758 & cppMask_un_16_);
	BIT_VEC cppVar_21759 = ROM.rd(cppVar_21758);
	bool cppVar_21761 = (cppVar_21759 == 152);
	BIT_VEC cppVar_21762 = PC + 1;
	cppVar_21762 = (cppVar_21762 & cppMask_un_16_);
	BIT_VEC cppVar_21763 = ROM.rd(cppVar_21762);
	bool cppVar_21765 = (cppVar_21763 == 153);
	BIT_VEC cppVar_21766 = PC + 1;
	cppVar_21766 = (cppVar_21766 & cppMask_un_16_);
	BIT_VEC cppVar_21767 = ROM.rd(cppVar_21766);
	bool cppVar_21769 = (cppVar_21767 == 160);
	BIT_VEC cppVar_21770 = PC + 1;
	cppVar_21770 = (cppVar_21770 & cppMask_un_16_);
	BIT_VEC cppVar_21771 = ROM.rd(cppVar_21770);
	bool cppVar_21773 = (cppVar_21771 == 168);
	BIT_VEC cppVar_21774 = PC + 1;
	cppVar_21774 = (cppVar_21774 & cppMask_un_16_);
	BIT_VEC cppVar_21775 = ROM.rd(cppVar_21774);
	bool cppVar_21777 = (cppVar_21775 == 176);
	BIT_VEC cppVar_21778 = PC + 1;
	cppVar_21778 = (cppVar_21778 & cppMask_un_16_);
	BIT_VEC cppVar_21779 = ROM.rd(cppVar_21778);
	bool cppVar_21781 = (cppVar_21779 == 184);
	BIT_VEC cppVar_21782 = PC + 1;
	cppVar_21782 = (cppVar_21782 & cppMask_un_16_);
	BIT_VEC cppVar_21783 = ROM.rd(cppVar_21782);
	bool cppVar_21785 = (cppVar_21783 == 208);
	BIT_VEC cppVar_21786 = PC + 1;
	cppVar_21786 = (cppVar_21786 & cppMask_un_16_);
	BIT_VEC cppVar_21787 = ROM.rd(cppVar_21786);
	bool cppVar_21789 = (cppVar_21787 == 224);
	BIT_VEC cppVar_21790 = PC + 1;
	cppVar_21790 = (cppVar_21790 & cppMask_un_16_);
	BIT_VEC cppVar_21791 = ROM.rd(cppVar_21790);
	bool cppVar_21793 = (cppVar_21791 == 240);
	BIT_VEC cppVar_21795 = (cppVar_21793) ? B : 0;
	BIT_VEC cppVar_21796 = (cppVar_21789) ? ACC : cppVar_21795;
	BIT_VEC cppVar_21797 = (cppVar_21785) ? PSW : cppVar_21796;
	BIT_VEC cppVar_21798 = (cppVar_21781) ? IP : cppVar_21797;
	BIT_VEC cppVar_21799 = (cppVar_21777) ? P3 : cppVar_21798;
	BIT_VEC cppVar_21800 = (cppVar_21773) ? IE : cppVar_21799;
	BIT_VEC cppVar_21801 = (cppVar_21769) ? P2 : cppVar_21800;
	BIT_VEC cppVar_21802 = (cppVar_21765) ? SBUF : cppVar_21801;
	BIT_VEC cppVar_21803 = (cppVar_21761) ? SCON : cppVar_21802;
	BIT_VEC cppVar_21804 = (cppVar_21757) ? P1 : cppVar_21803;
	BIT_VEC cppVar_21805 = (cppVar_21753) ? TH1 : cppVar_21804;
	BIT_VEC cppVar_21806 = (cppVar_21749) ? TL1 : cppVar_21805;
	BIT_VEC cppVar_21807 = (cppVar_21745) ? TH0 : cppVar_21806;
	BIT_VEC cppVar_21808 = (cppVar_21741) ? TL0 : cppVar_21807;
	BIT_VEC cppVar_21809 = (cppVar_21737) ? TMOD : cppVar_21808;
	BIT_VEC cppVar_21810 = (cppVar_21733) ? TCON : cppVar_21809;
	BIT_VEC cppVar_21811 = (cppVar_21729) ? PCON : cppVar_21810;
	BIT_VEC cppVar_21812 = (cppVar_21725) ? DPH : cppVar_21811;
	BIT_VEC cppVar_21813 = (cppVar_21721) ? DPL : cppVar_21812;
	BIT_VEC cppVar_21814 = (cppVar_21717) ? SP : cppVar_21813;
	BIT_VEC cppVar_21815 = (cppVar_21713) ? P0 : cppVar_21814;
	BIT_VEC cppVar_21816 = (cppVar_21706) ? cppVar_21709 : cppVar_21815;
	BIT_VEC cppVar_21817 = cppVar_21816 | ACC;
	BIT_VEC cppVar_21818 = (cppVar_21701) ? cppVar_21817 : IP;
	BIT_VEC cppVar_21819 = ROM.rd(PC);
	bool cppVar_21821 = (cppVar_21819 == 213);
	BIT_VEC cppVar_21822 = ROM.rd(PC);
	bool cppVar_21824 = (cppVar_21822 == 21);
	bool cppVar_21825 = cppVar_21821 || cppVar_21824;
	BIT_VEC cppVar_21827 = PC + 1;
	cppVar_21827 = (cppVar_21827 & cppMask_un_16_);
	BIT_VEC cppVar_21828 = ROM.rd(cppVar_21827);
	bool cppVar_21830 = (cppVar_21828 == 184);
	BIT_VEC cppVar_21831 = PC + 1;
	cppVar_21831 = (cppVar_21831 & cppMask_un_16_);
	BIT_VEC cppVar_21832 = ROM.rd(cppVar_21831);
	BIT_VEC cppVar_21833 = (cppVar_21832 >> 7) & cppMask_un_1_;
	bool cppVar_21835 = (cppVar_21833 == 0);
	BIT_VEC cppVar_21836 = PC + 1;
	cppVar_21836 = (cppVar_21836 & cppMask_un_16_);
	BIT_VEC cppVar_21837 = ROM.rd(cppVar_21836);
	BIT_VEC cppVar_21838 = IRAM.rd(cppVar_21837);
	BIT_VEC cppVar_21839 = PC + 1;
	cppVar_21839 = (cppVar_21839 & cppMask_un_16_);
	BIT_VEC cppVar_21840 = ROM.rd(cppVar_21839);
	bool cppVar_21842 = (cppVar_21840 == 128);
	BIT_VEC cppVar_21843 = PC + 1;
	cppVar_21843 = (cppVar_21843 & cppMask_un_16_);
	BIT_VEC cppVar_21844 = ROM.rd(cppVar_21843);
	bool cppVar_21846 = (cppVar_21844 == 129);
	BIT_VEC cppVar_21847 = PC + 1;
	cppVar_21847 = (cppVar_21847 & cppMask_un_16_);
	BIT_VEC cppVar_21848 = ROM.rd(cppVar_21847);
	bool cppVar_21850 = (cppVar_21848 == 130);
	BIT_VEC cppVar_21851 = PC + 1;
	cppVar_21851 = (cppVar_21851 & cppMask_un_16_);
	BIT_VEC cppVar_21852 = ROM.rd(cppVar_21851);
	bool cppVar_21854 = (cppVar_21852 == 131);
	BIT_VEC cppVar_21855 = PC + 1;
	cppVar_21855 = (cppVar_21855 & cppMask_un_16_);
	BIT_VEC cppVar_21856 = ROM.rd(cppVar_21855);
	bool cppVar_21858 = (cppVar_21856 == 135);
	BIT_VEC cppVar_21859 = PC + 1;
	cppVar_21859 = (cppVar_21859 & cppMask_un_16_);
	BIT_VEC cppVar_21860 = ROM.rd(cppVar_21859);
	bool cppVar_21862 = (cppVar_21860 == 136);
	BIT_VEC cppVar_21863 = PC + 1;
	cppVar_21863 = (cppVar_21863 & cppMask_un_16_);
	BIT_VEC cppVar_21864 = ROM.rd(cppVar_21863);
	bool cppVar_21866 = (cppVar_21864 == 137);
	BIT_VEC cppVar_21867 = PC + 1;
	cppVar_21867 = (cppVar_21867 & cppMask_un_16_);
	BIT_VEC cppVar_21868 = ROM.rd(cppVar_21867);
	bool cppVar_21870 = (cppVar_21868 == 138);
	BIT_VEC cppVar_21871 = PC + 1;
	cppVar_21871 = (cppVar_21871 & cppMask_un_16_);
	BIT_VEC cppVar_21872 = ROM.rd(cppVar_21871);
	bool cppVar_21874 = (cppVar_21872 == 140);
	BIT_VEC cppVar_21875 = PC + 1;
	cppVar_21875 = (cppVar_21875 & cppMask_un_16_);
	BIT_VEC cppVar_21876 = ROM.rd(cppVar_21875);
	bool cppVar_21878 = (cppVar_21876 == 139);
	BIT_VEC cppVar_21879 = PC + 1;
	cppVar_21879 = (cppVar_21879 & cppMask_un_16_);
	BIT_VEC cppVar_21880 = ROM.rd(cppVar_21879);
	bool cppVar_21882 = (cppVar_21880 == 141);
	BIT_VEC cppVar_21883 = PC + 1;
	cppVar_21883 = (cppVar_21883 & cppMask_un_16_);
	BIT_VEC cppVar_21884 = ROM.rd(cppVar_21883);
	bool cppVar_21886 = (cppVar_21884 == 144);
	BIT_VEC cppVar_21887 = PC + 1;
	cppVar_21887 = (cppVar_21887 & cppMask_un_16_);
	BIT_VEC cppVar_21888 = ROM.rd(cppVar_21887);
	bool cppVar_21890 = (cppVar_21888 == 152);
	BIT_VEC cppVar_21891 = PC + 1;
	cppVar_21891 = (cppVar_21891 & cppMask_un_16_);
	BIT_VEC cppVar_21892 = ROM.rd(cppVar_21891);
	bool cppVar_21894 = (cppVar_21892 == 153);
	BIT_VEC cppVar_21895 = PC + 1;
	cppVar_21895 = (cppVar_21895 & cppMask_un_16_);
	BIT_VEC cppVar_21896 = ROM.rd(cppVar_21895);
	bool cppVar_21898 = (cppVar_21896 == 160);
	BIT_VEC cppVar_21899 = PC + 1;
	cppVar_21899 = (cppVar_21899 & cppMask_un_16_);
	BIT_VEC cppVar_21900 = ROM.rd(cppVar_21899);
	bool cppVar_21902 = (cppVar_21900 == 168);
	BIT_VEC cppVar_21903 = PC + 1;
	cppVar_21903 = (cppVar_21903 & cppMask_un_16_);
	BIT_VEC cppVar_21904 = ROM.rd(cppVar_21903);
	bool cppVar_21906 = (cppVar_21904 == 176);
	BIT_VEC cppVar_21907 = PC + 1;
	cppVar_21907 = (cppVar_21907 & cppMask_un_16_);
	BIT_VEC cppVar_21908 = ROM.rd(cppVar_21907);
	bool cppVar_21910 = (cppVar_21908 == 184);
	BIT_VEC cppVar_21911 = PC + 1;
	cppVar_21911 = (cppVar_21911 & cppMask_un_16_);
	BIT_VEC cppVar_21912 = ROM.rd(cppVar_21911);
	bool cppVar_21914 = (cppVar_21912 == 208);
	BIT_VEC cppVar_21915 = PC + 1;
	cppVar_21915 = (cppVar_21915 & cppMask_un_16_);
	BIT_VEC cppVar_21916 = ROM.rd(cppVar_21915);
	bool cppVar_21918 = (cppVar_21916 == 224);
	BIT_VEC cppVar_21919 = PC + 1;
	cppVar_21919 = (cppVar_21919 & cppMask_un_16_);
	BIT_VEC cppVar_21920 = ROM.rd(cppVar_21919);
	bool cppVar_21922 = (cppVar_21920 == 240);
	BIT_VEC cppVar_21924 = (cppVar_21922) ? B : 0;
	BIT_VEC cppVar_21925 = (cppVar_21918) ? ACC : cppVar_21924;
	BIT_VEC cppVar_21926 = (cppVar_21914) ? PSW : cppVar_21925;
	BIT_VEC cppVar_21927 = (cppVar_21910) ? IP : cppVar_21926;
	BIT_VEC cppVar_21928 = (cppVar_21906) ? P3 : cppVar_21927;
	BIT_VEC cppVar_21929 = (cppVar_21902) ? IE : cppVar_21928;
	BIT_VEC cppVar_21930 = (cppVar_21898) ? P2 : cppVar_21929;
	BIT_VEC cppVar_21931 = (cppVar_21894) ? SBUF : cppVar_21930;
	BIT_VEC cppVar_21932 = (cppVar_21890) ? SCON : cppVar_21931;
	BIT_VEC cppVar_21933 = (cppVar_21886) ? P1 : cppVar_21932;
	BIT_VEC cppVar_21934 = (cppVar_21882) ? TH1 : cppVar_21933;
	BIT_VEC cppVar_21935 = (cppVar_21878) ? TL1 : cppVar_21934;
	BIT_VEC cppVar_21936 = (cppVar_21874) ? TH0 : cppVar_21935;
	BIT_VEC cppVar_21937 = (cppVar_21870) ? TL0 : cppVar_21936;
	BIT_VEC cppVar_21938 = (cppVar_21866) ? TMOD : cppVar_21937;
	BIT_VEC cppVar_21939 = (cppVar_21862) ? TCON : cppVar_21938;
	BIT_VEC cppVar_21940 = (cppVar_21858) ? PCON : cppVar_21939;
	BIT_VEC cppVar_21941 = (cppVar_21854) ? DPH : cppVar_21940;
	BIT_VEC cppVar_21942 = (cppVar_21850) ? DPL : cppVar_21941;
	BIT_VEC cppVar_21943 = (cppVar_21846) ? SP : cppVar_21942;
	BIT_VEC cppVar_21944 = (cppVar_21842) ? P0 : cppVar_21943;
	BIT_VEC cppVar_21945 = (cppVar_21835) ? cppVar_21838 : cppVar_21944;
	BIT_VEC cppVar_21947 = cppVar_21945 - 1;
	cppVar_21947 = (cppVar_21947 & cppMask_un_8_);
	BIT_VEC cppVar_21948 = (cppVar_21830) ? cppVar_21947 : IP;
	BIT_VEC cppVar_21949 = ROM.rd(PC);
	bool cppVar_21951 = (cppVar_21949 == 194);
	BIT_VEC cppVar_21952 = ROM.rd(PC);
	bool cppVar_21954 = (cppVar_21952 == 16);
	bool cppVar_21955 = cppVar_21951 || cppVar_21954;
	BIT_VEC cppVar_21957 = PC + 1;
	cppVar_21957 = (cppVar_21957 & cppMask_un_16_);
	BIT_VEC cppVar_21958 = ROM.rd(cppVar_21957);
	BIT_VEC cppVar_21959 = (cppVar_21958 >> 7) & cppMask_un_1_;
	bool cppVar_21961 = (cppVar_21959 == 1);
	BIT_VEC cppVar_21962 = PC + 1;
	cppVar_21962 = (cppVar_21962 & cppMask_un_16_);
	BIT_VEC cppVar_21963 = ROM.rd(cppVar_21962);
	BIT_VEC cppVar_21964 = (cppVar_21963 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_21966 = (cppVar_21964 << 3) | 0;
	cppVar_21966 = (cppVar_21966 & cppMask_un_8_);
	BIT_VEC cppVar_21967 = PC + 1;
	cppVar_21967 = (cppVar_21967 & cppMask_un_16_);
	BIT_VEC cppVar_21968 = ROM.rd(cppVar_21967);
	BIT_VEC cppVar_21969 = (cppVar_21968 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_21970 = (cppVar_21969 & cppMask_un_5_);
	BIT_VEC cppVar_21972 = cppVar_21970 + 32;
	cppVar_21972 = (cppVar_21972 & cppMask_un_8_);
	BIT_VEC cppVar_21973 = (cppVar_21961) ? cppVar_21966 : cppVar_21972;
	bool cppVar_21975 = (cppVar_21973 == 184);
	BIT_VEC cppVar_21977 = PC + 1;
	cppVar_21977 = (cppVar_21977 & cppMask_un_16_);
	BIT_VEC cppVar_21978 = ROM.rd(cppVar_21977);
	BIT_VEC cppVar_21979 = (cppVar_21978 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_21980 = (cppVar_21979 & cppMask_un_3_);
	BIT_VEC cppVar_21981 = 1 << static_cast<unsigned>(cppVar_21980);
	cppVar_21981 = (cppVar_21981 & cppMask_un_8_);
	BIT_VEC cppVar_21982 = ~cppVar_21981;
	BIT_VEC cppVar_21983 = PC + 1;
	cppVar_21983 = (cppVar_21983 & cppMask_un_16_);
	BIT_VEC cppVar_21984 = ROM.rd(cppVar_21983);
	BIT_VEC cppVar_21985 = (cppVar_21984 >> 7) & cppMask_un_1_;
	bool cppVar_21986 = (cppVar_21985 == 1);
	BIT_VEC cppVar_21987 = PC + 1;
	cppVar_21987 = (cppVar_21987 & cppMask_un_16_);
	BIT_VEC cppVar_21988 = ROM.rd(cppVar_21987);
	BIT_VEC cppVar_21989 = (cppVar_21988 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_21990 = (cppVar_21989 << 3) | 0;
	cppVar_21990 = (cppVar_21990 & cppMask_un_8_);
	BIT_VEC cppVar_21991 = PC + 1;
	cppVar_21991 = (cppVar_21991 & cppMask_un_16_);
	BIT_VEC cppVar_21992 = ROM.rd(cppVar_21991);
	BIT_VEC cppVar_21993 = (cppVar_21992 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_21994 = (cppVar_21993 & cppMask_un_5_);
	BIT_VEC cppVar_21995 = cppVar_21994 + 32;
	cppVar_21995 = (cppVar_21995 & cppMask_un_8_);
	BIT_VEC cppVar_21996 = (cppVar_21986) ? cppVar_21990 : cppVar_21995;
	BIT_VEC cppVar_21997 = (cppVar_21996 >> 7) & cppMask_un_1_;
	bool cppVar_21999 = (cppVar_21997 == 0);
	BIT_VEC cppVar_22000 = PC + 1;
	cppVar_22000 = (cppVar_22000 & cppMask_un_16_);
	BIT_VEC cppVar_22001 = ROM.rd(cppVar_22000);
	BIT_VEC cppVar_22002 = (cppVar_22001 >> 7) & cppMask_un_1_;
	bool cppVar_22003 = (cppVar_22002 == 1);
	BIT_VEC cppVar_22004 = PC + 1;
	cppVar_22004 = (cppVar_22004 & cppMask_un_16_);
	BIT_VEC cppVar_22005 = ROM.rd(cppVar_22004);
	BIT_VEC cppVar_22006 = (cppVar_22005 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22007 = (cppVar_22006 << 3) | 0;
	cppVar_22007 = (cppVar_22007 & cppMask_un_8_);
	BIT_VEC cppVar_22008 = PC + 1;
	cppVar_22008 = (cppVar_22008 & cppMask_un_16_);
	BIT_VEC cppVar_22009 = ROM.rd(cppVar_22008);
	BIT_VEC cppVar_22010 = (cppVar_22009 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22011 = (cppVar_22010 & cppMask_un_5_);
	BIT_VEC cppVar_22012 = cppVar_22011 + 32;
	cppVar_22012 = (cppVar_22012 & cppMask_un_8_);
	BIT_VEC cppVar_22013 = (cppVar_22003) ? cppVar_22007 : cppVar_22012;
	BIT_VEC cppVar_22014 = IRAM.rd(cppVar_22013);
	BIT_VEC cppVar_22015 = PC + 1;
	cppVar_22015 = (cppVar_22015 & cppMask_un_16_);
	BIT_VEC cppVar_22016 = ROM.rd(cppVar_22015);
	BIT_VEC cppVar_22017 = (cppVar_22016 >> 7) & cppMask_un_1_;
	bool cppVar_22018 = (cppVar_22017 == 1);
	BIT_VEC cppVar_22019 = PC + 1;
	cppVar_22019 = (cppVar_22019 & cppMask_un_16_);
	BIT_VEC cppVar_22020 = ROM.rd(cppVar_22019);
	BIT_VEC cppVar_22021 = (cppVar_22020 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22022 = (cppVar_22021 << 3) | 0;
	cppVar_22022 = (cppVar_22022 & cppMask_un_8_);
	BIT_VEC cppVar_22023 = PC + 1;
	cppVar_22023 = (cppVar_22023 & cppMask_un_16_);
	BIT_VEC cppVar_22024 = ROM.rd(cppVar_22023);
	BIT_VEC cppVar_22025 = (cppVar_22024 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22026 = (cppVar_22025 & cppMask_un_5_);
	BIT_VEC cppVar_22027 = cppVar_22026 + 32;
	cppVar_22027 = (cppVar_22027 & cppMask_un_8_);
	BIT_VEC cppVar_22028 = (cppVar_22018) ? cppVar_22022 : cppVar_22027;
	bool cppVar_22030 = (cppVar_22028 == 128);
	BIT_VEC cppVar_22031 = PC + 1;
	cppVar_22031 = (cppVar_22031 & cppMask_un_16_);
	BIT_VEC cppVar_22032 = ROM.rd(cppVar_22031);
	BIT_VEC cppVar_22033 = (cppVar_22032 >> 7) & cppMask_un_1_;
	bool cppVar_22034 = (cppVar_22033 == 1);
	BIT_VEC cppVar_22035 = PC + 1;
	cppVar_22035 = (cppVar_22035 & cppMask_un_16_);
	BIT_VEC cppVar_22036 = ROM.rd(cppVar_22035);
	BIT_VEC cppVar_22037 = (cppVar_22036 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22038 = (cppVar_22037 << 3) | 0;
	cppVar_22038 = (cppVar_22038 & cppMask_un_8_);
	BIT_VEC cppVar_22039 = PC + 1;
	cppVar_22039 = (cppVar_22039 & cppMask_un_16_);
	BIT_VEC cppVar_22040 = ROM.rd(cppVar_22039);
	BIT_VEC cppVar_22041 = (cppVar_22040 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22042 = (cppVar_22041 & cppMask_un_5_);
	BIT_VEC cppVar_22043 = cppVar_22042 + 32;
	cppVar_22043 = (cppVar_22043 & cppMask_un_8_);
	BIT_VEC cppVar_22044 = (cppVar_22034) ? cppVar_22038 : cppVar_22043;
	bool cppVar_22046 = (cppVar_22044 == 129);
	BIT_VEC cppVar_22047 = PC + 1;
	cppVar_22047 = (cppVar_22047 & cppMask_un_16_);
	BIT_VEC cppVar_22048 = ROM.rd(cppVar_22047);
	BIT_VEC cppVar_22049 = (cppVar_22048 >> 7) & cppMask_un_1_;
	bool cppVar_22050 = (cppVar_22049 == 1);
	BIT_VEC cppVar_22051 = PC + 1;
	cppVar_22051 = (cppVar_22051 & cppMask_un_16_);
	BIT_VEC cppVar_22052 = ROM.rd(cppVar_22051);
	BIT_VEC cppVar_22053 = (cppVar_22052 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22054 = (cppVar_22053 << 3) | 0;
	cppVar_22054 = (cppVar_22054 & cppMask_un_8_);
	BIT_VEC cppVar_22055 = PC + 1;
	cppVar_22055 = (cppVar_22055 & cppMask_un_16_);
	BIT_VEC cppVar_22056 = ROM.rd(cppVar_22055);
	BIT_VEC cppVar_22057 = (cppVar_22056 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22058 = (cppVar_22057 & cppMask_un_5_);
	BIT_VEC cppVar_22059 = cppVar_22058 + 32;
	cppVar_22059 = (cppVar_22059 & cppMask_un_8_);
	BIT_VEC cppVar_22060 = (cppVar_22050) ? cppVar_22054 : cppVar_22059;
	bool cppVar_22062 = (cppVar_22060 == 130);
	BIT_VEC cppVar_22063 = PC + 1;
	cppVar_22063 = (cppVar_22063 & cppMask_un_16_);
	BIT_VEC cppVar_22064 = ROM.rd(cppVar_22063);
	BIT_VEC cppVar_22065 = (cppVar_22064 >> 7) & cppMask_un_1_;
	bool cppVar_22066 = (cppVar_22065 == 1);
	BIT_VEC cppVar_22067 = PC + 1;
	cppVar_22067 = (cppVar_22067 & cppMask_un_16_);
	BIT_VEC cppVar_22068 = ROM.rd(cppVar_22067);
	BIT_VEC cppVar_22069 = (cppVar_22068 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22070 = (cppVar_22069 << 3) | 0;
	cppVar_22070 = (cppVar_22070 & cppMask_un_8_);
	BIT_VEC cppVar_22071 = PC + 1;
	cppVar_22071 = (cppVar_22071 & cppMask_un_16_);
	BIT_VEC cppVar_22072 = ROM.rd(cppVar_22071);
	BIT_VEC cppVar_22073 = (cppVar_22072 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22074 = (cppVar_22073 & cppMask_un_5_);
	BIT_VEC cppVar_22075 = cppVar_22074 + 32;
	cppVar_22075 = (cppVar_22075 & cppMask_un_8_);
	BIT_VEC cppVar_22076 = (cppVar_22066) ? cppVar_22070 : cppVar_22075;
	bool cppVar_22078 = (cppVar_22076 == 131);
	BIT_VEC cppVar_22079 = PC + 1;
	cppVar_22079 = (cppVar_22079 & cppMask_un_16_);
	BIT_VEC cppVar_22080 = ROM.rd(cppVar_22079);
	BIT_VEC cppVar_22081 = (cppVar_22080 >> 7) & cppMask_un_1_;
	bool cppVar_22082 = (cppVar_22081 == 1);
	BIT_VEC cppVar_22083 = PC + 1;
	cppVar_22083 = (cppVar_22083 & cppMask_un_16_);
	BIT_VEC cppVar_22084 = ROM.rd(cppVar_22083);
	BIT_VEC cppVar_22085 = (cppVar_22084 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22086 = (cppVar_22085 << 3) | 0;
	cppVar_22086 = (cppVar_22086 & cppMask_un_8_);
	BIT_VEC cppVar_22087 = PC + 1;
	cppVar_22087 = (cppVar_22087 & cppMask_un_16_);
	BIT_VEC cppVar_22088 = ROM.rd(cppVar_22087);
	BIT_VEC cppVar_22089 = (cppVar_22088 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22090 = (cppVar_22089 & cppMask_un_5_);
	BIT_VEC cppVar_22091 = cppVar_22090 + 32;
	cppVar_22091 = (cppVar_22091 & cppMask_un_8_);
	BIT_VEC cppVar_22092 = (cppVar_22082) ? cppVar_22086 : cppVar_22091;
	bool cppVar_22094 = (cppVar_22092 == 135);
	BIT_VEC cppVar_22095 = PC + 1;
	cppVar_22095 = (cppVar_22095 & cppMask_un_16_);
	BIT_VEC cppVar_22096 = ROM.rd(cppVar_22095);
	BIT_VEC cppVar_22097 = (cppVar_22096 >> 7) & cppMask_un_1_;
	bool cppVar_22098 = (cppVar_22097 == 1);
	BIT_VEC cppVar_22099 = PC + 1;
	cppVar_22099 = (cppVar_22099 & cppMask_un_16_);
	BIT_VEC cppVar_22100 = ROM.rd(cppVar_22099);
	BIT_VEC cppVar_22101 = (cppVar_22100 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22102 = (cppVar_22101 << 3) | 0;
	cppVar_22102 = (cppVar_22102 & cppMask_un_8_);
	BIT_VEC cppVar_22103 = PC + 1;
	cppVar_22103 = (cppVar_22103 & cppMask_un_16_);
	BIT_VEC cppVar_22104 = ROM.rd(cppVar_22103);
	BIT_VEC cppVar_22105 = (cppVar_22104 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22106 = (cppVar_22105 & cppMask_un_5_);
	BIT_VEC cppVar_22107 = cppVar_22106 + 32;
	cppVar_22107 = (cppVar_22107 & cppMask_un_8_);
	BIT_VEC cppVar_22108 = (cppVar_22098) ? cppVar_22102 : cppVar_22107;
	bool cppVar_22110 = (cppVar_22108 == 136);
	BIT_VEC cppVar_22111 = PC + 1;
	cppVar_22111 = (cppVar_22111 & cppMask_un_16_);
	BIT_VEC cppVar_22112 = ROM.rd(cppVar_22111);
	BIT_VEC cppVar_22113 = (cppVar_22112 >> 7) & cppMask_un_1_;
	bool cppVar_22114 = (cppVar_22113 == 1);
	BIT_VEC cppVar_22115 = PC + 1;
	cppVar_22115 = (cppVar_22115 & cppMask_un_16_);
	BIT_VEC cppVar_22116 = ROM.rd(cppVar_22115);
	BIT_VEC cppVar_22117 = (cppVar_22116 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22118 = (cppVar_22117 << 3) | 0;
	cppVar_22118 = (cppVar_22118 & cppMask_un_8_);
	BIT_VEC cppVar_22119 = PC + 1;
	cppVar_22119 = (cppVar_22119 & cppMask_un_16_);
	BIT_VEC cppVar_22120 = ROM.rd(cppVar_22119);
	BIT_VEC cppVar_22121 = (cppVar_22120 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22122 = (cppVar_22121 & cppMask_un_5_);
	BIT_VEC cppVar_22123 = cppVar_22122 + 32;
	cppVar_22123 = (cppVar_22123 & cppMask_un_8_);
	BIT_VEC cppVar_22124 = (cppVar_22114) ? cppVar_22118 : cppVar_22123;
	bool cppVar_22126 = (cppVar_22124 == 137);
	BIT_VEC cppVar_22127 = PC + 1;
	cppVar_22127 = (cppVar_22127 & cppMask_un_16_);
	BIT_VEC cppVar_22128 = ROM.rd(cppVar_22127);
	BIT_VEC cppVar_22129 = (cppVar_22128 >> 7) & cppMask_un_1_;
	bool cppVar_22130 = (cppVar_22129 == 1);
	BIT_VEC cppVar_22131 = PC + 1;
	cppVar_22131 = (cppVar_22131 & cppMask_un_16_);
	BIT_VEC cppVar_22132 = ROM.rd(cppVar_22131);
	BIT_VEC cppVar_22133 = (cppVar_22132 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22134 = (cppVar_22133 << 3) | 0;
	cppVar_22134 = (cppVar_22134 & cppMask_un_8_);
	BIT_VEC cppVar_22135 = PC + 1;
	cppVar_22135 = (cppVar_22135 & cppMask_un_16_);
	BIT_VEC cppVar_22136 = ROM.rd(cppVar_22135);
	BIT_VEC cppVar_22137 = (cppVar_22136 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22138 = (cppVar_22137 & cppMask_un_5_);
	BIT_VEC cppVar_22139 = cppVar_22138 + 32;
	cppVar_22139 = (cppVar_22139 & cppMask_un_8_);
	BIT_VEC cppVar_22140 = (cppVar_22130) ? cppVar_22134 : cppVar_22139;
	bool cppVar_22142 = (cppVar_22140 == 138);
	BIT_VEC cppVar_22143 = PC + 1;
	cppVar_22143 = (cppVar_22143 & cppMask_un_16_);
	BIT_VEC cppVar_22144 = ROM.rd(cppVar_22143);
	BIT_VEC cppVar_22145 = (cppVar_22144 >> 7) & cppMask_un_1_;
	bool cppVar_22146 = (cppVar_22145 == 1);
	BIT_VEC cppVar_22147 = PC + 1;
	cppVar_22147 = (cppVar_22147 & cppMask_un_16_);
	BIT_VEC cppVar_22148 = ROM.rd(cppVar_22147);
	BIT_VEC cppVar_22149 = (cppVar_22148 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22150 = (cppVar_22149 << 3) | 0;
	cppVar_22150 = (cppVar_22150 & cppMask_un_8_);
	BIT_VEC cppVar_22151 = PC + 1;
	cppVar_22151 = (cppVar_22151 & cppMask_un_16_);
	BIT_VEC cppVar_22152 = ROM.rd(cppVar_22151);
	BIT_VEC cppVar_22153 = (cppVar_22152 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22154 = (cppVar_22153 & cppMask_un_5_);
	BIT_VEC cppVar_22155 = cppVar_22154 + 32;
	cppVar_22155 = (cppVar_22155 & cppMask_un_8_);
	BIT_VEC cppVar_22156 = (cppVar_22146) ? cppVar_22150 : cppVar_22155;
	bool cppVar_22158 = (cppVar_22156 == 140);
	BIT_VEC cppVar_22159 = PC + 1;
	cppVar_22159 = (cppVar_22159 & cppMask_un_16_);
	BIT_VEC cppVar_22160 = ROM.rd(cppVar_22159);
	BIT_VEC cppVar_22161 = (cppVar_22160 >> 7) & cppMask_un_1_;
	bool cppVar_22162 = (cppVar_22161 == 1);
	BIT_VEC cppVar_22163 = PC + 1;
	cppVar_22163 = (cppVar_22163 & cppMask_un_16_);
	BIT_VEC cppVar_22164 = ROM.rd(cppVar_22163);
	BIT_VEC cppVar_22165 = (cppVar_22164 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22166 = (cppVar_22165 << 3) | 0;
	cppVar_22166 = (cppVar_22166 & cppMask_un_8_);
	BIT_VEC cppVar_22167 = PC + 1;
	cppVar_22167 = (cppVar_22167 & cppMask_un_16_);
	BIT_VEC cppVar_22168 = ROM.rd(cppVar_22167);
	BIT_VEC cppVar_22169 = (cppVar_22168 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22170 = (cppVar_22169 & cppMask_un_5_);
	BIT_VEC cppVar_22171 = cppVar_22170 + 32;
	cppVar_22171 = (cppVar_22171 & cppMask_un_8_);
	BIT_VEC cppVar_22172 = (cppVar_22162) ? cppVar_22166 : cppVar_22171;
	bool cppVar_22174 = (cppVar_22172 == 139);
	BIT_VEC cppVar_22175 = PC + 1;
	cppVar_22175 = (cppVar_22175 & cppMask_un_16_);
	BIT_VEC cppVar_22176 = ROM.rd(cppVar_22175);
	BIT_VEC cppVar_22177 = (cppVar_22176 >> 7) & cppMask_un_1_;
	bool cppVar_22178 = (cppVar_22177 == 1);
	BIT_VEC cppVar_22179 = PC + 1;
	cppVar_22179 = (cppVar_22179 & cppMask_un_16_);
	BIT_VEC cppVar_22180 = ROM.rd(cppVar_22179);
	BIT_VEC cppVar_22181 = (cppVar_22180 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22182 = (cppVar_22181 << 3) | 0;
	cppVar_22182 = (cppVar_22182 & cppMask_un_8_);
	BIT_VEC cppVar_22183 = PC + 1;
	cppVar_22183 = (cppVar_22183 & cppMask_un_16_);
	BIT_VEC cppVar_22184 = ROM.rd(cppVar_22183);
	BIT_VEC cppVar_22185 = (cppVar_22184 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22186 = (cppVar_22185 & cppMask_un_5_);
	BIT_VEC cppVar_22187 = cppVar_22186 + 32;
	cppVar_22187 = (cppVar_22187 & cppMask_un_8_);
	BIT_VEC cppVar_22188 = (cppVar_22178) ? cppVar_22182 : cppVar_22187;
	bool cppVar_22190 = (cppVar_22188 == 141);
	BIT_VEC cppVar_22191 = PC + 1;
	cppVar_22191 = (cppVar_22191 & cppMask_un_16_);
	BIT_VEC cppVar_22192 = ROM.rd(cppVar_22191);
	BIT_VEC cppVar_22193 = (cppVar_22192 >> 7) & cppMask_un_1_;
	bool cppVar_22194 = (cppVar_22193 == 1);
	BIT_VEC cppVar_22195 = PC + 1;
	cppVar_22195 = (cppVar_22195 & cppMask_un_16_);
	BIT_VEC cppVar_22196 = ROM.rd(cppVar_22195);
	BIT_VEC cppVar_22197 = (cppVar_22196 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22198 = (cppVar_22197 << 3) | 0;
	cppVar_22198 = (cppVar_22198 & cppMask_un_8_);
	BIT_VEC cppVar_22199 = PC + 1;
	cppVar_22199 = (cppVar_22199 & cppMask_un_16_);
	BIT_VEC cppVar_22200 = ROM.rd(cppVar_22199);
	BIT_VEC cppVar_22201 = (cppVar_22200 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22202 = (cppVar_22201 & cppMask_un_5_);
	BIT_VEC cppVar_22203 = cppVar_22202 + 32;
	cppVar_22203 = (cppVar_22203 & cppMask_un_8_);
	BIT_VEC cppVar_22204 = (cppVar_22194) ? cppVar_22198 : cppVar_22203;
	bool cppVar_22206 = (cppVar_22204 == 144);
	BIT_VEC cppVar_22207 = PC + 1;
	cppVar_22207 = (cppVar_22207 & cppMask_un_16_);
	BIT_VEC cppVar_22208 = ROM.rd(cppVar_22207);
	BIT_VEC cppVar_22209 = (cppVar_22208 >> 7) & cppMask_un_1_;
	bool cppVar_22210 = (cppVar_22209 == 1);
	BIT_VEC cppVar_22211 = PC + 1;
	cppVar_22211 = (cppVar_22211 & cppMask_un_16_);
	BIT_VEC cppVar_22212 = ROM.rd(cppVar_22211);
	BIT_VEC cppVar_22213 = (cppVar_22212 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22214 = (cppVar_22213 << 3) | 0;
	cppVar_22214 = (cppVar_22214 & cppMask_un_8_);
	BIT_VEC cppVar_22215 = PC + 1;
	cppVar_22215 = (cppVar_22215 & cppMask_un_16_);
	BIT_VEC cppVar_22216 = ROM.rd(cppVar_22215);
	BIT_VEC cppVar_22217 = (cppVar_22216 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22218 = (cppVar_22217 & cppMask_un_5_);
	BIT_VEC cppVar_22219 = cppVar_22218 + 32;
	cppVar_22219 = (cppVar_22219 & cppMask_un_8_);
	BIT_VEC cppVar_22220 = (cppVar_22210) ? cppVar_22214 : cppVar_22219;
	bool cppVar_22222 = (cppVar_22220 == 152);
	BIT_VEC cppVar_22223 = PC + 1;
	cppVar_22223 = (cppVar_22223 & cppMask_un_16_);
	BIT_VEC cppVar_22224 = ROM.rd(cppVar_22223);
	BIT_VEC cppVar_22225 = (cppVar_22224 >> 7) & cppMask_un_1_;
	bool cppVar_22226 = (cppVar_22225 == 1);
	BIT_VEC cppVar_22227 = PC + 1;
	cppVar_22227 = (cppVar_22227 & cppMask_un_16_);
	BIT_VEC cppVar_22228 = ROM.rd(cppVar_22227);
	BIT_VEC cppVar_22229 = (cppVar_22228 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22230 = (cppVar_22229 << 3) | 0;
	cppVar_22230 = (cppVar_22230 & cppMask_un_8_);
	BIT_VEC cppVar_22231 = PC + 1;
	cppVar_22231 = (cppVar_22231 & cppMask_un_16_);
	BIT_VEC cppVar_22232 = ROM.rd(cppVar_22231);
	BIT_VEC cppVar_22233 = (cppVar_22232 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22234 = (cppVar_22233 & cppMask_un_5_);
	BIT_VEC cppVar_22235 = cppVar_22234 + 32;
	cppVar_22235 = (cppVar_22235 & cppMask_un_8_);
	BIT_VEC cppVar_22236 = (cppVar_22226) ? cppVar_22230 : cppVar_22235;
	bool cppVar_22238 = (cppVar_22236 == 153);
	BIT_VEC cppVar_22239 = PC + 1;
	cppVar_22239 = (cppVar_22239 & cppMask_un_16_);
	BIT_VEC cppVar_22240 = ROM.rd(cppVar_22239);
	BIT_VEC cppVar_22241 = (cppVar_22240 >> 7) & cppMask_un_1_;
	bool cppVar_22242 = (cppVar_22241 == 1);
	BIT_VEC cppVar_22243 = PC + 1;
	cppVar_22243 = (cppVar_22243 & cppMask_un_16_);
	BIT_VEC cppVar_22244 = ROM.rd(cppVar_22243);
	BIT_VEC cppVar_22245 = (cppVar_22244 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22246 = (cppVar_22245 << 3) | 0;
	cppVar_22246 = (cppVar_22246 & cppMask_un_8_);
	BIT_VEC cppVar_22247 = PC + 1;
	cppVar_22247 = (cppVar_22247 & cppMask_un_16_);
	BIT_VEC cppVar_22248 = ROM.rd(cppVar_22247);
	BIT_VEC cppVar_22249 = (cppVar_22248 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22250 = (cppVar_22249 & cppMask_un_5_);
	BIT_VEC cppVar_22251 = cppVar_22250 + 32;
	cppVar_22251 = (cppVar_22251 & cppMask_un_8_);
	BIT_VEC cppVar_22252 = (cppVar_22242) ? cppVar_22246 : cppVar_22251;
	bool cppVar_22254 = (cppVar_22252 == 160);
	BIT_VEC cppVar_22255 = PC + 1;
	cppVar_22255 = (cppVar_22255 & cppMask_un_16_);
	BIT_VEC cppVar_22256 = ROM.rd(cppVar_22255);
	BIT_VEC cppVar_22257 = (cppVar_22256 >> 7) & cppMask_un_1_;
	bool cppVar_22258 = (cppVar_22257 == 1);
	BIT_VEC cppVar_22259 = PC + 1;
	cppVar_22259 = (cppVar_22259 & cppMask_un_16_);
	BIT_VEC cppVar_22260 = ROM.rd(cppVar_22259);
	BIT_VEC cppVar_22261 = (cppVar_22260 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22262 = (cppVar_22261 << 3) | 0;
	cppVar_22262 = (cppVar_22262 & cppMask_un_8_);
	BIT_VEC cppVar_22263 = PC + 1;
	cppVar_22263 = (cppVar_22263 & cppMask_un_16_);
	BIT_VEC cppVar_22264 = ROM.rd(cppVar_22263);
	BIT_VEC cppVar_22265 = (cppVar_22264 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22266 = (cppVar_22265 & cppMask_un_5_);
	BIT_VEC cppVar_22267 = cppVar_22266 + 32;
	cppVar_22267 = (cppVar_22267 & cppMask_un_8_);
	BIT_VEC cppVar_22268 = (cppVar_22258) ? cppVar_22262 : cppVar_22267;
	bool cppVar_22270 = (cppVar_22268 == 168);
	BIT_VEC cppVar_22271 = PC + 1;
	cppVar_22271 = (cppVar_22271 & cppMask_un_16_);
	BIT_VEC cppVar_22272 = ROM.rd(cppVar_22271);
	BIT_VEC cppVar_22273 = (cppVar_22272 >> 7) & cppMask_un_1_;
	bool cppVar_22274 = (cppVar_22273 == 1);
	BIT_VEC cppVar_22275 = PC + 1;
	cppVar_22275 = (cppVar_22275 & cppMask_un_16_);
	BIT_VEC cppVar_22276 = ROM.rd(cppVar_22275);
	BIT_VEC cppVar_22277 = (cppVar_22276 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22278 = (cppVar_22277 << 3) | 0;
	cppVar_22278 = (cppVar_22278 & cppMask_un_8_);
	BIT_VEC cppVar_22279 = PC + 1;
	cppVar_22279 = (cppVar_22279 & cppMask_un_16_);
	BIT_VEC cppVar_22280 = ROM.rd(cppVar_22279);
	BIT_VEC cppVar_22281 = (cppVar_22280 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22282 = (cppVar_22281 & cppMask_un_5_);
	BIT_VEC cppVar_22283 = cppVar_22282 + 32;
	cppVar_22283 = (cppVar_22283 & cppMask_un_8_);
	BIT_VEC cppVar_22284 = (cppVar_22274) ? cppVar_22278 : cppVar_22283;
	bool cppVar_22286 = (cppVar_22284 == 176);
	BIT_VEC cppVar_22287 = PC + 1;
	cppVar_22287 = (cppVar_22287 & cppMask_un_16_);
	BIT_VEC cppVar_22288 = ROM.rd(cppVar_22287);
	BIT_VEC cppVar_22289 = (cppVar_22288 >> 7) & cppMask_un_1_;
	bool cppVar_22290 = (cppVar_22289 == 1);
	BIT_VEC cppVar_22291 = PC + 1;
	cppVar_22291 = (cppVar_22291 & cppMask_un_16_);
	BIT_VEC cppVar_22292 = ROM.rd(cppVar_22291);
	BIT_VEC cppVar_22293 = (cppVar_22292 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22294 = (cppVar_22293 << 3) | 0;
	cppVar_22294 = (cppVar_22294 & cppMask_un_8_);
	BIT_VEC cppVar_22295 = PC + 1;
	cppVar_22295 = (cppVar_22295 & cppMask_un_16_);
	BIT_VEC cppVar_22296 = ROM.rd(cppVar_22295);
	BIT_VEC cppVar_22297 = (cppVar_22296 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22298 = (cppVar_22297 & cppMask_un_5_);
	BIT_VEC cppVar_22299 = cppVar_22298 + 32;
	cppVar_22299 = (cppVar_22299 & cppMask_un_8_);
	BIT_VEC cppVar_22300 = (cppVar_22290) ? cppVar_22294 : cppVar_22299;
	bool cppVar_22302 = (cppVar_22300 == 184);
	BIT_VEC cppVar_22303 = PC + 1;
	cppVar_22303 = (cppVar_22303 & cppMask_un_16_);
	BIT_VEC cppVar_22304 = ROM.rd(cppVar_22303);
	BIT_VEC cppVar_22305 = (cppVar_22304 >> 7) & cppMask_un_1_;
	bool cppVar_22306 = (cppVar_22305 == 1);
	BIT_VEC cppVar_22307 = PC + 1;
	cppVar_22307 = (cppVar_22307 & cppMask_un_16_);
	BIT_VEC cppVar_22308 = ROM.rd(cppVar_22307);
	BIT_VEC cppVar_22309 = (cppVar_22308 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22310 = (cppVar_22309 << 3) | 0;
	cppVar_22310 = (cppVar_22310 & cppMask_un_8_);
	BIT_VEC cppVar_22311 = PC + 1;
	cppVar_22311 = (cppVar_22311 & cppMask_un_16_);
	BIT_VEC cppVar_22312 = ROM.rd(cppVar_22311);
	BIT_VEC cppVar_22313 = (cppVar_22312 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22314 = (cppVar_22313 & cppMask_un_5_);
	BIT_VEC cppVar_22315 = cppVar_22314 + 32;
	cppVar_22315 = (cppVar_22315 & cppMask_un_8_);
	BIT_VEC cppVar_22316 = (cppVar_22306) ? cppVar_22310 : cppVar_22315;
	bool cppVar_22318 = (cppVar_22316 == 208);
	BIT_VEC cppVar_22319 = PC + 1;
	cppVar_22319 = (cppVar_22319 & cppMask_un_16_);
	BIT_VEC cppVar_22320 = ROM.rd(cppVar_22319);
	BIT_VEC cppVar_22321 = (cppVar_22320 >> 7) & cppMask_un_1_;
	bool cppVar_22322 = (cppVar_22321 == 1);
	BIT_VEC cppVar_22323 = PC + 1;
	cppVar_22323 = (cppVar_22323 & cppMask_un_16_);
	BIT_VEC cppVar_22324 = ROM.rd(cppVar_22323);
	BIT_VEC cppVar_22325 = (cppVar_22324 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22326 = (cppVar_22325 << 3) | 0;
	cppVar_22326 = (cppVar_22326 & cppMask_un_8_);
	BIT_VEC cppVar_22327 = PC + 1;
	cppVar_22327 = (cppVar_22327 & cppMask_un_16_);
	BIT_VEC cppVar_22328 = ROM.rd(cppVar_22327);
	BIT_VEC cppVar_22329 = (cppVar_22328 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22330 = (cppVar_22329 & cppMask_un_5_);
	BIT_VEC cppVar_22331 = cppVar_22330 + 32;
	cppVar_22331 = (cppVar_22331 & cppMask_un_8_);
	BIT_VEC cppVar_22332 = (cppVar_22322) ? cppVar_22326 : cppVar_22331;
	bool cppVar_22334 = (cppVar_22332 == 224);
	BIT_VEC cppVar_22335 = PC + 1;
	cppVar_22335 = (cppVar_22335 & cppMask_un_16_);
	BIT_VEC cppVar_22336 = ROM.rd(cppVar_22335);
	BIT_VEC cppVar_22337 = (cppVar_22336 >> 7) & cppMask_un_1_;
	bool cppVar_22338 = (cppVar_22337 == 1);
	BIT_VEC cppVar_22339 = PC + 1;
	cppVar_22339 = (cppVar_22339 & cppMask_un_16_);
	BIT_VEC cppVar_22340 = ROM.rd(cppVar_22339);
	BIT_VEC cppVar_22341 = (cppVar_22340 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22342 = (cppVar_22341 << 3) | 0;
	cppVar_22342 = (cppVar_22342 & cppMask_un_8_);
	BIT_VEC cppVar_22343 = PC + 1;
	cppVar_22343 = (cppVar_22343 & cppMask_un_16_);
	BIT_VEC cppVar_22344 = ROM.rd(cppVar_22343);
	BIT_VEC cppVar_22345 = (cppVar_22344 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22346 = (cppVar_22345 & cppMask_un_5_);
	BIT_VEC cppVar_22347 = cppVar_22346 + 32;
	cppVar_22347 = (cppVar_22347 & cppMask_un_8_);
	BIT_VEC cppVar_22348 = (cppVar_22338) ? cppVar_22342 : cppVar_22347;
	bool cppVar_22350 = (cppVar_22348 == 240);
	BIT_VEC cppVar_22352 = (cppVar_22350) ? B : 0;
	BIT_VEC cppVar_22353 = (cppVar_22334) ? ACC : cppVar_22352;
	BIT_VEC cppVar_22354 = (cppVar_22318) ? PSW : cppVar_22353;
	BIT_VEC cppVar_22355 = (cppVar_22302) ? IP : cppVar_22354;
	BIT_VEC cppVar_22356 = (cppVar_22286) ? P3 : cppVar_22355;
	BIT_VEC cppVar_22357 = (cppVar_22270) ? IE : cppVar_22356;
	BIT_VEC cppVar_22358 = (cppVar_22254) ? P2 : cppVar_22357;
	BIT_VEC cppVar_22359 = (cppVar_22238) ? SBUF : cppVar_22358;
	BIT_VEC cppVar_22360 = (cppVar_22222) ? SCON : cppVar_22359;
	BIT_VEC cppVar_22361 = (cppVar_22206) ? P1 : cppVar_22360;
	BIT_VEC cppVar_22362 = (cppVar_22190) ? TH1 : cppVar_22361;
	BIT_VEC cppVar_22363 = (cppVar_22174) ? TL1 : cppVar_22362;
	BIT_VEC cppVar_22364 = (cppVar_22158) ? TH0 : cppVar_22363;
	BIT_VEC cppVar_22365 = (cppVar_22142) ? TL0 : cppVar_22364;
	BIT_VEC cppVar_22366 = (cppVar_22126) ? TMOD : cppVar_22365;
	BIT_VEC cppVar_22367 = (cppVar_22110) ? TCON : cppVar_22366;
	BIT_VEC cppVar_22368 = (cppVar_22094) ? PCON : cppVar_22367;
	BIT_VEC cppVar_22369 = (cppVar_22078) ? DPH : cppVar_22368;
	BIT_VEC cppVar_22370 = (cppVar_22062) ? DPL : cppVar_22369;
	BIT_VEC cppVar_22371 = (cppVar_22046) ? SP : cppVar_22370;
	BIT_VEC cppVar_22372 = (cppVar_22030) ? P0 : cppVar_22371;
	BIT_VEC cppVar_22373 = (cppVar_21999) ? cppVar_22014 : cppVar_22372;
	BIT_VEC cppVar_22374 = cppVar_21982 & cppVar_22373;
	BIT_VEC cppVar_22376 = 0;
	BIT_VEC cppVar_22377 = PC + 1;
	cppVar_22377 = (cppVar_22377 & cppMask_un_16_);
	BIT_VEC cppVar_22378 = ROM.rd(cppVar_22377);
	BIT_VEC cppVar_22379 = (cppVar_22378 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_22380 = (cppVar_22379 & cppMask_un_3_);
	BIT_VEC cppVar_22381 = cppVar_22376 << static_cast<unsigned>(cppVar_22380);
	cppVar_22381 = (cppVar_22381 & cppMask_un_8_);
	BIT_VEC cppVar_22382 = cppVar_22374 | cppVar_22381;
	BIT_VEC cppVar_22383 = (cppVar_21975) ? cppVar_22382 : IP;
	BIT_VEC cppVar_22384 = ROM.rd(PC);
	bool cppVar_22386 = (cppVar_22384 == 5);
	BIT_VEC cppVar_22388 = PC + 1;
	cppVar_22388 = (cppVar_22388 & cppMask_un_16_);
	BIT_VEC cppVar_22389 = ROM.rd(cppVar_22388);
	bool cppVar_22391 = (cppVar_22389 == 184);
	BIT_VEC cppVar_22392 = PC + 1;
	cppVar_22392 = (cppVar_22392 & cppMask_un_16_);
	BIT_VEC cppVar_22393 = ROM.rd(cppVar_22392);
	BIT_VEC cppVar_22394 = (cppVar_22393 >> 7) & cppMask_un_1_;
	bool cppVar_22396 = (cppVar_22394 == 0);
	BIT_VEC cppVar_22397 = PC + 1;
	cppVar_22397 = (cppVar_22397 & cppMask_un_16_);
	BIT_VEC cppVar_22398 = ROM.rd(cppVar_22397);
	BIT_VEC cppVar_22399 = IRAM.rd(cppVar_22398);
	BIT_VEC cppVar_22400 = PC + 1;
	cppVar_22400 = (cppVar_22400 & cppMask_un_16_);
	BIT_VEC cppVar_22401 = ROM.rd(cppVar_22400);
	bool cppVar_22403 = (cppVar_22401 == 128);
	BIT_VEC cppVar_22404 = PC + 1;
	cppVar_22404 = (cppVar_22404 & cppMask_un_16_);
	BIT_VEC cppVar_22405 = ROM.rd(cppVar_22404);
	bool cppVar_22407 = (cppVar_22405 == 129);
	BIT_VEC cppVar_22408 = PC + 1;
	cppVar_22408 = (cppVar_22408 & cppMask_un_16_);
	BIT_VEC cppVar_22409 = ROM.rd(cppVar_22408);
	bool cppVar_22411 = (cppVar_22409 == 130);
	BIT_VEC cppVar_22412 = PC + 1;
	cppVar_22412 = (cppVar_22412 & cppMask_un_16_);
	BIT_VEC cppVar_22413 = ROM.rd(cppVar_22412);
	bool cppVar_22415 = (cppVar_22413 == 131);
	BIT_VEC cppVar_22416 = PC + 1;
	cppVar_22416 = (cppVar_22416 & cppMask_un_16_);
	BIT_VEC cppVar_22417 = ROM.rd(cppVar_22416);
	bool cppVar_22419 = (cppVar_22417 == 135);
	BIT_VEC cppVar_22420 = PC + 1;
	cppVar_22420 = (cppVar_22420 & cppMask_un_16_);
	BIT_VEC cppVar_22421 = ROM.rd(cppVar_22420);
	bool cppVar_22423 = (cppVar_22421 == 136);
	BIT_VEC cppVar_22424 = PC + 1;
	cppVar_22424 = (cppVar_22424 & cppMask_un_16_);
	BIT_VEC cppVar_22425 = ROM.rd(cppVar_22424);
	bool cppVar_22427 = (cppVar_22425 == 137);
	BIT_VEC cppVar_22428 = PC + 1;
	cppVar_22428 = (cppVar_22428 & cppMask_un_16_);
	BIT_VEC cppVar_22429 = ROM.rd(cppVar_22428);
	bool cppVar_22431 = (cppVar_22429 == 138);
	BIT_VEC cppVar_22432 = PC + 1;
	cppVar_22432 = (cppVar_22432 & cppMask_un_16_);
	BIT_VEC cppVar_22433 = ROM.rd(cppVar_22432);
	bool cppVar_22435 = (cppVar_22433 == 140);
	BIT_VEC cppVar_22436 = PC + 1;
	cppVar_22436 = (cppVar_22436 & cppMask_un_16_);
	BIT_VEC cppVar_22437 = ROM.rd(cppVar_22436);
	bool cppVar_22439 = (cppVar_22437 == 139);
	BIT_VEC cppVar_22440 = PC + 1;
	cppVar_22440 = (cppVar_22440 & cppMask_un_16_);
	BIT_VEC cppVar_22441 = ROM.rd(cppVar_22440);
	bool cppVar_22443 = (cppVar_22441 == 141);
	BIT_VEC cppVar_22444 = PC + 1;
	cppVar_22444 = (cppVar_22444 & cppMask_un_16_);
	BIT_VEC cppVar_22445 = ROM.rd(cppVar_22444);
	bool cppVar_22447 = (cppVar_22445 == 144);
	BIT_VEC cppVar_22448 = PC + 1;
	cppVar_22448 = (cppVar_22448 & cppMask_un_16_);
	BIT_VEC cppVar_22449 = ROM.rd(cppVar_22448);
	bool cppVar_22451 = (cppVar_22449 == 152);
	BIT_VEC cppVar_22452 = PC + 1;
	cppVar_22452 = (cppVar_22452 & cppMask_un_16_);
	BIT_VEC cppVar_22453 = ROM.rd(cppVar_22452);
	bool cppVar_22455 = (cppVar_22453 == 153);
	BIT_VEC cppVar_22456 = PC + 1;
	cppVar_22456 = (cppVar_22456 & cppMask_un_16_);
	BIT_VEC cppVar_22457 = ROM.rd(cppVar_22456);
	bool cppVar_22459 = (cppVar_22457 == 160);
	BIT_VEC cppVar_22460 = PC + 1;
	cppVar_22460 = (cppVar_22460 & cppMask_un_16_);
	BIT_VEC cppVar_22461 = ROM.rd(cppVar_22460);
	bool cppVar_22463 = (cppVar_22461 == 168);
	BIT_VEC cppVar_22464 = PC + 1;
	cppVar_22464 = (cppVar_22464 & cppMask_un_16_);
	BIT_VEC cppVar_22465 = ROM.rd(cppVar_22464);
	bool cppVar_22467 = (cppVar_22465 == 176);
	BIT_VEC cppVar_22468 = PC + 1;
	cppVar_22468 = (cppVar_22468 & cppMask_un_16_);
	BIT_VEC cppVar_22469 = ROM.rd(cppVar_22468);
	bool cppVar_22471 = (cppVar_22469 == 184);
	BIT_VEC cppVar_22472 = PC + 1;
	cppVar_22472 = (cppVar_22472 & cppMask_un_16_);
	BIT_VEC cppVar_22473 = ROM.rd(cppVar_22472);
	bool cppVar_22475 = (cppVar_22473 == 208);
	BIT_VEC cppVar_22476 = PC + 1;
	cppVar_22476 = (cppVar_22476 & cppMask_un_16_);
	BIT_VEC cppVar_22477 = ROM.rd(cppVar_22476);
	bool cppVar_22479 = (cppVar_22477 == 224);
	BIT_VEC cppVar_22480 = PC + 1;
	cppVar_22480 = (cppVar_22480 & cppMask_un_16_);
	BIT_VEC cppVar_22481 = ROM.rd(cppVar_22480);
	bool cppVar_22483 = (cppVar_22481 == 240);
	BIT_VEC cppVar_22485 = (cppVar_22483) ? B : 0;
	BIT_VEC cppVar_22486 = (cppVar_22479) ? ACC : cppVar_22485;
	BIT_VEC cppVar_22487 = (cppVar_22475) ? PSW : cppVar_22486;
	BIT_VEC cppVar_22488 = (cppVar_22471) ? IP : cppVar_22487;
	BIT_VEC cppVar_22489 = (cppVar_22467) ? P3 : cppVar_22488;
	BIT_VEC cppVar_22490 = (cppVar_22463) ? IE : cppVar_22489;
	BIT_VEC cppVar_22491 = (cppVar_22459) ? P2 : cppVar_22490;
	BIT_VEC cppVar_22492 = (cppVar_22455) ? SBUF : cppVar_22491;
	BIT_VEC cppVar_22493 = (cppVar_22451) ? SCON : cppVar_22492;
	BIT_VEC cppVar_22494 = (cppVar_22447) ? P1 : cppVar_22493;
	BIT_VEC cppVar_22495 = (cppVar_22443) ? TH1 : cppVar_22494;
	BIT_VEC cppVar_22496 = (cppVar_22439) ? TL1 : cppVar_22495;
	BIT_VEC cppVar_22497 = (cppVar_22435) ? TH0 : cppVar_22496;
	BIT_VEC cppVar_22498 = (cppVar_22431) ? TL0 : cppVar_22497;
	BIT_VEC cppVar_22499 = (cppVar_22427) ? TMOD : cppVar_22498;
	BIT_VEC cppVar_22500 = (cppVar_22423) ? TCON : cppVar_22499;
	BIT_VEC cppVar_22501 = (cppVar_22419) ? PCON : cppVar_22500;
	BIT_VEC cppVar_22502 = (cppVar_22415) ? DPH : cppVar_22501;
	BIT_VEC cppVar_22503 = (cppVar_22411) ? DPL : cppVar_22502;
	BIT_VEC cppVar_22504 = (cppVar_22407) ? SP : cppVar_22503;
	BIT_VEC cppVar_22505 = (cppVar_22403) ? P0 : cppVar_22504;
	BIT_VEC cppVar_22506 = (cppVar_22396) ? cppVar_22399 : cppVar_22505;
	BIT_VEC cppVar_22508 = cppVar_22506 + 1;
	cppVar_22508 = (cppVar_22508 & cppMask_un_8_);
	BIT_VEC cppVar_22509 = (cppVar_22391) ? cppVar_22508 : IP;
	BIT_VEC cppVar_22510 = (cppVar_22386) ? cppVar_22509 : IP;
	BIT_VEC cppVar_22511 = (cppVar_21955) ? cppVar_22383 : cppVar_22510;
	BIT_VEC cppVar_22512 = (cppVar_21825) ? cppVar_21948 : cppVar_22511;
	BIT_VEC cppVar_22513 = (cppVar_21696) ? cppVar_21818 : cppVar_22512;
	BIT_VEC cppVar_22514 = (cppVar_21568) ? cppVar_21693 : cppVar_22513;
	BIT_VEC cppVar_22515 = (cppVar_21443) ? cppVar_21565 : cppVar_22514;
	BIT_VEC cppVar_22516 = (cppVar_21315) ? cppVar_21440 : cppVar_22515;
	BIT_VEC cppVar_22517 = (cppVar_21190) ? cppVar_21312 : cppVar_22516;
	BIT_VEC cppVar_22518 = (cppVar_21062) ? cppVar_21187 : cppVar_22517;
	BIT_VEC cppVar_22519 = (cppVar_21050) ? cppVar_21059 : cppVar_22518;
	BIT_VEC cppVar_22520 = (cppVar_20925) ? cppVar_21047 : cppVar_22519;
	BIT_VEC cppVar_22521 = (cppVar_20909) ? cppVar_20922 : cppVar_22520;
	BIT_VEC cppVar_22522 = (cppVar_20893) ? cppVar_20906 : cppVar_22521;
	BIT_VEC cppVar_22523 = (cppVar_20744) ? cppVar_20890 : cppVar_22522;
	BIT_VEC cppVar_22524 = (cppVar_20595) ? cppVar_20741 : cppVar_22523;
	BIT_VEC cppVar_22525 = (cppVar_20446) ? cppVar_20592 : cppVar_22524;
	BIT_VEC cppVar_22526 = (cppVar_20297) ? cppVar_20443 : cppVar_22525;
	BIT_VEC cppVar_22527 = (cppVar_20148) ? cppVar_20294 : cppVar_22526;
	BIT_VEC cppVar_22528 = (cppVar_19999) ? cppVar_20145 : cppVar_22527;
	BIT_VEC cppVar_22529 = (cppVar_19850) ? cppVar_19996 : cppVar_22528;
	BIT_VEC cppVar_22530 = (cppVar_19701) ? cppVar_19847 : cppVar_22529;
	BIT_VEC cppVar_22531 = (cppVar_19270) ? cppVar_19698 : cppVar_22530;
	BIT_VEC cppVar_22532 = (cppVar_18441) ? cppVar_19267 : cppVar_22531;
	BIT_VEC cppVar_22533 = (cppVar_18432) ? cppVar_18438 : cppVar_22532;
	BIT_VEC cppVar_22534 = (cppVar_18418) ? cppVar_18425 : cppVar_22533;
	BIT_VEC cppVar_22535 = (cppVar_17987) ? cppVar_18415 : cppVar_22534;
	return cppVar_22535;
}
