#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_P1()
{
	BIT_VEC cppVar_27089 = ROM.rd(PC);
	bool cppVar_27091 = (cppVar_27089 == 210);
	BIT_VEC cppVar_27093 = PC + 1;
	cppVar_27093 = (cppVar_27093 & cppMask_un_16_);
	BIT_VEC cppVar_27094 = ROM.rd(cppVar_27093);
	BIT_VEC cppVar_27095 = (cppVar_27094 >> 7) & cppMask_un_1_;
	bool cppVar_27097 = (cppVar_27095 == 1);
	BIT_VEC cppVar_27098 = PC + 1;
	cppVar_27098 = (cppVar_27098 & cppMask_un_16_);
	BIT_VEC cppVar_27099 = ROM.rd(cppVar_27098);
	BIT_VEC cppVar_27100 = (cppVar_27099 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27102 = (cppVar_27100 << 3) | 0;
	cppVar_27102 = (cppVar_27102 & cppMask_un_8_);
	BIT_VEC cppVar_27103 = PC + 1;
	cppVar_27103 = (cppVar_27103 & cppMask_un_16_);
	BIT_VEC cppVar_27104 = ROM.rd(cppVar_27103);
	BIT_VEC cppVar_27105 = (cppVar_27104 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27106 = (cppVar_27105 & cppMask_un_5_);
	BIT_VEC cppVar_27108 = cppVar_27106 + 32;
	cppVar_27108 = (cppVar_27108 & cppMask_un_8_);
	BIT_VEC cppVar_27109 = (cppVar_27097) ? cppVar_27102 : cppVar_27108;
	bool cppVar_27111 = (cppVar_27109 == 144);
	BIT_VEC cppVar_27113 = PC + 1;
	cppVar_27113 = (cppVar_27113 & cppMask_un_16_);
	BIT_VEC cppVar_27114 = ROM.rd(cppVar_27113);
	BIT_VEC cppVar_27115 = (cppVar_27114 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_27116 = (cppVar_27115 & cppMask_un_3_);
	BIT_VEC cppVar_27117 = 1 << static_cast<unsigned>(cppVar_27116);
	cppVar_27117 = (cppVar_27117 & cppMask_un_8_);
	BIT_VEC cppVar_27118 = ~cppVar_27117;
	BIT_VEC cppVar_27119 = PC + 1;
	cppVar_27119 = (cppVar_27119 & cppMask_un_16_);
	BIT_VEC cppVar_27120 = ROM.rd(cppVar_27119);
	BIT_VEC cppVar_27121 = (cppVar_27120 >> 7) & cppMask_un_1_;
	bool cppVar_27122 = (cppVar_27121 == 1);
	BIT_VEC cppVar_27123 = PC + 1;
	cppVar_27123 = (cppVar_27123 & cppMask_un_16_);
	BIT_VEC cppVar_27124 = ROM.rd(cppVar_27123);
	BIT_VEC cppVar_27125 = (cppVar_27124 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27126 = (cppVar_27125 << 3) | 0;
	cppVar_27126 = (cppVar_27126 & cppMask_un_8_);
	BIT_VEC cppVar_27127 = PC + 1;
	cppVar_27127 = (cppVar_27127 & cppMask_un_16_);
	BIT_VEC cppVar_27128 = ROM.rd(cppVar_27127);
	BIT_VEC cppVar_27129 = (cppVar_27128 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27130 = (cppVar_27129 & cppMask_un_5_);
	BIT_VEC cppVar_27131 = cppVar_27130 + 32;
	cppVar_27131 = (cppVar_27131 & cppMask_un_8_);
	BIT_VEC cppVar_27132 = (cppVar_27122) ? cppVar_27126 : cppVar_27131;
	BIT_VEC cppVar_27133 = (cppVar_27132 >> 7) & cppMask_un_1_;
	bool cppVar_27135 = (cppVar_27133 == 0);
	BIT_VEC cppVar_27136 = PC + 1;
	cppVar_27136 = (cppVar_27136 & cppMask_un_16_);
	BIT_VEC cppVar_27137 = ROM.rd(cppVar_27136);
	BIT_VEC cppVar_27138 = (cppVar_27137 >> 7) & cppMask_un_1_;
	bool cppVar_27139 = (cppVar_27138 == 1);
	BIT_VEC cppVar_27140 = PC + 1;
	cppVar_27140 = (cppVar_27140 & cppMask_un_16_);
	BIT_VEC cppVar_27141 = ROM.rd(cppVar_27140);
	BIT_VEC cppVar_27142 = (cppVar_27141 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27143 = (cppVar_27142 << 3) | 0;
	cppVar_27143 = (cppVar_27143 & cppMask_un_8_);
	BIT_VEC cppVar_27144 = PC + 1;
	cppVar_27144 = (cppVar_27144 & cppMask_un_16_);
	BIT_VEC cppVar_27145 = ROM.rd(cppVar_27144);
	BIT_VEC cppVar_27146 = (cppVar_27145 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27147 = (cppVar_27146 & cppMask_un_5_);
	BIT_VEC cppVar_27148 = cppVar_27147 + 32;
	cppVar_27148 = (cppVar_27148 & cppMask_un_8_);
	BIT_VEC cppVar_27149 = (cppVar_27139) ? cppVar_27143 : cppVar_27148;
	BIT_VEC cppVar_27150 = IRAM.rd(cppVar_27149);
	BIT_VEC cppVar_27151 = PC + 1;
	cppVar_27151 = (cppVar_27151 & cppMask_un_16_);
	BIT_VEC cppVar_27152 = ROM.rd(cppVar_27151);
	BIT_VEC cppVar_27153 = (cppVar_27152 >> 7) & cppMask_un_1_;
	bool cppVar_27154 = (cppVar_27153 == 1);
	BIT_VEC cppVar_27155 = PC + 1;
	cppVar_27155 = (cppVar_27155 & cppMask_un_16_);
	BIT_VEC cppVar_27156 = ROM.rd(cppVar_27155);
	BIT_VEC cppVar_27157 = (cppVar_27156 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27158 = (cppVar_27157 << 3) | 0;
	cppVar_27158 = (cppVar_27158 & cppMask_un_8_);
	BIT_VEC cppVar_27159 = PC + 1;
	cppVar_27159 = (cppVar_27159 & cppMask_un_16_);
	BIT_VEC cppVar_27160 = ROM.rd(cppVar_27159);
	BIT_VEC cppVar_27161 = (cppVar_27160 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27162 = (cppVar_27161 & cppMask_un_5_);
	BIT_VEC cppVar_27163 = cppVar_27162 + 32;
	cppVar_27163 = (cppVar_27163 & cppMask_un_8_);
	BIT_VEC cppVar_27164 = (cppVar_27154) ? cppVar_27158 : cppVar_27163;
	bool cppVar_27166 = (cppVar_27164 == 128);
	BIT_VEC cppVar_27167 = PC + 1;
	cppVar_27167 = (cppVar_27167 & cppMask_un_16_);
	BIT_VEC cppVar_27168 = ROM.rd(cppVar_27167);
	BIT_VEC cppVar_27169 = (cppVar_27168 >> 7) & cppMask_un_1_;
	bool cppVar_27170 = (cppVar_27169 == 1);
	BIT_VEC cppVar_27171 = PC + 1;
	cppVar_27171 = (cppVar_27171 & cppMask_un_16_);
	BIT_VEC cppVar_27172 = ROM.rd(cppVar_27171);
	BIT_VEC cppVar_27173 = (cppVar_27172 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27174 = (cppVar_27173 << 3) | 0;
	cppVar_27174 = (cppVar_27174 & cppMask_un_8_);
	BIT_VEC cppVar_27175 = PC + 1;
	cppVar_27175 = (cppVar_27175 & cppMask_un_16_);
	BIT_VEC cppVar_27176 = ROM.rd(cppVar_27175);
	BIT_VEC cppVar_27177 = (cppVar_27176 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27178 = (cppVar_27177 & cppMask_un_5_);
	BIT_VEC cppVar_27179 = cppVar_27178 + 32;
	cppVar_27179 = (cppVar_27179 & cppMask_un_8_);
	BIT_VEC cppVar_27180 = (cppVar_27170) ? cppVar_27174 : cppVar_27179;
	bool cppVar_27182 = (cppVar_27180 == 129);
	BIT_VEC cppVar_27183 = PC + 1;
	cppVar_27183 = (cppVar_27183 & cppMask_un_16_);
	BIT_VEC cppVar_27184 = ROM.rd(cppVar_27183);
	BIT_VEC cppVar_27185 = (cppVar_27184 >> 7) & cppMask_un_1_;
	bool cppVar_27186 = (cppVar_27185 == 1);
	BIT_VEC cppVar_27187 = PC + 1;
	cppVar_27187 = (cppVar_27187 & cppMask_un_16_);
	BIT_VEC cppVar_27188 = ROM.rd(cppVar_27187);
	BIT_VEC cppVar_27189 = (cppVar_27188 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27190 = (cppVar_27189 << 3) | 0;
	cppVar_27190 = (cppVar_27190 & cppMask_un_8_);
	BIT_VEC cppVar_27191 = PC + 1;
	cppVar_27191 = (cppVar_27191 & cppMask_un_16_);
	BIT_VEC cppVar_27192 = ROM.rd(cppVar_27191);
	BIT_VEC cppVar_27193 = (cppVar_27192 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27194 = (cppVar_27193 & cppMask_un_5_);
	BIT_VEC cppVar_27195 = cppVar_27194 + 32;
	cppVar_27195 = (cppVar_27195 & cppMask_un_8_);
	BIT_VEC cppVar_27196 = (cppVar_27186) ? cppVar_27190 : cppVar_27195;
	bool cppVar_27198 = (cppVar_27196 == 130);
	BIT_VEC cppVar_27199 = PC + 1;
	cppVar_27199 = (cppVar_27199 & cppMask_un_16_);
	BIT_VEC cppVar_27200 = ROM.rd(cppVar_27199);
	BIT_VEC cppVar_27201 = (cppVar_27200 >> 7) & cppMask_un_1_;
	bool cppVar_27202 = (cppVar_27201 == 1);
	BIT_VEC cppVar_27203 = PC + 1;
	cppVar_27203 = (cppVar_27203 & cppMask_un_16_);
	BIT_VEC cppVar_27204 = ROM.rd(cppVar_27203);
	BIT_VEC cppVar_27205 = (cppVar_27204 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27206 = (cppVar_27205 << 3) | 0;
	cppVar_27206 = (cppVar_27206 & cppMask_un_8_);
	BIT_VEC cppVar_27207 = PC + 1;
	cppVar_27207 = (cppVar_27207 & cppMask_un_16_);
	BIT_VEC cppVar_27208 = ROM.rd(cppVar_27207);
	BIT_VEC cppVar_27209 = (cppVar_27208 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27210 = (cppVar_27209 & cppMask_un_5_);
	BIT_VEC cppVar_27211 = cppVar_27210 + 32;
	cppVar_27211 = (cppVar_27211 & cppMask_un_8_);
	BIT_VEC cppVar_27212 = (cppVar_27202) ? cppVar_27206 : cppVar_27211;
	bool cppVar_27214 = (cppVar_27212 == 131);
	BIT_VEC cppVar_27215 = PC + 1;
	cppVar_27215 = (cppVar_27215 & cppMask_un_16_);
	BIT_VEC cppVar_27216 = ROM.rd(cppVar_27215);
	BIT_VEC cppVar_27217 = (cppVar_27216 >> 7) & cppMask_un_1_;
	bool cppVar_27218 = (cppVar_27217 == 1);
	BIT_VEC cppVar_27219 = PC + 1;
	cppVar_27219 = (cppVar_27219 & cppMask_un_16_);
	BIT_VEC cppVar_27220 = ROM.rd(cppVar_27219);
	BIT_VEC cppVar_27221 = (cppVar_27220 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27222 = (cppVar_27221 << 3) | 0;
	cppVar_27222 = (cppVar_27222 & cppMask_un_8_);
	BIT_VEC cppVar_27223 = PC + 1;
	cppVar_27223 = (cppVar_27223 & cppMask_un_16_);
	BIT_VEC cppVar_27224 = ROM.rd(cppVar_27223);
	BIT_VEC cppVar_27225 = (cppVar_27224 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27226 = (cppVar_27225 & cppMask_un_5_);
	BIT_VEC cppVar_27227 = cppVar_27226 + 32;
	cppVar_27227 = (cppVar_27227 & cppMask_un_8_);
	BIT_VEC cppVar_27228 = (cppVar_27218) ? cppVar_27222 : cppVar_27227;
	bool cppVar_27230 = (cppVar_27228 == 135);
	BIT_VEC cppVar_27231 = PC + 1;
	cppVar_27231 = (cppVar_27231 & cppMask_un_16_);
	BIT_VEC cppVar_27232 = ROM.rd(cppVar_27231);
	BIT_VEC cppVar_27233 = (cppVar_27232 >> 7) & cppMask_un_1_;
	bool cppVar_27234 = (cppVar_27233 == 1);
	BIT_VEC cppVar_27235 = PC + 1;
	cppVar_27235 = (cppVar_27235 & cppMask_un_16_);
	BIT_VEC cppVar_27236 = ROM.rd(cppVar_27235);
	BIT_VEC cppVar_27237 = (cppVar_27236 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27238 = (cppVar_27237 << 3) | 0;
	cppVar_27238 = (cppVar_27238 & cppMask_un_8_);
	BIT_VEC cppVar_27239 = PC + 1;
	cppVar_27239 = (cppVar_27239 & cppMask_un_16_);
	BIT_VEC cppVar_27240 = ROM.rd(cppVar_27239);
	BIT_VEC cppVar_27241 = (cppVar_27240 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27242 = (cppVar_27241 & cppMask_un_5_);
	BIT_VEC cppVar_27243 = cppVar_27242 + 32;
	cppVar_27243 = (cppVar_27243 & cppMask_un_8_);
	BIT_VEC cppVar_27244 = (cppVar_27234) ? cppVar_27238 : cppVar_27243;
	bool cppVar_27246 = (cppVar_27244 == 136);
	BIT_VEC cppVar_27247 = PC + 1;
	cppVar_27247 = (cppVar_27247 & cppMask_un_16_);
	BIT_VEC cppVar_27248 = ROM.rd(cppVar_27247);
	BIT_VEC cppVar_27249 = (cppVar_27248 >> 7) & cppMask_un_1_;
	bool cppVar_27250 = (cppVar_27249 == 1);
	BIT_VEC cppVar_27251 = PC + 1;
	cppVar_27251 = (cppVar_27251 & cppMask_un_16_);
	BIT_VEC cppVar_27252 = ROM.rd(cppVar_27251);
	BIT_VEC cppVar_27253 = (cppVar_27252 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27254 = (cppVar_27253 << 3) | 0;
	cppVar_27254 = (cppVar_27254 & cppMask_un_8_);
	BIT_VEC cppVar_27255 = PC + 1;
	cppVar_27255 = (cppVar_27255 & cppMask_un_16_);
	BIT_VEC cppVar_27256 = ROM.rd(cppVar_27255);
	BIT_VEC cppVar_27257 = (cppVar_27256 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27258 = (cppVar_27257 & cppMask_un_5_);
	BIT_VEC cppVar_27259 = cppVar_27258 + 32;
	cppVar_27259 = (cppVar_27259 & cppMask_un_8_);
	BIT_VEC cppVar_27260 = (cppVar_27250) ? cppVar_27254 : cppVar_27259;
	bool cppVar_27262 = (cppVar_27260 == 137);
	BIT_VEC cppVar_27263 = PC + 1;
	cppVar_27263 = (cppVar_27263 & cppMask_un_16_);
	BIT_VEC cppVar_27264 = ROM.rd(cppVar_27263);
	BIT_VEC cppVar_27265 = (cppVar_27264 >> 7) & cppMask_un_1_;
	bool cppVar_27266 = (cppVar_27265 == 1);
	BIT_VEC cppVar_27267 = PC + 1;
	cppVar_27267 = (cppVar_27267 & cppMask_un_16_);
	BIT_VEC cppVar_27268 = ROM.rd(cppVar_27267);
	BIT_VEC cppVar_27269 = (cppVar_27268 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27270 = (cppVar_27269 << 3) | 0;
	cppVar_27270 = (cppVar_27270 & cppMask_un_8_);
	BIT_VEC cppVar_27271 = PC + 1;
	cppVar_27271 = (cppVar_27271 & cppMask_un_16_);
	BIT_VEC cppVar_27272 = ROM.rd(cppVar_27271);
	BIT_VEC cppVar_27273 = (cppVar_27272 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27274 = (cppVar_27273 & cppMask_un_5_);
	BIT_VEC cppVar_27275 = cppVar_27274 + 32;
	cppVar_27275 = (cppVar_27275 & cppMask_un_8_);
	BIT_VEC cppVar_27276 = (cppVar_27266) ? cppVar_27270 : cppVar_27275;
	bool cppVar_27278 = (cppVar_27276 == 138);
	BIT_VEC cppVar_27279 = PC + 1;
	cppVar_27279 = (cppVar_27279 & cppMask_un_16_);
	BIT_VEC cppVar_27280 = ROM.rd(cppVar_27279);
	BIT_VEC cppVar_27281 = (cppVar_27280 >> 7) & cppMask_un_1_;
	bool cppVar_27282 = (cppVar_27281 == 1);
	BIT_VEC cppVar_27283 = PC + 1;
	cppVar_27283 = (cppVar_27283 & cppMask_un_16_);
	BIT_VEC cppVar_27284 = ROM.rd(cppVar_27283);
	BIT_VEC cppVar_27285 = (cppVar_27284 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27286 = (cppVar_27285 << 3) | 0;
	cppVar_27286 = (cppVar_27286 & cppMask_un_8_);
	BIT_VEC cppVar_27287 = PC + 1;
	cppVar_27287 = (cppVar_27287 & cppMask_un_16_);
	BIT_VEC cppVar_27288 = ROM.rd(cppVar_27287);
	BIT_VEC cppVar_27289 = (cppVar_27288 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27290 = (cppVar_27289 & cppMask_un_5_);
	BIT_VEC cppVar_27291 = cppVar_27290 + 32;
	cppVar_27291 = (cppVar_27291 & cppMask_un_8_);
	BIT_VEC cppVar_27292 = (cppVar_27282) ? cppVar_27286 : cppVar_27291;
	bool cppVar_27294 = (cppVar_27292 == 140);
	BIT_VEC cppVar_27295 = PC + 1;
	cppVar_27295 = (cppVar_27295 & cppMask_un_16_);
	BIT_VEC cppVar_27296 = ROM.rd(cppVar_27295);
	BIT_VEC cppVar_27297 = (cppVar_27296 >> 7) & cppMask_un_1_;
	bool cppVar_27298 = (cppVar_27297 == 1);
	BIT_VEC cppVar_27299 = PC + 1;
	cppVar_27299 = (cppVar_27299 & cppMask_un_16_);
	BIT_VEC cppVar_27300 = ROM.rd(cppVar_27299);
	BIT_VEC cppVar_27301 = (cppVar_27300 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27302 = (cppVar_27301 << 3) | 0;
	cppVar_27302 = (cppVar_27302 & cppMask_un_8_);
	BIT_VEC cppVar_27303 = PC + 1;
	cppVar_27303 = (cppVar_27303 & cppMask_un_16_);
	BIT_VEC cppVar_27304 = ROM.rd(cppVar_27303);
	BIT_VEC cppVar_27305 = (cppVar_27304 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27306 = (cppVar_27305 & cppMask_un_5_);
	BIT_VEC cppVar_27307 = cppVar_27306 + 32;
	cppVar_27307 = (cppVar_27307 & cppMask_un_8_);
	BIT_VEC cppVar_27308 = (cppVar_27298) ? cppVar_27302 : cppVar_27307;
	bool cppVar_27310 = (cppVar_27308 == 139);
	BIT_VEC cppVar_27311 = PC + 1;
	cppVar_27311 = (cppVar_27311 & cppMask_un_16_);
	BIT_VEC cppVar_27312 = ROM.rd(cppVar_27311);
	BIT_VEC cppVar_27313 = (cppVar_27312 >> 7) & cppMask_un_1_;
	bool cppVar_27314 = (cppVar_27313 == 1);
	BIT_VEC cppVar_27315 = PC + 1;
	cppVar_27315 = (cppVar_27315 & cppMask_un_16_);
	BIT_VEC cppVar_27316 = ROM.rd(cppVar_27315);
	BIT_VEC cppVar_27317 = (cppVar_27316 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27318 = (cppVar_27317 << 3) | 0;
	cppVar_27318 = (cppVar_27318 & cppMask_un_8_);
	BIT_VEC cppVar_27319 = PC + 1;
	cppVar_27319 = (cppVar_27319 & cppMask_un_16_);
	BIT_VEC cppVar_27320 = ROM.rd(cppVar_27319);
	BIT_VEC cppVar_27321 = (cppVar_27320 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27322 = (cppVar_27321 & cppMask_un_5_);
	BIT_VEC cppVar_27323 = cppVar_27322 + 32;
	cppVar_27323 = (cppVar_27323 & cppMask_un_8_);
	BIT_VEC cppVar_27324 = (cppVar_27314) ? cppVar_27318 : cppVar_27323;
	bool cppVar_27326 = (cppVar_27324 == 141);
	BIT_VEC cppVar_27327 = PC + 1;
	cppVar_27327 = (cppVar_27327 & cppMask_un_16_);
	BIT_VEC cppVar_27328 = ROM.rd(cppVar_27327);
	BIT_VEC cppVar_27329 = (cppVar_27328 >> 7) & cppMask_un_1_;
	bool cppVar_27330 = (cppVar_27329 == 1);
	BIT_VEC cppVar_27331 = PC + 1;
	cppVar_27331 = (cppVar_27331 & cppMask_un_16_);
	BIT_VEC cppVar_27332 = ROM.rd(cppVar_27331);
	BIT_VEC cppVar_27333 = (cppVar_27332 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27334 = (cppVar_27333 << 3) | 0;
	cppVar_27334 = (cppVar_27334 & cppMask_un_8_);
	BIT_VEC cppVar_27335 = PC + 1;
	cppVar_27335 = (cppVar_27335 & cppMask_un_16_);
	BIT_VEC cppVar_27336 = ROM.rd(cppVar_27335);
	BIT_VEC cppVar_27337 = (cppVar_27336 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27338 = (cppVar_27337 & cppMask_un_5_);
	BIT_VEC cppVar_27339 = cppVar_27338 + 32;
	cppVar_27339 = (cppVar_27339 & cppMask_un_8_);
	BIT_VEC cppVar_27340 = (cppVar_27330) ? cppVar_27334 : cppVar_27339;
	bool cppVar_27342 = (cppVar_27340 == 144);
	BIT_VEC cppVar_27343 = PC + 1;
	cppVar_27343 = (cppVar_27343 & cppMask_un_16_);
	BIT_VEC cppVar_27344 = ROM.rd(cppVar_27343);
	BIT_VEC cppVar_27345 = (cppVar_27344 >> 7) & cppMask_un_1_;
	bool cppVar_27346 = (cppVar_27345 == 1);
	BIT_VEC cppVar_27347 = PC + 1;
	cppVar_27347 = (cppVar_27347 & cppMask_un_16_);
	BIT_VEC cppVar_27348 = ROM.rd(cppVar_27347);
	BIT_VEC cppVar_27349 = (cppVar_27348 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27350 = (cppVar_27349 << 3) | 0;
	cppVar_27350 = (cppVar_27350 & cppMask_un_8_);
	BIT_VEC cppVar_27351 = PC + 1;
	cppVar_27351 = (cppVar_27351 & cppMask_un_16_);
	BIT_VEC cppVar_27352 = ROM.rd(cppVar_27351);
	BIT_VEC cppVar_27353 = (cppVar_27352 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27354 = (cppVar_27353 & cppMask_un_5_);
	BIT_VEC cppVar_27355 = cppVar_27354 + 32;
	cppVar_27355 = (cppVar_27355 & cppMask_un_8_);
	BIT_VEC cppVar_27356 = (cppVar_27346) ? cppVar_27350 : cppVar_27355;
	bool cppVar_27358 = (cppVar_27356 == 152);
	BIT_VEC cppVar_27359 = PC + 1;
	cppVar_27359 = (cppVar_27359 & cppMask_un_16_);
	BIT_VEC cppVar_27360 = ROM.rd(cppVar_27359);
	BIT_VEC cppVar_27361 = (cppVar_27360 >> 7) & cppMask_un_1_;
	bool cppVar_27362 = (cppVar_27361 == 1);
	BIT_VEC cppVar_27363 = PC + 1;
	cppVar_27363 = (cppVar_27363 & cppMask_un_16_);
	BIT_VEC cppVar_27364 = ROM.rd(cppVar_27363);
	BIT_VEC cppVar_27365 = (cppVar_27364 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27366 = (cppVar_27365 << 3) | 0;
	cppVar_27366 = (cppVar_27366 & cppMask_un_8_);
	BIT_VEC cppVar_27367 = PC + 1;
	cppVar_27367 = (cppVar_27367 & cppMask_un_16_);
	BIT_VEC cppVar_27368 = ROM.rd(cppVar_27367);
	BIT_VEC cppVar_27369 = (cppVar_27368 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27370 = (cppVar_27369 & cppMask_un_5_);
	BIT_VEC cppVar_27371 = cppVar_27370 + 32;
	cppVar_27371 = (cppVar_27371 & cppMask_un_8_);
	BIT_VEC cppVar_27372 = (cppVar_27362) ? cppVar_27366 : cppVar_27371;
	bool cppVar_27374 = (cppVar_27372 == 153);
	BIT_VEC cppVar_27375 = PC + 1;
	cppVar_27375 = (cppVar_27375 & cppMask_un_16_);
	BIT_VEC cppVar_27376 = ROM.rd(cppVar_27375);
	BIT_VEC cppVar_27377 = (cppVar_27376 >> 7) & cppMask_un_1_;
	bool cppVar_27378 = (cppVar_27377 == 1);
	BIT_VEC cppVar_27379 = PC + 1;
	cppVar_27379 = (cppVar_27379 & cppMask_un_16_);
	BIT_VEC cppVar_27380 = ROM.rd(cppVar_27379);
	BIT_VEC cppVar_27381 = (cppVar_27380 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27382 = (cppVar_27381 << 3) | 0;
	cppVar_27382 = (cppVar_27382 & cppMask_un_8_);
	BIT_VEC cppVar_27383 = PC + 1;
	cppVar_27383 = (cppVar_27383 & cppMask_un_16_);
	BIT_VEC cppVar_27384 = ROM.rd(cppVar_27383);
	BIT_VEC cppVar_27385 = (cppVar_27384 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27386 = (cppVar_27385 & cppMask_un_5_);
	BIT_VEC cppVar_27387 = cppVar_27386 + 32;
	cppVar_27387 = (cppVar_27387 & cppMask_un_8_);
	BIT_VEC cppVar_27388 = (cppVar_27378) ? cppVar_27382 : cppVar_27387;
	bool cppVar_27390 = (cppVar_27388 == 160);
	BIT_VEC cppVar_27391 = PC + 1;
	cppVar_27391 = (cppVar_27391 & cppMask_un_16_);
	BIT_VEC cppVar_27392 = ROM.rd(cppVar_27391);
	BIT_VEC cppVar_27393 = (cppVar_27392 >> 7) & cppMask_un_1_;
	bool cppVar_27394 = (cppVar_27393 == 1);
	BIT_VEC cppVar_27395 = PC + 1;
	cppVar_27395 = (cppVar_27395 & cppMask_un_16_);
	BIT_VEC cppVar_27396 = ROM.rd(cppVar_27395);
	BIT_VEC cppVar_27397 = (cppVar_27396 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27398 = (cppVar_27397 << 3) | 0;
	cppVar_27398 = (cppVar_27398 & cppMask_un_8_);
	BIT_VEC cppVar_27399 = PC + 1;
	cppVar_27399 = (cppVar_27399 & cppMask_un_16_);
	BIT_VEC cppVar_27400 = ROM.rd(cppVar_27399);
	BIT_VEC cppVar_27401 = (cppVar_27400 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27402 = (cppVar_27401 & cppMask_un_5_);
	BIT_VEC cppVar_27403 = cppVar_27402 + 32;
	cppVar_27403 = (cppVar_27403 & cppMask_un_8_);
	BIT_VEC cppVar_27404 = (cppVar_27394) ? cppVar_27398 : cppVar_27403;
	bool cppVar_27406 = (cppVar_27404 == 168);
	BIT_VEC cppVar_27407 = PC + 1;
	cppVar_27407 = (cppVar_27407 & cppMask_un_16_);
	BIT_VEC cppVar_27408 = ROM.rd(cppVar_27407);
	BIT_VEC cppVar_27409 = (cppVar_27408 >> 7) & cppMask_un_1_;
	bool cppVar_27410 = (cppVar_27409 == 1);
	BIT_VEC cppVar_27411 = PC + 1;
	cppVar_27411 = (cppVar_27411 & cppMask_un_16_);
	BIT_VEC cppVar_27412 = ROM.rd(cppVar_27411);
	BIT_VEC cppVar_27413 = (cppVar_27412 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27414 = (cppVar_27413 << 3) | 0;
	cppVar_27414 = (cppVar_27414 & cppMask_un_8_);
	BIT_VEC cppVar_27415 = PC + 1;
	cppVar_27415 = (cppVar_27415 & cppMask_un_16_);
	BIT_VEC cppVar_27416 = ROM.rd(cppVar_27415);
	BIT_VEC cppVar_27417 = (cppVar_27416 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27418 = (cppVar_27417 & cppMask_un_5_);
	BIT_VEC cppVar_27419 = cppVar_27418 + 32;
	cppVar_27419 = (cppVar_27419 & cppMask_un_8_);
	BIT_VEC cppVar_27420 = (cppVar_27410) ? cppVar_27414 : cppVar_27419;
	bool cppVar_27422 = (cppVar_27420 == 176);
	BIT_VEC cppVar_27423 = PC + 1;
	cppVar_27423 = (cppVar_27423 & cppMask_un_16_);
	BIT_VEC cppVar_27424 = ROM.rd(cppVar_27423);
	BIT_VEC cppVar_27425 = (cppVar_27424 >> 7) & cppMask_un_1_;
	bool cppVar_27426 = (cppVar_27425 == 1);
	BIT_VEC cppVar_27427 = PC + 1;
	cppVar_27427 = (cppVar_27427 & cppMask_un_16_);
	BIT_VEC cppVar_27428 = ROM.rd(cppVar_27427);
	BIT_VEC cppVar_27429 = (cppVar_27428 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27430 = (cppVar_27429 << 3) | 0;
	cppVar_27430 = (cppVar_27430 & cppMask_un_8_);
	BIT_VEC cppVar_27431 = PC + 1;
	cppVar_27431 = (cppVar_27431 & cppMask_un_16_);
	BIT_VEC cppVar_27432 = ROM.rd(cppVar_27431);
	BIT_VEC cppVar_27433 = (cppVar_27432 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27434 = (cppVar_27433 & cppMask_un_5_);
	BIT_VEC cppVar_27435 = cppVar_27434 + 32;
	cppVar_27435 = (cppVar_27435 & cppMask_un_8_);
	BIT_VEC cppVar_27436 = (cppVar_27426) ? cppVar_27430 : cppVar_27435;
	bool cppVar_27438 = (cppVar_27436 == 184);
	BIT_VEC cppVar_27439 = PC + 1;
	cppVar_27439 = (cppVar_27439 & cppMask_un_16_);
	BIT_VEC cppVar_27440 = ROM.rd(cppVar_27439);
	BIT_VEC cppVar_27441 = (cppVar_27440 >> 7) & cppMask_un_1_;
	bool cppVar_27442 = (cppVar_27441 == 1);
	BIT_VEC cppVar_27443 = PC + 1;
	cppVar_27443 = (cppVar_27443 & cppMask_un_16_);
	BIT_VEC cppVar_27444 = ROM.rd(cppVar_27443);
	BIT_VEC cppVar_27445 = (cppVar_27444 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27446 = (cppVar_27445 << 3) | 0;
	cppVar_27446 = (cppVar_27446 & cppMask_un_8_);
	BIT_VEC cppVar_27447 = PC + 1;
	cppVar_27447 = (cppVar_27447 & cppMask_un_16_);
	BIT_VEC cppVar_27448 = ROM.rd(cppVar_27447);
	BIT_VEC cppVar_27449 = (cppVar_27448 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27450 = (cppVar_27449 & cppMask_un_5_);
	BIT_VEC cppVar_27451 = cppVar_27450 + 32;
	cppVar_27451 = (cppVar_27451 & cppMask_un_8_);
	BIT_VEC cppVar_27452 = (cppVar_27442) ? cppVar_27446 : cppVar_27451;
	bool cppVar_27454 = (cppVar_27452 == 208);
	BIT_VEC cppVar_27455 = PC + 1;
	cppVar_27455 = (cppVar_27455 & cppMask_un_16_);
	BIT_VEC cppVar_27456 = ROM.rd(cppVar_27455);
	BIT_VEC cppVar_27457 = (cppVar_27456 >> 7) & cppMask_un_1_;
	bool cppVar_27458 = (cppVar_27457 == 1);
	BIT_VEC cppVar_27459 = PC + 1;
	cppVar_27459 = (cppVar_27459 & cppMask_un_16_);
	BIT_VEC cppVar_27460 = ROM.rd(cppVar_27459);
	BIT_VEC cppVar_27461 = (cppVar_27460 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27462 = (cppVar_27461 << 3) | 0;
	cppVar_27462 = (cppVar_27462 & cppMask_un_8_);
	BIT_VEC cppVar_27463 = PC + 1;
	cppVar_27463 = (cppVar_27463 & cppMask_un_16_);
	BIT_VEC cppVar_27464 = ROM.rd(cppVar_27463);
	BIT_VEC cppVar_27465 = (cppVar_27464 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27466 = (cppVar_27465 & cppMask_un_5_);
	BIT_VEC cppVar_27467 = cppVar_27466 + 32;
	cppVar_27467 = (cppVar_27467 & cppMask_un_8_);
	BIT_VEC cppVar_27468 = (cppVar_27458) ? cppVar_27462 : cppVar_27467;
	bool cppVar_27470 = (cppVar_27468 == 224);
	BIT_VEC cppVar_27471 = PC + 1;
	cppVar_27471 = (cppVar_27471 & cppMask_un_16_);
	BIT_VEC cppVar_27472 = ROM.rd(cppVar_27471);
	BIT_VEC cppVar_27473 = (cppVar_27472 >> 7) & cppMask_un_1_;
	bool cppVar_27474 = (cppVar_27473 == 1);
	BIT_VEC cppVar_27475 = PC + 1;
	cppVar_27475 = (cppVar_27475 & cppMask_un_16_);
	BIT_VEC cppVar_27476 = ROM.rd(cppVar_27475);
	BIT_VEC cppVar_27477 = (cppVar_27476 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27478 = (cppVar_27477 << 3) | 0;
	cppVar_27478 = (cppVar_27478 & cppMask_un_8_);
	BIT_VEC cppVar_27479 = PC + 1;
	cppVar_27479 = (cppVar_27479 & cppMask_un_16_);
	BIT_VEC cppVar_27480 = ROM.rd(cppVar_27479);
	BIT_VEC cppVar_27481 = (cppVar_27480 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27482 = (cppVar_27481 & cppMask_un_5_);
	BIT_VEC cppVar_27483 = cppVar_27482 + 32;
	cppVar_27483 = (cppVar_27483 & cppMask_un_8_);
	BIT_VEC cppVar_27484 = (cppVar_27474) ? cppVar_27478 : cppVar_27483;
	bool cppVar_27486 = (cppVar_27484 == 240);
	BIT_VEC cppVar_27488 = (cppVar_27486) ? B : 0;
	BIT_VEC cppVar_27489 = (cppVar_27470) ? ACC : cppVar_27488;
	BIT_VEC cppVar_27490 = (cppVar_27454) ? PSW : cppVar_27489;
	BIT_VEC cppVar_27491 = (cppVar_27438) ? IP : cppVar_27490;
	BIT_VEC cppVar_27492 = (cppVar_27422) ? P3 : cppVar_27491;
	BIT_VEC cppVar_27493 = (cppVar_27406) ? IE : cppVar_27492;
	BIT_VEC cppVar_27494 = (cppVar_27390) ? P2 : cppVar_27493;
	BIT_VEC cppVar_27495 = (cppVar_27374) ? SBUF : cppVar_27494;
	BIT_VEC cppVar_27496 = (cppVar_27358) ? SCON : cppVar_27495;
	BIT_VEC cppVar_27497 = (cppVar_27342) ? P1 : cppVar_27496;
	BIT_VEC cppVar_27498 = (cppVar_27326) ? TH1 : cppVar_27497;
	BIT_VEC cppVar_27499 = (cppVar_27310) ? TL1 : cppVar_27498;
	BIT_VEC cppVar_27500 = (cppVar_27294) ? TH0 : cppVar_27499;
	BIT_VEC cppVar_27501 = (cppVar_27278) ? TL0 : cppVar_27500;
	BIT_VEC cppVar_27502 = (cppVar_27262) ? TMOD : cppVar_27501;
	BIT_VEC cppVar_27503 = (cppVar_27246) ? TCON : cppVar_27502;
	BIT_VEC cppVar_27504 = (cppVar_27230) ? PCON : cppVar_27503;
	BIT_VEC cppVar_27505 = (cppVar_27214) ? DPH : cppVar_27504;
	BIT_VEC cppVar_27506 = (cppVar_27198) ? DPL : cppVar_27505;
	BIT_VEC cppVar_27507 = (cppVar_27182) ? SP : cppVar_27506;
	BIT_VEC cppVar_27508 = (cppVar_27166) ? P0 : cppVar_27507;
	BIT_VEC cppVar_27509 = (cppVar_27135) ? cppVar_27150 : cppVar_27508;
	BIT_VEC cppVar_27510 = cppVar_27118 & cppVar_27509;
	BIT_VEC cppVar_27512 = 1;
	BIT_VEC cppVar_27513 = PC + 1;
	cppVar_27513 = (cppVar_27513 & cppMask_un_16_);
	BIT_VEC cppVar_27514 = ROM.rd(cppVar_27513);
	BIT_VEC cppVar_27515 = (cppVar_27514 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_27516 = (cppVar_27515 & cppMask_un_3_);
	BIT_VEC cppVar_27517 = cppVar_27512 << static_cast<unsigned>(cppVar_27516);
	cppVar_27517 = (cppVar_27517 & cppMask_un_8_);
	BIT_VEC cppVar_27518 = cppVar_27510 | cppVar_27517;
	BIT_VEC cppVar_27519 = (cppVar_27111) ? cppVar_27518 : P1;
	BIT_VEC cppVar_27520 = ROM.rd(PC);
	bool cppVar_27522 = (cppVar_27520 == 208);
	BIT_VEC cppVar_27524 = PC + 1;
	cppVar_27524 = (cppVar_27524 & cppMask_un_16_);
	BIT_VEC cppVar_27525 = ROM.rd(cppVar_27524);
	bool cppVar_27527 = (cppVar_27525 == 144);
	BIT_VEC cppVar_27528 = IRAM.rd(SP);
	BIT_VEC cppVar_27529 = (cppVar_27527) ? cppVar_27528 : P1;
	BIT_VEC cppVar_27530 = ROM.rd(PC);
	bool cppVar_27532 = (cppVar_27530 == 245);
	BIT_VEC cppVar_27533 = ROM.rd(PC);
	bool cppVar_27535 = (cppVar_27533 == 197);
	bool cppVar_27536 = cppVar_27532 || cppVar_27535;
	BIT_VEC cppVar_27538 = PC + 1;
	cppVar_27538 = (cppVar_27538 & cppMask_un_16_);
	BIT_VEC cppVar_27539 = ROM.rd(cppVar_27538);
	bool cppVar_27541 = (cppVar_27539 == 144);
	BIT_VEC cppVar_27542 = (cppVar_27541) ? ACC : P1;
	BIT_VEC cppVar_27543 = ROM.rd(PC);
	bool cppVar_27545 = (cppVar_27543 == 178);
	BIT_VEC cppVar_27547 = PC + 1;
	cppVar_27547 = (cppVar_27547 & cppMask_un_16_);
	BIT_VEC cppVar_27548 = ROM.rd(cppVar_27547);
	BIT_VEC cppVar_27549 = (cppVar_27548 >> 7) & cppMask_un_1_;
	bool cppVar_27551 = (cppVar_27549 == 1);
	BIT_VEC cppVar_27552 = PC + 1;
	cppVar_27552 = (cppVar_27552 & cppMask_un_16_);
	BIT_VEC cppVar_27553 = ROM.rd(cppVar_27552);
	BIT_VEC cppVar_27554 = (cppVar_27553 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27556 = (cppVar_27554 << 3) | 0;
	cppVar_27556 = (cppVar_27556 & cppMask_un_8_);
	BIT_VEC cppVar_27557 = PC + 1;
	cppVar_27557 = (cppVar_27557 & cppMask_un_16_);
	BIT_VEC cppVar_27558 = ROM.rd(cppVar_27557);
	BIT_VEC cppVar_27559 = (cppVar_27558 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27560 = (cppVar_27559 & cppMask_un_5_);
	BIT_VEC cppVar_27562 = cppVar_27560 + 32;
	cppVar_27562 = (cppVar_27562 & cppMask_un_8_);
	BIT_VEC cppVar_27563 = (cppVar_27551) ? cppVar_27556 : cppVar_27562;
	bool cppVar_27565 = (cppVar_27563 == 144);
	BIT_VEC cppVar_27567 = PC + 1;
	cppVar_27567 = (cppVar_27567 & cppMask_un_16_);
	BIT_VEC cppVar_27568 = ROM.rd(cppVar_27567);
	BIT_VEC cppVar_27569 = (cppVar_27568 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_27570 = (cppVar_27569 & cppMask_un_3_);
	BIT_VEC cppVar_27571 = 1 << static_cast<unsigned>(cppVar_27570);
	cppVar_27571 = (cppVar_27571 & cppMask_un_8_);
	BIT_VEC cppVar_27572 = ~cppVar_27571;
	BIT_VEC cppVar_27573 = PC + 1;
	cppVar_27573 = (cppVar_27573 & cppMask_un_16_);
	BIT_VEC cppVar_27574 = ROM.rd(cppVar_27573);
	BIT_VEC cppVar_27575 = (cppVar_27574 >> 7) & cppMask_un_1_;
	bool cppVar_27576 = (cppVar_27575 == 1);
	BIT_VEC cppVar_27577 = PC + 1;
	cppVar_27577 = (cppVar_27577 & cppMask_un_16_);
	BIT_VEC cppVar_27578 = ROM.rd(cppVar_27577);
	BIT_VEC cppVar_27579 = (cppVar_27578 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27580 = (cppVar_27579 << 3) | 0;
	cppVar_27580 = (cppVar_27580 & cppMask_un_8_);
	BIT_VEC cppVar_27581 = PC + 1;
	cppVar_27581 = (cppVar_27581 & cppMask_un_16_);
	BIT_VEC cppVar_27582 = ROM.rd(cppVar_27581);
	BIT_VEC cppVar_27583 = (cppVar_27582 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27584 = (cppVar_27583 & cppMask_un_5_);
	BIT_VEC cppVar_27585 = cppVar_27584 + 32;
	cppVar_27585 = (cppVar_27585 & cppMask_un_8_);
	BIT_VEC cppVar_27586 = (cppVar_27576) ? cppVar_27580 : cppVar_27585;
	BIT_VEC cppVar_27587 = (cppVar_27586 >> 7) & cppMask_un_1_;
	bool cppVar_27589 = (cppVar_27587 == 0);
	BIT_VEC cppVar_27590 = PC + 1;
	cppVar_27590 = (cppVar_27590 & cppMask_un_16_);
	BIT_VEC cppVar_27591 = ROM.rd(cppVar_27590);
	BIT_VEC cppVar_27592 = (cppVar_27591 >> 7) & cppMask_un_1_;
	bool cppVar_27593 = (cppVar_27592 == 1);
	BIT_VEC cppVar_27594 = PC + 1;
	cppVar_27594 = (cppVar_27594 & cppMask_un_16_);
	BIT_VEC cppVar_27595 = ROM.rd(cppVar_27594);
	BIT_VEC cppVar_27596 = (cppVar_27595 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27597 = (cppVar_27596 << 3) | 0;
	cppVar_27597 = (cppVar_27597 & cppMask_un_8_);
	BIT_VEC cppVar_27598 = PC + 1;
	cppVar_27598 = (cppVar_27598 & cppMask_un_16_);
	BIT_VEC cppVar_27599 = ROM.rd(cppVar_27598);
	BIT_VEC cppVar_27600 = (cppVar_27599 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27601 = (cppVar_27600 & cppMask_un_5_);
	BIT_VEC cppVar_27602 = cppVar_27601 + 32;
	cppVar_27602 = (cppVar_27602 & cppMask_un_8_);
	BIT_VEC cppVar_27603 = (cppVar_27593) ? cppVar_27597 : cppVar_27602;
	BIT_VEC cppVar_27604 = IRAM.rd(cppVar_27603);
	BIT_VEC cppVar_27605 = PC + 1;
	cppVar_27605 = (cppVar_27605 & cppMask_un_16_);
	BIT_VEC cppVar_27606 = ROM.rd(cppVar_27605);
	BIT_VEC cppVar_27607 = (cppVar_27606 >> 7) & cppMask_un_1_;
	bool cppVar_27608 = (cppVar_27607 == 1);
	BIT_VEC cppVar_27609 = PC + 1;
	cppVar_27609 = (cppVar_27609 & cppMask_un_16_);
	BIT_VEC cppVar_27610 = ROM.rd(cppVar_27609);
	BIT_VEC cppVar_27611 = (cppVar_27610 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27612 = (cppVar_27611 << 3) | 0;
	cppVar_27612 = (cppVar_27612 & cppMask_un_8_);
	BIT_VEC cppVar_27613 = PC + 1;
	cppVar_27613 = (cppVar_27613 & cppMask_un_16_);
	BIT_VEC cppVar_27614 = ROM.rd(cppVar_27613);
	BIT_VEC cppVar_27615 = (cppVar_27614 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27616 = (cppVar_27615 & cppMask_un_5_);
	BIT_VEC cppVar_27617 = cppVar_27616 + 32;
	cppVar_27617 = (cppVar_27617 & cppMask_un_8_);
	BIT_VEC cppVar_27618 = (cppVar_27608) ? cppVar_27612 : cppVar_27617;
	bool cppVar_27620 = (cppVar_27618 == 128);
	BIT_VEC cppVar_27621 = PC + 1;
	cppVar_27621 = (cppVar_27621 & cppMask_un_16_);
	BIT_VEC cppVar_27622 = ROM.rd(cppVar_27621);
	BIT_VEC cppVar_27623 = (cppVar_27622 >> 7) & cppMask_un_1_;
	bool cppVar_27624 = (cppVar_27623 == 1);
	BIT_VEC cppVar_27625 = PC + 1;
	cppVar_27625 = (cppVar_27625 & cppMask_un_16_);
	BIT_VEC cppVar_27626 = ROM.rd(cppVar_27625);
	BIT_VEC cppVar_27627 = (cppVar_27626 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27628 = (cppVar_27627 << 3) | 0;
	cppVar_27628 = (cppVar_27628 & cppMask_un_8_);
	BIT_VEC cppVar_27629 = PC + 1;
	cppVar_27629 = (cppVar_27629 & cppMask_un_16_);
	BIT_VEC cppVar_27630 = ROM.rd(cppVar_27629);
	BIT_VEC cppVar_27631 = (cppVar_27630 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27632 = (cppVar_27631 & cppMask_un_5_);
	BIT_VEC cppVar_27633 = cppVar_27632 + 32;
	cppVar_27633 = (cppVar_27633 & cppMask_un_8_);
	BIT_VEC cppVar_27634 = (cppVar_27624) ? cppVar_27628 : cppVar_27633;
	bool cppVar_27636 = (cppVar_27634 == 129);
	BIT_VEC cppVar_27637 = PC + 1;
	cppVar_27637 = (cppVar_27637 & cppMask_un_16_);
	BIT_VEC cppVar_27638 = ROM.rd(cppVar_27637);
	BIT_VEC cppVar_27639 = (cppVar_27638 >> 7) & cppMask_un_1_;
	bool cppVar_27640 = (cppVar_27639 == 1);
	BIT_VEC cppVar_27641 = PC + 1;
	cppVar_27641 = (cppVar_27641 & cppMask_un_16_);
	BIT_VEC cppVar_27642 = ROM.rd(cppVar_27641);
	BIT_VEC cppVar_27643 = (cppVar_27642 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27644 = (cppVar_27643 << 3) | 0;
	cppVar_27644 = (cppVar_27644 & cppMask_un_8_);
	BIT_VEC cppVar_27645 = PC + 1;
	cppVar_27645 = (cppVar_27645 & cppMask_un_16_);
	BIT_VEC cppVar_27646 = ROM.rd(cppVar_27645);
	BIT_VEC cppVar_27647 = (cppVar_27646 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27648 = (cppVar_27647 & cppMask_un_5_);
	BIT_VEC cppVar_27649 = cppVar_27648 + 32;
	cppVar_27649 = (cppVar_27649 & cppMask_un_8_);
	BIT_VEC cppVar_27650 = (cppVar_27640) ? cppVar_27644 : cppVar_27649;
	bool cppVar_27652 = (cppVar_27650 == 130);
	BIT_VEC cppVar_27653 = PC + 1;
	cppVar_27653 = (cppVar_27653 & cppMask_un_16_);
	BIT_VEC cppVar_27654 = ROM.rd(cppVar_27653);
	BIT_VEC cppVar_27655 = (cppVar_27654 >> 7) & cppMask_un_1_;
	bool cppVar_27656 = (cppVar_27655 == 1);
	BIT_VEC cppVar_27657 = PC + 1;
	cppVar_27657 = (cppVar_27657 & cppMask_un_16_);
	BIT_VEC cppVar_27658 = ROM.rd(cppVar_27657);
	BIT_VEC cppVar_27659 = (cppVar_27658 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27660 = (cppVar_27659 << 3) | 0;
	cppVar_27660 = (cppVar_27660 & cppMask_un_8_);
	BIT_VEC cppVar_27661 = PC + 1;
	cppVar_27661 = (cppVar_27661 & cppMask_un_16_);
	BIT_VEC cppVar_27662 = ROM.rd(cppVar_27661);
	BIT_VEC cppVar_27663 = (cppVar_27662 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27664 = (cppVar_27663 & cppMask_un_5_);
	BIT_VEC cppVar_27665 = cppVar_27664 + 32;
	cppVar_27665 = (cppVar_27665 & cppMask_un_8_);
	BIT_VEC cppVar_27666 = (cppVar_27656) ? cppVar_27660 : cppVar_27665;
	bool cppVar_27668 = (cppVar_27666 == 131);
	BIT_VEC cppVar_27669 = PC + 1;
	cppVar_27669 = (cppVar_27669 & cppMask_un_16_);
	BIT_VEC cppVar_27670 = ROM.rd(cppVar_27669);
	BIT_VEC cppVar_27671 = (cppVar_27670 >> 7) & cppMask_un_1_;
	bool cppVar_27672 = (cppVar_27671 == 1);
	BIT_VEC cppVar_27673 = PC + 1;
	cppVar_27673 = (cppVar_27673 & cppMask_un_16_);
	BIT_VEC cppVar_27674 = ROM.rd(cppVar_27673);
	BIT_VEC cppVar_27675 = (cppVar_27674 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27676 = (cppVar_27675 << 3) | 0;
	cppVar_27676 = (cppVar_27676 & cppMask_un_8_);
	BIT_VEC cppVar_27677 = PC + 1;
	cppVar_27677 = (cppVar_27677 & cppMask_un_16_);
	BIT_VEC cppVar_27678 = ROM.rd(cppVar_27677);
	BIT_VEC cppVar_27679 = (cppVar_27678 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27680 = (cppVar_27679 & cppMask_un_5_);
	BIT_VEC cppVar_27681 = cppVar_27680 + 32;
	cppVar_27681 = (cppVar_27681 & cppMask_un_8_);
	BIT_VEC cppVar_27682 = (cppVar_27672) ? cppVar_27676 : cppVar_27681;
	bool cppVar_27684 = (cppVar_27682 == 135);
	BIT_VEC cppVar_27685 = PC + 1;
	cppVar_27685 = (cppVar_27685 & cppMask_un_16_);
	BIT_VEC cppVar_27686 = ROM.rd(cppVar_27685);
	BIT_VEC cppVar_27687 = (cppVar_27686 >> 7) & cppMask_un_1_;
	bool cppVar_27688 = (cppVar_27687 == 1);
	BIT_VEC cppVar_27689 = PC + 1;
	cppVar_27689 = (cppVar_27689 & cppMask_un_16_);
	BIT_VEC cppVar_27690 = ROM.rd(cppVar_27689);
	BIT_VEC cppVar_27691 = (cppVar_27690 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27692 = (cppVar_27691 << 3) | 0;
	cppVar_27692 = (cppVar_27692 & cppMask_un_8_);
	BIT_VEC cppVar_27693 = PC + 1;
	cppVar_27693 = (cppVar_27693 & cppMask_un_16_);
	BIT_VEC cppVar_27694 = ROM.rd(cppVar_27693);
	BIT_VEC cppVar_27695 = (cppVar_27694 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27696 = (cppVar_27695 & cppMask_un_5_);
	BIT_VEC cppVar_27697 = cppVar_27696 + 32;
	cppVar_27697 = (cppVar_27697 & cppMask_un_8_);
	BIT_VEC cppVar_27698 = (cppVar_27688) ? cppVar_27692 : cppVar_27697;
	bool cppVar_27700 = (cppVar_27698 == 136);
	BIT_VEC cppVar_27701 = PC + 1;
	cppVar_27701 = (cppVar_27701 & cppMask_un_16_);
	BIT_VEC cppVar_27702 = ROM.rd(cppVar_27701);
	BIT_VEC cppVar_27703 = (cppVar_27702 >> 7) & cppMask_un_1_;
	bool cppVar_27704 = (cppVar_27703 == 1);
	BIT_VEC cppVar_27705 = PC + 1;
	cppVar_27705 = (cppVar_27705 & cppMask_un_16_);
	BIT_VEC cppVar_27706 = ROM.rd(cppVar_27705);
	BIT_VEC cppVar_27707 = (cppVar_27706 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27708 = (cppVar_27707 << 3) | 0;
	cppVar_27708 = (cppVar_27708 & cppMask_un_8_);
	BIT_VEC cppVar_27709 = PC + 1;
	cppVar_27709 = (cppVar_27709 & cppMask_un_16_);
	BIT_VEC cppVar_27710 = ROM.rd(cppVar_27709);
	BIT_VEC cppVar_27711 = (cppVar_27710 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27712 = (cppVar_27711 & cppMask_un_5_);
	BIT_VEC cppVar_27713 = cppVar_27712 + 32;
	cppVar_27713 = (cppVar_27713 & cppMask_un_8_);
	BIT_VEC cppVar_27714 = (cppVar_27704) ? cppVar_27708 : cppVar_27713;
	bool cppVar_27716 = (cppVar_27714 == 137);
	BIT_VEC cppVar_27717 = PC + 1;
	cppVar_27717 = (cppVar_27717 & cppMask_un_16_);
	BIT_VEC cppVar_27718 = ROM.rd(cppVar_27717);
	BIT_VEC cppVar_27719 = (cppVar_27718 >> 7) & cppMask_un_1_;
	bool cppVar_27720 = (cppVar_27719 == 1);
	BIT_VEC cppVar_27721 = PC + 1;
	cppVar_27721 = (cppVar_27721 & cppMask_un_16_);
	BIT_VEC cppVar_27722 = ROM.rd(cppVar_27721);
	BIT_VEC cppVar_27723 = (cppVar_27722 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27724 = (cppVar_27723 << 3) | 0;
	cppVar_27724 = (cppVar_27724 & cppMask_un_8_);
	BIT_VEC cppVar_27725 = PC + 1;
	cppVar_27725 = (cppVar_27725 & cppMask_un_16_);
	BIT_VEC cppVar_27726 = ROM.rd(cppVar_27725);
	BIT_VEC cppVar_27727 = (cppVar_27726 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27728 = (cppVar_27727 & cppMask_un_5_);
	BIT_VEC cppVar_27729 = cppVar_27728 + 32;
	cppVar_27729 = (cppVar_27729 & cppMask_un_8_);
	BIT_VEC cppVar_27730 = (cppVar_27720) ? cppVar_27724 : cppVar_27729;
	bool cppVar_27732 = (cppVar_27730 == 138);
	BIT_VEC cppVar_27733 = PC + 1;
	cppVar_27733 = (cppVar_27733 & cppMask_un_16_);
	BIT_VEC cppVar_27734 = ROM.rd(cppVar_27733);
	BIT_VEC cppVar_27735 = (cppVar_27734 >> 7) & cppMask_un_1_;
	bool cppVar_27736 = (cppVar_27735 == 1);
	BIT_VEC cppVar_27737 = PC + 1;
	cppVar_27737 = (cppVar_27737 & cppMask_un_16_);
	BIT_VEC cppVar_27738 = ROM.rd(cppVar_27737);
	BIT_VEC cppVar_27739 = (cppVar_27738 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27740 = (cppVar_27739 << 3) | 0;
	cppVar_27740 = (cppVar_27740 & cppMask_un_8_);
	BIT_VEC cppVar_27741 = PC + 1;
	cppVar_27741 = (cppVar_27741 & cppMask_un_16_);
	BIT_VEC cppVar_27742 = ROM.rd(cppVar_27741);
	BIT_VEC cppVar_27743 = (cppVar_27742 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27744 = (cppVar_27743 & cppMask_un_5_);
	BIT_VEC cppVar_27745 = cppVar_27744 + 32;
	cppVar_27745 = (cppVar_27745 & cppMask_un_8_);
	BIT_VEC cppVar_27746 = (cppVar_27736) ? cppVar_27740 : cppVar_27745;
	bool cppVar_27748 = (cppVar_27746 == 140);
	BIT_VEC cppVar_27749 = PC + 1;
	cppVar_27749 = (cppVar_27749 & cppMask_un_16_);
	BIT_VEC cppVar_27750 = ROM.rd(cppVar_27749);
	BIT_VEC cppVar_27751 = (cppVar_27750 >> 7) & cppMask_un_1_;
	bool cppVar_27752 = (cppVar_27751 == 1);
	BIT_VEC cppVar_27753 = PC + 1;
	cppVar_27753 = (cppVar_27753 & cppMask_un_16_);
	BIT_VEC cppVar_27754 = ROM.rd(cppVar_27753);
	BIT_VEC cppVar_27755 = (cppVar_27754 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27756 = (cppVar_27755 << 3) | 0;
	cppVar_27756 = (cppVar_27756 & cppMask_un_8_);
	BIT_VEC cppVar_27757 = PC + 1;
	cppVar_27757 = (cppVar_27757 & cppMask_un_16_);
	BIT_VEC cppVar_27758 = ROM.rd(cppVar_27757);
	BIT_VEC cppVar_27759 = (cppVar_27758 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27760 = (cppVar_27759 & cppMask_un_5_);
	BIT_VEC cppVar_27761 = cppVar_27760 + 32;
	cppVar_27761 = (cppVar_27761 & cppMask_un_8_);
	BIT_VEC cppVar_27762 = (cppVar_27752) ? cppVar_27756 : cppVar_27761;
	bool cppVar_27764 = (cppVar_27762 == 139);
	BIT_VEC cppVar_27765 = PC + 1;
	cppVar_27765 = (cppVar_27765 & cppMask_un_16_);
	BIT_VEC cppVar_27766 = ROM.rd(cppVar_27765);
	BIT_VEC cppVar_27767 = (cppVar_27766 >> 7) & cppMask_un_1_;
	bool cppVar_27768 = (cppVar_27767 == 1);
	BIT_VEC cppVar_27769 = PC + 1;
	cppVar_27769 = (cppVar_27769 & cppMask_un_16_);
	BIT_VEC cppVar_27770 = ROM.rd(cppVar_27769);
	BIT_VEC cppVar_27771 = (cppVar_27770 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27772 = (cppVar_27771 << 3) | 0;
	cppVar_27772 = (cppVar_27772 & cppMask_un_8_);
	BIT_VEC cppVar_27773 = PC + 1;
	cppVar_27773 = (cppVar_27773 & cppMask_un_16_);
	BIT_VEC cppVar_27774 = ROM.rd(cppVar_27773);
	BIT_VEC cppVar_27775 = (cppVar_27774 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27776 = (cppVar_27775 & cppMask_un_5_);
	BIT_VEC cppVar_27777 = cppVar_27776 + 32;
	cppVar_27777 = (cppVar_27777 & cppMask_un_8_);
	BIT_VEC cppVar_27778 = (cppVar_27768) ? cppVar_27772 : cppVar_27777;
	bool cppVar_27780 = (cppVar_27778 == 141);
	BIT_VEC cppVar_27781 = PC + 1;
	cppVar_27781 = (cppVar_27781 & cppMask_un_16_);
	BIT_VEC cppVar_27782 = ROM.rd(cppVar_27781);
	BIT_VEC cppVar_27783 = (cppVar_27782 >> 7) & cppMask_un_1_;
	bool cppVar_27784 = (cppVar_27783 == 1);
	BIT_VEC cppVar_27785 = PC + 1;
	cppVar_27785 = (cppVar_27785 & cppMask_un_16_);
	BIT_VEC cppVar_27786 = ROM.rd(cppVar_27785);
	BIT_VEC cppVar_27787 = (cppVar_27786 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27788 = (cppVar_27787 << 3) | 0;
	cppVar_27788 = (cppVar_27788 & cppMask_un_8_);
	BIT_VEC cppVar_27789 = PC + 1;
	cppVar_27789 = (cppVar_27789 & cppMask_un_16_);
	BIT_VEC cppVar_27790 = ROM.rd(cppVar_27789);
	BIT_VEC cppVar_27791 = (cppVar_27790 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27792 = (cppVar_27791 & cppMask_un_5_);
	BIT_VEC cppVar_27793 = cppVar_27792 + 32;
	cppVar_27793 = (cppVar_27793 & cppMask_un_8_);
	BIT_VEC cppVar_27794 = (cppVar_27784) ? cppVar_27788 : cppVar_27793;
	bool cppVar_27796 = (cppVar_27794 == 144);
	BIT_VEC cppVar_27797 = PC + 1;
	cppVar_27797 = (cppVar_27797 & cppMask_un_16_);
	BIT_VEC cppVar_27798 = ROM.rd(cppVar_27797);
	BIT_VEC cppVar_27799 = (cppVar_27798 >> 7) & cppMask_un_1_;
	bool cppVar_27800 = (cppVar_27799 == 1);
	BIT_VEC cppVar_27801 = PC + 1;
	cppVar_27801 = (cppVar_27801 & cppMask_un_16_);
	BIT_VEC cppVar_27802 = ROM.rd(cppVar_27801);
	BIT_VEC cppVar_27803 = (cppVar_27802 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27804 = (cppVar_27803 << 3) | 0;
	cppVar_27804 = (cppVar_27804 & cppMask_un_8_);
	BIT_VEC cppVar_27805 = PC + 1;
	cppVar_27805 = (cppVar_27805 & cppMask_un_16_);
	BIT_VEC cppVar_27806 = ROM.rd(cppVar_27805);
	BIT_VEC cppVar_27807 = (cppVar_27806 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27808 = (cppVar_27807 & cppMask_un_5_);
	BIT_VEC cppVar_27809 = cppVar_27808 + 32;
	cppVar_27809 = (cppVar_27809 & cppMask_un_8_);
	BIT_VEC cppVar_27810 = (cppVar_27800) ? cppVar_27804 : cppVar_27809;
	bool cppVar_27812 = (cppVar_27810 == 152);
	BIT_VEC cppVar_27813 = PC + 1;
	cppVar_27813 = (cppVar_27813 & cppMask_un_16_);
	BIT_VEC cppVar_27814 = ROM.rd(cppVar_27813);
	BIT_VEC cppVar_27815 = (cppVar_27814 >> 7) & cppMask_un_1_;
	bool cppVar_27816 = (cppVar_27815 == 1);
	BIT_VEC cppVar_27817 = PC + 1;
	cppVar_27817 = (cppVar_27817 & cppMask_un_16_);
	BIT_VEC cppVar_27818 = ROM.rd(cppVar_27817);
	BIT_VEC cppVar_27819 = (cppVar_27818 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27820 = (cppVar_27819 << 3) | 0;
	cppVar_27820 = (cppVar_27820 & cppMask_un_8_);
	BIT_VEC cppVar_27821 = PC + 1;
	cppVar_27821 = (cppVar_27821 & cppMask_un_16_);
	BIT_VEC cppVar_27822 = ROM.rd(cppVar_27821);
	BIT_VEC cppVar_27823 = (cppVar_27822 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27824 = (cppVar_27823 & cppMask_un_5_);
	BIT_VEC cppVar_27825 = cppVar_27824 + 32;
	cppVar_27825 = (cppVar_27825 & cppMask_un_8_);
	BIT_VEC cppVar_27826 = (cppVar_27816) ? cppVar_27820 : cppVar_27825;
	bool cppVar_27828 = (cppVar_27826 == 153);
	BIT_VEC cppVar_27829 = PC + 1;
	cppVar_27829 = (cppVar_27829 & cppMask_un_16_);
	BIT_VEC cppVar_27830 = ROM.rd(cppVar_27829);
	BIT_VEC cppVar_27831 = (cppVar_27830 >> 7) & cppMask_un_1_;
	bool cppVar_27832 = (cppVar_27831 == 1);
	BIT_VEC cppVar_27833 = PC + 1;
	cppVar_27833 = (cppVar_27833 & cppMask_un_16_);
	BIT_VEC cppVar_27834 = ROM.rd(cppVar_27833);
	BIT_VEC cppVar_27835 = (cppVar_27834 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27836 = (cppVar_27835 << 3) | 0;
	cppVar_27836 = (cppVar_27836 & cppMask_un_8_);
	BIT_VEC cppVar_27837 = PC + 1;
	cppVar_27837 = (cppVar_27837 & cppMask_un_16_);
	BIT_VEC cppVar_27838 = ROM.rd(cppVar_27837);
	BIT_VEC cppVar_27839 = (cppVar_27838 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27840 = (cppVar_27839 & cppMask_un_5_);
	BIT_VEC cppVar_27841 = cppVar_27840 + 32;
	cppVar_27841 = (cppVar_27841 & cppMask_un_8_);
	BIT_VEC cppVar_27842 = (cppVar_27832) ? cppVar_27836 : cppVar_27841;
	bool cppVar_27844 = (cppVar_27842 == 160);
	BIT_VEC cppVar_27845 = PC + 1;
	cppVar_27845 = (cppVar_27845 & cppMask_un_16_);
	BIT_VEC cppVar_27846 = ROM.rd(cppVar_27845);
	BIT_VEC cppVar_27847 = (cppVar_27846 >> 7) & cppMask_un_1_;
	bool cppVar_27848 = (cppVar_27847 == 1);
	BIT_VEC cppVar_27849 = PC + 1;
	cppVar_27849 = (cppVar_27849 & cppMask_un_16_);
	BIT_VEC cppVar_27850 = ROM.rd(cppVar_27849);
	BIT_VEC cppVar_27851 = (cppVar_27850 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27852 = (cppVar_27851 << 3) | 0;
	cppVar_27852 = (cppVar_27852 & cppMask_un_8_);
	BIT_VEC cppVar_27853 = PC + 1;
	cppVar_27853 = (cppVar_27853 & cppMask_un_16_);
	BIT_VEC cppVar_27854 = ROM.rd(cppVar_27853);
	BIT_VEC cppVar_27855 = (cppVar_27854 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27856 = (cppVar_27855 & cppMask_un_5_);
	BIT_VEC cppVar_27857 = cppVar_27856 + 32;
	cppVar_27857 = (cppVar_27857 & cppMask_un_8_);
	BIT_VEC cppVar_27858 = (cppVar_27848) ? cppVar_27852 : cppVar_27857;
	bool cppVar_27860 = (cppVar_27858 == 168);
	BIT_VEC cppVar_27861 = PC + 1;
	cppVar_27861 = (cppVar_27861 & cppMask_un_16_);
	BIT_VEC cppVar_27862 = ROM.rd(cppVar_27861);
	BIT_VEC cppVar_27863 = (cppVar_27862 >> 7) & cppMask_un_1_;
	bool cppVar_27864 = (cppVar_27863 == 1);
	BIT_VEC cppVar_27865 = PC + 1;
	cppVar_27865 = (cppVar_27865 & cppMask_un_16_);
	BIT_VEC cppVar_27866 = ROM.rd(cppVar_27865);
	BIT_VEC cppVar_27867 = (cppVar_27866 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27868 = (cppVar_27867 << 3) | 0;
	cppVar_27868 = (cppVar_27868 & cppMask_un_8_);
	BIT_VEC cppVar_27869 = PC + 1;
	cppVar_27869 = (cppVar_27869 & cppMask_un_16_);
	BIT_VEC cppVar_27870 = ROM.rd(cppVar_27869);
	BIT_VEC cppVar_27871 = (cppVar_27870 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27872 = (cppVar_27871 & cppMask_un_5_);
	BIT_VEC cppVar_27873 = cppVar_27872 + 32;
	cppVar_27873 = (cppVar_27873 & cppMask_un_8_);
	BIT_VEC cppVar_27874 = (cppVar_27864) ? cppVar_27868 : cppVar_27873;
	bool cppVar_27876 = (cppVar_27874 == 176);
	BIT_VEC cppVar_27877 = PC + 1;
	cppVar_27877 = (cppVar_27877 & cppMask_un_16_);
	BIT_VEC cppVar_27878 = ROM.rd(cppVar_27877);
	BIT_VEC cppVar_27879 = (cppVar_27878 >> 7) & cppMask_un_1_;
	bool cppVar_27880 = (cppVar_27879 == 1);
	BIT_VEC cppVar_27881 = PC + 1;
	cppVar_27881 = (cppVar_27881 & cppMask_un_16_);
	BIT_VEC cppVar_27882 = ROM.rd(cppVar_27881);
	BIT_VEC cppVar_27883 = (cppVar_27882 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27884 = (cppVar_27883 << 3) | 0;
	cppVar_27884 = (cppVar_27884 & cppMask_un_8_);
	BIT_VEC cppVar_27885 = PC + 1;
	cppVar_27885 = (cppVar_27885 & cppMask_un_16_);
	BIT_VEC cppVar_27886 = ROM.rd(cppVar_27885);
	BIT_VEC cppVar_27887 = (cppVar_27886 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27888 = (cppVar_27887 & cppMask_un_5_);
	BIT_VEC cppVar_27889 = cppVar_27888 + 32;
	cppVar_27889 = (cppVar_27889 & cppMask_un_8_);
	BIT_VEC cppVar_27890 = (cppVar_27880) ? cppVar_27884 : cppVar_27889;
	bool cppVar_27892 = (cppVar_27890 == 184);
	BIT_VEC cppVar_27893 = PC + 1;
	cppVar_27893 = (cppVar_27893 & cppMask_un_16_);
	BIT_VEC cppVar_27894 = ROM.rd(cppVar_27893);
	BIT_VEC cppVar_27895 = (cppVar_27894 >> 7) & cppMask_un_1_;
	bool cppVar_27896 = (cppVar_27895 == 1);
	BIT_VEC cppVar_27897 = PC + 1;
	cppVar_27897 = (cppVar_27897 & cppMask_un_16_);
	BIT_VEC cppVar_27898 = ROM.rd(cppVar_27897);
	BIT_VEC cppVar_27899 = (cppVar_27898 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27900 = (cppVar_27899 << 3) | 0;
	cppVar_27900 = (cppVar_27900 & cppMask_un_8_);
	BIT_VEC cppVar_27901 = PC + 1;
	cppVar_27901 = (cppVar_27901 & cppMask_un_16_);
	BIT_VEC cppVar_27902 = ROM.rd(cppVar_27901);
	BIT_VEC cppVar_27903 = (cppVar_27902 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27904 = (cppVar_27903 & cppMask_un_5_);
	BIT_VEC cppVar_27905 = cppVar_27904 + 32;
	cppVar_27905 = (cppVar_27905 & cppMask_un_8_);
	BIT_VEC cppVar_27906 = (cppVar_27896) ? cppVar_27900 : cppVar_27905;
	bool cppVar_27908 = (cppVar_27906 == 208);
	BIT_VEC cppVar_27909 = PC + 1;
	cppVar_27909 = (cppVar_27909 & cppMask_un_16_);
	BIT_VEC cppVar_27910 = ROM.rd(cppVar_27909);
	BIT_VEC cppVar_27911 = (cppVar_27910 >> 7) & cppMask_un_1_;
	bool cppVar_27912 = (cppVar_27911 == 1);
	BIT_VEC cppVar_27913 = PC + 1;
	cppVar_27913 = (cppVar_27913 & cppMask_un_16_);
	BIT_VEC cppVar_27914 = ROM.rd(cppVar_27913);
	BIT_VEC cppVar_27915 = (cppVar_27914 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27916 = (cppVar_27915 << 3) | 0;
	cppVar_27916 = (cppVar_27916 & cppMask_un_8_);
	BIT_VEC cppVar_27917 = PC + 1;
	cppVar_27917 = (cppVar_27917 & cppMask_un_16_);
	BIT_VEC cppVar_27918 = ROM.rd(cppVar_27917);
	BIT_VEC cppVar_27919 = (cppVar_27918 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27920 = (cppVar_27919 & cppMask_un_5_);
	BIT_VEC cppVar_27921 = cppVar_27920 + 32;
	cppVar_27921 = (cppVar_27921 & cppMask_un_8_);
	BIT_VEC cppVar_27922 = (cppVar_27912) ? cppVar_27916 : cppVar_27921;
	bool cppVar_27924 = (cppVar_27922 == 224);
	BIT_VEC cppVar_27925 = PC + 1;
	cppVar_27925 = (cppVar_27925 & cppMask_un_16_);
	BIT_VEC cppVar_27926 = ROM.rd(cppVar_27925);
	BIT_VEC cppVar_27927 = (cppVar_27926 >> 7) & cppMask_un_1_;
	bool cppVar_27928 = (cppVar_27927 == 1);
	BIT_VEC cppVar_27929 = PC + 1;
	cppVar_27929 = (cppVar_27929 & cppMask_un_16_);
	BIT_VEC cppVar_27930 = ROM.rd(cppVar_27929);
	BIT_VEC cppVar_27931 = (cppVar_27930 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27932 = (cppVar_27931 << 3) | 0;
	cppVar_27932 = (cppVar_27932 & cppMask_un_8_);
	BIT_VEC cppVar_27933 = PC + 1;
	cppVar_27933 = (cppVar_27933 & cppMask_un_16_);
	BIT_VEC cppVar_27934 = ROM.rd(cppVar_27933);
	BIT_VEC cppVar_27935 = (cppVar_27934 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27936 = (cppVar_27935 & cppMask_un_5_);
	BIT_VEC cppVar_27937 = cppVar_27936 + 32;
	cppVar_27937 = (cppVar_27937 & cppMask_un_8_);
	BIT_VEC cppVar_27938 = (cppVar_27928) ? cppVar_27932 : cppVar_27937;
	bool cppVar_27940 = (cppVar_27938 == 240);
	BIT_VEC cppVar_27942 = (cppVar_27940) ? B : 0;
	BIT_VEC cppVar_27943 = (cppVar_27924) ? ACC : cppVar_27942;
	BIT_VEC cppVar_27944 = (cppVar_27908) ? PSW : cppVar_27943;
	BIT_VEC cppVar_27945 = (cppVar_27892) ? IP : cppVar_27944;
	BIT_VEC cppVar_27946 = (cppVar_27876) ? P3 : cppVar_27945;
	BIT_VEC cppVar_27947 = (cppVar_27860) ? IE : cppVar_27946;
	BIT_VEC cppVar_27948 = (cppVar_27844) ? P2 : cppVar_27947;
	BIT_VEC cppVar_27949 = (cppVar_27828) ? SBUF : cppVar_27948;
	BIT_VEC cppVar_27950 = (cppVar_27812) ? SCON : cppVar_27949;
	BIT_VEC cppVar_27951 = (cppVar_27796) ? P1 : cppVar_27950;
	BIT_VEC cppVar_27952 = (cppVar_27780) ? TH1 : cppVar_27951;
	BIT_VEC cppVar_27953 = (cppVar_27764) ? TL1 : cppVar_27952;
	BIT_VEC cppVar_27954 = (cppVar_27748) ? TH0 : cppVar_27953;
	BIT_VEC cppVar_27955 = (cppVar_27732) ? TL0 : cppVar_27954;
	BIT_VEC cppVar_27956 = (cppVar_27716) ? TMOD : cppVar_27955;
	BIT_VEC cppVar_27957 = (cppVar_27700) ? TCON : cppVar_27956;
	BIT_VEC cppVar_27958 = (cppVar_27684) ? PCON : cppVar_27957;
	BIT_VEC cppVar_27959 = (cppVar_27668) ? DPH : cppVar_27958;
	BIT_VEC cppVar_27960 = (cppVar_27652) ? DPL : cppVar_27959;
	BIT_VEC cppVar_27961 = (cppVar_27636) ? SP : cppVar_27960;
	BIT_VEC cppVar_27962 = (cppVar_27620) ? P0 : cppVar_27961;
	BIT_VEC cppVar_27963 = (cppVar_27589) ? cppVar_27604 : cppVar_27962;
	BIT_VEC cppVar_27964 = cppVar_27572 & cppVar_27963;
	BIT_VEC cppVar_27965 = PC + 1;
	cppVar_27965 = (cppVar_27965 & cppMask_un_16_);
	BIT_VEC cppVar_27966 = ROM.rd(cppVar_27965);
	BIT_VEC cppVar_27967 = (cppVar_27966 >> 7) & cppMask_un_1_;
	bool cppVar_27969 = (cppVar_27967 == 1);
	BIT_VEC cppVar_27970 = PC + 1;
	cppVar_27970 = (cppVar_27970 & cppMask_un_16_);
	BIT_VEC cppVar_27971 = ROM.rd(cppVar_27970);
	BIT_VEC cppVar_27972 = (cppVar_27971 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27974 = (cppVar_27972 << 3) | 0;
	cppVar_27974 = (cppVar_27974 & cppMask_un_8_);
	BIT_VEC cppVar_27975 = PC + 1;
	cppVar_27975 = (cppVar_27975 & cppMask_un_16_);
	BIT_VEC cppVar_27976 = ROM.rd(cppVar_27975);
	BIT_VEC cppVar_27977 = (cppVar_27976 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27978 = (cppVar_27977 & cppMask_un_5_);
	BIT_VEC cppVar_27980 = cppVar_27978 + 32;
	cppVar_27980 = (cppVar_27980 & cppMask_un_8_);
	BIT_VEC cppVar_27981 = (cppVar_27969) ? cppVar_27974 : cppVar_27980;
	BIT_VEC cppVar_27982 = (cppVar_27981 >> 7) & cppMask_un_1_;
	bool cppVar_27984 = (cppVar_27982 == 0);
	BIT_VEC cppVar_27985 = PC + 1;
	cppVar_27985 = (cppVar_27985 & cppMask_un_16_);
	BIT_VEC cppVar_27986 = ROM.rd(cppVar_27985);
	BIT_VEC cppVar_27987 = (cppVar_27986 >> 7) & cppMask_un_1_;
	bool cppVar_27988 = (cppVar_27987 == 1);
	BIT_VEC cppVar_27989 = PC + 1;
	cppVar_27989 = (cppVar_27989 & cppMask_un_16_);
	BIT_VEC cppVar_27990 = ROM.rd(cppVar_27989);
	BIT_VEC cppVar_27991 = (cppVar_27990 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27992 = (cppVar_27991 << 3) | 0;
	cppVar_27992 = (cppVar_27992 & cppMask_un_8_);
	BIT_VEC cppVar_27993 = PC + 1;
	cppVar_27993 = (cppVar_27993 & cppMask_un_16_);
	BIT_VEC cppVar_27994 = ROM.rd(cppVar_27993);
	BIT_VEC cppVar_27995 = (cppVar_27994 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_27996 = (cppVar_27995 & cppMask_un_5_);
	BIT_VEC cppVar_27997 = cppVar_27996 + 32;
	cppVar_27997 = (cppVar_27997 & cppMask_un_8_);
	BIT_VEC cppVar_27998 = (cppVar_27988) ? cppVar_27992 : cppVar_27997;
	BIT_VEC cppVar_27999 = IRAM.rd(cppVar_27998);
	BIT_VEC cppVar_28000 = PC + 1;
	cppVar_28000 = (cppVar_28000 & cppMask_un_16_);
	BIT_VEC cppVar_28001 = ROM.rd(cppVar_28000);
	BIT_VEC cppVar_28002 = (cppVar_28001 >> 7) & cppMask_un_1_;
	bool cppVar_28003 = (cppVar_28002 == 1);
	BIT_VEC cppVar_28004 = PC + 1;
	cppVar_28004 = (cppVar_28004 & cppMask_un_16_);
	BIT_VEC cppVar_28005 = ROM.rd(cppVar_28004);
	BIT_VEC cppVar_28006 = (cppVar_28005 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28007 = (cppVar_28006 << 3) | 0;
	cppVar_28007 = (cppVar_28007 & cppMask_un_8_);
	BIT_VEC cppVar_28008 = PC + 1;
	cppVar_28008 = (cppVar_28008 & cppMask_un_16_);
	BIT_VEC cppVar_28009 = ROM.rd(cppVar_28008);
	BIT_VEC cppVar_28010 = (cppVar_28009 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28011 = (cppVar_28010 & cppMask_un_5_);
	BIT_VEC cppVar_28012 = cppVar_28011 + 32;
	cppVar_28012 = (cppVar_28012 & cppMask_un_8_);
	BIT_VEC cppVar_28013 = (cppVar_28003) ? cppVar_28007 : cppVar_28012;
	bool cppVar_28015 = (cppVar_28013 == 128);
	BIT_VEC cppVar_28016 = PC + 1;
	cppVar_28016 = (cppVar_28016 & cppMask_un_16_);
	BIT_VEC cppVar_28017 = ROM.rd(cppVar_28016);
	BIT_VEC cppVar_28018 = (cppVar_28017 >> 7) & cppMask_un_1_;
	bool cppVar_28019 = (cppVar_28018 == 1);
	BIT_VEC cppVar_28020 = PC + 1;
	cppVar_28020 = (cppVar_28020 & cppMask_un_16_);
	BIT_VEC cppVar_28021 = ROM.rd(cppVar_28020);
	BIT_VEC cppVar_28022 = (cppVar_28021 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28023 = (cppVar_28022 << 3) | 0;
	cppVar_28023 = (cppVar_28023 & cppMask_un_8_);
	BIT_VEC cppVar_28024 = PC + 1;
	cppVar_28024 = (cppVar_28024 & cppMask_un_16_);
	BIT_VEC cppVar_28025 = ROM.rd(cppVar_28024);
	BIT_VEC cppVar_28026 = (cppVar_28025 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28027 = (cppVar_28026 & cppMask_un_5_);
	BIT_VEC cppVar_28028 = cppVar_28027 + 32;
	cppVar_28028 = (cppVar_28028 & cppMask_un_8_);
	BIT_VEC cppVar_28029 = (cppVar_28019) ? cppVar_28023 : cppVar_28028;
	bool cppVar_28031 = (cppVar_28029 == 129);
	BIT_VEC cppVar_28032 = PC + 1;
	cppVar_28032 = (cppVar_28032 & cppMask_un_16_);
	BIT_VEC cppVar_28033 = ROM.rd(cppVar_28032);
	BIT_VEC cppVar_28034 = (cppVar_28033 >> 7) & cppMask_un_1_;
	bool cppVar_28035 = (cppVar_28034 == 1);
	BIT_VEC cppVar_28036 = PC + 1;
	cppVar_28036 = (cppVar_28036 & cppMask_un_16_);
	BIT_VEC cppVar_28037 = ROM.rd(cppVar_28036);
	BIT_VEC cppVar_28038 = (cppVar_28037 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28039 = (cppVar_28038 << 3) | 0;
	cppVar_28039 = (cppVar_28039 & cppMask_un_8_);
	BIT_VEC cppVar_28040 = PC + 1;
	cppVar_28040 = (cppVar_28040 & cppMask_un_16_);
	BIT_VEC cppVar_28041 = ROM.rd(cppVar_28040);
	BIT_VEC cppVar_28042 = (cppVar_28041 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28043 = (cppVar_28042 & cppMask_un_5_);
	BIT_VEC cppVar_28044 = cppVar_28043 + 32;
	cppVar_28044 = (cppVar_28044 & cppMask_un_8_);
	BIT_VEC cppVar_28045 = (cppVar_28035) ? cppVar_28039 : cppVar_28044;
	bool cppVar_28047 = (cppVar_28045 == 130);
	BIT_VEC cppVar_28048 = PC + 1;
	cppVar_28048 = (cppVar_28048 & cppMask_un_16_);
	BIT_VEC cppVar_28049 = ROM.rd(cppVar_28048);
	BIT_VEC cppVar_28050 = (cppVar_28049 >> 7) & cppMask_un_1_;
	bool cppVar_28051 = (cppVar_28050 == 1);
	BIT_VEC cppVar_28052 = PC + 1;
	cppVar_28052 = (cppVar_28052 & cppMask_un_16_);
	BIT_VEC cppVar_28053 = ROM.rd(cppVar_28052);
	BIT_VEC cppVar_28054 = (cppVar_28053 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28055 = (cppVar_28054 << 3) | 0;
	cppVar_28055 = (cppVar_28055 & cppMask_un_8_);
	BIT_VEC cppVar_28056 = PC + 1;
	cppVar_28056 = (cppVar_28056 & cppMask_un_16_);
	BIT_VEC cppVar_28057 = ROM.rd(cppVar_28056);
	BIT_VEC cppVar_28058 = (cppVar_28057 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28059 = (cppVar_28058 & cppMask_un_5_);
	BIT_VEC cppVar_28060 = cppVar_28059 + 32;
	cppVar_28060 = (cppVar_28060 & cppMask_un_8_);
	BIT_VEC cppVar_28061 = (cppVar_28051) ? cppVar_28055 : cppVar_28060;
	bool cppVar_28063 = (cppVar_28061 == 131);
	BIT_VEC cppVar_28064 = PC + 1;
	cppVar_28064 = (cppVar_28064 & cppMask_un_16_);
	BIT_VEC cppVar_28065 = ROM.rd(cppVar_28064);
	BIT_VEC cppVar_28066 = (cppVar_28065 >> 7) & cppMask_un_1_;
	bool cppVar_28067 = (cppVar_28066 == 1);
	BIT_VEC cppVar_28068 = PC + 1;
	cppVar_28068 = (cppVar_28068 & cppMask_un_16_);
	BIT_VEC cppVar_28069 = ROM.rd(cppVar_28068);
	BIT_VEC cppVar_28070 = (cppVar_28069 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28071 = (cppVar_28070 << 3) | 0;
	cppVar_28071 = (cppVar_28071 & cppMask_un_8_);
	BIT_VEC cppVar_28072 = PC + 1;
	cppVar_28072 = (cppVar_28072 & cppMask_un_16_);
	BIT_VEC cppVar_28073 = ROM.rd(cppVar_28072);
	BIT_VEC cppVar_28074 = (cppVar_28073 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28075 = (cppVar_28074 & cppMask_un_5_);
	BIT_VEC cppVar_28076 = cppVar_28075 + 32;
	cppVar_28076 = (cppVar_28076 & cppMask_un_8_);
	BIT_VEC cppVar_28077 = (cppVar_28067) ? cppVar_28071 : cppVar_28076;
	bool cppVar_28079 = (cppVar_28077 == 135);
	BIT_VEC cppVar_28080 = PC + 1;
	cppVar_28080 = (cppVar_28080 & cppMask_un_16_);
	BIT_VEC cppVar_28081 = ROM.rd(cppVar_28080);
	BIT_VEC cppVar_28082 = (cppVar_28081 >> 7) & cppMask_un_1_;
	bool cppVar_28083 = (cppVar_28082 == 1);
	BIT_VEC cppVar_28084 = PC + 1;
	cppVar_28084 = (cppVar_28084 & cppMask_un_16_);
	BIT_VEC cppVar_28085 = ROM.rd(cppVar_28084);
	BIT_VEC cppVar_28086 = (cppVar_28085 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28087 = (cppVar_28086 << 3) | 0;
	cppVar_28087 = (cppVar_28087 & cppMask_un_8_);
	BIT_VEC cppVar_28088 = PC + 1;
	cppVar_28088 = (cppVar_28088 & cppMask_un_16_);
	BIT_VEC cppVar_28089 = ROM.rd(cppVar_28088);
	BIT_VEC cppVar_28090 = (cppVar_28089 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28091 = (cppVar_28090 & cppMask_un_5_);
	BIT_VEC cppVar_28092 = cppVar_28091 + 32;
	cppVar_28092 = (cppVar_28092 & cppMask_un_8_);
	BIT_VEC cppVar_28093 = (cppVar_28083) ? cppVar_28087 : cppVar_28092;
	bool cppVar_28095 = (cppVar_28093 == 136);
	BIT_VEC cppVar_28096 = PC + 1;
	cppVar_28096 = (cppVar_28096 & cppMask_un_16_);
	BIT_VEC cppVar_28097 = ROM.rd(cppVar_28096);
	BIT_VEC cppVar_28098 = (cppVar_28097 >> 7) & cppMask_un_1_;
	bool cppVar_28099 = (cppVar_28098 == 1);
	BIT_VEC cppVar_28100 = PC + 1;
	cppVar_28100 = (cppVar_28100 & cppMask_un_16_);
	BIT_VEC cppVar_28101 = ROM.rd(cppVar_28100);
	BIT_VEC cppVar_28102 = (cppVar_28101 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28103 = (cppVar_28102 << 3) | 0;
	cppVar_28103 = (cppVar_28103 & cppMask_un_8_);
	BIT_VEC cppVar_28104 = PC + 1;
	cppVar_28104 = (cppVar_28104 & cppMask_un_16_);
	BIT_VEC cppVar_28105 = ROM.rd(cppVar_28104);
	BIT_VEC cppVar_28106 = (cppVar_28105 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28107 = (cppVar_28106 & cppMask_un_5_);
	BIT_VEC cppVar_28108 = cppVar_28107 + 32;
	cppVar_28108 = (cppVar_28108 & cppMask_un_8_);
	BIT_VEC cppVar_28109 = (cppVar_28099) ? cppVar_28103 : cppVar_28108;
	bool cppVar_28111 = (cppVar_28109 == 137);
	BIT_VEC cppVar_28112 = PC + 1;
	cppVar_28112 = (cppVar_28112 & cppMask_un_16_);
	BIT_VEC cppVar_28113 = ROM.rd(cppVar_28112);
	BIT_VEC cppVar_28114 = (cppVar_28113 >> 7) & cppMask_un_1_;
	bool cppVar_28115 = (cppVar_28114 == 1);
	BIT_VEC cppVar_28116 = PC + 1;
	cppVar_28116 = (cppVar_28116 & cppMask_un_16_);
	BIT_VEC cppVar_28117 = ROM.rd(cppVar_28116);
	BIT_VEC cppVar_28118 = (cppVar_28117 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28119 = (cppVar_28118 << 3) | 0;
	cppVar_28119 = (cppVar_28119 & cppMask_un_8_);
	BIT_VEC cppVar_28120 = PC + 1;
	cppVar_28120 = (cppVar_28120 & cppMask_un_16_);
	BIT_VEC cppVar_28121 = ROM.rd(cppVar_28120);
	BIT_VEC cppVar_28122 = (cppVar_28121 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28123 = (cppVar_28122 & cppMask_un_5_);
	BIT_VEC cppVar_28124 = cppVar_28123 + 32;
	cppVar_28124 = (cppVar_28124 & cppMask_un_8_);
	BIT_VEC cppVar_28125 = (cppVar_28115) ? cppVar_28119 : cppVar_28124;
	bool cppVar_28127 = (cppVar_28125 == 138);
	BIT_VEC cppVar_28128 = PC + 1;
	cppVar_28128 = (cppVar_28128 & cppMask_un_16_);
	BIT_VEC cppVar_28129 = ROM.rd(cppVar_28128);
	BIT_VEC cppVar_28130 = (cppVar_28129 >> 7) & cppMask_un_1_;
	bool cppVar_28131 = (cppVar_28130 == 1);
	BIT_VEC cppVar_28132 = PC + 1;
	cppVar_28132 = (cppVar_28132 & cppMask_un_16_);
	BIT_VEC cppVar_28133 = ROM.rd(cppVar_28132);
	BIT_VEC cppVar_28134 = (cppVar_28133 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28135 = (cppVar_28134 << 3) | 0;
	cppVar_28135 = (cppVar_28135 & cppMask_un_8_);
	BIT_VEC cppVar_28136 = PC + 1;
	cppVar_28136 = (cppVar_28136 & cppMask_un_16_);
	BIT_VEC cppVar_28137 = ROM.rd(cppVar_28136);
	BIT_VEC cppVar_28138 = (cppVar_28137 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28139 = (cppVar_28138 & cppMask_un_5_);
	BIT_VEC cppVar_28140 = cppVar_28139 + 32;
	cppVar_28140 = (cppVar_28140 & cppMask_un_8_);
	BIT_VEC cppVar_28141 = (cppVar_28131) ? cppVar_28135 : cppVar_28140;
	bool cppVar_28143 = (cppVar_28141 == 140);
	BIT_VEC cppVar_28144 = PC + 1;
	cppVar_28144 = (cppVar_28144 & cppMask_un_16_);
	BIT_VEC cppVar_28145 = ROM.rd(cppVar_28144);
	BIT_VEC cppVar_28146 = (cppVar_28145 >> 7) & cppMask_un_1_;
	bool cppVar_28147 = (cppVar_28146 == 1);
	BIT_VEC cppVar_28148 = PC + 1;
	cppVar_28148 = (cppVar_28148 & cppMask_un_16_);
	BIT_VEC cppVar_28149 = ROM.rd(cppVar_28148);
	BIT_VEC cppVar_28150 = (cppVar_28149 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28151 = (cppVar_28150 << 3) | 0;
	cppVar_28151 = (cppVar_28151 & cppMask_un_8_);
	BIT_VEC cppVar_28152 = PC + 1;
	cppVar_28152 = (cppVar_28152 & cppMask_un_16_);
	BIT_VEC cppVar_28153 = ROM.rd(cppVar_28152);
	BIT_VEC cppVar_28154 = (cppVar_28153 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28155 = (cppVar_28154 & cppMask_un_5_);
	BIT_VEC cppVar_28156 = cppVar_28155 + 32;
	cppVar_28156 = (cppVar_28156 & cppMask_un_8_);
	BIT_VEC cppVar_28157 = (cppVar_28147) ? cppVar_28151 : cppVar_28156;
	bool cppVar_28159 = (cppVar_28157 == 139);
	BIT_VEC cppVar_28160 = PC + 1;
	cppVar_28160 = (cppVar_28160 & cppMask_un_16_);
	BIT_VEC cppVar_28161 = ROM.rd(cppVar_28160);
	BIT_VEC cppVar_28162 = (cppVar_28161 >> 7) & cppMask_un_1_;
	bool cppVar_28163 = (cppVar_28162 == 1);
	BIT_VEC cppVar_28164 = PC + 1;
	cppVar_28164 = (cppVar_28164 & cppMask_un_16_);
	BIT_VEC cppVar_28165 = ROM.rd(cppVar_28164);
	BIT_VEC cppVar_28166 = (cppVar_28165 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28167 = (cppVar_28166 << 3) | 0;
	cppVar_28167 = (cppVar_28167 & cppMask_un_8_);
	BIT_VEC cppVar_28168 = PC + 1;
	cppVar_28168 = (cppVar_28168 & cppMask_un_16_);
	BIT_VEC cppVar_28169 = ROM.rd(cppVar_28168);
	BIT_VEC cppVar_28170 = (cppVar_28169 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28171 = (cppVar_28170 & cppMask_un_5_);
	BIT_VEC cppVar_28172 = cppVar_28171 + 32;
	cppVar_28172 = (cppVar_28172 & cppMask_un_8_);
	BIT_VEC cppVar_28173 = (cppVar_28163) ? cppVar_28167 : cppVar_28172;
	bool cppVar_28175 = (cppVar_28173 == 141);
	BIT_VEC cppVar_28176 = PC + 1;
	cppVar_28176 = (cppVar_28176 & cppMask_un_16_);
	BIT_VEC cppVar_28177 = ROM.rd(cppVar_28176);
	BIT_VEC cppVar_28178 = (cppVar_28177 >> 7) & cppMask_un_1_;
	bool cppVar_28179 = (cppVar_28178 == 1);
	BIT_VEC cppVar_28180 = PC + 1;
	cppVar_28180 = (cppVar_28180 & cppMask_un_16_);
	BIT_VEC cppVar_28181 = ROM.rd(cppVar_28180);
	BIT_VEC cppVar_28182 = (cppVar_28181 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28183 = (cppVar_28182 << 3) | 0;
	cppVar_28183 = (cppVar_28183 & cppMask_un_8_);
	BIT_VEC cppVar_28184 = PC + 1;
	cppVar_28184 = (cppVar_28184 & cppMask_un_16_);
	BIT_VEC cppVar_28185 = ROM.rd(cppVar_28184);
	BIT_VEC cppVar_28186 = (cppVar_28185 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28187 = (cppVar_28186 & cppMask_un_5_);
	BIT_VEC cppVar_28188 = cppVar_28187 + 32;
	cppVar_28188 = (cppVar_28188 & cppMask_un_8_);
	BIT_VEC cppVar_28189 = (cppVar_28179) ? cppVar_28183 : cppVar_28188;
	bool cppVar_28191 = (cppVar_28189 == 144);
	BIT_VEC cppVar_28192 = PC + 1;
	cppVar_28192 = (cppVar_28192 & cppMask_un_16_);
	BIT_VEC cppVar_28193 = ROM.rd(cppVar_28192);
	BIT_VEC cppVar_28194 = (cppVar_28193 >> 7) & cppMask_un_1_;
	bool cppVar_28195 = (cppVar_28194 == 1);
	BIT_VEC cppVar_28196 = PC + 1;
	cppVar_28196 = (cppVar_28196 & cppMask_un_16_);
	BIT_VEC cppVar_28197 = ROM.rd(cppVar_28196);
	BIT_VEC cppVar_28198 = (cppVar_28197 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28199 = (cppVar_28198 << 3) | 0;
	cppVar_28199 = (cppVar_28199 & cppMask_un_8_);
	BIT_VEC cppVar_28200 = PC + 1;
	cppVar_28200 = (cppVar_28200 & cppMask_un_16_);
	BIT_VEC cppVar_28201 = ROM.rd(cppVar_28200);
	BIT_VEC cppVar_28202 = (cppVar_28201 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28203 = (cppVar_28202 & cppMask_un_5_);
	BIT_VEC cppVar_28204 = cppVar_28203 + 32;
	cppVar_28204 = (cppVar_28204 & cppMask_un_8_);
	BIT_VEC cppVar_28205 = (cppVar_28195) ? cppVar_28199 : cppVar_28204;
	bool cppVar_28207 = (cppVar_28205 == 152);
	BIT_VEC cppVar_28208 = PC + 1;
	cppVar_28208 = (cppVar_28208 & cppMask_un_16_);
	BIT_VEC cppVar_28209 = ROM.rd(cppVar_28208);
	BIT_VEC cppVar_28210 = (cppVar_28209 >> 7) & cppMask_un_1_;
	bool cppVar_28211 = (cppVar_28210 == 1);
	BIT_VEC cppVar_28212 = PC + 1;
	cppVar_28212 = (cppVar_28212 & cppMask_un_16_);
	BIT_VEC cppVar_28213 = ROM.rd(cppVar_28212);
	BIT_VEC cppVar_28214 = (cppVar_28213 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28215 = (cppVar_28214 << 3) | 0;
	cppVar_28215 = (cppVar_28215 & cppMask_un_8_);
	BIT_VEC cppVar_28216 = PC + 1;
	cppVar_28216 = (cppVar_28216 & cppMask_un_16_);
	BIT_VEC cppVar_28217 = ROM.rd(cppVar_28216);
	BIT_VEC cppVar_28218 = (cppVar_28217 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28219 = (cppVar_28218 & cppMask_un_5_);
	BIT_VEC cppVar_28220 = cppVar_28219 + 32;
	cppVar_28220 = (cppVar_28220 & cppMask_un_8_);
	BIT_VEC cppVar_28221 = (cppVar_28211) ? cppVar_28215 : cppVar_28220;
	bool cppVar_28223 = (cppVar_28221 == 153);
	BIT_VEC cppVar_28224 = PC + 1;
	cppVar_28224 = (cppVar_28224 & cppMask_un_16_);
	BIT_VEC cppVar_28225 = ROM.rd(cppVar_28224);
	BIT_VEC cppVar_28226 = (cppVar_28225 >> 7) & cppMask_un_1_;
	bool cppVar_28227 = (cppVar_28226 == 1);
	BIT_VEC cppVar_28228 = PC + 1;
	cppVar_28228 = (cppVar_28228 & cppMask_un_16_);
	BIT_VEC cppVar_28229 = ROM.rd(cppVar_28228);
	BIT_VEC cppVar_28230 = (cppVar_28229 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28231 = (cppVar_28230 << 3) | 0;
	cppVar_28231 = (cppVar_28231 & cppMask_un_8_);
	BIT_VEC cppVar_28232 = PC + 1;
	cppVar_28232 = (cppVar_28232 & cppMask_un_16_);
	BIT_VEC cppVar_28233 = ROM.rd(cppVar_28232);
	BIT_VEC cppVar_28234 = (cppVar_28233 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28235 = (cppVar_28234 & cppMask_un_5_);
	BIT_VEC cppVar_28236 = cppVar_28235 + 32;
	cppVar_28236 = (cppVar_28236 & cppMask_un_8_);
	BIT_VEC cppVar_28237 = (cppVar_28227) ? cppVar_28231 : cppVar_28236;
	bool cppVar_28239 = (cppVar_28237 == 160);
	BIT_VEC cppVar_28240 = PC + 1;
	cppVar_28240 = (cppVar_28240 & cppMask_un_16_);
	BIT_VEC cppVar_28241 = ROM.rd(cppVar_28240);
	BIT_VEC cppVar_28242 = (cppVar_28241 >> 7) & cppMask_un_1_;
	bool cppVar_28243 = (cppVar_28242 == 1);
	BIT_VEC cppVar_28244 = PC + 1;
	cppVar_28244 = (cppVar_28244 & cppMask_un_16_);
	BIT_VEC cppVar_28245 = ROM.rd(cppVar_28244);
	BIT_VEC cppVar_28246 = (cppVar_28245 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28247 = (cppVar_28246 << 3) | 0;
	cppVar_28247 = (cppVar_28247 & cppMask_un_8_);
	BIT_VEC cppVar_28248 = PC + 1;
	cppVar_28248 = (cppVar_28248 & cppMask_un_16_);
	BIT_VEC cppVar_28249 = ROM.rd(cppVar_28248);
	BIT_VEC cppVar_28250 = (cppVar_28249 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28251 = (cppVar_28250 & cppMask_un_5_);
	BIT_VEC cppVar_28252 = cppVar_28251 + 32;
	cppVar_28252 = (cppVar_28252 & cppMask_un_8_);
	BIT_VEC cppVar_28253 = (cppVar_28243) ? cppVar_28247 : cppVar_28252;
	bool cppVar_28255 = (cppVar_28253 == 168);
	BIT_VEC cppVar_28256 = PC + 1;
	cppVar_28256 = (cppVar_28256 & cppMask_un_16_);
	BIT_VEC cppVar_28257 = ROM.rd(cppVar_28256);
	BIT_VEC cppVar_28258 = (cppVar_28257 >> 7) & cppMask_un_1_;
	bool cppVar_28259 = (cppVar_28258 == 1);
	BIT_VEC cppVar_28260 = PC + 1;
	cppVar_28260 = (cppVar_28260 & cppMask_un_16_);
	BIT_VEC cppVar_28261 = ROM.rd(cppVar_28260);
	BIT_VEC cppVar_28262 = (cppVar_28261 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28263 = (cppVar_28262 << 3) | 0;
	cppVar_28263 = (cppVar_28263 & cppMask_un_8_);
	BIT_VEC cppVar_28264 = PC + 1;
	cppVar_28264 = (cppVar_28264 & cppMask_un_16_);
	BIT_VEC cppVar_28265 = ROM.rd(cppVar_28264);
	BIT_VEC cppVar_28266 = (cppVar_28265 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28267 = (cppVar_28266 & cppMask_un_5_);
	BIT_VEC cppVar_28268 = cppVar_28267 + 32;
	cppVar_28268 = (cppVar_28268 & cppMask_un_8_);
	BIT_VEC cppVar_28269 = (cppVar_28259) ? cppVar_28263 : cppVar_28268;
	bool cppVar_28271 = (cppVar_28269 == 176);
	BIT_VEC cppVar_28272 = PC + 1;
	cppVar_28272 = (cppVar_28272 & cppMask_un_16_);
	BIT_VEC cppVar_28273 = ROM.rd(cppVar_28272);
	BIT_VEC cppVar_28274 = (cppVar_28273 >> 7) & cppMask_un_1_;
	bool cppVar_28275 = (cppVar_28274 == 1);
	BIT_VEC cppVar_28276 = PC + 1;
	cppVar_28276 = (cppVar_28276 & cppMask_un_16_);
	BIT_VEC cppVar_28277 = ROM.rd(cppVar_28276);
	BIT_VEC cppVar_28278 = (cppVar_28277 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28279 = (cppVar_28278 << 3) | 0;
	cppVar_28279 = (cppVar_28279 & cppMask_un_8_);
	BIT_VEC cppVar_28280 = PC + 1;
	cppVar_28280 = (cppVar_28280 & cppMask_un_16_);
	BIT_VEC cppVar_28281 = ROM.rd(cppVar_28280);
	BIT_VEC cppVar_28282 = (cppVar_28281 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28283 = (cppVar_28282 & cppMask_un_5_);
	BIT_VEC cppVar_28284 = cppVar_28283 + 32;
	cppVar_28284 = (cppVar_28284 & cppMask_un_8_);
	BIT_VEC cppVar_28285 = (cppVar_28275) ? cppVar_28279 : cppVar_28284;
	bool cppVar_28287 = (cppVar_28285 == 184);
	BIT_VEC cppVar_28288 = PC + 1;
	cppVar_28288 = (cppVar_28288 & cppMask_un_16_);
	BIT_VEC cppVar_28289 = ROM.rd(cppVar_28288);
	BIT_VEC cppVar_28290 = (cppVar_28289 >> 7) & cppMask_un_1_;
	bool cppVar_28291 = (cppVar_28290 == 1);
	BIT_VEC cppVar_28292 = PC + 1;
	cppVar_28292 = (cppVar_28292 & cppMask_un_16_);
	BIT_VEC cppVar_28293 = ROM.rd(cppVar_28292);
	BIT_VEC cppVar_28294 = (cppVar_28293 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28295 = (cppVar_28294 << 3) | 0;
	cppVar_28295 = (cppVar_28295 & cppMask_un_8_);
	BIT_VEC cppVar_28296 = PC + 1;
	cppVar_28296 = (cppVar_28296 & cppMask_un_16_);
	BIT_VEC cppVar_28297 = ROM.rd(cppVar_28296);
	BIT_VEC cppVar_28298 = (cppVar_28297 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28299 = (cppVar_28298 & cppMask_un_5_);
	BIT_VEC cppVar_28300 = cppVar_28299 + 32;
	cppVar_28300 = (cppVar_28300 & cppMask_un_8_);
	BIT_VEC cppVar_28301 = (cppVar_28291) ? cppVar_28295 : cppVar_28300;
	bool cppVar_28303 = (cppVar_28301 == 208);
	BIT_VEC cppVar_28304 = PC + 1;
	cppVar_28304 = (cppVar_28304 & cppMask_un_16_);
	BIT_VEC cppVar_28305 = ROM.rd(cppVar_28304);
	BIT_VEC cppVar_28306 = (cppVar_28305 >> 7) & cppMask_un_1_;
	bool cppVar_28307 = (cppVar_28306 == 1);
	BIT_VEC cppVar_28308 = PC + 1;
	cppVar_28308 = (cppVar_28308 & cppMask_un_16_);
	BIT_VEC cppVar_28309 = ROM.rd(cppVar_28308);
	BIT_VEC cppVar_28310 = (cppVar_28309 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28311 = (cppVar_28310 << 3) | 0;
	cppVar_28311 = (cppVar_28311 & cppMask_un_8_);
	BIT_VEC cppVar_28312 = PC + 1;
	cppVar_28312 = (cppVar_28312 & cppMask_un_16_);
	BIT_VEC cppVar_28313 = ROM.rd(cppVar_28312);
	BIT_VEC cppVar_28314 = (cppVar_28313 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28315 = (cppVar_28314 & cppMask_un_5_);
	BIT_VEC cppVar_28316 = cppVar_28315 + 32;
	cppVar_28316 = (cppVar_28316 & cppMask_un_8_);
	BIT_VEC cppVar_28317 = (cppVar_28307) ? cppVar_28311 : cppVar_28316;
	bool cppVar_28319 = (cppVar_28317 == 224);
	BIT_VEC cppVar_28320 = PC + 1;
	cppVar_28320 = (cppVar_28320 & cppMask_un_16_);
	BIT_VEC cppVar_28321 = ROM.rd(cppVar_28320);
	BIT_VEC cppVar_28322 = (cppVar_28321 >> 7) & cppMask_un_1_;
	bool cppVar_28323 = (cppVar_28322 == 1);
	BIT_VEC cppVar_28324 = PC + 1;
	cppVar_28324 = (cppVar_28324 & cppMask_un_16_);
	BIT_VEC cppVar_28325 = ROM.rd(cppVar_28324);
	BIT_VEC cppVar_28326 = (cppVar_28325 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28327 = (cppVar_28326 << 3) | 0;
	cppVar_28327 = (cppVar_28327 & cppMask_un_8_);
	BIT_VEC cppVar_28328 = PC + 1;
	cppVar_28328 = (cppVar_28328 & cppMask_un_16_);
	BIT_VEC cppVar_28329 = ROM.rd(cppVar_28328);
	BIT_VEC cppVar_28330 = (cppVar_28329 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28331 = (cppVar_28330 & cppMask_un_5_);
	BIT_VEC cppVar_28332 = cppVar_28331 + 32;
	cppVar_28332 = (cppVar_28332 & cppMask_un_8_);
	BIT_VEC cppVar_28333 = (cppVar_28323) ? cppVar_28327 : cppVar_28332;
	bool cppVar_28335 = (cppVar_28333 == 240);
	BIT_VEC cppVar_28337 = (cppVar_28335) ? B : 0;
	BIT_VEC cppVar_28338 = (cppVar_28319) ? ACC : cppVar_28337;
	BIT_VEC cppVar_28339 = (cppVar_28303) ? PSW : cppVar_28338;
	BIT_VEC cppVar_28340 = (cppVar_28287) ? IP : cppVar_28339;
	BIT_VEC cppVar_28341 = (cppVar_28271) ? P3 : cppVar_28340;
	BIT_VEC cppVar_28342 = (cppVar_28255) ? IE : cppVar_28341;
	BIT_VEC cppVar_28343 = (cppVar_28239) ? P2 : cppVar_28342;
	BIT_VEC cppVar_28344 = (cppVar_28223) ? SBUF : cppVar_28343;
	BIT_VEC cppVar_28345 = (cppVar_28207) ? SCON : cppVar_28344;
	BIT_VEC cppVar_28346 = (cppVar_28191) ? P1 : cppVar_28345;
	BIT_VEC cppVar_28347 = (cppVar_28175) ? TH1 : cppVar_28346;
	BIT_VEC cppVar_28348 = (cppVar_28159) ? TL1 : cppVar_28347;
	BIT_VEC cppVar_28349 = (cppVar_28143) ? TH0 : cppVar_28348;
	BIT_VEC cppVar_28350 = (cppVar_28127) ? TL0 : cppVar_28349;
	BIT_VEC cppVar_28351 = (cppVar_28111) ? TMOD : cppVar_28350;
	BIT_VEC cppVar_28352 = (cppVar_28095) ? TCON : cppVar_28351;
	BIT_VEC cppVar_28353 = (cppVar_28079) ? PCON : cppVar_28352;
	BIT_VEC cppVar_28354 = (cppVar_28063) ? DPH : cppVar_28353;
	BIT_VEC cppVar_28355 = (cppVar_28047) ? DPL : cppVar_28354;
	BIT_VEC cppVar_28356 = (cppVar_28031) ? SP : cppVar_28355;
	BIT_VEC cppVar_28357 = (cppVar_28015) ? P0 : cppVar_28356;
	BIT_VEC cppVar_28358 = (cppVar_27984) ? cppVar_27999 : cppVar_28357;
	BIT_VEC cppVar_28359 = PC + 1;
	cppVar_28359 = (cppVar_28359 & cppMask_un_16_);
	BIT_VEC cppVar_28360 = ROM.rd(cppVar_28359);
	BIT_VEC cppVar_28361 = (cppVar_28360 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_28362 = (cppVar_28358 >> static_cast<unsigned>(cppVar_28361)) & 0x1;
	BIT_VEC cppVar_28363 = ~cppVar_28362;
	BIT_VEC cppVar_28364 = (cppVar_28363 & cppMask_un_1_);
	BIT_VEC cppVar_28365 = PC + 1;
	cppVar_28365 = (cppVar_28365 & cppMask_un_16_);
	BIT_VEC cppVar_28366 = ROM.rd(cppVar_28365);
	BIT_VEC cppVar_28367 = (cppVar_28366 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_28368 = (cppVar_28367 & cppMask_un_3_);
	BIT_VEC cppVar_28369 = cppVar_28364 << static_cast<unsigned>(cppVar_28368);
	cppVar_28369 = (cppVar_28369 & cppMask_un_8_);
	BIT_VEC cppVar_28370 = cppVar_27964 | cppVar_28369;
	BIT_VEC cppVar_28371 = (cppVar_27565) ? cppVar_28370 : P1;
	BIT_VEC cppVar_28372 = ROM.rd(PC);
	bool cppVar_28374 = (cppVar_28372 == 146);
	BIT_VEC cppVar_28376 = PC + 1;
	cppVar_28376 = (cppVar_28376 & cppMask_un_16_);
	BIT_VEC cppVar_28377 = ROM.rd(cppVar_28376);
	BIT_VEC cppVar_28378 = (cppVar_28377 >> 7) & cppMask_un_1_;
	bool cppVar_28380 = (cppVar_28378 == 1);
	BIT_VEC cppVar_28381 = PC + 1;
	cppVar_28381 = (cppVar_28381 & cppMask_un_16_);
	BIT_VEC cppVar_28382 = ROM.rd(cppVar_28381);
	BIT_VEC cppVar_28383 = (cppVar_28382 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28385 = (cppVar_28383 << 3) | 0;
	cppVar_28385 = (cppVar_28385 & cppMask_un_8_);
	BIT_VEC cppVar_28386 = PC + 1;
	cppVar_28386 = (cppVar_28386 & cppMask_un_16_);
	BIT_VEC cppVar_28387 = ROM.rd(cppVar_28386);
	BIT_VEC cppVar_28388 = (cppVar_28387 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28389 = (cppVar_28388 & cppMask_un_5_);
	BIT_VEC cppVar_28391 = cppVar_28389 + 32;
	cppVar_28391 = (cppVar_28391 & cppMask_un_8_);
	BIT_VEC cppVar_28392 = (cppVar_28380) ? cppVar_28385 : cppVar_28391;
	bool cppVar_28394 = (cppVar_28392 == 144);
	BIT_VEC cppVar_28396 = PC + 1;
	cppVar_28396 = (cppVar_28396 & cppMask_un_16_);
	BIT_VEC cppVar_28397 = ROM.rd(cppVar_28396);
	BIT_VEC cppVar_28398 = (cppVar_28397 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_28399 = (cppVar_28398 & cppMask_un_3_);
	BIT_VEC cppVar_28400 = 1 << static_cast<unsigned>(cppVar_28399);
	cppVar_28400 = (cppVar_28400 & cppMask_un_8_);
	BIT_VEC cppVar_28401 = ~cppVar_28400;
	BIT_VEC cppVar_28402 = PC + 1;
	cppVar_28402 = (cppVar_28402 & cppMask_un_16_);
	BIT_VEC cppVar_28403 = ROM.rd(cppVar_28402);
	BIT_VEC cppVar_28404 = (cppVar_28403 >> 7) & cppMask_un_1_;
	bool cppVar_28405 = (cppVar_28404 == 1);
	BIT_VEC cppVar_28406 = PC + 1;
	cppVar_28406 = (cppVar_28406 & cppMask_un_16_);
	BIT_VEC cppVar_28407 = ROM.rd(cppVar_28406);
	BIT_VEC cppVar_28408 = (cppVar_28407 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28409 = (cppVar_28408 << 3) | 0;
	cppVar_28409 = (cppVar_28409 & cppMask_un_8_);
	BIT_VEC cppVar_28410 = PC + 1;
	cppVar_28410 = (cppVar_28410 & cppMask_un_16_);
	BIT_VEC cppVar_28411 = ROM.rd(cppVar_28410);
	BIT_VEC cppVar_28412 = (cppVar_28411 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28413 = (cppVar_28412 & cppMask_un_5_);
	BIT_VEC cppVar_28414 = cppVar_28413 + 32;
	cppVar_28414 = (cppVar_28414 & cppMask_un_8_);
	BIT_VEC cppVar_28415 = (cppVar_28405) ? cppVar_28409 : cppVar_28414;
	BIT_VEC cppVar_28416 = (cppVar_28415 >> 7) & cppMask_un_1_;
	bool cppVar_28418 = (cppVar_28416 == 0);
	BIT_VEC cppVar_28419 = PC + 1;
	cppVar_28419 = (cppVar_28419 & cppMask_un_16_);
	BIT_VEC cppVar_28420 = ROM.rd(cppVar_28419);
	BIT_VEC cppVar_28421 = (cppVar_28420 >> 7) & cppMask_un_1_;
	bool cppVar_28422 = (cppVar_28421 == 1);
	BIT_VEC cppVar_28423 = PC + 1;
	cppVar_28423 = (cppVar_28423 & cppMask_un_16_);
	BIT_VEC cppVar_28424 = ROM.rd(cppVar_28423);
	BIT_VEC cppVar_28425 = (cppVar_28424 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28426 = (cppVar_28425 << 3) | 0;
	cppVar_28426 = (cppVar_28426 & cppMask_un_8_);
	BIT_VEC cppVar_28427 = PC + 1;
	cppVar_28427 = (cppVar_28427 & cppMask_un_16_);
	BIT_VEC cppVar_28428 = ROM.rd(cppVar_28427);
	BIT_VEC cppVar_28429 = (cppVar_28428 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28430 = (cppVar_28429 & cppMask_un_5_);
	BIT_VEC cppVar_28431 = cppVar_28430 + 32;
	cppVar_28431 = (cppVar_28431 & cppMask_un_8_);
	BIT_VEC cppVar_28432 = (cppVar_28422) ? cppVar_28426 : cppVar_28431;
	BIT_VEC cppVar_28433 = IRAM.rd(cppVar_28432);
	BIT_VEC cppVar_28434 = PC + 1;
	cppVar_28434 = (cppVar_28434 & cppMask_un_16_);
	BIT_VEC cppVar_28435 = ROM.rd(cppVar_28434);
	BIT_VEC cppVar_28436 = (cppVar_28435 >> 7) & cppMask_un_1_;
	bool cppVar_28437 = (cppVar_28436 == 1);
	BIT_VEC cppVar_28438 = PC + 1;
	cppVar_28438 = (cppVar_28438 & cppMask_un_16_);
	BIT_VEC cppVar_28439 = ROM.rd(cppVar_28438);
	BIT_VEC cppVar_28440 = (cppVar_28439 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28441 = (cppVar_28440 << 3) | 0;
	cppVar_28441 = (cppVar_28441 & cppMask_un_8_);
	BIT_VEC cppVar_28442 = PC + 1;
	cppVar_28442 = (cppVar_28442 & cppMask_un_16_);
	BIT_VEC cppVar_28443 = ROM.rd(cppVar_28442);
	BIT_VEC cppVar_28444 = (cppVar_28443 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28445 = (cppVar_28444 & cppMask_un_5_);
	BIT_VEC cppVar_28446 = cppVar_28445 + 32;
	cppVar_28446 = (cppVar_28446 & cppMask_un_8_);
	BIT_VEC cppVar_28447 = (cppVar_28437) ? cppVar_28441 : cppVar_28446;
	bool cppVar_28449 = (cppVar_28447 == 128);
	BIT_VEC cppVar_28450 = PC + 1;
	cppVar_28450 = (cppVar_28450 & cppMask_un_16_);
	BIT_VEC cppVar_28451 = ROM.rd(cppVar_28450);
	BIT_VEC cppVar_28452 = (cppVar_28451 >> 7) & cppMask_un_1_;
	bool cppVar_28453 = (cppVar_28452 == 1);
	BIT_VEC cppVar_28454 = PC + 1;
	cppVar_28454 = (cppVar_28454 & cppMask_un_16_);
	BIT_VEC cppVar_28455 = ROM.rd(cppVar_28454);
	BIT_VEC cppVar_28456 = (cppVar_28455 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28457 = (cppVar_28456 << 3) | 0;
	cppVar_28457 = (cppVar_28457 & cppMask_un_8_);
	BIT_VEC cppVar_28458 = PC + 1;
	cppVar_28458 = (cppVar_28458 & cppMask_un_16_);
	BIT_VEC cppVar_28459 = ROM.rd(cppVar_28458);
	BIT_VEC cppVar_28460 = (cppVar_28459 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28461 = (cppVar_28460 & cppMask_un_5_);
	BIT_VEC cppVar_28462 = cppVar_28461 + 32;
	cppVar_28462 = (cppVar_28462 & cppMask_un_8_);
	BIT_VEC cppVar_28463 = (cppVar_28453) ? cppVar_28457 : cppVar_28462;
	bool cppVar_28465 = (cppVar_28463 == 129);
	BIT_VEC cppVar_28466 = PC + 1;
	cppVar_28466 = (cppVar_28466 & cppMask_un_16_);
	BIT_VEC cppVar_28467 = ROM.rd(cppVar_28466);
	BIT_VEC cppVar_28468 = (cppVar_28467 >> 7) & cppMask_un_1_;
	bool cppVar_28469 = (cppVar_28468 == 1);
	BIT_VEC cppVar_28470 = PC + 1;
	cppVar_28470 = (cppVar_28470 & cppMask_un_16_);
	BIT_VEC cppVar_28471 = ROM.rd(cppVar_28470);
	BIT_VEC cppVar_28472 = (cppVar_28471 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28473 = (cppVar_28472 << 3) | 0;
	cppVar_28473 = (cppVar_28473 & cppMask_un_8_);
	BIT_VEC cppVar_28474 = PC + 1;
	cppVar_28474 = (cppVar_28474 & cppMask_un_16_);
	BIT_VEC cppVar_28475 = ROM.rd(cppVar_28474);
	BIT_VEC cppVar_28476 = (cppVar_28475 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28477 = (cppVar_28476 & cppMask_un_5_);
	BIT_VEC cppVar_28478 = cppVar_28477 + 32;
	cppVar_28478 = (cppVar_28478 & cppMask_un_8_);
	BIT_VEC cppVar_28479 = (cppVar_28469) ? cppVar_28473 : cppVar_28478;
	bool cppVar_28481 = (cppVar_28479 == 130);
	BIT_VEC cppVar_28482 = PC + 1;
	cppVar_28482 = (cppVar_28482 & cppMask_un_16_);
	BIT_VEC cppVar_28483 = ROM.rd(cppVar_28482);
	BIT_VEC cppVar_28484 = (cppVar_28483 >> 7) & cppMask_un_1_;
	bool cppVar_28485 = (cppVar_28484 == 1);
	BIT_VEC cppVar_28486 = PC + 1;
	cppVar_28486 = (cppVar_28486 & cppMask_un_16_);
	BIT_VEC cppVar_28487 = ROM.rd(cppVar_28486);
	BIT_VEC cppVar_28488 = (cppVar_28487 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28489 = (cppVar_28488 << 3) | 0;
	cppVar_28489 = (cppVar_28489 & cppMask_un_8_);
	BIT_VEC cppVar_28490 = PC + 1;
	cppVar_28490 = (cppVar_28490 & cppMask_un_16_);
	BIT_VEC cppVar_28491 = ROM.rd(cppVar_28490);
	BIT_VEC cppVar_28492 = (cppVar_28491 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28493 = (cppVar_28492 & cppMask_un_5_);
	BIT_VEC cppVar_28494 = cppVar_28493 + 32;
	cppVar_28494 = (cppVar_28494 & cppMask_un_8_);
	BIT_VEC cppVar_28495 = (cppVar_28485) ? cppVar_28489 : cppVar_28494;
	bool cppVar_28497 = (cppVar_28495 == 131);
	BIT_VEC cppVar_28498 = PC + 1;
	cppVar_28498 = (cppVar_28498 & cppMask_un_16_);
	BIT_VEC cppVar_28499 = ROM.rd(cppVar_28498);
	BIT_VEC cppVar_28500 = (cppVar_28499 >> 7) & cppMask_un_1_;
	bool cppVar_28501 = (cppVar_28500 == 1);
	BIT_VEC cppVar_28502 = PC + 1;
	cppVar_28502 = (cppVar_28502 & cppMask_un_16_);
	BIT_VEC cppVar_28503 = ROM.rd(cppVar_28502);
	BIT_VEC cppVar_28504 = (cppVar_28503 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28505 = (cppVar_28504 << 3) | 0;
	cppVar_28505 = (cppVar_28505 & cppMask_un_8_);
	BIT_VEC cppVar_28506 = PC + 1;
	cppVar_28506 = (cppVar_28506 & cppMask_un_16_);
	BIT_VEC cppVar_28507 = ROM.rd(cppVar_28506);
	BIT_VEC cppVar_28508 = (cppVar_28507 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28509 = (cppVar_28508 & cppMask_un_5_);
	BIT_VEC cppVar_28510 = cppVar_28509 + 32;
	cppVar_28510 = (cppVar_28510 & cppMask_un_8_);
	BIT_VEC cppVar_28511 = (cppVar_28501) ? cppVar_28505 : cppVar_28510;
	bool cppVar_28513 = (cppVar_28511 == 135);
	BIT_VEC cppVar_28514 = PC + 1;
	cppVar_28514 = (cppVar_28514 & cppMask_un_16_);
	BIT_VEC cppVar_28515 = ROM.rd(cppVar_28514);
	BIT_VEC cppVar_28516 = (cppVar_28515 >> 7) & cppMask_un_1_;
	bool cppVar_28517 = (cppVar_28516 == 1);
	BIT_VEC cppVar_28518 = PC + 1;
	cppVar_28518 = (cppVar_28518 & cppMask_un_16_);
	BIT_VEC cppVar_28519 = ROM.rd(cppVar_28518);
	BIT_VEC cppVar_28520 = (cppVar_28519 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28521 = (cppVar_28520 << 3) | 0;
	cppVar_28521 = (cppVar_28521 & cppMask_un_8_);
	BIT_VEC cppVar_28522 = PC + 1;
	cppVar_28522 = (cppVar_28522 & cppMask_un_16_);
	BIT_VEC cppVar_28523 = ROM.rd(cppVar_28522);
	BIT_VEC cppVar_28524 = (cppVar_28523 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28525 = (cppVar_28524 & cppMask_un_5_);
	BIT_VEC cppVar_28526 = cppVar_28525 + 32;
	cppVar_28526 = (cppVar_28526 & cppMask_un_8_);
	BIT_VEC cppVar_28527 = (cppVar_28517) ? cppVar_28521 : cppVar_28526;
	bool cppVar_28529 = (cppVar_28527 == 136);
	BIT_VEC cppVar_28530 = PC + 1;
	cppVar_28530 = (cppVar_28530 & cppMask_un_16_);
	BIT_VEC cppVar_28531 = ROM.rd(cppVar_28530);
	BIT_VEC cppVar_28532 = (cppVar_28531 >> 7) & cppMask_un_1_;
	bool cppVar_28533 = (cppVar_28532 == 1);
	BIT_VEC cppVar_28534 = PC + 1;
	cppVar_28534 = (cppVar_28534 & cppMask_un_16_);
	BIT_VEC cppVar_28535 = ROM.rd(cppVar_28534);
	BIT_VEC cppVar_28536 = (cppVar_28535 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28537 = (cppVar_28536 << 3) | 0;
	cppVar_28537 = (cppVar_28537 & cppMask_un_8_);
	BIT_VEC cppVar_28538 = PC + 1;
	cppVar_28538 = (cppVar_28538 & cppMask_un_16_);
	BIT_VEC cppVar_28539 = ROM.rd(cppVar_28538);
	BIT_VEC cppVar_28540 = (cppVar_28539 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28541 = (cppVar_28540 & cppMask_un_5_);
	BIT_VEC cppVar_28542 = cppVar_28541 + 32;
	cppVar_28542 = (cppVar_28542 & cppMask_un_8_);
	BIT_VEC cppVar_28543 = (cppVar_28533) ? cppVar_28537 : cppVar_28542;
	bool cppVar_28545 = (cppVar_28543 == 137);
	BIT_VEC cppVar_28546 = PC + 1;
	cppVar_28546 = (cppVar_28546 & cppMask_un_16_);
	BIT_VEC cppVar_28547 = ROM.rd(cppVar_28546);
	BIT_VEC cppVar_28548 = (cppVar_28547 >> 7) & cppMask_un_1_;
	bool cppVar_28549 = (cppVar_28548 == 1);
	BIT_VEC cppVar_28550 = PC + 1;
	cppVar_28550 = (cppVar_28550 & cppMask_un_16_);
	BIT_VEC cppVar_28551 = ROM.rd(cppVar_28550);
	BIT_VEC cppVar_28552 = (cppVar_28551 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28553 = (cppVar_28552 << 3) | 0;
	cppVar_28553 = (cppVar_28553 & cppMask_un_8_);
	BIT_VEC cppVar_28554 = PC + 1;
	cppVar_28554 = (cppVar_28554 & cppMask_un_16_);
	BIT_VEC cppVar_28555 = ROM.rd(cppVar_28554);
	BIT_VEC cppVar_28556 = (cppVar_28555 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28557 = (cppVar_28556 & cppMask_un_5_);
	BIT_VEC cppVar_28558 = cppVar_28557 + 32;
	cppVar_28558 = (cppVar_28558 & cppMask_un_8_);
	BIT_VEC cppVar_28559 = (cppVar_28549) ? cppVar_28553 : cppVar_28558;
	bool cppVar_28561 = (cppVar_28559 == 138);
	BIT_VEC cppVar_28562 = PC + 1;
	cppVar_28562 = (cppVar_28562 & cppMask_un_16_);
	BIT_VEC cppVar_28563 = ROM.rd(cppVar_28562);
	BIT_VEC cppVar_28564 = (cppVar_28563 >> 7) & cppMask_un_1_;
	bool cppVar_28565 = (cppVar_28564 == 1);
	BIT_VEC cppVar_28566 = PC + 1;
	cppVar_28566 = (cppVar_28566 & cppMask_un_16_);
	BIT_VEC cppVar_28567 = ROM.rd(cppVar_28566);
	BIT_VEC cppVar_28568 = (cppVar_28567 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28569 = (cppVar_28568 << 3) | 0;
	cppVar_28569 = (cppVar_28569 & cppMask_un_8_);
	BIT_VEC cppVar_28570 = PC + 1;
	cppVar_28570 = (cppVar_28570 & cppMask_un_16_);
	BIT_VEC cppVar_28571 = ROM.rd(cppVar_28570);
	BIT_VEC cppVar_28572 = (cppVar_28571 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28573 = (cppVar_28572 & cppMask_un_5_);
	BIT_VEC cppVar_28574 = cppVar_28573 + 32;
	cppVar_28574 = (cppVar_28574 & cppMask_un_8_);
	BIT_VEC cppVar_28575 = (cppVar_28565) ? cppVar_28569 : cppVar_28574;
	bool cppVar_28577 = (cppVar_28575 == 140);
	BIT_VEC cppVar_28578 = PC + 1;
	cppVar_28578 = (cppVar_28578 & cppMask_un_16_);
	BIT_VEC cppVar_28579 = ROM.rd(cppVar_28578);
	BIT_VEC cppVar_28580 = (cppVar_28579 >> 7) & cppMask_un_1_;
	bool cppVar_28581 = (cppVar_28580 == 1);
	BIT_VEC cppVar_28582 = PC + 1;
	cppVar_28582 = (cppVar_28582 & cppMask_un_16_);
	BIT_VEC cppVar_28583 = ROM.rd(cppVar_28582);
	BIT_VEC cppVar_28584 = (cppVar_28583 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28585 = (cppVar_28584 << 3) | 0;
	cppVar_28585 = (cppVar_28585 & cppMask_un_8_);
	BIT_VEC cppVar_28586 = PC + 1;
	cppVar_28586 = (cppVar_28586 & cppMask_un_16_);
	BIT_VEC cppVar_28587 = ROM.rd(cppVar_28586);
	BIT_VEC cppVar_28588 = (cppVar_28587 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28589 = (cppVar_28588 & cppMask_un_5_);
	BIT_VEC cppVar_28590 = cppVar_28589 + 32;
	cppVar_28590 = (cppVar_28590 & cppMask_un_8_);
	BIT_VEC cppVar_28591 = (cppVar_28581) ? cppVar_28585 : cppVar_28590;
	bool cppVar_28593 = (cppVar_28591 == 139);
	BIT_VEC cppVar_28594 = PC + 1;
	cppVar_28594 = (cppVar_28594 & cppMask_un_16_);
	BIT_VEC cppVar_28595 = ROM.rd(cppVar_28594);
	BIT_VEC cppVar_28596 = (cppVar_28595 >> 7) & cppMask_un_1_;
	bool cppVar_28597 = (cppVar_28596 == 1);
	BIT_VEC cppVar_28598 = PC + 1;
	cppVar_28598 = (cppVar_28598 & cppMask_un_16_);
	BIT_VEC cppVar_28599 = ROM.rd(cppVar_28598);
	BIT_VEC cppVar_28600 = (cppVar_28599 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28601 = (cppVar_28600 << 3) | 0;
	cppVar_28601 = (cppVar_28601 & cppMask_un_8_);
	BIT_VEC cppVar_28602 = PC + 1;
	cppVar_28602 = (cppVar_28602 & cppMask_un_16_);
	BIT_VEC cppVar_28603 = ROM.rd(cppVar_28602);
	BIT_VEC cppVar_28604 = (cppVar_28603 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28605 = (cppVar_28604 & cppMask_un_5_);
	BIT_VEC cppVar_28606 = cppVar_28605 + 32;
	cppVar_28606 = (cppVar_28606 & cppMask_un_8_);
	BIT_VEC cppVar_28607 = (cppVar_28597) ? cppVar_28601 : cppVar_28606;
	bool cppVar_28609 = (cppVar_28607 == 141);
	BIT_VEC cppVar_28610 = PC + 1;
	cppVar_28610 = (cppVar_28610 & cppMask_un_16_);
	BIT_VEC cppVar_28611 = ROM.rd(cppVar_28610);
	BIT_VEC cppVar_28612 = (cppVar_28611 >> 7) & cppMask_un_1_;
	bool cppVar_28613 = (cppVar_28612 == 1);
	BIT_VEC cppVar_28614 = PC + 1;
	cppVar_28614 = (cppVar_28614 & cppMask_un_16_);
	BIT_VEC cppVar_28615 = ROM.rd(cppVar_28614);
	BIT_VEC cppVar_28616 = (cppVar_28615 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28617 = (cppVar_28616 << 3) | 0;
	cppVar_28617 = (cppVar_28617 & cppMask_un_8_);
	BIT_VEC cppVar_28618 = PC + 1;
	cppVar_28618 = (cppVar_28618 & cppMask_un_16_);
	BIT_VEC cppVar_28619 = ROM.rd(cppVar_28618);
	BIT_VEC cppVar_28620 = (cppVar_28619 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28621 = (cppVar_28620 & cppMask_un_5_);
	BIT_VEC cppVar_28622 = cppVar_28621 + 32;
	cppVar_28622 = (cppVar_28622 & cppMask_un_8_);
	BIT_VEC cppVar_28623 = (cppVar_28613) ? cppVar_28617 : cppVar_28622;
	bool cppVar_28625 = (cppVar_28623 == 144);
	BIT_VEC cppVar_28626 = PC + 1;
	cppVar_28626 = (cppVar_28626 & cppMask_un_16_);
	BIT_VEC cppVar_28627 = ROM.rd(cppVar_28626);
	BIT_VEC cppVar_28628 = (cppVar_28627 >> 7) & cppMask_un_1_;
	bool cppVar_28629 = (cppVar_28628 == 1);
	BIT_VEC cppVar_28630 = PC + 1;
	cppVar_28630 = (cppVar_28630 & cppMask_un_16_);
	BIT_VEC cppVar_28631 = ROM.rd(cppVar_28630);
	BIT_VEC cppVar_28632 = (cppVar_28631 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28633 = (cppVar_28632 << 3) | 0;
	cppVar_28633 = (cppVar_28633 & cppMask_un_8_);
	BIT_VEC cppVar_28634 = PC + 1;
	cppVar_28634 = (cppVar_28634 & cppMask_un_16_);
	BIT_VEC cppVar_28635 = ROM.rd(cppVar_28634);
	BIT_VEC cppVar_28636 = (cppVar_28635 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28637 = (cppVar_28636 & cppMask_un_5_);
	BIT_VEC cppVar_28638 = cppVar_28637 + 32;
	cppVar_28638 = (cppVar_28638 & cppMask_un_8_);
	BIT_VEC cppVar_28639 = (cppVar_28629) ? cppVar_28633 : cppVar_28638;
	bool cppVar_28641 = (cppVar_28639 == 152);
	BIT_VEC cppVar_28642 = PC + 1;
	cppVar_28642 = (cppVar_28642 & cppMask_un_16_);
	BIT_VEC cppVar_28643 = ROM.rd(cppVar_28642);
	BIT_VEC cppVar_28644 = (cppVar_28643 >> 7) & cppMask_un_1_;
	bool cppVar_28645 = (cppVar_28644 == 1);
	BIT_VEC cppVar_28646 = PC + 1;
	cppVar_28646 = (cppVar_28646 & cppMask_un_16_);
	BIT_VEC cppVar_28647 = ROM.rd(cppVar_28646);
	BIT_VEC cppVar_28648 = (cppVar_28647 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28649 = (cppVar_28648 << 3) | 0;
	cppVar_28649 = (cppVar_28649 & cppMask_un_8_);
	BIT_VEC cppVar_28650 = PC + 1;
	cppVar_28650 = (cppVar_28650 & cppMask_un_16_);
	BIT_VEC cppVar_28651 = ROM.rd(cppVar_28650);
	BIT_VEC cppVar_28652 = (cppVar_28651 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28653 = (cppVar_28652 & cppMask_un_5_);
	BIT_VEC cppVar_28654 = cppVar_28653 + 32;
	cppVar_28654 = (cppVar_28654 & cppMask_un_8_);
	BIT_VEC cppVar_28655 = (cppVar_28645) ? cppVar_28649 : cppVar_28654;
	bool cppVar_28657 = (cppVar_28655 == 153);
	BIT_VEC cppVar_28658 = PC + 1;
	cppVar_28658 = (cppVar_28658 & cppMask_un_16_);
	BIT_VEC cppVar_28659 = ROM.rd(cppVar_28658);
	BIT_VEC cppVar_28660 = (cppVar_28659 >> 7) & cppMask_un_1_;
	bool cppVar_28661 = (cppVar_28660 == 1);
	BIT_VEC cppVar_28662 = PC + 1;
	cppVar_28662 = (cppVar_28662 & cppMask_un_16_);
	BIT_VEC cppVar_28663 = ROM.rd(cppVar_28662);
	BIT_VEC cppVar_28664 = (cppVar_28663 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28665 = (cppVar_28664 << 3) | 0;
	cppVar_28665 = (cppVar_28665 & cppMask_un_8_);
	BIT_VEC cppVar_28666 = PC + 1;
	cppVar_28666 = (cppVar_28666 & cppMask_un_16_);
	BIT_VEC cppVar_28667 = ROM.rd(cppVar_28666);
	BIT_VEC cppVar_28668 = (cppVar_28667 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28669 = (cppVar_28668 & cppMask_un_5_);
	BIT_VEC cppVar_28670 = cppVar_28669 + 32;
	cppVar_28670 = (cppVar_28670 & cppMask_un_8_);
	BIT_VEC cppVar_28671 = (cppVar_28661) ? cppVar_28665 : cppVar_28670;
	bool cppVar_28673 = (cppVar_28671 == 160);
	BIT_VEC cppVar_28674 = PC + 1;
	cppVar_28674 = (cppVar_28674 & cppMask_un_16_);
	BIT_VEC cppVar_28675 = ROM.rd(cppVar_28674);
	BIT_VEC cppVar_28676 = (cppVar_28675 >> 7) & cppMask_un_1_;
	bool cppVar_28677 = (cppVar_28676 == 1);
	BIT_VEC cppVar_28678 = PC + 1;
	cppVar_28678 = (cppVar_28678 & cppMask_un_16_);
	BIT_VEC cppVar_28679 = ROM.rd(cppVar_28678);
	BIT_VEC cppVar_28680 = (cppVar_28679 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28681 = (cppVar_28680 << 3) | 0;
	cppVar_28681 = (cppVar_28681 & cppMask_un_8_);
	BIT_VEC cppVar_28682 = PC + 1;
	cppVar_28682 = (cppVar_28682 & cppMask_un_16_);
	BIT_VEC cppVar_28683 = ROM.rd(cppVar_28682);
	BIT_VEC cppVar_28684 = (cppVar_28683 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28685 = (cppVar_28684 & cppMask_un_5_);
	BIT_VEC cppVar_28686 = cppVar_28685 + 32;
	cppVar_28686 = (cppVar_28686 & cppMask_un_8_);
	BIT_VEC cppVar_28687 = (cppVar_28677) ? cppVar_28681 : cppVar_28686;
	bool cppVar_28689 = (cppVar_28687 == 168);
	BIT_VEC cppVar_28690 = PC + 1;
	cppVar_28690 = (cppVar_28690 & cppMask_un_16_);
	BIT_VEC cppVar_28691 = ROM.rd(cppVar_28690);
	BIT_VEC cppVar_28692 = (cppVar_28691 >> 7) & cppMask_un_1_;
	bool cppVar_28693 = (cppVar_28692 == 1);
	BIT_VEC cppVar_28694 = PC + 1;
	cppVar_28694 = (cppVar_28694 & cppMask_un_16_);
	BIT_VEC cppVar_28695 = ROM.rd(cppVar_28694);
	BIT_VEC cppVar_28696 = (cppVar_28695 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28697 = (cppVar_28696 << 3) | 0;
	cppVar_28697 = (cppVar_28697 & cppMask_un_8_);
	BIT_VEC cppVar_28698 = PC + 1;
	cppVar_28698 = (cppVar_28698 & cppMask_un_16_);
	BIT_VEC cppVar_28699 = ROM.rd(cppVar_28698);
	BIT_VEC cppVar_28700 = (cppVar_28699 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28701 = (cppVar_28700 & cppMask_un_5_);
	BIT_VEC cppVar_28702 = cppVar_28701 + 32;
	cppVar_28702 = (cppVar_28702 & cppMask_un_8_);
	BIT_VEC cppVar_28703 = (cppVar_28693) ? cppVar_28697 : cppVar_28702;
	bool cppVar_28705 = (cppVar_28703 == 176);
	BIT_VEC cppVar_28706 = PC + 1;
	cppVar_28706 = (cppVar_28706 & cppMask_un_16_);
	BIT_VEC cppVar_28707 = ROM.rd(cppVar_28706);
	BIT_VEC cppVar_28708 = (cppVar_28707 >> 7) & cppMask_un_1_;
	bool cppVar_28709 = (cppVar_28708 == 1);
	BIT_VEC cppVar_28710 = PC + 1;
	cppVar_28710 = (cppVar_28710 & cppMask_un_16_);
	BIT_VEC cppVar_28711 = ROM.rd(cppVar_28710);
	BIT_VEC cppVar_28712 = (cppVar_28711 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28713 = (cppVar_28712 << 3) | 0;
	cppVar_28713 = (cppVar_28713 & cppMask_un_8_);
	BIT_VEC cppVar_28714 = PC + 1;
	cppVar_28714 = (cppVar_28714 & cppMask_un_16_);
	BIT_VEC cppVar_28715 = ROM.rd(cppVar_28714);
	BIT_VEC cppVar_28716 = (cppVar_28715 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28717 = (cppVar_28716 & cppMask_un_5_);
	BIT_VEC cppVar_28718 = cppVar_28717 + 32;
	cppVar_28718 = (cppVar_28718 & cppMask_un_8_);
	BIT_VEC cppVar_28719 = (cppVar_28709) ? cppVar_28713 : cppVar_28718;
	bool cppVar_28721 = (cppVar_28719 == 184);
	BIT_VEC cppVar_28722 = PC + 1;
	cppVar_28722 = (cppVar_28722 & cppMask_un_16_);
	BIT_VEC cppVar_28723 = ROM.rd(cppVar_28722);
	BIT_VEC cppVar_28724 = (cppVar_28723 >> 7) & cppMask_un_1_;
	bool cppVar_28725 = (cppVar_28724 == 1);
	BIT_VEC cppVar_28726 = PC + 1;
	cppVar_28726 = (cppVar_28726 & cppMask_un_16_);
	BIT_VEC cppVar_28727 = ROM.rd(cppVar_28726);
	BIT_VEC cppVar_28728 = (cppVar_28727 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28729 = (cppVar_28728 << 3) | 0;
	cppVar_28729 = (cppVar_28729 & cppMask_un_8_);
	BIT_VEC cppVar_28730 = PC + 1;
	cppVar_28730 = (cppVar_28730 & cppMask_un_16_);
	BIT_VEC cppVar_28731 = ROM.rd(cppVar_28730);
	BIT_VEC cppVar_28732 = (cppVar_28731 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28733 = (cppVar_28732 & cppMask_un_5_);
	BIT_VEC cppVar_28734 = cppVar_28733 + 32;
	cppVar_28734 = (cppVar_28734 & cppMask_un_8_);
	BIT_VEC cppVar_28735 = (cppVar_28725) ? cppVar_28729 : cppVar_28734;
	bool cppVar_28737 = (cppVar_28735 == 208);
	BIT_VEC cppVar_28738 = PC + 1;
	cppVar_28738 = (cppVar_28738 & cppMask_un_16_);
	BIT_VEC cppVar_28739 = ROM.rd(cppVar_28738);
	BIT_VEC cppVar_28740 = (cppVar_28739 >> 7) & cppMask_un_1_;
	bool cppVar_28741 = (cppVar_28740 == 1);
	BIT_VEC cppVar_28742 = PC + 1;
	cppVar_28742 = (cppVar_28742 & cppMask_un_16_);
	BIT_VEC cppVar_28743 = ROM.rd(cppVar_28742);
	BIT_VEC cppVar_28744 = (cppVar_28743 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28745 = (cppVar_28744 << 3) | 0;
	cppVar_28745 = (cppVar_28745 & cppMask_un_8_);
	BIT_VEC cppVar_28746 = PC + 1;
	cppVar_28746 = (cppVar_28746 & cppMask_un_16_);
	BIT_VEC cppVar_28747 = ROM.rd(cppVar_28746);
	BIT_VEC cppVar_28748 = (cppVar_28747 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28749 = (cppVar_28748 & cppMask_un_5_);
	BIT_VEC cppVar_28750 = cppVar_28749 + 32;
	cppVar_28750 = (cppVar_28750 & cppMask_un_8_);
	BIT_VEC cppVar_28751 = (cppVar_28741) ? cppVar_28745 : cppVar_28750;
	bool cppVar_28753 = (cppVar_28751 == 224);
	BIT_VEC cppVar_28754 = PC + 1;
	cppVar_28754 = (cppVar_28754 & cppMask_un_16_);
	BIT_VEC cppVar_28755 = ROM.rd(cppVar_28754);
	BIT_VEC cppVar_28756 = (cppVar_28755 >> 7) & cppMask_un_1_;
	bool cppVar_28757 = (cppVar_28756 == 1);
	BIT_VEC cppVar_28758 = PC + 1;
	cppVar_28758 = (cppVar_28758 & cppMask_un_16_);
	BIT_VEC cppVar_28759 = ROM.rd(cppVar_28758);
	BIT_VEC cppVar_28760 = (cppVar_28759 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28761 = (cppVar_28760 << 3) | 0;
	cppVar_28761 = (cppVar_28761 & cppMask_un_8_);
	BIT_VEC cppVar_28762 = PC + 1;
	cppVar_28762 = (cppVar_28762 & cppMask_un_16_);
	BIT_VEC cppVar_28763 = ROM.rd(cppVar_28762);
	BIT_VEC cppVar_28764 = (cppVar_28763 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_28765 = (cppVar_28764 & cppMask_un_5_);
	BIT_VEC cppVar_28766 = cppVar_28765 + 32;
	cppVar_28766 = (cppVar_28766 & cppMask_un_8_);
	BIT_VEC cppVar_28767 = (cppVar_28757) ? cppVar_28761 : cppVar_28766;
	bool cppVar_28769 = (cppVar_28767 == 240);
	BIT_VEC cppVar_28771 = (cppVar_28769) ? B : 0;
	BIT_VEC cppVar_28772 = (cppVar_28753) ? ACC : cppVar_28771;
	BIT_VEC cppVar_28773 = (cppVar_28737) ? PSW : cppVar_28772;
	BIT_VEC cppVar_28774 = (cppVar_28721) ? IP : cppVar_28773;
	BIT_VEC cppVar_28775 = (cppVar_28705) ? P3 : cppVar_28774;
	BIT_VEC cppVar_28776 = (cppVar_28689) ? IE : cppVar_28775;
	BIT_VEC cppVar_28777 = (cppVar_28673) ? P2 : cppVar_28776;
	BIT_VEC cppVar_28778 = (cppVar_28657) ? SBUF : cppVar_28777;
	BIT_VEC cppVar_28779 = (cppVar_28641) ? SCON : cppVar_28778;
	BIT_VEC cppVar_28780 = (cppVar_28625) ? P1 : cppVar_28779;
	BIT_VEC cppVar_28781 = (cppVar_28609) ? TH1 : cppVar_28780;
	BIT_VEC cppVar_28782 = (cppVar_28593) ? TL1 : cppVar_28781;
	BIT_VEC cppVar_28783 = (cppVar_28577) ? TH0 : cppVar_28782;
	BIT_VEC cppVar_28784 = (cppVar_28561) ? TL0 : cppVar_28783;
	BIT_VEC cppVar_28785 = (cppVar_28545) ? TMOD : cppVar_28784;
	BIT_VEC cppVar_28786 = (cppVar_28529) ? TCON : cppVar_28785;
	BIT_VEC cppVar_28787 = (cppVar_28513) ? PCON : cppVar_28786;
	BIT_VEC cppVar_28788 = (cppVar_28497) ? DPH : cppVar_28787;
	BIT_VEC cppVar_28789 = (cppVar_28481) ? DPL : cppVar_28788;
	BIT_VEC cppVar_28790 = (cppVar_28465) ? SP : cppVar_28789;
	BIT_VEC cppVar_28791 = (cppVar_28449) ? P0 : cppVar_28790;
	BIT_VEC cppVar_28792 = (cppVar_28418) ? cppVar_28433 : cppVar_28791;
	BIT_VEC cppVar_28793 = cppVar_28401 & cppVar_28792;
	BIT_VEC cppVar_28794 = (PSW >> 7) & cppMask_un_1_;
	BIT_VEC cppVar_28795 = (cppVar_28794 & cppMask_un_1_);
	BIT_VEC cppVar_28796 = PC + 1;
	cppVar_28796 = (cppVar_28796 & cppMask_un_16_);
	BIT_VEC cppVar_28797 = ROM.rd(cppVar_28796);
	BIT_VEC cppVar_28798 = (cppVar_28797 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_28799 = (cppVar_28798 & cppMask_un_3_);
	BIT_VEC cppVar_28800 = cppVar_28795 << static_cast<unsigned>(cppVar_28799);
	cppVar_28800 = (cppVar_28800 & cppMask_un_8_);
	BIT_VEC cppVar_28801 = cppVar_28793 | cppVar_28800;
	BIT_VEC cppVar_28802 = (cppVar_28394) ? cppVar_28801 : P1;
	BIT_VEC cppVar_28803 = ROM.rd(PC);
	bool cppVar_28805 = (cppVar_28803 == 143);
	BIT_VEC cppVar_28807 = PC + 1;
	cppVar_28807 = (cppVar_28807 & cppMask_un_16_);
	BIT_VEC cppVar_28808 = ROM.rd(cppVar_28807);
	bool cppVar_28810 = (cppVar_28808 == 144);
	BIT_VEC cppVar_28812 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28814 = (cppVar_28812 << 3) | 7;
	cppVar_28814 = (cppVar_28814 & cppMask_un_5_);
	BIT_VEC cppVar_28815 = (0 << 5) | cppVar_28814;
	cppVar_28815 = (cppVar_28815 & cppMask_un_8_);
	BIT_VEC cppVar_28816 = (cppVar_28815 >> 7) & cppMask_un_1_;
	bool cppVar_28818 = (cppVar_28816 == 0);
	BIT_VEC cppVar_28819 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28820 = (cppVar_28819 << 3) | 7;
	cppVar_28820 = (cppVar_28820 & cppMask_un_5_);
	BIT_VEC cppVar_28821 = (0 << 5) | cppVar_28820;
	cppVar_28821 = (cppVar_28821 & cppMask_un_8_);
	BIT_VEC cppVar_28822 = IRAM.rd(cppVar_28821);
	BIT_VEC cppVar_28823 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28824 = (cppVar_28823 << 3) | 7;
	cppVar_28824 = (cppVar_28824 & cppMask_un_5_);
	BIT_VEC cppVar_28825 = (0 << 5) | cppVar_28824;
	cppVar_28825 = (cppVar_28825 & cppMask_un_8_);
	bool cppVar_28827 = (cppVar_28825 == 128);
	BIT_VEC cppVar_28828 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28829 = (cppVar_28828 << 3) | 7;
	cppVar_28829 = (cppVar_28829 & cppMask_un_5_);
	BIT_VEC cppVar_28830 = (0 << 5) | cppVar_28829;
	cppVar_28830 = (cppVar_28830 & cppMask_un_8_);
	bool cppVar_28832 = (cppVar_28830 == 129);
	BIT_VEC cppVar_28833 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28834 = (cppVar_28833 << 3) | 7;
	cppVar_28834 = (cppVar_28834 & cppMask_un_5_);
	BIT_VEC cppVar_28835 = (0 << 5) | cppVar_28834;
	cppVar_28835 = (cppVar_28835 & cppMask_un_8_);
	bool cppVar_28837 = (cppVar_28835 == 130);
	BIT_VEC cppVar_28838 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28839 = (cppVar_28838 << 3) | 7;
	cppVar_28839 = (cppVar_28839 & cppMask_un_5_);
	BIT_VEC cppVar_28840 = (0 << 5) | cppVar_28839;
	cppVar_28840 = (cppVar_28840 & cppMask_un_8_);
	bool cppVar_28842 = (cppVar_28840 == 131);
	BIT_VEC cppVar_28843 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28844 = (cppVar_28843 << 3) | 7;
	cppVar_28844 = (cppVar_28844 & cppMask_un_5_);
	BIT_VEC cppVar_28845 = (0 << 5) | cppVar_28844;
	cppVar_28845 = (cppVar_28845 & cppMask_un_8_);
	bool cppVar_28847 = (cppVar_28845 == 135);
	BIT_VEC cppVar_28848 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28849 = (cppVar_28848 << 3) | 7;
	cppVar_28849 = (cppVar_28849 & cppMask_un_5_);
	BIT_VEC cppVar_28850 = (0 << 5) | cppVar_28849;
	cppVar_28850 = (cppVar_28850 & cppMask_un_8_);
	bool cppVar_28852 = (cppVar_28850 == 136);
	BIT_VEC cppVar_28853 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28854 = (cppVar_28853 << 3) | 7;
	cppVar_28854 = (cppVar_28854 & cppMask_un_5_);
	BIT_VEC cppVar_28855 = (0 << 5) | cppVar_28854;
	cppVar_28855 = (cppVar_28855 & cppMask_un_8_);
	bool cppVar_28857 = (cppVar_28855 == 137);
	BIT_VEC cppVar_28858 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28859 = (cppVar_28858 << 3) | 7;
	cppVar_28859 = (cppVar_28859 & cppMask_un_5_);
	BIT_VEC cppVar_28860 = (0 << 5) | cppVar_28859;
	cppVar_28860 = (cppVar_28860 & cppMask_un_8_);
	bool cppVar_28862 = (cppVar_28860 == 138);
	BIT_VEC cppVar_28863 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28864 = (cppVar_28863 << 3) | 7;
	cppVar_28864 = (cppVar_28864 & cppMask_un_5_);
	BIT_VEC cppVar_28865 = (0 << 5) | cppVar_28864;
	cppVar_28865 = (cppVar_28865 & cppMask_un_8_);
	bool cppVar_28867 = (cppVar_28865 == 140);
	BIT_VEC cppVar_28868 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28869 = (cppVar_28868 << 3) | 7;
	cppVar_28869 = (cppVar_28869 & cppMask_un_5_);
	BIT_VEC cppVar_28870 = (0 << 5) | cppVar_28869;
	cppVar_28870 = (cppVar_28870 & cppMask_un_8_);
	bool cppVar_28872 = (cppVar_28870 == 139);
	BIT_VEC cppVar_28873 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28874 = (cppVar_28873 << 3) | 7;
	cppVar_28874 = (cppVar_28874 & cppMask_un_5_);
	BIT_VEC cppVar_28875 = (0 << 5) | cppVar_28874;
	cppVar_28875 = (cppVar_28875 & cppMask_un_8_);
	bool cppVar_28877 = (cppVar_28875 == 141);
	BIT_VEC cppVar_28878 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28879 = (cppVar_28878 << 3) | 7;
	cppVar_28879 = (cppVar_28879 & cppMask_un_5_);
	BIT_VEC cppVar_28880 = (0 << 5) | cppVar_28879;
	cppVar_28880 = (cppVar_28880 & cppMask_un_8_);
	bool cppVar_28882 = (cppVar_28880 == 144);
	BIT_VEC cppVar_28883 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28884 = (cppVar_28883 << 3) | 7;
	cppVar_28884 = (cppVar_28884 & cppMask_un_5_);
	BIT_VEC cppVar_28885 = (0 << 5) | cppVar_28884;
	cppVar_28885 = (cppVar_28885 & cppMask_un_8_);
	bool cppVar_28887 = (cppVar_28885 == 152);
	BIT_VEC cppVar_28888 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28889 = (cppVar_28888 << 3) | 7;
	cppVar_28889 = (cppVar_28889 & cppMask_un_5_);
	BIT_VEC cppVar_28890 = (0 << 5) | cppVar_28889;
	cppVar_28890 = (cppVar_28890 & cppMask_un_8_);
	bool cppVar_28892 = (cppVar_28890 == 153);
	BIT_VEC cppVar_28893 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28894 = (cppVar_28893 << 3) | 7;
	cppVar_28894 = (cppVar_28894 & cppMask_un_5_);
	BIT_VEC cppVar_28895 = (0 << 5) | cppVar_28894;
	cppVar_28895 = (cppVar_28895 & cppMask_un_8_);
	bool cppVar_28897 = (cppVar_28895 == 160);
	BIT_VEC cppVar_28898 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28899 = (cppVar_28898 << 3) | 7;
	cppVar_28899 = (cppVar_28899 & cppMask_un_5_);
	BIT_VEC cppVar_28900 = (0 << 5) | cppVar_28899;
	cppVar_28900 = (cppVar_28900 & cppMask_un_8_);
	bool cppVar_28902 = (cppVar_28900 == 168);
	BIT_VEC cppVar_28903 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28904 = (cppVar_28903 << 3) | 7;
	cppVar_28904 = (cppVar_28904 & cppMask_un_5_);
	BIT_VEC cppVar_28905 = (0 << 5) | cppVar_28904;
	cppVar_28905 = (cppVar_28905 & cppMask_un_8_);
	bool cppVar_28907 = (cppVar_28905 == 176);
	BIT_VEC cppVar_28908 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28909 = (cppVar_28908 << 3) | 7;
	cppVar_28909 = (cppVar_28909 & cppMask_un_5_);
	BIT_VEC cppVar_28910 = (0 << 5) | cppVar_28909;
	cppVar_28910 = (cppVar_28910 & cppMask_un_8_);
	bool cppVar_28912 = (cppVar_28910 == 184);
	BIT_VEC cppVar_28913 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28914 = (cppVar_28913 << 3) | 7;
	cppVar_28914 = (cppVar_28914 & cppMask_un_5_);
	BIT_VEC cppVar_28915 = (0 << 5) | cppVar_28914;
	cppVar_28915 = (cppVar_28915 & cppMask_un_8_);
	bool cppVar_28917 = (cppVar_28915 == 208);
	BIT_VEC cppVar_28918 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28919 = (cppVar_28918 << 3) | 7;
	cppVar_28919 = (cppVar_28919 & cppMask_un_5_);
	BIT_VEC cppVar_28920 = (0 << 5) | cppVar_28919;
	cppVar_28920 = (cppVar_28920 & cppMask_un_8_);
	bool cppVar_28922 = (cppVar_28920 == 224);
	BIT_VEC cppVar_28923 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28924 = (cppVar_28923 << 3) | 7;
	cppVar_28924 = (cppVar_28924 & cppMask_un_5_);
	BIT_VEC cppVar_28925 = (0 << 5) | cppVar_28924;
	cppVar_28925 = (cppVar_28925 & cppMask_un_8_);
	bool cppVar_28927 = (cppVar_28925 == 240);
	BIT_VEC cppVar_28929 = (cppVar_28927) ? B : 0;
	BIT_VEC cppVar_28930 = (cppVar_28922) ? ACC : cppVar_28929;
	BIT_VEC cppVar_28931 = (cppVar_28917) ? PSW : cppVar_28930;
	BIT_VEC cppVar_28932 = (cppVar_28912) ? IP : cppVar_28931;
	BIT_VEC cppVar_28933 = (cppVar_28907) ? P3 : cppVar_28932;
	BIT_VEC cppVar_28934 = (cppVar_28902) ? IE : cppVar_28933;
	BIT_VEC cppVar_28935 = (cppVar_28897) ? P2 : cppVar_28934;
	BIT_VEC cppVar_28936 = (cppVar_28892) ? SBUF : cppVar_28935;
	BIT_VEC cppVar_28937 = (cppVar_28887) ? SCON : cppVar_28936;
	BIT_VEC cppVar_28938 = (cppVar_28882) ? P1 : cppVar_28937;
	BIT_VEC cppVar_28939 = (cppVar_28877) ? TH1 : cppVar_28938;
	BIT_VEC cppVar_28940 = (cppVar_28872) ? TL1 : cppVar_28939;
	BIT_VEC cppVar_28941 = (cppVar_28867) ? TH0 : cppVar_28940;
	BIT_VEC cppVar_28942 = (cppVar_28862) ? TL0 : cppVar_28941;
	BIT_VEC cppVar_28943 = (cppVar_28857) ? TMOD : cppVar_28942;
	BIT_VEC cppVar_28944 = (cppVar_28852) ? TCON : cppVar_28943;
	BIT_VEC cppVar_28945 = (cppVar_28847) ? PCON : cppVar_28944;
	BIT_VEC cppVar_28946 = (cppVar_28842) ? DPH : cppVar_28945;
	BIT_VEC cppVar_28947 = (cppVar_28837) ? DPL : cppVar_28946;
	BIT_VEC cppVar_28948 = (cppVar_28832) ? SP : cppVar_28947;
	BIT_VEC cppVar_28949 = (cppVar_28827) ? P0 : cppVar_28948;
	BIT_VEC cppVar_28950 = (cppVar_28818) ? cppVar_28822 : cppVar_28949;
	BIT_VEC cppVar_28951 = (cppVar_28810) ? cppVar_28950 : P1;
	BIT_VEC cppVar_28952 = ROM.rd(PC);
	bool cppVar_28954 = (cppVar_28952 == 142);
	BIT_VEC cppVar_28956 = PC + 1;
	cppVar_28956 = (cppVar_28956 & cppMask_un_16_);
	BIT_VEC cppVar_28957 = ROM.rd(cppVar_28956);
	bool cppVar_28959 = (cppVar_28957 == 144);
	BIT_VEC cppVar_28961 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28963 = (cppVar_28961 << 3) | 6;
	cppVar_28963 = (cppVar_28963 & cppMask_un_5_);
	BIT_VEC cppVar_28964 = (0 << 5) | cppVar_28963;
	cppVar_28964 = (cppVar_28964 & cppMask_un_8_);
	BIT_VEC cppVar_28965 = (cppVar_28964 >> 7) & cppMask_un_1_;
	bool cppVar_28967 = (cppVar_28965 == 0);
	BIT_VEC cppVar_28968 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28969 = (cppVar_28968 << 3) | 6;
	cppVar_28969 = (cppVar_28969 & cppMask_un_5_);
	BIT_VEC cppVar_28970 = (0 << 5) | cppVar_28969;
	cppVar_28970 = (cppVar_28970 & cppMask_un_8_);
	BIT_VEC cppVar_28971 = IRAM.rd(cppVar_28970);
	BIT_VEC cppVar_28972 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28973 = (cppVar_28972 << 3) | 6;
	cppVar_28973 = (cppVar_28973 & cppMask_un_5_);
	BIT_VEC cppVar_28974 = (0 << 5) | cppVar_28973;
	cppVar_28974 = (cppVar_28974 & cppMask_un_8_);
	bool cppVar_28976 = (cppVar_28974 == 128);
	BIT_VEC cppVar_28977 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28978 = (cppVar_28977 << 3) | 6;
	cppVar_28978 = (cppVar_28978 & cppMask_un_5_);
	BIT_VEC cppVar_28979 = (0 << 5) | cppVar_28978;
	cppVar_28979 = (cppVar_28979 & cppMask_un_8_);
	bool cppVar_28981 = (cppVar_28979 == 129);
	BIT_VEC cppVar_28982 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28983 = (cppVar_28982 << 3) | 6;
	cppVar_28983 = (cppVar_28983 & cppMask_un_5_);
	BIT_VEC cppVar_28984 = (0 << 5) | cppVar_28983;
	cppVar_28984 = (cppVar_28984 & cppMask_un_8_);
	bool cppVar_28986 = (cppVar_28984 == 130);
	BIT_VEC cppVar_28987 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28988 = (cppVar_28987 << 3) | 6;
	cppVar_28988 = (cppVar_28988 & cppMask_un_5_);
	BIT_VEC cppVar_28989 = (0 << 5) | cppVar_28988;
	cppVar_28989 = (cppVar_28989 & cppMask_un_8_);
	bool cppVar_28991 = (cppVar_28989 == 131);
	BIT_VEC cppVar_28992 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28993 = (cppVar_28992 << 3) | 6;
	cppVar_28993 = (cppVar_28993 & cppMask_un_5_);
	BIT_VEC cppVar_28994 = (0 << 5) | cppVar_28993;
	cppVar_28994 = (cppVar_28994 & cppMask_un_8_);
	bool cppVar_28996 = (cppVar_28994 == 135);
	BIT_VEC cppVar_28997 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_28998 = (cppVar_28997 << 3) | 6;
	cppVar_28998 = (cppVar_28998 & cppMask_un_5_);
	BIT_VEC cppVar_28999 = (0 << 5) | cppVar_28998;
	cppVar_28999 = (cppVar_28999 & cppMask_un_8_);
	bool cppVar_29001 = (cppVar_28999 == 136);
	BIT_VEC cppVar_29002 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29003 = (cppVar_29002 << 3) | 6;
	cppVar_29003 = (cppVar_29003 & cppMask_un_5_);
	BIT_VEC cppVar_29004 = (0 << 5) | cppVar_29003;
	cppVar_29004 = (cppVar_29004 & cppMask_un_8_);
	bool cppVar_29006 = (cppVar_29004 == 137);
	BIT_VEC cppVar_29007 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29008 = (cppVar_29007 << 3) | 6;
	cppVar_29008 = (cppVar_29008 & cppMask_un_5_);
	BIT_VEC cppVar_29009 = (0 << 5) | cppVar_29008;
	cppVar_29009 = (cppVar_29009 & cppMask_un_8_);
	bool cppVar_29011 = (cppVar_29009 == 138);
	BIT_VEC cppVar_29012 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29013 = (cppVar_29012 << 3) | 6;
	cppVar_29013 = (cppVar_29013 & cppMask_un_5_);
	BIT_VEC cppVar_29014 = (0 << 5) | cppVar_29013;
	cppVar_29014 = (cppVar_29014 & cppMask_un_8_);
	bool cppVar_29016 = (cppVar_29014 == 140);
	BIT_VEC cppVar_29017 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29018 = (cppVar_29017 << 3) | 6;
	cppVar_29018 = (cppVar_29018 & cppMask_un_5_);
	BIT_VEC cppVar_29019 = (0 << 5) | cppVar_29018;
	cppVar_29019 = (cppVar_29019 & cppMask_un_8_);
	bool cppVar_29021 = (cppVar_29019 == 139);
	BIT_VEC cppVar_29022 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29023 = (cppVar_29022 << 3) | 6;
	cppVar_29023 = (cppVar_29023 & cppMask_un_5_);
	BIT_VEC cppVar_29024 = (0 << 5) | cppVar_29023;
	cppVar_29024 = (cppVar_29024 & cppMask_un_8_);
	bool cppVar_29026 = (cppVar_29024 == 141);
	BIT_VEC cppVar_29027 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29028 = (cppVar_29027 << 3) | 6;
	cppVar_29028 = (cppVar_29028 & cppMask_un_5_);
	BIT_VEC cppVar_29029 = (0 << 5) | cppVar_29028;
	cppVar_29029 = (cppVar_29029 & cppMask_un_8_);
	bool cppVar_29031 = (cppVar_29029 == 144);
	BIT_VEC cppVar_29032 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29033 = (cppVar_29032 << 3) | 6;
	cppVar_29033 = (cppVar_29033 & cppMask_un_5_);
	BIT_VEC cppVar_29034 = (0 << 5) | cppVar_29033;
	cppVar_29034 = (cppVar_29034 & cppMask_un_8_);
	bool cppVar_29036 = (cppVar_29034 == 152);
	BIT_VEC cppVar_29037 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29038 = (cppVar_29037 << 3) | 6;
	cppVar_29038 = (cppVar_29038 & cppMask_un_5_);
	BIT_VEC cppVar_29039 = (0 << 5) | cppVar_29038;
	cppVar_29039 = (cppVar_29039 & cppMask_un_8_);
	bool cppVar_29041 = (cppVar_29039 == 153);
	BIT_VEC cppVar_29042 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29043 = (cppVar_29042 << 3) | 6;
	cppVar_29043 = (cppVar_29043 & cppMask_un_5_);
	BIT_VEC cppVar_29044 = (0 << 5) | cppVar_29043;
	cppVar_29044 = (cppVar_29044 & cppMask_un_8_);
	bool cppVar_29046 = (cppVar_29044 == 160);
	BIT_VEC cppVar_29047 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29048 = (cppVar_29047 << 3) | 6;
	cppVar_29048 = (cppVar_29048 & cppMask_un_5_);
	BIT_VEC cppVar_29049 = (0 << 5) | cppVar_29048;
	cppVar_29049 = (cppVar_29049 & cppMask_un_8_);
	bool cppVar_29051 = (cppVar_29049 == 168);
	BIT_VEC cppVar_29052 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29053 = (cppVar_29052 << 3) | 6;
	cppVar_29053 = (cppVar_29053 & cppMask_un_5_);
	BIT_VEC cppVar_29054 = (0 << 5) | cppVar_29053;
	cppVar_29054 = (cppVar_29054 & cppMask_un_8_);
	bool cppVar_29056 = (cppVar_29054 == 176);
	BIT_VEC cppVar_29057 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29058 = (cppVar_29057 << 3) | 6;
	cppVar_29058 = (cppVar_29058 & cppMask_un_5_);
	BIT_VEC cppVar_29059 = (0 << 5) | cppVar_29058;
	cppVar_29059 = (cppVar_29059 & cppMask_un_8_);
	bool cppVar_29061 = (cppVar_29059 == 184);
	BIT_VEC cppVar_29062 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29063 = (cppVar_29062 << 3) | 6;
	cppVar_29063 = (cppVar_29063 & cppMask_un_5_);
	BIT_VEC cppVar_29064 = (0 << 5) | cppVar_29063;
	cppVar_29064 = (cppVar_29064 & cppMask_un_8_);
	bool cppVar_29066 = (cppVar_29064 == 208);
	BIT_VEC cppVar_29067 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29068 = (cppVar_29067 << 3) | 6;
	cppVar_29068 = (cppVar_29068 & cppMask_un_5_);
	BIT_VEC cppVar_29069 = (0 << 5) | cppVar_29068;
	cppVar_29069 = (cppVar_29069 & cppMask_un_8_);
	bool cppVar_29071 = (cppVar_29069 == 224);
	BIT_VEC cppVar_29072 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29073 = (cppVar_29072 << 3) | 6;
	cppVar_29073 = (cppVar_29073 & cppMask_un_5_);
	BIT_VEC cppVar_29074 = (0 << 5) | cppVar_29073;
	cppVar_29074 = (cppVar_29074 & cppMask_un_8_);
	bool cppVar_29076 = (cppVar_29074 == 240);
	BIT_VEC cppVar_29078 = (cppVar_29076) ? B : 0;
	BIT_VEC cppVar_29079 = (cppVar_29071) ? ACC : cppVar_29078;
	BIT_VEC cppVar_29080 = (cppVar_29066) ? PSW : cppVar_29079;
	BIT_VEC cppVar_29081 = (cppVar_29061) ? IP : cppVar_29080;
	BIT_VEC cppVar_29082 = (cppVar_29056) ? P3 : cppVar_29081;
	BIT_VEC cppVar_29083 = (cppVar_29051) ? IE : cppVar_29082;
	BIT_VEC cppVar_29084 = (cppVar_29046) ? P2 : cppVar_29083;
	BIT_VEC cppVar_29085 = (cppVar_29041) ? SBUF : cppVar_29084;
	BIT_VEC cppVar_29086 = (cppVar_29036) ? SCON : cppVar_29085;
	BIT_VEC cppVar_29087 = (cppVar_29031) ? P1 : cppVar_29086;
	BIT_VEC cppVar_29088 = (cppVar_29026) ? TH1 : cppVar_29087;
	BIT_VEC cppVar_29089 = (cppVar_29021) ? TL1 : cppVar_29088;
	BIT_VEC cppVar_29090 = (cppVar_29016) ? TH0 : cppVar_29089;
	BIT_VEC cppVar_29091 = (cppVar_29011) ? TL0 : cppVar_29090;
	BIT_VEC cppVar_29092 = (cppVar_29006) ? TMOD : cppVar_29091;
	BIT_VEC cppVar_29093 = (cppVar_29001) ? TCON : cppVar_29092;
	BIT_VEC cppVar_29094 = (cppVar_28996) ? PCON : cppVar_29093;
	BIT_VEC cppVar_29095 = (cppVar_28991) ? DPH : cppVar_29094;
	BIT_VEC cppVar_29096 = (cppVar_28986) ? DPL : cppVar_29095;
	BIT_VEC cppVar_29097 = (cppVar_28981) ? SP : cppVar_29096;
	BIT_VEC cppVar_29098 = (cppVar_28976) ? P0 : cppVar_29097;
	BIT_VEC cppVar_29099 = (cppVar_28967) ? cppVar_28971 : cppVar_29098;
	BIT_VEC cppVar_29100 = (cppVar_28959) ? cppVar_29099 : P1;
	BIT_VEC cppVar_29101 = ROM.rd(PC);
	bool cppVar_29103 = (cppVar_29101 == 141);
	BIT_VEC cppVar_29105 = PC + 1;
	cppVar_29105 = (cppVar_29105 & cppMask_un_16_);
	BIT_VEC cppVar_29106 = ROM.rd(cppVar_29105);
	bool cppVar_29108 = (cppVar_29106 == 144);
	BIT_VEC cppVar_29110 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29112 = (cppVar_29110 << 3) | 5;
	cppVar_29112 = (cppVar_29112 & cppMask_un_5_);
	BIT_VEC cppVar_29113 = (0 << 5) | cppVar_29112;
	cppVar_29113 = (cppVar_29113 & cppMask_un_8_);
	BIT_VEC cppVar_29114 = (cppVar_29113 >> 7) & cppMask_un_1_;
	bool cppVar_29116 = (cppVar_29114 == 0);
	BIT_VEC cppVar_29117 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29118 = (cppVar_29117 << 3) | 5;
	cppVar_29118 = (cppVar_29118 & cppMask_un_5_);
	BIT_VEC cppVar_29119 = (0 << 5) | cppVar_29118;
	cppVar_29119 = (cppVar_29119 & cppMask_un_8_);
	BIT_VEC cppVar_29120 = IRAM.rd(cppVar_29119);
	BIT_VEC cppVar_29121 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29122 = (cppVar_29121 << 3) | 5;
	cppVar_29122 = (cppVar_29122 & cppMask_un_5_);
	BIT_VEC cppVar_29123 = (0 << 5) | cppVar_29122;
	cppVar_29123 = (cppVar_29123 & cppMask_un_8_);
	bool cppVar_29125 = (cppVar_29123 == 128);
	BIT_VEC cppVar_29126 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29127 = (cppVar_29126 << 3) | 5;
	cppVar_29127 = (cppVar_29127 & cppMask_un_5_);
	BIT_VEC cppVar_29128 = (0 << 5) | cppVar_29127;
	cppVar_29128 = (cppVar_29128 & cppMask_un_8_);
	bool cppVar_29130 = (cppVar_29128 == 129);
	BIT_VEC cppVar_29131 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29132 = (cppVar_29131 << 3) | 5;
	cppVar_29132 = (cppVar_29132 & cppMask_un_5_);
	BIT_VEC cppVar_29133 = (0 << 5) | cppVar_29132;
	cppVar_29133 = (cppVar_29133 & cppMask_un_8_);
	bool cppVar_29135 = (cppVar_29133 == 130);
	BIT_VEC cppVar_29136 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29137 = (cppVar_29136 << 3) | 5;
	cppVar_29137 = (cppVar_29137 & cppMask_un_5_);
	BIT_VEC cppVar_29138 = (0 << 5) | cppVar_29137;
	cppVar_29138 = (cppVar_29138 & cppMask_un_8_);
	bool cppVar_29140 = (cppVar_29138 == 131);
	BIT_VEC cppVar_29141 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29142 = (cppVar_29141 << 3) | 5;
	cppVar_29142 = (cppVar_29142 & cppMask_un_5_);
	BIT_VEC cppVar_29143 = (0 << 5) | cppVar_29142;
	cppVar_29143 = (cppVar_29143 & cppMask_un_8_);
	bool cppVar_29145 = (cppVar_29143 == 135);
	BIT_VEC cppVar_29146 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29147 = (cppVar_29146 << 3) | 5;
	cppVar_29147 = (cppVar_29147 & cppMask_un_5_);
	BIT_VEC cppVar_29148 = (0 << 5) | cppVar_29147;
	cppVar_29148 = (cppVar_29148 & cppMask_un_8_);
	bool cppVar_29150 = (cppVar_29148 == 136);
	BIT_VEC cppVar_29151 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29152 = (cppVar_29151 << 3) | 5;
	cppVar_29152 = (cppVar_29152 & cppMask_un_5_);
	BIT_VEC cppVar_29153 = (0 << 5) | cppVar_29152;
	cppVar_29153 = (cppVar_29153 & cppMask_un_8_);
	bool cppVar_29155 = (cppVar_29153 == 137);
	BIT_VEC cppVar_29156 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29157 = (cppVar_29156 << 3) | 5;
	cppVar_29157 = (cppVar_29157 & cppMask_un_5_);
	BIT_VEC cppVar_29158 = (0 << 5) | cppVar_29157;
	cppVar_29158 = (cppVar_29158 & cppMask_un_8_);
	bool cppVar_29160 = (cppVar_29158 == 138);
	BIT_VEC cppVar_29161 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29162 = (cppVar_29161 << 3) | 5;
	cppVar_29162 = (cppVar_29162 & cppMask_un_5_);
	BIT_VEC cppVar_29163 = (0 << 5) | cppVar_29162;
	cppVar_29163 = (cppVar_29163 & cppMask_un_8_);
	bool cppVar_29165 = (cppVar_29163 == 140);
	BIT_VEC cppVar_29166 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29167 = (cppVar_29166 << 3) | 5;
	cppVar_29167 = (cppVar_29167 & cppMask_un_5_);
	BIT_VEC cppVar_29168 = (0 << 5) | cppVar_29167;
	cppVar_29168 = (cppVar_29168 & cppMask_un_8_);
	bool cppVar_29170 = (cppVar_29168 == 139);
	BIT_VEC cppVar_29171 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29172 = (cppVar_29171 << 3) | 5;
	cppVar_29172 = (cppVar_29172 & cppMask_un_5_);
	BIT_VEC cppVar_29173 = (0 << 5) | cppVar_29172;
	cppVar_29173 = (cppVar_29173 & cppMask_un_8_);
	bool cppVar_29175 = (cppVar_29173 == 141);
	BIT_VEC cppVar_29176 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29177 = (cppVar_29176 << 3) | 5;
	cppVar_29177 = (cppVar_29177 & cppMask_un_5_);
	BIT_VEC cppVar_29178 = (0 << 5) | cppVar_29177;
	cppVar_29178 = (cppVar_29178 & cppMask_un_8_);
	bool cppVar_29180 = (cppVar_29178 == 144);
	BIT_VEC cppVar_29181 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29182 = (cppVar_29181 << 3) | 5;
	cppVar_29182 = (cppVar_29182 & cppMask_un_5_);
	BIT_VEC cppVar_29183 = (0 << 5) | cppVar_29182;
	cppVar_29183 = (cppVar_29183 & cppMask_un_8_);
	bool cppVar_29185 = (cppVar_29183 == 152);
	BIT_VEC cppVar_29186 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29187 = (cppVar_29186 << 3) | 5;
	cppVar_29187 = (cppVar_29187 & cppMask_un_5_);
	BIT_VEC cppVar_29188 = (0 << 5) | cppVar_29187;
	cppVar_29188 = (cppVar_29188 & cppMask_un_8_);
	bool cppVar_29190 = (cppVar_29188 == 153);
	BIT_VEC cppVar_29191 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29192 = (cppVar_29191 << 3) | 5;
	cppVar_29192 = (cppVar_29192 & cppMask_un_5_);
	BIT_VEC cppVar_29193 = (0 << 5) | cppVar_29192;
	cppVar_29193 = (cppVar_29193 & cppMask_un_8_);
	bool cppVar_29195 = (cppVar_29193 == 160);
	BIT_VEC cppVar_29196 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29197 = (cppVar_29196 << 3) | 5;
	cppVar_29197 = (cppVar_29197 & cppMask_un_5_);
	BIT_VEC cppVar_29198 = (0 << 5) | cppVar_29197;
	cppVar_29198 = (cppVar_29198 & cppMask_un_8_);
	bool cppVar_29200 = (cppVar_29198 == 168);
	BIT_VEC cppVar_29201 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29202 = (cppVar_29201 << 3) | 5;
	cppVar_29202 = (cppVar_29202 & cppMask_un_5_);
	BIT_VEC cppVar_29203 = (0 << 5) | cppVar_29202;
	cppVar_29203 = (cppVar_29203 & cppMask_un_8_);
	bool cppVar_29205 = (cppVar_29203 == 176);
	BIT_VEC cppVar_29206 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29207 = (cppVar_29206 << 3) | 5;
	cppVar_29207 = (cppVar_29207 & cppMask_un_5_);
	BIT_VEC cppVar_29208 = (0 << 5) | cppVar_29207;
	cppVar_29208 = (cppVar_29208 & cppMask_un_8_);
	bool cppVar_29210 = (cppVar_29208 == 184);
	BIT_VEC cppVar_29211 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29212 = (cppVar_29211 << 3) | 5;
	cppVar_29212 = (cppVar_29212 & cppMask_un_5_);
	BIT_VEC cppVar_29213 = (0 << 5) | cppVar_29212;
	cppVar_29213 = (cppVar_29213 & cppMask_un_8_);
	bool cppVar_29215 = (cppVar_29213 == 208);
	BIT_VEC cppVar_29216 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29217 = (cppVar_29216 << 3) | 5;
	cppVar_29217 = (cppVar_29217 & cppMask_un_5_);
	BIT_VEC cppVar_29218 = (0 << 5) | cppVar_29217;
	cppVar_29218 = (cppVar_29218 & cppMask_un_8_);
	bool cppVar_29220 = (cppVar_29218 == 224);
	BIT_VEC cppVar_29221 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29222 = (cppVar_29221 << 3) | 5;
	cppVar_29222 = (cppVar_29222 & cppMask_un_5_);
	BIT_VEC cppVar_29223 = (0 << 5) | cppVar_29222;
	cppVar_29223 = (cppVar_29223 & cppMask_un_8_);
	bool cppVar_29225 = (cppVar_29223 == 240);
	BIT_VEC cppVar_29227 = (cppVar_29225) ? B : 0;
	BIT_VEC cppVar_29228 = (cppVar_29220) ? ACC : cppVar_29227;
	BIT_VEC cppVar_29229 = (cppVar_29215) ? PSW : cppVar_29228;
	BIT_VEC cppVar_29230 = (cppVar_29210) ? IP : cppVar_29229;
	BIT_VEC cppVar_29231 = (cppVar_29205) ? P3 : cppVar_29230;
	BIT_VEC cppVar_29232 = (cppVar_29200) ? IE : cppVar_29231;
	BIT_VEC cppVar_29233 = (cppVar_29195) ? P2 : cppVar_29232;
	BIT_VEC cppVar_29234 = (cppVar_29190) ? SBUF : cppVar_29233;
	BIT_VEC cppVar_29235 = (cppVar_29185) ? SCON : cppVar_29234;
	BIT_VEC cppVar_29236 = (cppVar_29180) ? P1 : cppVar_29235;
	BIT_VEC cppVar_29237 = (cppVar_29175) ? TH1 : cppVar_29236;
	BIT_VEC cppVar_29238 = (cppVar_29170) ? TL1 : cppVar_29237;
	BIT_VEC cppVar_29239 = (cppVar_29165) ? TH0 : cppVar_29238;
	BIT_VEC cppVar_29240 = (cppVar_29160) ? TL0 : cppVar_29239;
	BIT_VEC cppVar_29241 = (cppVar_29155) ? TMOD : cppVar_29240;
	BIT_VEC cppVar_29242 = (cppVar_29150) ? TCON : cppVar_29241;
	BIT_VEC cppVar_29243 = (cppVar_29145) ? PCON : cppVar_29242;
	BIT_VEC cppVar_29244 = (cppVar_29140) ? DPH : cppVar_29243;
	BIT_VEC cppVar_29245 = (cppVar_29135) ? DPL : cppVar_29244;
	BIT_VEC cppVar_29246 = (cppVar_29130) ? SP : cppVar_29245;
	BIT_VEC cppVar_29247 = (cppVar_29125) ? P0 : cppVar_29246;
	BIT_VEC cppVar_29248 = (cppVar_29116) ? cppVar_29120 : cppVar_29247;
	BIT_VEC cppVar_29249 = (cppVar_29108) ? cppVar_29248 : P1;
	BIT_VEC cppVar_29250 = ROM.rd(PC);
	bool cppVar_29252 = (cppVar_29250 == 140);
	BIT_VEC cppVar_29254 = PC + 1;
	cppVar_29254 = (cppVar_29254 & cppMask_un_16_);
	BIT_VEC cppVar_29255 = ROM.rd(cppVar_29254);
	bool cppVar_29257 = (cppVar_29255 == 144);
	BIT_VEC cppVar_29259 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29261 = (cppVar_29259 << 3) | 4;
	cppVar_29261 = (cppVar_29261 & cppMask_un_5_);
	BIT_VEC cppVar_29262 = (0 << 5) | cppVar_29261;
	cppVar_29262 = (cppVar_29262 & cppMask_un_8_);
	BIT_VEC cppVar_29263 = (cppVar_29262 >> 7) & cppMask_un_1_;
	bool cppVar_29265 = (cppVar_29263 == 0);
	BIT_VEC cppVar_29266 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29267 = (cppVar_29266 << 3) | 4;
	cppVar_29267 = (cppVar_29267 & cppMask_un_5_);
	BIT_VEC cppVar_29268 = (0 << 5) | cppVar_29267;
	cppVar_29268 = (cppVar_29268 & cppMask_un_8_);
	BIT_VEC cppVar_29269 = IRAM.rd(cppVar_29268);
	BIT_VEC cppVar_29270 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29271 = (cppVar_29270 << 3) | 4;
	cppVar_29271 = (cppVar_29271 & cppMask_un_5_);
	BIT_VEC cppVar_29272 = (0 << 5) | cppVar_29271;
	cppVar_29272 = (cppVar_29272 & cppMask_un_8_);
	bool cppVar_29274 = (cppVar_29272 == 128);
	BIT_VEC cppVar_29275 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29276 = (cppVar_29275 << 3) | 4;
	cppVar_29276 = (cppVar_29276 & cppMask_un_5_);
	BIT_VEC cppVar_29277 = (0 << 5) | cppVar_29276;
	cppVar_29277 = (cppVar_29277 & cppMask_un_8_);
	bool cppVar_29279 = (cppVar_29277 == 129);
	BIT_VEC cppVar_29280 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29281 = (cppVar_29280 << 3) | 4;
	cppVar_29281 = (cppVar_29281 & cppMask_un_5_);
	BIT_VEC cppVar_29282 = (0 << 5) | cppVar_29281;
	cppVar_29282 = (cppVar_29282 & cppMask_un_8_);
	bool cppVar_29284 = (cppVar_29282 == 130);
	BIT_VEC cppVar_29285 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29286 = (cppVar_29285 << 3) | 4;
	cppVar_29286 = (cppVar_29286 & cppMask_un_5_);
	BIT_VEC cppVar_29287 = (0 << 5) | cppVar_29286;
	cppVar_29287 = (cppVar_29287 & cppMask_un_8_);
	bool cppVar_29289 = (cppVar_29287 == 131);
	BIT_VEC cppVar_29290 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29291 = (cppVar_29290 << 3) | 4;
	cppVar_29291 = (cppVar_29291 & cppMask_un_5_);
	BIT_VEC cppVar_29292 = (0 << 5) | cppVar_29291;
	cppVar_29292 = (cppVar_29292 & cppMask_un_8_);
	bool cppVar_29294 = (cppVar_29292 == 135);
	BIT_VEC cppVar_29295 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29296 = (cppVar_29295 << 3) | 4;
	cppVar_29296 = (cppVar_29296 & cppMask_un_5_);
	BIT_VEC cppVar_29297 = (0 << 5) | cppVar_29296;
	cppVar_29297 = (cppVar_29297 & cppMask_un_8_);
	bool cppVar_29299 = (cppVar_29297 == 136);
	BIT_VEC cppVar_29300 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29301 = (cppVar_29300 << 3) | 4;
	cppVar_29301 = (cppVar_29301 & cppMask_un_5_);
	BIT_VEC cppVar_29302 = (0 << 5) | cppVar_29301;
	cppVar_29302 = (cppVar_29302 & cppMask_un_8_);
	bool cppVar_29304 = (cppVar_29302 == 137);
	BIT_VEC cppVar_29305 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29306 = (cppVar_29305 << 3) | 4;
	cppVar_29306 = (cppVar_29306 & cppMask_un_5_);
	BIT_VEC cppVar_29307 = (0 << 5) | cppVar_29306;
	cppVar_29307 = (cppVar_29307 & cppMask_un_8_);
	bool cppVar_29309 = (cppVar_29307 == 138);
	BIT_VEC cppVar_29310 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29311 = (cppVar_29310 << 3) | 4;
	cppVar_29311 = (cppVar_29311 & cppMask_un_5_);
	BIT_VEC cppVar_29312 = (0 << 5) | cppVar_29311;
	cppVar_29312 = (cppVar_29312 & cppMask_un_8_);
	bool cppVar_29314 = (cppVar_29312 == 140);
	BIT_VEC cppVar_29315 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29316 = (cppVar_29315 << 3) | 4;
	cppVar_29316 = (cppVar_29316 & cppMask_un_5_);
	BIT_VEC cppVar_29317 = (0 << 5) | cppVar_29316;
	cppVar_29317 = (cppVar_29317 & cppMask_un_8_);
	bool cppVar_29319 = (cppVar_29317 == 139);
	BIT_VEC cppVar_29320 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29321 = (cppVar_29320 << 3) | 4;
	cppVar_29321 = (cppVar_29321 & cppMask_un_5_);
	BIT_VEC cppVar_29322 = (0 << 5) | cppVar_29321;
	cppVar_29322 = (cppVar_29322 & cppMask_un_8_);
	bool cppVar_29324 = (cppVar_29322 == 141);
	BIT_VEC cppVar_29325 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29326 = (cppVar_29325 << 3) | 4;
	cppVar_29326 = (cppVar_29326 & cppMask_un_5_);
	BIT_VEC cppVar_29327 = (0 << 5) | cppVar_29326;
	cppVar_29327 = (cppVar_29327 & cppMask_un_8_);
	bool cppVar_29329 = (cppVar_29327 == 144);
	BIT_VEC cppVar_29330 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29331 = (cppVar_29330 << 3) | 4;
	cppVar_29331 = (cppVar_29331 & cppMask_un_5_);
	BIT_VEC cppVar_29332 = (0 << 5) | cppVar_29331;
	cppVar_29332 = (cppVar_29332 & cppMask_un_8_);
	bool cppVar_29334 = (cppVar_29332 == 152);
	BIT_VEC cppVar_29335 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29336 = (cppVar_29335 << 3) | 4;
	cppVar_29336 = (cppVar_29336 & cppMask_un_5_);
	BIT_VEC cppVar_29337 = (0 << 5) | cppVar_29336;
	cppVar_29337 = (cppVar_29337 & cppMask_un_8_);
	bool cppVar_29339 = (cppVar_29337 == 153);
	BIT_VEC cppVar_29340 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29341 = (cppVar_29340 << 3) | 4;
	cppVar_29341 = (cppVar_29341 & cppMask_un_5_);
	BIT_VEC cppVar_29342 = (0 << 5) | cppVar_29341;
	cppVar_29342 = (cppVar_29342 & cppMask_un_8_);
	bool cppVar_29344 = (cppVar_29342 == 160);
	BIT_VEC cppVar_29345 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29346 = (cppVar_29345 << 3) | 4;
	cppVar_29346 = (cppVar_29346 & cppMask_un_5_);
	BIT_VEC cppVar_29347 = (0 << 5) | cppVar_29346;
	cppVar_29347 = (cppVar_29347 & cppMask_un_8_);
	bool cppVar_29349 = (cppVar_29347 == 168);
	BIT_VEC cppVar_29350 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29351 = (cppVar_29350 << 3) | 4;
	cppVar_29351 = (cppVar_29351 & cppMask_un_5_);
	BIT_VEC cppVar_29352 = (0 << 5) | cppVar_29351;
	cppVar_29352 = (cppVar_29352 & cppMask_un_8_);
	bool cppVar_29354 = (cppVar_29352 == 176);
	BIT_VEC cppVar_29355 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29356 = (cppVar_29355 << 3) | 4;
	cppVar_29356 = (cppVar_29356 & cppMask_un_5_);
	BIT_VEC cppVar_29357 = (0 << 5) | cppVar_29356;
	cppVar_29357 = (cppVar_29357 & cppMask_un_8_);
	bool cppVar_29359 = (cppVar_29357 == 184);
	BIT_VEC cppVar_29360 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29361 = (cppVar_29360 << 3) | 4;
	cppVar_29361 = (cppVar_29361 & cppMask_un_5_);
	BIT_VEC cppVar_29362 = (0 << 5) | cppVar_29361;
	cppVar_29362 = (cppVar_29362 & cppMask_un_8_);
	bool cppVar_29364 = (cppVar_29362 == 208);
	BIT_VEC cppVar_29365 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29366 = (cppVar_29365 << 3) | 4;
	cppVar_29366 = (cppVar_29366 & cppMask_un_5_);
	BIT_VEC cppVar_29367 = (0 << 5) | cppVar_29366;
	cppVar_29367 = (cppVar_29367 & cppMask_un_8_);
	bool cppVar_29369 = (cppVar_29367 == 224);
	BIT_VEC cppVar_29370 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29371 = (cppVar_29370 << 3) | 4;
	cppVar_29371 = (cppVar_29371 & cppMask_un_5_);
	BIT_VEC cppVar_29372 = (0 << 5) | cppVar_29371;
	cppVar_29372 = (cppVar_29372 & cppMask_un_8_);
	bool cppVar_29374 = (cppVar_29372 == 240);
	BIT_VEC cppVar_29376 = (cppVar_29374) ? B : 0;
	BIT_VEC cppVar_29377 = (cppVar_29369) ? ACC : cppVar_29376;
	BIT_VEC cppVar_29378 = (cppVar_29364) ? PSW : cppVar_29377;
	BIT_VEC cppVar_29379 = (cppVar_29359) ? IP : cppVar_29378;
	BIT_VEC cppVar_29380 = (cppVar_29354) ? P3 : cppVar_29379;
	BIT_VEC cppVar_29381 = (cppVar_29349) ? IE : cppVar_29380;
	BIT_VEC cppVar_29382 = (cppVar_29344) ? P2 : cppVar_29381;
	BIT_VEC cppVar_29383 = (cppVar_29339) ? SBUF : cppVar_29382;
	BIT_VEC cppVar_29384 = (cppVar_29334) ? SCON : cppVar_29383;
	BIT_VEC cppVar_29385 = (cppVar_29329) ? P1 : cppVar_29384;
	BIT_VEC cppVar_29386 = (cppVar_29324) ? TH1 : cppVar_29385;
	BIT_VEC cppVar_29387 = (cppVar_29319) ? TL1 : cppVar_29386;
	BIT_VEC cppVar_29388 = (cppVar_29314) ? TH0 : cppVar_29387;
	BIT_VEC cppVar_29389 = (cppVar_29309) ? TL0 : cppVar_29388;
	BIT_VEC cppVar_29390 = (cppVar_29304) ? TMOD : cppVar_29389;
	BIT_VEC cppVar_29391 = (cppVar_29299) ? TCON : cppVar_29390;
	BIT_VEC cppVar_29392 = (cppVar_29294) ? PCON : cppVar_29391;
	BIT_VEC cppVar_29393 = (cppVar_29289) ? DPH : cppVar_29392;
	BIT_VEC cppVar_29394 = (cppVar_29284) ? DPL : cppVar_29393;
	BIT_VEC cppVar_29395 = (cppVar_29279) ? SP : cppVar_29394;
	BIT_VEC cppVar_29396 = (cppVar_29274) ? P0 : cppVar_29395;
	BIT_VEC cppVar_29397 = (cppVar_29265) ? cppVar_29269 : cppVar_29396;
	BIT_VEC cppVar_29398 = (cppVar_29257) ? cppVar_29397 : P1;
	BIT_VEC cppVar_29399 = ROM.rd(PC);
	bool cppVar_29401 = (cppVar_29399 == 139);
	BIT_VEC cppVar_29403 = PC + 1;
	cppVar_29403 = (cppVar_29403 & cppMask_un_16_);
	BIT_VEC cppVar_29404 = ROM.rd(cppVar_29403);
	bool cppVar_29406 = (cppVar_29404 == 144);
	BIT_VEC cppVar_29408 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29410 = (cppVar_29408 << 3) | 3;
	cppVar_29410 = (cppVar_29410 & cppMask_un_5_);
	BIT_VEC cppVar_29411 = (0 << 5) | cppVar_29410;
	cppVar_29411 = (cppVar_29411 & cppMask_un_8_);
	BIT_VEC cppVar_29412 = (cppVar_29411 >> 7) & cppMask_un_1_;
	bool cppVar_29414 = (cppVar_29412 == 0);
	BIT_VEC cppVar_29415 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29416 = (cppVar_29415 << 3) | 3;
	cppVar_29416 = (cppVar_29416 & cppMask_un_5_);
	BIT_VEC cppVar_29417 = (0 << 5) | cppVar_29416;
	cppVar_29417 = (cppVar_29417 & cppMask_un_8_);
	BIT_VEC cppVar_29418 = IRAM.rd(cppVar_29417);
	BIT_VEC cppVar_29419 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29420 = (cppVar_29419 << 3) | 3;
	cppVar_29420 = (cppVar_29420 & cppMask_un_5_);
	BIT_VEC cppVar_29421 = (0 << 5) | cppVar_29420;
	cppVar_29421 = (cppVar_29421 & cppMask_un_8_);
	bool cppVar_29423 = (cppVar_29421 == 128);
	BIT_VEC cppVar_29424 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29425 = (cppVar_29424 << 3) | 3;
	cppVar_29425 = (cppVar_29425 & cppMask_un_5_);
	BIT_VEC cppVar_29426 = (0 << 5) | cppVar_29425;
	cppVar_29426 = (cppVar_29426 & cppMask_un_8_);
	bool cppVar_29428 = (cppVar_29426 == 129);
	BIT_VEC cppVar_29429 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29430 = (cppVar_29429 << 3) | 3;
	cppVar_29430 = (cppVar_29430 & cppMask_un_5_);
	BIT_VEC cppVar_29431 = (0 << 5) | cppVar_29430;
	cppVar_29431 = (cppVar_29431 & cppMask_un_8_);
	bool cppVar_29433 = (cppVar_29431 == 130);
	BIT_VEC cppVar_29434 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29435 = (cppVar_29434 << 3) | 3;
	cppVar_29435 = (cppVar_29435 & cppMask_un_5_);
	BIT_VEC cppVar_29436 = (0 << 5) | cppVar_29435;
	cppVar_29436 = (cppVar_29436 & cppMask_un_8_);
	bool cppVar_29438 = (cppVar_29436 == 131);
	BIT_VEC cppVar_29439 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29440 = (cppVar_29439 << 3) | 3;
	cppVar_29440 = (cppVar_29440 & cppMask_un_5_);
	BIT_VEC cppVar_29441 = (0 << 5) | cppVar_29440;
	cppVar_29441 = (cppVar_29441 & cppMask_un_8_);
	bool cppVar_29443 = (cppVar_29441 == 135);
	BIT_VEC cppVar_29444 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29445 = (cppVar_29444 << 3) | 3;
	cppVar_29445 = (cppVar_29445 & cppMask_un_5_);
	BIT_VEC cppVar_29446 = (0 << 5) | cppVar_29445;
	cppVar_29446 = (cppVar_29446 & cppMask_un_8_);
	bool cppVar_29448 = (cppVar_29446 == 136);
	BIT_VEC cppVar_29449 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29450 = (cppVar_29449 << 3) | 3;
	cppVar_29450 = (cppVar_29450 & cppMask_un_5_);
	BIT_VEC cppVar_29451 = (0 << 5) | cppVar_29450;
	cppVar_29451 = (cppVar_29451 & cppMask_un_8_);
	bool cppVar_29453 = (cppVar_29451 == 137);
	BIT_VEC cppVar_29454 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29455 = (cppVar_29454 << 3) | 3;
	cppVar_29455 = (cppVar_29455 & cppMask_un_5_);
	BIT_VEC cppVar_29456 = (0 << 5) | cppVar_29455;
	cppVar_29456 = (cppVar_29456 & cppMask_un_8_);
	bool cppVar_29458 = (cppVar_29456 == 138);
	BIT_VEC cppVar_29459 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29460 = (cppVar_29459 << 3) | 3;
	cppVar_29460 = (cppVar_29460 & cppMask_un_5_);
	BIT_VEC cppVar_29461 = (0 << 5) | cppVar_29460;
	cppVar_29461 = (cppVar_29461 & cppMask_un_8_);
	bool cppVar_29463 = (cppVar_29461 == 140);
	BIT_VEC cppVar_29464 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29465 = (cppVar_29464 << 3) | 3;
	cppVar_29465 = (cppVar_29465 & cppMask_un_5_);
	BIT_VEC cppVar_29466 = (0 << 5) | cppVar_29465;
	cppVar_29466 = (cppVar_29466 & cppMask_un_8_);
	bool cppVar_29468 = (cppVar_29466 == 139);
	BIT_VEC cppVar_29469 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29470 = (cppVar_29469 << 3) | 3;
	cppVar_29470 = (cppVar_29470 & cppMask_un_5_);
	BIT_VEC cppVar_29471 = (0 << 5) | cppVar_29470;
	cppVar_29471 = (cppVar_29471 & cppMask_un_8_);
	bool cppVar_29473 = (cppVar_29471 == 141);
	BIT_VEC cppVar_29474 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29475 = (cppVar_29474 << 3) | 3;
	cppVar_29475 = (cppVar_29475 & cppMask_un_5_);
	BIT_VEC cppVar_29476 = (0 << 5) | cppVar_29475;
	cppVar_29476 = (cppVar_29476 & cppMask_un_8_);
	bool cppVar_29478 = (cppVar_29476 == 144);
	BIT_VEC cppVar_29479 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29480 = (cppVar_29479 << 3) | 3;
	cppVar_29480 = (cppVar_29480 & cppMask_un_5_);
	BIT_VEC cppVar_29481 = (0 << 5) | cppVar_29480;
	cppVar_29481 = (cppVar_29481 & cppMask_un_8_);
	bool cppVar_29483 = (cppVar_29481 == 152);
	BIT_VEC cppVar_29484 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29485 = (cppVar_29484 << 3) | 3;
	cppVar_29485 = (cppVar_29485 & cppMask_un_5_);
	BIT_VEC cppVar_29486 = (0 << 5) | cppVar_29485;
	cppVar_29486 = (cppVar_29486 & cppMask_un_8_);
	bool cppVar_29488 = (cppVar_29486 == 153);
	BIT_VEC cppVar_29489 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29490 = (cppVar_29489 << 3) | 3;
	cppVar_29490 = (cppVar_29490 & cppMask_un_5_);
	BIT_VEC cppVar_29491 = (0 << 5) | cppVar_29490;
	cppVar_29491 = (cppVar_29491 & cppMask_un_8_);
	bool cppVar_29493 = (cppVar_29491 == 160);
	BIT_VEC cppVar_29494 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29495 = (cppVar_29494 << 3) | 3;
	cppVar_29495 = (cppVar_29495 & cppMask_un_5_);
	BIT_VEC cppVar_29496 = (0 << 5) | cppVar_29495;
	cppVar_29496 = (cppVar_29496 & cppMask_un_8_);
	bool cppVar_29498 = (cppVar_29496 == 168);
	BIT_VEC cppVar_29499 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29500 = (cppVar_29499 << 3) | 3;
	cppVar_29500 = (cppVar_29500 & cppMask_un_5_);
	BIT_VEC cppVar_29501 = (0 << 5) | cppVar_29500;
	cppVar_29501 = (cppVar_29501 & cppMask_un_8_);
	bool cppVar_29503 = (cppVar_29501 == 176);
	BIT_VEC cppVar_29504 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29505 = (cppVar_29504 << 3) | 3;
	cppVar_29505 = (cppVar_29505 & cppMask_un_5_);
	BIT_VEC cppVar_29506 = (0 << 5) | cppVar_29505;
	cppVar_29506 = (cppVar_29506 & cppMask_un_8_);
	bool cppVar_29508 = (cppVar_29506 == 184);
	BIT_VEC cppVar_29509 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29510 = (cppVar_29509 << 3) | 3;
	cppVar_29510 = (cppVar_29510 & cppMask_un_5_);
	BIT_VEC cppVar_29511 = (0 << 5) | cppVar_29510;
	cppVar_29511 = (cppVar_29511 & cppMask_un_8_);
	bool cppVar_29513 = (cppVar_29511 == 208);
	BIT_VEC cppVar_29514 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29515 = (cppVar_29514 << 3) | 3;
	cppVar_29515 = (cppVar_29515 & cppMask_un_5_);
	BIT_VEC cppVar_29516 = (0 << 5) | cppVar_29515;
	cppVar_29516 = (cppVar_29516 & cppMask_un_8_);
	bool cppVar_29518 = (cppVar_29516 == 224);
	BIT_VEC cppVar_29519 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29520 = (cppVar_29519 << 3) | 3;
	cppVar_29520 = (cppVar_29520 & cppMask_un_5_);
	BIT_VEC cppVar_29521 = (0 << 5) | cppVar_29520;
	cppVar_29521 = (cppVar_29521 & cppMask_un_8_);
	bool cppVar_29523 = (cppVar_29521 == 240);
	BIT_VEC cppVar_29525 = (cppVar_29523) ? B : 0;
	BIT_VEC cppVar_29526 = (cppVar_29518) ? ACC : cppVar_29525;
	BIT_VEC cppVar_29527 = (cppVar_29513) ? PSW : cppVar_29526;
	BIT_VEC cppVar_29528 = (cppVar_29508) ? IP : cppVar_29527;
	BIT_VEC cppVar_29529 = (cppVar_29503) ? P3 : cppVar_29528;
	BIT_VEC cppVar_29530 = (cppVar_29498) ? IE : cppVar_29529;
	BIT_VEC cppVar_29531 = (cppVar_29493) ? P2 : cppVar_29530;
	BIT_VEC cppVar_29532 = (cppVar_29488) ? SBUF : cppVar_29531;
	BIT_VEC cppVar_29533 = (cppVar_29483) ? SCON : cppVar_29532;
	BIT_VEC cppVar_29534 = (cppVar_29478) ? P1 : cppVar_29533;
	BIT_VEC cppVar_29535 = (cppVar_29473) ? TH1 : cppVar_29534;
	BIT_VEC cppVar_29536 = (cppVar_29468) ? TL1 : cppVar_29535;
	BIT_VEC cppVar_29537 = (cppVar_29463) ? TH0 : cppVar_29536;
	BIT_VEC cppVar_29538 = (cppVar_29458) ? TL0 : cppVar_29537;
	BIT_VEC cppVar_29539 = (cppVar_29453) ? TMOD : cppVar_29538;
	BIT_VEC cppVar_29540 = (cppVar_29448) ? TCON : cppVar_29539;
	BIT_VEC cppVar_29541 = (cppVar_29443) ? PCON : cppVar_29540;
	BIT_VEC cppVar_29542 = (cppVar_29438) ? DPH : cppVar_29541;
	BIT_VEC cppVar_29543 = (cppVar_29433) ? DPL : cppVar_29542;
	BIT_VEC cppVar_29544 = (cppVar_29428) ? SP : cppVar_29543;
	BIT_VEC cppVar_29545 = (cppVar_29423) ? P0 : cppVar_29544;
	BIT_VEC cppVar_29546 = (cppVar_29414) ? cppVar_29418 : cppVar_29545;
	BIT_VEC cppVar_29547 = (cppVar_29406) ? cppVar_29546 : P1;
	BIT_VEC cppVar_29548 = ROM.rd(PC);
	bool cppVar_29550 = (cppVar_29548 == 138);
	BIT_VEC cppVar_29552 = PC + 1;
	cppVar_29552 = (cppVar_29552 & cppMask_un_16_);
	BIT_VEC cppVar_29553 = ROM.rd(cppVar_29552);
	bool cppVar_29555 = (cppVar_29553 == 144);
	BIT_VEC cppVar_29557 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29559 = (cppVar_29557 << 3) | 2;
	cppVar_29559 = (cppVar_29559 & cppMask_un_5_);
	BIT_VEC cppVar_29560 = (0 << 5) | cppVar_29559;
	cppVar_29560 = (cppVar_29560 & cppMask_un_8_);
	BIT_VEC cppVar_29561 = (cppVar_29560 >> 7) & cppMask_un_1_;
	bool cppVar_29563 = (cppVar_29561 == 0);
	BIT_VEC cppVar_29564 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29565 = (cppVar_29564 << 3) | 2;
	cppVar_29565 = (cppVar_29565 & cppMask_un_5_);
	BIT_VEC cppVar_29566 = (0 << 5) | cppVar_29565;
	cppVar_29566 = (cppVar_29566 & cppMask_un_8_);
	BIT_VEC cppVar_29567 = IRAM.rd(cppVar_29566);
	BIT_VEC cppVar_29568 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29569 = (cppVar_29568 << 3) | 2;
	cppVar_29569 = (cppVar_29569 & cppMask_un_5_);
	BIT_VEC cppVar_29570 = (0 << 5) | cppVar_29569;
	cppVar_29570 = (cppVar_29570 & cppMask_un_8_);
	bool cppVar_29572 = (cppVar_29570 == 128);
	BIT_VEC cppVar_29573 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29574 = (cppVar_29573 << 3) | 2;
	cppVar_29574 = (cppVar_29574 & cppMask_un_5_);
	BIT_VEC cppVar_29575 = (0 << 5) | cppVar_29574;
	cppVar_29575 = (cppVar_29575 & cppMask_un_8_);
	bool cppVar_29577 = (cppVar_29575 == 129);
	BIT_VEC cppVar_29578 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29579 = (cppVar_29578 << 3) | 2;
	cppVar_29579 = (cppVar_29579 & cppMask_un_5_);
	BIT_VEC cppVar_29580 = (0 << 5) | cppVar_29579;
	cppVar_29580 = (cppVar_29580 & cppMask_un_8_);
	bool cppVar_29582 = (cppVar_29580 == 130);
	BIT_VEC cppVar_29583 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29584 = (cppVar_29583 << 3) | 2;
	cppVar_29584 = (cppVar_29584 & cppMask_un_5_);
	BIT_VEC cppVar_29585 = (0 << 5) | cppVar_29584;
	cppVar_29585 = (cppVar_29585 & cppMask_un_8_);
	bool cppVar_29587 = (cppVar_29585 == 131);
	BIT_VEC cppVar_29588 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29589 = (cppVar_29588 << 3) | 2;
	cppVar_29589 = (cppVar_29589 & cppMask_un_5_);
	BIT_VEC cppVar_29590 = (0 << 5) | cppVar_29589;
	cppVar_29590 = (cppVar_29590 & cppMask_un_8_);
	bool cppVar_29592 = (cppVar_29590 == 135);
	BIT_VEC cppVar_29593 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29594 = (cppVar_29593 << 3) | 2;
	cppVar_29594 = (cppVar_29594 & cppMask_un_5_);
	BIT_VEC cppVar_29595 = (0 << 5) | cppVar_29594;
	cppVar_29595 = (cppVar_29595 & cppMask_un_8_);
	bool cppVar_29597 = (cppVar_29595 == 136);
	BIT_VEC cppVar_29598 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29599 = (cppVar_29598 << 3) | 2;
	cppVar_29599 = (cppVar_29599 & cppMask_un_5_);
	BIT_VEC cppVar_29600 = (0 << 5) | cppVar_29599;
	cppVar_29600 = (cppVar_29600 & cppMask_un_8_);
	bool cppVar_29602 = (cppVar_29600 == 137);
	BIT_VEC cppVar_29603 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29604 = (cppVar_29603 << 3) | 2;
	cppVar_29604 = (cppVar_29604 & cppMask_un_5_);
	BIT_VEC cppVar_29605 = (0 << 5) | cppVar_29604;
	cppVar_29605 = (cppVar_29605 & cppMask_un_8_);
	bool cppVar_29607 = (cppVar_29605 == 138);
	BIT_VEC cppVar_29608 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29609 = (cppVar_29608 << 3) | 2;
	cppVar_29609 = (cppVar_29609 & cppMask_un_5_);
	BIT_VEC cppVar_29610 = (0 << 5) | cppVar_29609;
	cppVar_29610 = (cppVar_29610 & cppMask_un_8_);
	bool cppVar_29612 = (cppVar_29610 == 140);
	BIT_VEC cppVar_29613 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29614 = (cppVar_29613 << 3) | 2;
	cppVar_29614 = (cppVar_29614 & cppMask_un_5_);
	BIT_VEC cppVar_29615 = (0 << 5) | cppVar_29614;
	cppVar_29615 = (cppVar_29615 & cppMask_un_8_);
	bool cppVar_29617 = (cppVar_29615 == 139);
	BIT_VEC cppVar_29618 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29619 = (cppVar_29618 << 3) | 2;
	cppVar_29619 = (cppVar_29619 & cppMask_un_5_);
	BIT_VEC cppVar_29620 = (0 << 5) | cppVar_29619;
	cppVar_29620 = (cppVar_29620 & cppMask_un_8_);
	bool cppVar_29622 = (cppVar_29620 == 141);
	BIT_VEC cppVar_29623 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29624 = (cppVar_29623 << 3) | 2;
	cppVar_29624 = (cppVar_29624 & cppMask_un_5_);
	BIT_VEC cppVar_29625 = (0 << 5) | cppVar_29624;
	cppVar_29625 = (cppVar_29625 & cppMask_un_8_);
	bool cppVar_29627 = (cppVar_29625 == 144);
	BIT_VEC cppVar_29628 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29629 = (cppVar_29628 << 3) | 2;
	cppVar_29629 = (cppVar_29629 & cppMask_un_5_);
	BIT_VEC cppVar_29630 = (0 << 5) | cppVar_29629;
	cppVar_29630 = (cppVar_29630 & cppMask_un_8_);
	bool cppVar_29632 = (cppVar_29630 == 152);
	BIT_VEC cppVar_29633 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29634 = (cppVar_29633 << 3) | 2;
	cppVar_29634 = (cppVar_29634 & cppMask_un_5_);
	BIT_VEC cppVar_29635 = (0 << 5) | cppVar_29634;
	cppVar_29635 = (cppVar_29635 & cppMask_un_8_);
	bool cppVar_29637 = (cppVar_29635 == 153);
	BIT_VEC cppVar_29638 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29639 = (cppVar_29638 << 3) | 2;
	cppVar_29639 = (cppVar_29639 & cppMask_un_5_);
	BIT_VEC cppVar_29640 = (0 << 5) | cppVar_29639;
	cppVar_29640 = (cppVar_29640 & cppMask_un_8_);
	bool cppVar_29642 = (cppVar_29640 == 160);
	BIT_VEC cppVar_29643 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29644 = (cppVar_29643 << 3) | 2;
	cppVar_29644 = (cppVar_29644 & cppMask_un_5_);
	BIT_VEC cppVar_29645 = (0 << 5) | cppVar_29644;
	cppVar_29645 = (cppVar_29645 & cppMask_un_8_);
	bool cppVar_29647 = (cppVar_29645 == 168);
	BIT_VEC cppVar_29648 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29649 = (cppVar_29648 << 3) | 2;
	cppVar_29649 = (cppVar_29649 & cppMask_un_5_);
	BIT_VEC cppVar_29650 = (0 << 5) | cppVar_29649;
	cppVar_29650 = (cppVar_29650 & cppMask_un_8_);
	bool cppVar_29652 = (cppVar_29650 == 176);
	BIT_VEC cppVar_29653 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29654 = (cppVar_29653 << 3) | 2;
	cppVar_29654 = (cppVar_29654 & cppMask_un_5_);
	BIT_VEC cppVar_29655 = (0 << 5) | cppVar_29654;
	cppVar_29655 = (cppVar_29655 & cppMask_un_8_);
	bool cppVar_29657 = (cppVar_29655 == 184);
	BIT_VEC cppVar_29658 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29659 = (cppVar_29658 << 3) | 2;
	cppVar_29659 = (cppVar_29659 & cppMask_un_5_);
	BIT_VEC cppVar_29660 = (0 << 5) | cppVar_29659;
	cppVar_29660 = (cppVar_29660 & cppMask_un_8_);
	bool cppVar_29662 = (cppVar_29660 == 208);
	BIT_VEC cppVar_29663 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29664 = (cppVar_29663 << 3) | 2;
	cppVar_29664 = (cppVar_29664 & cppMask_un_5_);
	BIT_VEC cppVar_29665 = (0 << 5) | cppVar_29664;
	cppVar_29665 = (cppVar_29665 & cppMask_un_8_);
	bool cppVar_29667 = (cppVar_29665 == 224);
	BIT_VEC cppVar_29668 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29669 = (cppVar_29668 << 3) | 2;
	cppVar_29669 = (cppVar_29669 & cppMask_un_5_);
	BIT_VEC cppVar_29670 = (0 << 5) | cppVar_29669;
	cppVar_29670 = (cppVar_29670 & cppMask_un_8_);
	bool cppVar_29672 = (cppVar_29670 == 240);
	BIT_VEC cppVar_29674 = (cppVar_29672) ? B : 0;
	BIT_VEC cppVar_29675 = (cppVar_29667) ? ACC : cppVar_29674;
	BIT_VEC cppVar_29676 = (cppVar_29662) ? PSW : cppVar_29675;
	BIT_VEC cppVar_29677 = (cppVar_29657) ? IP : cppVar_29676;
	BIT_VEC cppVar_29678 = (cppVar_29652) ? P3 : cppVar_29677;
	BIT_VEC cppVar_29679 = (cppVar_29647) ? IE : cppVar_29678;
	BIT_VEC cppVar_29680 = (cppVar_29642) ? P2 : cppVar_29679;
	BIT_VEC cppVar_29681 = (cppVar_29637) ? SBUF : cppVar_29680;
	BIT_VEC cppVar_29682 = (cppVar_29632) ? SCON : cppVar_29681;
	BIT_VEC cppVar_29683 = (cppVar_29627) ? P1 : cppVar_29682;
	BIT_VEC cppVar_29684 = (cppVar_29622) ? TH1 : cppVar_29683;
	BIT_VEC cppVar_29685 = (cppVar_29617) ? TL1 : cppVar_29684;
	BIT_VEC cppVar_29686 = (cppVar_29612) ? TH0 : cppVar_29685;
	BIT_VEC cppVar_29687 = (cppVar_29607) ? TL0 : cppVar_29686;
	BIT_VEC cppVar_29688 = (cppVar_29602) ? TMOD : cppVar_29687;
	BIT_VEC cppVar_29689 = (cppVar_29597) ? TCON : cppVar_29688;
	BIT_VEC cppVar_29690 = (cppVar_29592) ? PCON : cppVar_29689;
	BIT_VEC cppVar_29691 = (cppVar_29587) ? DPH : cppVar_29690;
	BIT_VEC cppVar_29692 = (cppVar_29582) ? DPL : cppVar_29691;
	BIT_VEC cppVar_29693 = (cppVar_29577) ? SP : cppVar_29692;
	BIT_VEC cppVar_29694 = (cppVar_29572) ? P0 : cppVar_29693;
	BIT_VEC cppVar_29695 = (cppVar_29563) ? cppVar_29567 : cppVar_29694;
	BIT_VEC cppVar_29696 = (cppVar_29555) ? cppVar_29695 : P1;
	BIT_VEC cppVar_29697 = ROM.rd(PC);
	bool cppVar_29699 = (cppVar_29697 == 137);
	BIT_VEC cppVar_29701 = PC + 1;
	cppVar_29701 = (cppVar_29701 & cppMask_un_16_);
	BIT_VEC cppVar_29702 = ROM.rd(cppVar_29701);
	bool cppVar_29704 = (cppVar_29702 == 144);
	BIT_VEC cppVar_29706 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29708 = (cppVar_29706 << 3) | 1;
	cppVar_29708 = (cppVar_29708 & cppMask_un_5_);
	BIT_VEC cppVar_29709 = (0 << 5) | cppVar_29708;
	cppVar_29709 = (cppVar_29709 & cppMask_un_8_);
	BIT_VEC cppVar_29710 = (cppVar_29709 >> 7) & cppMask_un_1_;
	bool cppVar_29712 = (cppVar_29710 == 0);
	BIT_VEC cppVar_29713 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29714 = (cppVar_29713 << 3) | 1;
	cppVar_29714 = (cppVar_29714 & cppMask_un_5_);
	BIT_VEC cppVar_29715 = (0 << 5) | cppVar_29714;
	cppVar_29715 = (cppVar_29715 & cppMask_un_8_);
	BIT_VEC cppVar_29716 = IRAM.rd(cppVar_29715);
	BIT_VEC cppVar_29717 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29718 = (cppVar_29717 << 3) | 1;
	cppVar_29718 = (cppVar_29718 & cppMask_un_5_);
	BIT_VEC cppVar_29719 = (0 << 5) | cppVar_29718;
	cppVar_29719 = (cppVar_29719 & cppMask_un_8_);
	bool cppVar_29721 = (cppVar_29719 == 128);
	BIT_VEC cppVar_29722 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29723 = (cppVar_29722 << 3) | 1;
	cppVar_29723 = (cppVar_29723 & cppMask_un_5_);
	BIT_VEC cppVar_29724 = (0 << 5) | cppVar_29723;
	cppVar_29724 = (cppVar_29724 & cppMask_un_8_);
	bool cppVar_29726 = (cppVar_29724 == 129);
	BIT_VEC cppVar_29727 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29728 = (cppVar_29727 << 3) | 1;
	cppVar_29728 = (cppVar_29728 & cppMask_un_5_);
	BIT_VEC cppVar_29729 = (0 << 5) | cppVar_29728;
	cppVar_29729 = (cppVar_29729 & cppMask_un_8_);
	bool cppVar_29731 = (cppVar_29729 == 130);
	BIT_VEC cppVar_29732 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29733 = (cppVar_29732 << 3) | 1;
	cppVar_29733 = (cppVar_29733 & cppMask_un_5_);
	BIT_VEC cppVar_29734 = (0 << 5) | cppVar_29733;
	cppVar_29734 = (cppVar_29734 & cppMask_un_8_);
	bool cppVar_29736 = (cppVar_29734 == 131);
	BIT_VEC cppVar_29737 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29738 = (cppVar_29737 << 3) | 1;
	cppVar_29738 = (cppVar_29738 & cppMask_un_5_);
	BIT_VEC cppVar_29739 = (0 << 5) | cppVar_29738;
	cppVar_29739 = (cppVar_29739 & cppMask_un_8_);
	bool cppVar_29741 = (cppVar_29739 == 135);
	BIT_VEC cppVar_29742 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29743 = (cppVar_29742 << 3) | 1;
	cppVar_29743 = (cppVar_29743 & cppMask_un_5_);
	BIT_VEC cppVar_29744 = (0 << 5) | cppVar_29743;
	cppVar_29744 = (cppVar_29744 & cppMask_un_8_);
	bool cppVar_29746 = (cppVar_29744 == 136);
	BIT_VEC cppVar_29747 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29748 = (cppVar_29747 << 3) | 1;
	cppVar_29748 = (cppVar_29748 & cppMask_un_5_);
	BIT_VEC cppVar_29749 = (0 << 5) | cppVar_29748;
	cppVar_29749 = (cppVar_29749 & cppMask_un_8_);
	bool cppVar_29751 = (cppVar_29749 == 137);
	BIT_VEC cppVar_29752 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29753 = (cppVar_29752 << 3) | 1;
	cppVar_29753 = (cppVar_29753 & cppMask_un_5_);
	BIT_VEC cppVar_29754 = (0 << 5) | cppVar_29753;
	cppVar_29754 = (cppVar_29754 & cppMask_un_8_);
	bool cppVar_29756 = (cppVar_29754 == 138);
	BIT_VEC cppVar_29757 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29758 = (cppVar_29757 << 3) | 1;
	cppVar_29758 = (cppVar_29758 & cppMask_un_5_);
	BIT_VEC cppVar_29759 = (0 << 5) | cppVar_29758;
	cppVar_29759 = (cppVar_29759 & cppMask_un_8_);
	bool cppVar_29761 = (cppVar_29759 == 140);
	BIT_VEC cppVar_29762 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29763 = (cppVar_29762 << 3) | 1;
	cppVar_29763 = (cppVar_29763 & cppMask_un_5_);
	BIT_VEC cppVar_29764 = (0 << 5) | cppVar_29763;
	cppVar_29764 = (cppVar_29764 & cppMask_un_8_);
	bool cppVar_29766 = (cppVar_29764 == 139);
	BIT_VEC cppVar_29767 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29768 = (cppVar_29767 << 3) | 1;
	cppVar_29768 = (cppVar_29768 & cppMask_un_5_);
	BIT_VEC cppVar_29769 = (0 << 5) | cppVar_29768;
	cppVar_29769 = (cppVar_29769 & cppMask_un_8_);
	bool cppVar_29771 = (cppVar_29769 == 141);
	BIT_VEC cppVar_29772 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29773 = (cppVar_29772 << 3) | 1;
	cppVar_29773 = (cppVar_29773 & cppMask_un_5_);
	BIT_VEC cppVar_29774 = (0 << 5) | cppVar_29773;
	cppVar_29774 = (cppVar_29774 & cppMask_un_8_);
	bool cppVar_29776 = (cppVar_29774 == 144);
	BIT_VEC cppVar_29777 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29778 = (cppVar_29777 << 3) | 1;
	cppVar_29778 = (cppVar_29778 & cppMask_un_5_);
	BIT_VEC cppVar_29779 = (0 << 5) | cppVar_29778;
	cppVar_29779 = (cppVar_29779 & cppMask_un_8_);
	bool cppVar_29781 = (cppVar_29779 == 152);
	BIT_VEC cppVar_29782 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29783 = (cppVar_29782 << 3) | 1;
	cppVar_29783 = (cppVar_29783 & cppMask_un_5_);
	BIT_VEC cppVar_29784 = (0 << 5) | cppVar_29783;
	cppVar_29784 = (cppVar_29784 & cppMask_un_8_);
	bool cppVar_29786 = (cppVar_29784 == 153);
	BIT_VEC cppVar_29787 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29788 = (cppVar_29787 << 3) | 1;
	cppVar_29788 = (cppVar_29788 & cppMask_un_5_);
	BIT_VEC cppVar_29789 = (0 << 5) | cppVar_29788;
	cppVar_29789 = (cppVar_29789 & cppMask_un_8_);
	bool cppVar_29791 = (cppVar_29789 == 160);
	BIT_VEC cppVar_29792 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29793 = (cppVar_29792 << 3) | 1;
	cppVar_29793 = (cppVar_29793 & cppMask_un_5_);
	BIT_VEC cppVar_29794 = (0 << 5) | cppVar_29793;
	cppVar_29794 = (cppVar_29794 & cppMask_un_8_);
	bool cppVar_29796 = (cppVar_29794 == 168);
	BIT_VEC cppVar_29797 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29798 = (cppVar_29797 << 3) | 1;
	cppVar_29798 = (cppVar_29798 & cppMask_un_5_);
	BIT_VEC cppVar_29799 = (0 << 5) | cppVar_29798;
	cppVar_29799 = (cppVar_29799 & cppMask_un_8_);
	bool cppVar_29801 = (cppVar_29799 == 176);
	BIT_VEC cppVar_29802 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29803 = (cppVar_29802 << 3) | 1;
	cppVar_29803 = (cppVar_29803 & cppMask_un_5_);
	BIT_VEC cppVar_29804 = (0 << 5) | cppVar_29803;
	cppVar_29804 = (cppVar_29804 & cppMask_un_8_);
	bool cppVar_29806 = (cppVar_29804 == 184);
	BIT_VEC cppVar_29807 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29808 = (cppVar_29807 << 3) | 1;
	cppVar_29808 = (cppVar_29808 & cppMask_un_5_);
	BIT_VEC cppVar_29809 = (0 << 5) | cppVar_29808;
	cppVar_29809 = (cppVar_29809 & cppMask_un_8_);
	bool cppVar_29811 = (cppVar_29809 == 208);
	BIT_VEC cppVar_29812 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29813 = (cppVar_29812 << 3) | 1;
	cppVar_29813 = (cppVar_29813 & cppMask_un_5_);
	BIT_VEC cppVar_29814 = (0 << 5) | cppVar_29813;
	cppVar_29814 = (cppVar_29814 & cppMask_un_8_);
	bool cppVar_29816 = (cppVar_29814 == 224);
	BIT_VEC cppVar_29817 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29818 = (cppVar_29817 << 3) | 1;
	cppVar_29818 = (cppVar_29818 & cppMask_un_5_);
	BIT_VEC cppVar_29819 = (0 << 5) | cppVar_29818;
	cppVar_29819 = (cppVar_29819 & cppMask_un_8_);
	bool cppVar_29821 = (cppVar_29819 == 240);
	BIT_VEC cppVar_29823 = (cppVar_29821) ? B : 0;
	BIT_VEC cppVar_29824 = (cppVar_29816) ? ACC : cppVar_29823;
	BIT_VEC cppVar_29825 = (cppVar_29811) ? PSW : cppVar_29824;
	BIT_VEC cppVar_29826 = (cppVar_29806) ? IP : cppVar_29825;
	BIT_VEC cppVar_29827 = (cppVar_29801) ? P3 : cppVar_29826;
	BIT_VEC cppVar_29828 = (cppVar_29796) ? IE : cppVar_29827;
	BIT_VEC cppVar_29829 = (cppVar_29791) ? P2 : cppVar_29828;
	BIT_VEC cppVar_29830 = (cppVar_29786) ? SBUF : cppVar_29829;
	BIT_VEC cppVar_29831 = (cppVar_29781) ? SCON : cppVar_29830;
	BIT_VEC cppVar_29832 = (cppVar_29776) ? P1 : cppVar_29831;
	BIT_VEC cppVar_29833 = (cppVar_29771) ? TH1 : cppVar_29832;
	BIT_VEC cppVar_29834 = (cppVar_29766) ? TL1 : cppVar_29833;
	BIT_VEC cppVar_29835 = (cppVar_29761) ? TH0 : cppVar_29834;
	BIT_VEC cppVar_29836 = (cppVar_29756) ? TL0 : cppVar_29835;
	BIT_VEC cppVar_29837 = (cppVar_29751) ? TMOD : cppVar_29836;
	BIT_VEC cppVar_29838 = (cppVar_29746) ? TCON : cppVar_29837;
	BIT_VEC cppVar_29839 = (cppVar_29741) ? PCON : cppVar_29838;
	BIT_VEC cppVar_29840 = (cppVar_29736) ? DPH : cppVar_29839;
	BIT_VEC cppVar_29841 = (cppVar_29731) ? DPL : cppVar_29840;
	BIT_VEC cppVar_29842 = (cppVar_29726) ? SP : cppVar_29841;
	BIT_VEC cppVar_29843 = (cppVar_29721) ? P0 : cppVar_29842;
	BIT_VEC cppVar_29844 = (cppVar_29712) ? cppVar_29716 : cppVar_29843;
	BIT_VEC cppVar_29845 = (cppVar_29704) ? cppVar_29844 : P1;
	BIT_VEC cppVar_29846 = ROM.rd(PC);
	bool cppVar_29848 = (cppVar_29846 == 136);
	BIT_VEC cppVar_29850 = PC + 1;
	cppVar_29850 = (cppVar_29850 & cppMask_un_16_);
	BIT_VEC cppVar_29851 = ROM.rd(cppVar_29850);
	bool cppVar_29853 = (cppVar_29851 == 144);
	BIT_VEC cppVar_29855 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29857 = (cppVar_29855 << 3) | 0;
	cppVar_29857 = (cppVar_29857 & cppMask_un_5_);
	BIT_VEC cppVar_29858 = (0 << 5) | cppVar_29857;
	cppVar_29858 = (cppVar_29858 & cppMask_un_8_);
	BIT_VEC cppVar_29859 = (cppVar_29858 >> 7) & cppMask_un_1_;
	bool cppVar_29861 = (cppVar_29859 == 0);
	BIT_VEC cppVar_29862 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29863 = (cppVar_29862 << 3) | 0;
	cppVar_29863 = (cppVar_29863 & cppMask_un_5_);
	BIT_VEC cppVar_29864 = (0 << 5) | cppVar_29863;
	cppVar_29864 = (cppVar_29864 & cppMask_un_8_);
	BIT_VEC cppVar_29865 = IRAM.rd(cppVar_29864);
	BIT_VEC cppVar_29866 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29867 = (cppVar_29866 << 3) | 0;
	cppVar_29867 = (cppVar_29867 & cppMask_un_5_);
	BIT_VEC cppVar_29868 = (0 << 5) | cppVar_29867;
	cppVar_29868 = (cppVar_29868 & cppMask_un_8_);
	bool cppVar_29870 = (cppVar_29868 == 128);
	BIT_VEC cppVar_29871 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29872 = (cppVar_29871 << 3) | 0;
	cppVar_29872 = (cppVar_29872 & cppMask_un_5_);
	BIT_VEC cppVar_29873 = (0 << 5) | cppVar_29872;
	cppVar_29873 = (cppVar_29873 & cppMask_un_8_);
	bool cppVar_29875 = (cppVar_29873 == 129);
	BIT_VEC cppVar_29876 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29877 = (cppVar_29876 << 3) | 0;
	cppVar_29877 = (cppVar_29877 & cppMask_un_5_);
	BIT_VEC cppVar_29878 = (0 << 5) | cppVar_29877;
	cppVar_29878 = (cppVar_29878 & cppMask_un_8_);
	bool cppVar_29880 = (cppVar_29878 == 130);
	BIT_VEC cppVar_29881 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29882 = (cppVar_29881 << 3) | 0;
	cppVar_29882 = (cppVar_29882 & cppMask_un_5_);
	BIT_VEC cppVar_29883 = (0 << 5) | cppVar_29882;
	cppVar_29883 = (cppVar_29883 & cppMask_un_8_);
	bool cppVar_29885 = (cppVar_29883 == 131);
	BIT_VEC cppVar_29886 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29887 = (cppVar_29886 << 3) | 0;
	cppVar_29887 = (cppVar_29887 & cppMask_un_5_);
	BIT_VEC cppVar_29888 = (0 << 5) | cppVar_29887;
	cppVar_29888 = (cppVar_29888 & cppMask_un_8_);
	bool cppVar_29890 = (cppVar_29888 == 135);
	BIT_VEC cppVar_29891 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29892 = (cppVar_29891 << 3) | 0;
	cppVar_29892 = (cppVar_29892 & cppMask_un_5_);
	BIT_VEC cppVar_29893 = (0 << 5) | cppVar_29892;
	cppVar_29893 = (cppVar_29893 & cppMask_un_8_);
	bool cppVar_29895 = (cppVar_29893 == 136);
	BIT_VEC cppVar_29896 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29897 = (cppVar_29896 << 3) | 0;
	cppVar_29897 = (cppVar_29897 & cppMask_un_5_);
	BIT_VEC cppVar_29898 = (0 << 5) | cppVar_29897;
	cppVar_29898 = (cppVar_29898 & cppMask_un_8_);
	bool cppVar_29900 = (cppVar_29898 == 137);
	BIT_VEC cppVar_29901 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29902 = (cppVar_29901 << 3) | 0;
	cppVar_29902 = (cppVar_29902 & cppMask_un_5_);
	BIT_VEC cppVar_29903 = (0 << 5) | cppVar_29902;
	cppVar_29903 = (cppVar_29903 & cppMask_un_8_);
	bool cppVar_29905 = (cppVar_29903 == 138);
	BIT_VEC cppVar_29906 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29907 = (cppVar_29906 << 3) | 0;
	cppVar_29907 = (cppVar_29907 & cppMask_un_5_);
	BIT_VEC cppVar_29908 = (0 << 5) | cppVar_29907;
	cppVar_29908 = (cppVar_29908 & cppMask_un_8_);
	bool cppVar_29910 = (cppVar_29908 == 140);
	BIT_VEC cppVar_29911 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29912 = (cppVar_29911 << 3) | 0;
	cppVar_29912 = (cppVar_29912 & cppMask_un_5_);
	BIT_VEC cppVar_29913 = (0 << 5) | cppVar_29912;
	cppVar_29913 = (cppVar_29913 & cppMask_un_8_);
	bool cppVar_29915 = (cppVar_29913 == 139);
	BIT_VEC cppVar_29916 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29917 = (cppVar_29916 << 3) | 0;
	cppVar_29917 = (cppVar_29917 & cppMask_un_5_);
	BIT_VEC cppVar_29918 = (0 << 5) | cppVar_29917;
	cppVar_29918 = (cppVar_29918 & cppMask_un_8_);
	bool cppVar_29920 = (cppVar_29918 == 141);
	BIT_VEC cppVar_29921 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29922 = (cppVar_29921 << 3) | 0;
	cppVar_29922 = (cppVar_29922 & cppMask_un_5_);
	BIT_VEC cppVar_29923 = (0 << 5) | cppVar_29922;
	cppVar_29923 = (cppVar_29923 & cppMask_un_8_);
	bool cppVar_29925 = (cppVar_29923 == 144);
	BIT_VEC cppVar_29926 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29927 = (cppVar_29926 << 3) | 0;
	cppVar_29927 = (cppVar_29927 & cppMask_un_5_);
	BIT_VEC cppVar_29928 = (0 << 5) | cppVar_29927;
	cppVar_29928 = (cppVar_29928 & cppMask_un_8_);
	bool cppVar_29930 = (cppVar_29928 == 152);
	BIT_VEC cppVar_29931 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29932 = (cppVar_29931 << 3) | 0;
	cppVar_29932 = (cppVar_29932 & cppMask_un_5_);
	BIT_VEC cppVar_29933 = (0 << 5) | cppVar_29932;
	cppVar_29933 = (cppVar_29933 & cppMask_un_8_);
	bool cppVar_29935 = (cppVar_29933 == 153);
	BIT_VEC cppVar_29936 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29937 = (cppVar_29936 << 3) | 0;
	cppVar_29937 = (cppVar_29937 & cppMask_un_5_);
	BIT_VEC cppVar_29938 = (0 << 5) | cppVar_29937;
	cppVar_29938 = (cppVar_29938 & cppMask_un_8_);
	bool cppVar_29940 = (cppVar_29938 == 160);
	BIT_VEC cppVar_29941 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29942 = (cppVar_29941 << 3) | 0;
	cppVar_29942 = (cppVar_29942 & cppMask_un_5_);
	BIT_VEC cppVar_29943 = (0 << 5) | cppVar_29942;
	cppVar_29943 = (cppVar_29943 & cppMask_un_8_);
	bool cppVar_29945 = (cppVar_29943 == 168);
	BIT_VEC cppVar_29946 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29947 = (cppVar_29946 << 3) | 0;
	cppVar_29947 = (cppVar_29947 & cppMask_un_5_);
	BIT_VEC cppVar_29948 = (0 << 5) | cppVar_29947;
	cppVar_29948 = (cppVar_29948 & cppMask_un_8_);
	bool cppVar_29950 = (cppVar_29948 == 176);
	BIT_VEC cppVar_29951 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29952 = (cppVar_29951 << 3) | 0;
	cppVar_29952 = (cppVar_29952 & cppMask_un_5_);
	BIT_VEC cppVar_29953 = (0 << 5) | cppVar_29952;
	cppVar_29953 = (cppVar_29953 & cppMask_un_8_);
	bool cppVar_29955 = (cppVar_29953 == 184);
	BIT_VEC cppVar_29956 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29957 = (cppVar_29956 << 3) | 0;
	cppVar_29957 = (cppVar_29957 & cppMask_un_5_);
	BIT_VEC cppVar_29958 = (0 << 5) | cppVar_29957;
	cppVar_29958 = (cppVar_29958 & cppMask_un_8_);
	bool cppVar_29960 = (cppVar_29958 == 208);
	BIT_VEC cppVar_29961 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29962 = (cppVar_29961 << 3) | 0;
	cppVar_29962 = (cppVar_29962 & cppMask_un_5_);
	BIT_VEC cppVar_29963 = (0 << 5) | cppVar_29962;
	cppVar_29963 = (cppVar_29963 & cppMask_un_8_);
	bool cppVar_29965 = (cppVar_29963 == 224);
	BIT_VEC cppVar_29966 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_29967 = (cppVar_29966 << 3) | 0;
	cppVar_29967 = (cppVar_29967 & cppMask_un_5_);
	BIT_VEC cppVar_29968 = (0 << 5) | cppVar_29967;
	cppVar_29968 = (cppVar_29968 & cppMask_un_8_);
	bool cppVar_29970 = (cppVar_29968 == 240);
	BIT_VEC cppVar_29972 = (cppVar_29970) ? B : 0;
	BIT_VEC cppVar_29973 = (cppVar_29965) ? ACC : cppVar_29972;
	BIT_VEC cppVar_29974 = (cppVar_29960) ? PSW : cppVar_29973;
	BIT_VEC cppVar_29975 = (cppVar_29955) ? IP : cppVar_29974;
	BIT_VEC cppVar_29976 = (cppVar_29950) ? P3 : cppVar_29975;
	BIT_VEC cppVar_29977 = (cppVar_29945) ? IE : cppVar_29976;
	BIT_VEC cppVar_29978 = (cppVar_29940) ? P2 : cppVar_29977;
	BIT_VEC cppVar_29979 = (cppVar_29935) ? SBUF : cppVar_29978;
	BIT_VEC cppVar_29980 = (cppVar_29930) ? SCON : cppVar_29979;
	BIT_VEC cppVar_29981 = (cppVar_29925) ? P1 : cppVar_29980;
	BIT_VEC cppVar_29982 = (cppVar_29920) ? TH1 : cppVar_29981;
	BIT_VEC cppVar_29983 = (cppVar_29915) ? TL1 : cppVar_29982;
	BIT_VEC cppVar_29984 = (cppVar_29910) ? TH0 : cppVar_29983;
	BIT_VEC cppVar_29985 = (cppVar_29905) ? TL0 : cppVar_29984;
	BIT_VEC cppVar_29986 = (cppVar_29900) ? TMOD : cppVar_29985;
	BIT_VEC cppVar_29987 = (cppVar_29895) ? TCON : cppVar_29986;
	BIT_VEC cppVar_29988 = (cppVar_29890) ? PCON : cppVar_29987;
	BIT_VEC cppVar_29989 = (cppVar_29885) ? DPH : cppVar_29988;
	BIT_VEC cppVar_29990 = (cppVar_29880) ? DPL : cppVar_29989;
	BIT_VEC cppVar_29991 = (cppVar_29875) ? SP : cppVar_29990;
	BIT_VEC cppVar_29992 = (cppVar_29870) ? P0 : cppVar_29991;
	BIT_VEC cppVar_29993 = (cppVar_29861) ? cppVar_29865 : cppVar_29992;
	BIT_VEC cppVar_29994 = (cppVar_29853) ? cppVar_29993 : P1;
	BIT_VEC cppVar_29995 = ROM.rd(PC);
	bool cppVar_29997 = (cppVar_29995 == 135);
	BIT_VEC cppVar_29999 = PC + 1;
	cppVar_29999 = (cppVar_29999 & cppMask_un_16_);
	BIT_VEC cppVar_30000 = ROM.rd(cppVar_29999);
	bool cppVar_30002 = (cppVar_30000 == 144);
	BIT_VEC cppVar_30004 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_30006 = (cppVar_30004 << 3) | 1;
	cppVar_30006 = (cppVar_30006 & cppMask_un_5_);
	BIT_VEC cppVar_30007 = (0 << 5) | cppVar_30006;
	cppVar_30007 = (cppVar_30007 & cppMask_un_8_);
	BIT_VEC cppVar_30008 = IRAM.rd(cppVar_30007);
	BIT_VEC cppVar_30009 = IRAM.rd(cppVar_30008);
	BIT_VEC cppVar_30010 = (cppVar_30002) ? cppVar_30009 : P1;
	BIT_VEC cppVar_30011 = ROM.rd(PC);
	bool cppVar_30013 = (cppVar_30011 == 134);
	BIT_VEC cppVar_30015 = PC + 1;
	cppVar_30015 = (cppVar_30015 & cppMask_un_16_);
	BIT_VEC cppVar_30016 = ROM.rd(cppVar_30015);
	bool cppVar_30018 = (cppVar_30016 == 144);
	BIT_VEC cppVar_30020 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_30022 = (cppVar_30020 << 3) | 0;
	cppVar_30022 = (cppVar_30022 & cppMask_un_5_);
	BIT_VEC cppVar_30023 = (0 << 5) | cppVar_30022;
	cppVar_30023 = (cppVar_30023 & cppMask_un_8_);
	BIT_VEC cppVar_30024 = IRAM.rd(cppVar_30023);
	BIT_VEC cppVar_30025 = IRAM.rd(cppVar_30024);
	BIT_VEC cppVar_30026 = (cppVar_30018) ? cppVar_30025 : P1;
	BIT_VEC cppVar_30027 = ROM.rd(PC);
	bool cppVar_30029 = (cppVar_30027 == 133);
	BIT_VEC cppVar_30031 = PC + 2;
	cppVar_30031 = (cppVar_30031 & cppMask_un_16_);
	BIT_VEC cppVar_30032 = ROM.rd(cppVar_30031);
	bool cppVar_30034 = (cppVar_30032 == 144);
	BIT_VEC cppVar_30036 = PC + 1;
	cppVar_30036 = (cppVar_30036 & cppMask_un_16_);
	BIT_VEC cppVar_30037 = ROM.rd(cppVar_30036);
	BIT_VEC cppVar_30038 = (cppVar_30037 >> 7) & cppMask_un_1_;
	bool cppVar_30040 = (cppVar_30038 == 0);
	BIT_VEC cppVar_30041 = PC + 1;
	cppVar_30041 = (cppVar_30041 & cppMask_un_16_);
	BIT_VEC cppVar_30042 = ROM.rd(cppVar_30041);
	BIT_VEC cppVar_30043 = IRAM.rd(cppVar_30042);
	BIT_VEC cppVar_30044 = PC + 1;
	cppVar_30044 = (cppVar_30044 & cppMask_un_16_);
	BIT_VEC cppVar_30045 = ROM.rd(cppVar_30044);
	bool cppVar_30047 = (cppVar_30045 == 128);
	BIT_VEC cppVar_30048 = PC + 1;
	cppVar_30048 = (cppVar_30048 & cppMask_un_16_);
	BIT_VEC cppVar_30049 = ROM.rd(cppVar_30048);
	bool cppVar_30051 = (cppVar_30049 == 129);
	BIT_VEC cppVar_30052 = PC + 1;
	cppVar_30052 = (cppVar_30052 & cppMask_un_16_);
	BIT_VEC cppVar_30053 = ROM.rd(cppVar_30052);
	bool cppVar_30055 = (cppVar_30053 == 130);
	BIT_VEC cppVar_30056 = PC + 1;
	cppVar_30056 = (cppVar_30056 & cppMask_un_16_);
	BIT_VEC cppVar_30057 = ROM.rd(cppVar_30056);
	bool cppVar_30059 = (cppVar_30057 == 131);
	BIT_VEC cppVar_30060 = PC + 1;
	cppVar_30060 = (cppVar_30060 & cppMask_un_16_);
	BIT_VEC cppVar_30061 = ROM.rd(cppVar_30060);
	bool cppVar_30063 = (cppVar_30061 == 135);
	BIT_VEC cppVar_30064 = PC + 1;
	cppVar_30064 = (cppVar_30064 & cppMask_un_16_);
	BIT_VEC cppVar_30065 = ROM.rd(cppVar_30064);
	bool cppVar_30067 = (cppVar_30065 == 136);
	BIT_VEC cppVar_30068 = PC + 1;
	cppVar_30068 = (cppVar_30068 & cppMask_un_16_);
	BIT_VEC cppVar_30069 = ROM.rd(cppVar_30068);
	bool cppVar_30071 = (cppVar_30069 == 137);
	BIT_VEC cppVar_30072 = PC + 1;
	cppVar_30072 = (cppVar_30072 & cppMask_un_16_);
	BIT_VEC cppVar_30073 = ROM.rd(cppVar_30072);
	bool cppVar_30075 = (cppVar_30073 == 138);
	BIT_VEC cppVar_30076 = PC + 1;
	cppVar_30076 = (cppVar_30076 & cppMask_un_16_);
	BIT_VEC cppVar_30077 = ROM.rd(cppVar_30076);
	bool cppVar_30079 = (cppVar_30077 == 140);
	BIT_VEC cppVar_30080 = PC + 1;
	cppVar_30080 = (cppVar_30080 & cppMask_un_16_);
	BIT_VEC cppVar_30081 = ROM.rd(cppVar_30080);
	bool cppVar_30083 = (cppVar_30081 == 139);
	BIT_VEC cppVar_30084 = PC + 1;
	cppVar_30084 = (cppVar_30084 & cppMask_un_16_);
	BIT_VEC cppVar_30085 = ROM.rd(cppVar_30084);
	bool cppVar_30087 = (cppVar_30085 == 141);
	BIT_VEC cppVar_30088 = PC + 1;
	cppVar_30088 = (cppVar_30088 & cppMask_un_16_);
	BIT_VEC cppVar_30089 = ROM.rd(cppVar_30088);
	bool cppVar_30091 = (cppVar_30089 == 144);
	BIT_VEC cppVar_30092 = PC + 1;
	cppVar_30092 = (cppVar_30092 & cppMask_un_16_);
	BIT_VEC cppVar_30093 = ROM.rd(cppVar_30092);
	bool cppVar_30095 = (cppVar_30093 == 152);
	BIT_VEC cppVar_30096 = PC + 1;
	cppVar_30096 = (cppVar_30096 & cppMask_un_16_);
	BIT_VEC cppVar_30097 = ROM.rd(cppVar_30096);
	bool cppVar_30099 = (cppVar_30097 == 153);
	BIT_VEC cppVar_30100 = PC + 1;
	cppVar_30100 = (cppVar_30100 & cppMask_un_16_);
	BIT_VEC cppVar_30101 = ROM.rd(cppVar_30100);
	bool cppVar_30103 = (cppVar_30101 == 160);
	BIT_VEC cppVar_30104 = PC + 1;
	cppVar_30104 = (cppVar_30104 & cppMask_un_16_);
	BIT_VEC cppVar_30105 = ROM.rd(cppVar_30104);
	bool cppVar_30107 = (cppVar_30105 == 168);
	BIT_VEC cppVar_30108 = PC + 1;
	cppVar_30108 = (cppVar_30108 & cppMask_un_16_);
	BIT_VEC cppVar_30109 = ROM.rd(cppVar_30108);
	bool cppVar_30111 = (cppVar_30109 == 176);
	BIT_VEC cppVar_30112 = PC + 1;
	cppVar_30112 = (cppVar_30112 & cppMask_un_16_);
	BIT_VEC cppVar_30113 = ROM.rd(cppVar_30112);
	bool cppVar_30115 = (cppVar_30113 == 184);
	BIT_VEC cppVar_30116 = PC + 1;
	cppVar_30116 = (cppVar_30116 & cppMask_un_16_);
	BIT_VEC cppVar_30117 = ROM.rd(cppVar_30116);
	bool cppVar_30119 = (cppVar_30117 == 208);
	BIT_VEC cppVar_30120 = PC + 1;
	cppVar_30120 = (cppVar_30120 & cppMask_un_16_);
	BIT_VEC cppVar_30121 = ROM.rd(cppVar_30120);
	bool cppVar_30123 = (cppVar_30121 == 224);
	BIT_VEC cppVar_30124 = PC + 1;
	cppVar_30124 = (cppVar_30124 & cppMask_un_16_);
	BIT_VEC cppVar_30125 = ROM.rd(cppVar_30124);
	bool cppVar_30127 = (cppVar_30125 == 240);
	BIT_VEC cppVar_30129 = (cppVar_30127) ? B : 0;
	BIT_VEC cppVar_30130 = (cppVar_30123) ? ACC : cppVar_30129;
	BIT_VEC cppVar_30131 = (cppVar_30119) ? PSW : cppVar_30130;
	BIT_VEC cppVar_30132 = (cppVar_30115) ? IP : cppVar_30131;
	BIT_VEC cppVar_30133 = (cppVar_30111) ? P3 : cppVar_30132;
	BIT_VEC cppVar_30134 = (cppVar_30107) ? IE : cppVar_30133;
	BIT_VEC cppVar_30135 = (cppVar_30103) ? P2 : cppVar_30134;
	BIT_VEC cppVar_30136 = (cppVar_30099) ? SBUF : cppVar_30135;
	BIT_VEC cppVar_30137 = (cppVar_30095) ? SCON : cppVar_30136;
	BIT_VEC cppVar_30138 = (cppVar_30091) ? P1 : cppVar_30137;
	BIT_VEC cppVar_30139 = (cppVar_30087) ? TH1 : cppVar_30138;
	BIT_VEC cppVar_30140 = (cppVar_30083) ? TL1 : cppVar_30139;
	BIT_VEC cppVar_30141 = (cppVar_30079) ? TH0 : cppVar_30140;
	BIT_VEC cppVar_30142 = (cppVar_30075) ? TL0 : cppVar_30141;
	BIT_VEC cppVar_30143 = (cppVar_30071) ? TMOD : cppVar_30142;
	BIT_VEC cppVar_30144 = (cppVar_30067) ? TCON : cppVar_30143;
	BIT_VEC cppVar_30145 = (cppVar_30063) ? PCON : cppVar_30144;
	BIT_VEC cppVar_30146 = (cppVar_30059) ? DPH : cppVar_30145;
	BIT_VEC cppVar_30147 = (cppVar_30055) ? DPL : cppVar_30146;
	BIT_VEC cppVar_30148 = (cppVar_30051) ? SP : cppVar_30147;
	BIT_VEC cppVar_30149 = (cppVar_30047) ? P0 : cppVar_30148;
	BIT_VEC cppVar_30150 = (cppVar_30040) ? cppVar_30043 : cppVar_30149;
	BIT_VEC cppVar_30151 = (cppVar_30034) ? cppVar_30150 : P1;
	BIT_VEC cppVar_30152 = ROM.rd(PC);
	bool cppVar_30154 = (cppVar_30152 == 117);
	BIT_VEC cppVar_30156 = PC + 1;
	cppVar_30156 = (cppVar_30156 & cppMask_un_16_);
	BIT_VEC cppVar_30157 = ROM.rd(cppVar_30156);
	bool cppVar_30159 = (cppVar_30157 == 144);
	BIT_VEC cppVar_30161 = PC + 2;
	cppVar_30161 = (cppVar_30161 & cppMask_un_16_);
	BIT_VEC cppVar_30162 = ROM.rd(cppVar_30161);
	BIT_VEC cppVar_30163 = (cppVar_30159) ? cppVar_30162 : P1;
	BIT_VEC cppVar_30164 = ROM.rd(PC);
	bool cppVar_30166 = (cppVar_30164 == 99);
	BIT_VEC cppVar_30168 = PC + 1;
	cppVar_30168 = (cppVar_30168 & cppMask_un_16_);
	BIT_VEC cppVar_30169 = ROM.rd(cppVar_30168);
	bool cppVar_30171 = (cppVar_30169 == 144);
	BIT_VEC cppVar_30172 = PC + 1;
	cppVar_30172 = (cppVar_30172 & cppMask_un_16_);
	BIT_VEC cppVar_30173 = ROM.rd(cppVar_30172);
	BIT_VEC cppVar_30174 = (cppVar_30173 >> 7) & cppMask_un_1_;
	bool cppVar_30176 = (cppVar_30174 == 0);
	BIT_VEC cppVar_30177 = PC + 1;
	cppVar_30177 = (cppVar_30177 & cppMask_un_16_);
	BIT_VEC cppVar_30178 = ROM.rd(cppVar_30177);
	BIT_VEC cppVar_30179 = IRAM.rd(cppVar_30178);
	BIT_VEC cppVar_30180 = PC + 1;
	cppVar_30180 = (cppVar_30180 & cppMask_un_16_);
	BIT_VEC cppVar_30181 = ROM.rd(cppVar_30180);
	bool cppVar_30183 = (cppVar_30181 == 128);
	BIT_VEC cppVar_30184 = PC + 1;
	cppVar_30184 = (cppVar_30184 & cppMask_un_16_);
	BIT_VEC cppVar_30185 = ROM.rd(cppVar_30184);
	bool cppVar_30187 = (cppVar_30185 == 129);
	BIT_VEC cppVar_30188 = PC + 1;
	cppVar_30188 = (cppVar_30188 & cppMask_un_16_);
	BIT_VEC cppVar_30189 = ROM.rd(cppVar_30188);
	bool cppVar_30191 = (cppVar_30189 == 130);
	BIT_VEC cppVar_30192 = PC + 1;
	cppVar_30192 = (cppVar_30192 & cppMask_un_16_);
	BIT_VEC cppVar_30193 = ROM.rd(cppVar_30192);
	bool cppVar_30195 = (cppVar_30193 == 131);
	BIT_VEC cppVar_30196 = PC + 1;
	cppVar_30196 = (cppVar_30196 & cppMask_un_16_);
	BIT_VEC cppVar_30197 = ROM.rd(cppVar_30196);
	bool cppVar_30199 = (cppVar_30197 == 135);
	BIT_VEC cppVar_30200 = PC + 1;
	cppVar_30200 = (cppVar_30200 & cppMask_un_16_);
	BIT_VEC cppVar_30201 = ROM.rd(cppVar_30200);
	bool cppVar_30203 = (cppVar_30201 == 136);
	BIT_VEC cppVar_30204 = PC + 1;
	cppVar_30204 = (cppVar_30204 & cppMask_un_16_);
	BIT_VEC cppVar_30205 = ROM.rd(cppVar_30204);
	bool cppVar_30207 = (cppVar_30205 == 137);
	BIT_VEC cppVar_30208 = PC + 1;
	cppVar_30208 = (cppVar_30208 & cppMask_un_16_);
	BIT_VEC cppVar_30209 = ROM.rd(cppVar_30208);
	bool cppVar_30211 = (cppVar_30209 == 138);
	BIT_VEC cppVar_30212 = PC + 1;
	cppVar_30212 = (cppVar_30212 & cppMask_un_16_);
	BIT_VEC cppVar_30213 = ROM.rd(cppVar_30212);
	bool cppVar_30215 = (cppVar_30213 == 140);
	BIT_VEC cppVar_30216 = PC + 1;
	cppVar_30216 = (cppVar_30216 & cppMask_un_16_);
	BIT_VEC cppVar_30217 = ROM.rd(cppVar_30216);
	bool cppVar_30219 = (cppVar_30217 == 139);
	BIT_VEC cppVar_30220 = PC + 1;
	cppVar_30220 = (cppVar_30220 & cppMask_un_16_);
	BIT_VEC cppVar_30221 = ROM.rd(cppVar_30220);
	bool cppVar_30223 = (cppVar_30221 == 141);
	BIT_VEC cppVar_30224 = PC + 1;
	cppVar_30224 = (cppVar_30224 & cppMask_un_16_);
	BIT_VEC cppVar_30225 = ROM.rd(cppVar_30224);
	bool cppVar_30227 = (cppVar_30225 == 144);
	BIT_VEC cppVar_30228 = PC + 1;
	cppVar_30228 = (cppVar_30228 & cppMask_un_16_);
	BIT_VEC cppVar_30229 = ROM.rd(cppVar_30228);
	bool cppVar_30231 = (cppVar_30229 == 152);
	BIT_VEC cppVar_30232 = PC + 1;
	cppVar_30232 = (cppVar_30232 & cppMask_un_16_);
	BIT_VEC cppVar_30233 = ROM.rd(cppVar_30232);
	bool cppVar_30235 = (cppVar_30233 == 153);
	BIT_VEC cppVar_30236 = PC + 1;
	cppVar_30236 = (cppVar_30236 & cppMask_un_16_);
	BIT_VEC cppVar_30237 = ROM.rd(cppVar_30236);
	bool cppVar_30239 = (cppVar_30237 == 160);
	BIT_VEC cppVar_30240 = PC + 1;
	cppVar_30240 = (cppVar_30240 & cppMask_un_16_);
	BIT_VEC cppVar_30241 = ROM.rd(cppVar_30240);
	bool cppVar_30243 = (cppVar_30241 == 168);
	BIT_VEC cppVar_30244 = PC + 1;
	cppVar_30244 = (cppVar_30244 & cppMask_un_16_);
	BIT_VEC cppVar_30245 = ROM.rd(cppVar_30244);
	bool cppVar_30247 = (cppVar_30245 == 176);
	BIT_VEC cppVar_30248 = PC + 1;
	cppVar_30248 = (cppVar_30248 & cppMask_un_16_);
	BIT_VEC cppVar_30249 = ROM.rd(cppVar_30248);
	bool cppVar_30251 = (cppVar_30249 == 184);
	BIT_VEC cppVar_30252 = PC + 1;
	cppVar_30252 = (cppVar_30252 & cppMask_un_16_);
	BIT_VEC cppVar_30253 = ROM.rd(cppVar_30252);
	bool cppVar_30255 = (cppVar_30253 == 208);
	BIT_VEC cppVar_30256 = PC + 1;
	cppVar_30256 = (cppVar_30256 & cppMask_un_16_);
	BIT_VEC cppVar_30257 = ROM.rd(cppVar_30256);
	bool cppVar_30259 = (cppVar_30257 == 224);
	BIT_VEC cppVar_30260 = PC + 1;
	cppVar_30260 = (cppVar_30260 & cppMask_un_16_);
	BIT_VEC cppVar_30261 = ROM.rd(cppVar_30260);
	bool cppVar_30263 = (cppVar_30261 == 240);
	BIT_VEC cppVar_30265 = (cppVar_30263) ? B : 0;
	BIT_VEC cppVar_30266 = (cppVar_30259) ? ACC : cppVar_30265;
	BIT_VEC cppVar_30267 = (cppVar_30255) ? PSW : cppVar_30266;
	BIT_VEC cppVar_30268 = (cppVar_30251) ? IP : cppVar_30267;
	BIT_VEC cppVar_30269 = (cppVar_30247) ? P3 : cppVar_30268;
	BIT_VEC cppVar_30270 = (cppVar_30243) ? IE : cppVar_30269;
	BIT_VEC cppVar_30271 = (cppVar_30239) ? P2 : cppVar_30270;
	BIT_VEC cppVar_30272 = (cppVar_30235) ? SBUF : cppVar_30271;
	BIT_VEC cppVar_30273 = (cppVar_30231) ? SCON : cppVar_30272;
	BIT_VEC cppVar_30274 = (cppVar_30227) ? P1 : cppVar_30273;
	BIT_VEC cppVar_30275 = (cppVar_30223) ? TH1 : cppVar_30274;
	BIT_VEC cppVar_30276 = (cppVar_30219) ? TL1 : cppVar_30275;
	BIT_VEC cppVar_30277 = (cppVar_30215) ? TH0 : cppVar_30276;
	BIT_VEC cppVar_30278 = (cppVar_30211) ? TL0 : cppVar_30277;
	BIT_VEC cppVar_30279 = (cppVar_30207) ? TMOD : cppVar_30278;
	BIT_VEC cppVar_30280 = (cppVar_30203) ? TCON : cppVar_30279;
	BIT_VEC cppVar_30281 = (cppVar_30199) ? PCON : cppVar_30280;
	BIT_VEC cppVar_30282 = (cppVar_30195) ? DPH : cppVar_30281;
	BIT_VEC cppVar_30283 = (cppVar_30191) ? DPL : cppVar_30282;
	BIT_VEC cppVar_30284 = (cppVar_30187) ? SP : cppVar_30283;
	BIT_VEC cppVar_30285 = (cppVar_30183) ? P0 : cppVar_30284;
	BIT_VEC cppVar_30286 = (cppVar_30176) ? cppVar_30179 : cppVar_30285;
	BIT_VEC cppVar_30288 = PC + 2;
	cppVar_30288 = (cppVar_30288 & cppMask_un_16_);
	BIT_VEC cppVar_30289 = ROM.rd(cppVar_30288);
	BIT_VEC cppVar_30290 = cppVar_30286 ^ cppVar_30289;
	BIT_VEC cppVar_30291 = (cppVar_30171) ? cppVar_30290 : P1;
	BIT_VEC cppVar_30292 = ROM.rd(PC);
	bool cppVar_30294 = (cppVar_30292 == 98);
	BIT_VEC cppVar_30296 = PC + 1;
	cppVar_30296 = (cppVar_30296 & cppMask_un_16_);
	BIT_VEC cppVar_30297 = ROM.rd(cppVar_30296);
	bool cppVar_30299 = (cppVar_30297 == 144);
	BIT_VEC cppVar_30300 = PC + 1;
	cppVar_30300 = (cppVar_30300 & cppMask_un_16_);
	BIT_VEC cppVar_30301 = ROM.rd(cppVar_30300);
	BIT_VEC cppVar_30302 = (cppVar_30301 >> 7) & cppMask_un_1_;
	bool cppVar_30304 = (cppVar_30302 == 0);
	BIT_VEC cppVar_30305 = PC + 1;
	cppVar_30305 = (cppVar_30305 & cppMask_un_16_);
	BIT_VEC cppVar_30306 = ROM.rd(cppVar_30305);
	BIT_VEC cppVar_30307 = IRAM.rd(cppVar_30306);
	BIT_VEC cppVar_30308 = PC + 1;
	cppVar_30308 = (cppVar_30308 & cppMask_un_16_);
	BIT_VEC cppVar_30309 = ROM.rd(cppVar_30308);
	bool cppVar_30311 = (cppVar_30309 == 128);
	BIT_VEC cppVar_30312 = PC + 1;
	cppVar_30312 = (cppVar_30312 & cppMask_un_16_);
	BIT_VEC cppVar_30313 = ROM.rd(cppVar_30312);
	bool cppVar_30315 = (cppVar_30313 == 129);
	BIT_VEC cppVar_30316 = PC + 1;
	cppVar_30316 = (cppVar_30316 & cppMask_un_16_);
	BIT_VEC cppVar_30317 = ROM.rd(cppVar_30316);
	bool cppVar_30319 = (cppVar_30317 == 130);
	BIT_VEC cppVar_30320 = PC + 1;
	cppVar_30320 = (cppVar_30320 & cppMask_un_16_);
	BIT_VEC cppVar_30321 = ROM.rd(cppVar_30320);
	bool cppVar_30323 = (cppVar_30321 == 131);
	BIT_VEC cppVar_30324 = PC + 1;
	cppVar_30324 = (cppVar_30324 & cppMask_un_16_);
	BIT_VEC cppVar_30325 = ROM.rd(cppVar_30324);
	bool cppVar_30327 = (cppVar_30325 == 135);
	BIT_VEC cppVar_30328 = PC + 1;
	cppVar_30328 = (cppVar_30328 & cppMask_un_16_);
	BIT_VEC cppVar_30329 = ROM.rd(cppVar_30328);
	bool cppVar_30331 = (cppVar_30329 == 136);
	BIT_VEC cppVar_30332 = PC + 1;
	cppVar_30332 = (cppVar_30332 & cppMask_un_16_);
	BIT_VEC cppVar_30333 = ROM.rd(cppVar_30332);
	bool cppVar_30335 = (cppVar_30333 == 137);
	BIT_VEC cppVar_30336 = PC + 1;
	cppVar_30336 = (cppVar_30336 & cppMask_un_16_);
	BIT_VEC cppVar_30337 = ROM.rd(cppVar_30336);
	bool cppVar_30339 = (cppVar_30337 == 138);
	BIT_VEC cppVar_30340 = PC + 1;
	cppVar_30340 = (cppVar_30340 & cppMask_un_16_);
	BIT_VEC cppVar_30341 = ROM.rd(cppVar_30340);
	bool cppVar_30343 = (cppVar_30341 == 140);
	BIT_VEC cppVar_30344 = PC + 1;
	cppVar_30344 = (cppVar_30344 & cppMask_un_16_);
	BIT_VEC cppVar_30345 = ROM.rd(cppVar_30344);
	bool cppVar_30347 = (cppVar_30345 == 139);
	BIT_VEC cppVar_30348 = PC + 1;
	cppVar_30348 = (cppVar_30348 & cppMask_un_16_);
	BIT_VEC cppVar_30349 = ROM.rd(cppVar_30348);
	bool cppVar_30351 = (cppVar_30349 == 141);
	BIT_VEC cppVar_30352 = PC + 1;
	cppVar_30352 = (cppVar_30352 & cppMask_un_16_);
	BIT_VEC cppVar_30353 = ROM.rd(cppVar_30352);
	bool cppVar_30355 = (cppVar_30353 == 144);
	BIT_VEC cppVar_30356 = PC + 1;
	cppVar_30356 = (cppVar_30356 & cppMask_un_16_);
	BIT_VEC cppVar_30357 = ROM.rd(cppVar_30356);
	bool cppVar_30359 = (cppVar_30357 == 152);
	BIT_VEC cppVar_30360 = PC + 1;
	cppVar_30360 = (cppVar_30360 & cppMask_un_16_);
	BIT_VEC cppVar_30361 = ROM.rd(cppVar_30360);
	bool cppVar_30363 = (cppVar_30361 == 153);
	BIT_VEC cppVar_30364 = PC + 1;
	cppVar_30364 = (cppVar_30364 & cppMask_un_16_);
	BIT_VEC cppVar_30365 = ROM.rd(cppVar_30364);
	bool cppVar_30367 = (cppVar_30365 == 160);
	BIT_VEC cppVar_30368 = PC + 1;
	cppVar_30368 = (cppVar_30368 & cppMask_un_16_);
	BIT_VEC cppVar_30369 = ROM.rd(cppVar_30368);
	bool cppVar_30371 = (cppVar_30369 == 168);
	BIT_VEC cppVar_30372 = PC + 1;
	cppVar_30372 = (cppVar_30372 & cppMask_un_16_);
	BIT_VEC cppVar_30373 = ROM.rd(cppVar_30372);
	bool cppVar_30375 = (cppVar_30373 == 176);
	BIT_VEC cppVar_30376 = PC + 1;
	cppVar_30376 = (cppVar_30376 & cppMask_un_16_);
	BIT_VEC cppVar_30377 = ROM.rd(cppVar_30376);
	bool cppVar_30379 = (cppVar_30377 == 184);
	BIT_VEC cppVar_30380 = PC + 1;
	cppVar_30380 = (cppVar_30380 & cppMask_un_16_);
	BIT_VEC cppVar_30381 = ROM.rd(cppVar_30380);
	bool cppVar_30383 = (cppVar_30381 == 208);
	BIT_VEC cppVar_30384 = PC + 1;
	cppVar_30384 = (cppVar_30384 & cppMask_un_16_);
	BIT_VEC cppVar_30385 = ROM.rd(cppVar_30384);
	bool cppVar_30387 = (cppVar_30385 == 224);
	BIT_VEC cppVar_30388 = PC + 1;
	cppVar_30388 = (cppVar_30388 & cppMask_un_16_);
	BIT_VEC cppVar_30389 = ROM.rd(cppVar_30388);
	bool cppVar_30391 = (cppVar_30389 == 240);
	BIT_VEC cppVar_30393 = (cppVar_30391) ? B : 0;
	BIT_VEC cppVar_30394 = (cppVar_30387) ? ACC : cppVar_30393;
	BIT_VEC cppVar_30395 = (cppVar_30383) ? PSW : cppVar_30394;
	BIT_VEC cppVar_30396 = (cppVar_30379) ? IP : cppVar_30395;
	BIT_VEC cppVar_30397 = (cppVar_30375) ? P3 : cppVar_30396;
	BIT_VEC cppVar_30398 = (cppVar_30371) ? IE : cppVar_30397;
	BIT_VEC cppVar_30399 = (cppVar_30367) ? P2 : cppVar_30398;
	BIT_VEC cppVar_30400 = (cppVar_30363) ? SBUF : cppVar_30399;
	BIT_VEC cppVar_30401 = (cppVar_30359) ? SCON : cppVar_30400;
	BIT_VEC cppVar_30402 = (cppVar_30355) ? P1 : cppVar_30401;
	BIT_VEC cppVar_30403 = (cppVar_30351) ? TH1 : cppVar_30402;
	BIT_VEC cppVar_30404 = (cppVar_30347) ? TL1 : cppVar_30403;
	BIT_VEC cppVar_30405 = (cppVar_30343) ? TH0 : cppVar_30404;
	BIT_VEC cppVar_30406 = (cppVar_30339) ? TL0 : cppVar_30405;
	BIT_VEC cppVar_30407 = (cppVar_30335) ? TMOD : cppVar_30406;
	BIT_VEC cppVar_30408 = (cppVar_30331) ? TCON : cppVar_30407;
	BIT_VEC cppVar_30409 = (cppVar_30327) ? PCON : cppVar_30408;
	BIT_VEC cppVar_30410 = (cppVar_30323) ? DPH : cppVar_30409;
	BIT_VEC cppVar_30411 = (cppVar_30319) ? DPL : cppVar_30410;
	BIT_VEC cppVar_30412 = (cppVar_30315) ? SP : cppVar_30411;
	BIT_VEC cppVar_30413 = (cppVar_30311) ? P0 : cppVar_30412;
	BIT_VEC cppVar_30414 = (cppVar_30304) ? cppVar_30307 : cppVar_30413;
	BIT_VEC cppVar_30415 = cppVar_30414 ^ ACC;
	BIT_VEC cppVar_30416 = (cppVar_30299) ? cppVar_30415 : P1;
	BIT_VEC cppVar_30417 = ROM.rd(PC);
	bool cppVar_30419 = (cppVar_30417 == 83);
	BIT_VEC cppVar_30421 = PC + 1;
	cppVar_30421 = (cppVar_30421 & cppMask_un_16_);
	BIT_VEC cppVar_30422 = ROM.rd(cppVar_30421);
	bool cppVar_30424 = (cppVar_30422 == 144);
	BIT_VEC cppVar_30425 = PC + 1;
	cppVar_30425 = (cppVar_30425 & cppMask_un_16_);
	BIT_VEC cppVar_30426 = ROM.rd(cppVar_30425);
	BIT_VEC cppVar_30427 = (cppVar_30426 >> 7) & cppMask_un_1_;
	bool cppVar_30429 = (cppVar_30427 == 0);
	BIT_VEC cppVar_30430 = PC + 1;
	cppVar_30430 = (cppVar_30430 & cppMask_un_16_);
	BIT_VEC cppVar_30431 = ROM.rd(cppVar_30430);
	BIT_VEC cppVar_30432 = IRAM.rd(cppVar_30431);
	BIT_VEC cppVar_30433 = PC + 1;
	cppVar_30433 = (cppVar_30433 & cppMask_un_16_);
	BIT_VEC cppVar_30434 = ROM.rd(cppVar_30433);
	bool cppVar_30436 = (cppVar_30434 == 128);
	BIT_VEC cppVar_30437 = PC + 1;
	cppVar_30437 = (cppVar_30437 & cppMask_un_16_);
	BIT_VEC cppVar_30438 = ROM.rd(cppVar_30437);
	bool cppVar_30440 = (cppVar_30438 == 129);
	BIT_VEC cppVar_30441 = PC + 1;
	cppVar_30441 = (cppVar_30441 & cppMask_un_16_);
	BIT_VEC cppVar_30442 = ROM.rd(cppVar_30441);
	bool cppVar_30444 = (cppVar_30442 == 130);
	BIT_VEC cppVar_30445 = PC + 1;
	cppVar_30445 = (cppVar_30445 & cppMask_un_16_);
	BIT_VEC cppVar_30446 = ROM.rd(cppVar_30445);
	bool cppVar_30448 = (cppVar_30446 == 131);
	BIT_VEC cppVar_30449 = PC + 1;
	cppVar_30449 = (cppVar_30449 & cppMask_un_16_);
	BIT_VEC cppVar_30450 = ROM.rd(cppVar_30449);
	bool cppVar_30452 = (cppVar_30450 == 135);
	BIT_VEC cppVar_30453 = PC + 1;
	cppVar_30453 = (cppVar_30453 & cppMask_un_16_);
	BIT_VEC cppVar_30454 = ROM.rd(cppVar_30453);
	bool cppVar_30456 = (cppVar_30454 == 136);
	BIT_VEC cppVar_30457 = PC + 1;
	cppVar_30457 = (cppVar_30457 & cppMask_un_16_);
	BIT_VEC cppVar_30458 = ROM.rd(cppVar_30457);
	bool cppVar_30460 = (cppVar_30458 == 137);
	BIT_VEC cppVar_30461 = PC + 1;
	cppVar_30461 = (cppVar_30461 & cppMask_un_16_);
	BIT_VEC cppVar_30462 = ROM.rd(cppVar_30461);
	bool cppVar_30464 = (cppVar_30462 == 138);
	BIT_VEC cppVar_30465 = PC + 1;
	cppVar_30465 = (cppVar_30465 & cppMask_un_16_);
	BIT_VEC cppVar_30466 = ROM.rd(cppVar_30465);
	bool cppVar_30468 = (cppVar_30466 == 140);
	BIT_VEC cppVar_30469 = PC + 1;
	cppVar_30469 = (cppVar_30469 & cppMask_un_16_);
	BIT_VEC cppVar_30470 = ROM.rd(cppVar_30469);
	bool cppVar_30472 = (cppVar_30470 == 139);
	BIT_VEC cppVar_30473 = PC + 1;
	cppVar_30473 = (cppVar_30473 & cppMask_un_16_);
	BIT_VEC cppVar_30474 = ROM.rd(cppVar_30473);
	bool cppVar_30476 = (cppVar_30474 == 141);
	BIT_VEC cppVar_30477 = PC + 1;
	cppVar_30477 = (cppVar_30477 & cppMask_un_16_);
	BIT_VEC cppVar_30478 = ROM.rd(cppVar_30477);
	bool cppVar_30480 = (cppVar_30478 == 144);
	BIT_VEC cppVar_30481 = PC + 1;
	cppVar_30481 = (cppVar_30481 & cppMask_un_16_);
	BIT_VEC cppVar_30482 = ROM.rd(cppVar_30481);
	bool cppVar_30484 = (cppVar_30482 == 152);
	BIT_VEC cppVar_30485 = PC + 1;
	cppVar_30485 = (cppVar_30485 & cppMask_un_16_);
	BIT_VEC cppVar_30486 = ROM.rd(cppVar_30485);
	bool cppVar_30488 = (cppVar_30486 == 153);
	BIT_VEC cppVar_30489 = PC + 1;
	cppVar_30489 = (cppVar_30489 & cppMask_un_16_);
	BIT_VEC cppVar_30490 = ROM.rd(cppVar_30489);
	bool cppVar_30492 = (cppVar_30490 == 160);
	BIT_VEC cppVar_30493 = PC + 1;
	cppVar_30493 = (cppVar_30493 & cppMask_un_16_);
	BIT_VEC cppVar_30494 = ROM.rd(cppVar_30493);
	bool cppVar_30496 = (cppVar_30494 == 168);
	BIT_VEC cppVar_30497 = PC + 1;
	cppVar_30497 = (cppVar_30497 & cppMask_un_16_);
	BIT_VEC cppVar_30498 = ROM.rd(cppVar_30497);
	bool cppVar_30500 = (cppVar_30498 == 176);
	BIT_VEC cppVar_30501 = PC + 1;
	cppVar_30501 = (cppVar_30501 & cppMask_un_16_);
	BIT_VEC cppVar_30502 = ROM.rd(cppVar_30501);
	bool cppVar_30504 = (cppVar_30502 == 184);
	BIT_VEC cppVar_30505 = PC + 1;
	cppVar_30505 = (cppVar_30505 & cppMask_un_16_);
	BIT_VEC cppVar_30506 = ROM.rd(cppVar_30505);
	bool cppVar_30508 = (cppVar_30506 == 208);
	BIT_VEC cppVar_30509 = PC + 1;
	cppVar_30509 = (cppVar_30509 & cppMask_un_16_);
	BIT_VEC cppVar_30510 = ROM.rd(cppVar_30509);
	bool cppVar_30512 = (cppVar_30510 == 224);
	BIT_VEC cppVar_30513 = PC + 1;
	cppVar_30513 = (cppVar_30513 & cppMask_un_16_);
	BIT_VEC cppVar_30514 = ROM.rd(cppVar_30513);
	bool cppVar_30516 = (cppVar_30514 == 240);
	BIT_VEC cppVar_30518 = (cppVar_30516) ? B : 0;
	BIT_VEC cppVar_30519 = (cppVar_30512) ? ACC : cppVar_30518;
	BIT_VEC cppVar_30520 = (cppVar_30508) ? PSW : cppVar_30519;
	BIT_VEC cppVar_30521 = (cppVar_30504) ? IP : cppVar_30520;
	BIT_VEC cppVar_30522 = (cppVar_30500) ? P3 : cppVar_30521;
	BIT_VEC cppVar_30523 = (cppVar_30496) ? IE : cppVar_30522;
	BIT_VEC cppVar_30524 = (cppVar_30492) ? P2 : cppVar_30523;
	BIT_VEC cppVar_30525 = (cppVar_30488) ? SBUF : cppVar_30524;
	BIT_VEC cppVar_30526 = (cppVar_30484) ? SCON : cppVar_30525;
	BIT_VEC cppVar_30527 = (cppVar_30480) ? P1 : cppVar_30526;
	BIT_VEC cppVar_30528 = (cppVar_30476) ? TH1 : cppVar_30527;
	BIT_VEC cppVar_30529 = (cppVar_30472) ? TL1 : cppVar_30528;
	BIT_VEC cppVar_30530 = (cppVar_30468) ? TH0 : cppVar_30529;
	BIT_VEC cppVar_30531 = (cppVar_30464) ? TL0 : cppVar_30530;
	BIT_VEC cppVar_30532 = (cppVar_30460) ? TMOD : cppVar_30531;
	BIT_VEC cppVar_30533 = (cppVar_30456) ? TCON : cppVar_30532;
	BIT_VEC cppVar_30534 = (cppVar_30452) ? PCON : cppVar_30533;
	BIT_VEC cppVar_30535 = (cppVar_30448) ? DPH : cppVar_30534;
	BIT_VEC cppVar_30536 = (cppVar_30444) ? DPL : cppVar_30535;
	BIT_VEC cppVar_30537 = (cppVar_30440) ? SP : cppVar_30536;
	BIT_VEC cppVar_30538 = (cppVar_30436) ? P0 : cppVar_30537;
	BIT_VEC cppVar_30539 = (cppVar_30429) ? cppVar_30432 : cppVar_30538;
	BIT_VEC cppVar_30541 = PC + 2;
	cppVar_30541 = (cppVar_30541 & cppMask_un_16_);
	BIT_VEC cppVar_30542 = ROM.rd(cppVar_30541);
	BIT_VEC cppVar_30543 = cppVar_30539 & cppVar_30542;
	BIT_VEC cppVar_30544 = (cppVar_30424) ? cppVar_30543 : P1;
	BIT_VEC cppVar_30545 = ROM.rd(PC);
	bool cppVar_30547 = (cppVar_30545 == 82);
	BIT_VEC cppVar_30549 = PC + 1;
	cppVar_30549 = (cppVar_30549 & cppMask_un_16_);
	BIT_VEC cppVar_30550 = ROM.rd(cppVar_30549);
	bool cppVar_30552 = (cppVar_30550 == 144);
	BIT_VEC cppVar_30553 = PC + 1;
	cppVar_30553 = (cppVar_30553 & cppMask_un_16_);
	BIT_VEC cppVar_30554 = ROM.rd(cppVar_30553);
	BIT_VEC cppVar_30555 = (cppVar_30554 >> 7) & cppMask_un_1_;
	bool cppVar_30557 = (cppVar_30555 == 0);
	BIT_VEC cppVar_30558 = PC + 1;
	cppVar_30558 = (cppVar_30558 & cppMask_un_16_);
	BIT_VEC cppVar_30559 = ROM.rd(cppVar_30558);
	BIT_VEC cppVar_30560 = IRAM.rd(cppVar_30559);
	BIT_VEC cppVar_30561 = PC + 1;
	cppVar_30561 = (cppVar_30561 & cppMask_un_16_);
	BIT_VEC cppVar_30562 = ROM.rd(cppVar_30561);
	bool cppVar_30564 = (cppVar_30562 == 128);
	BIT_VEC cppVar_30565 = PC + 1;
	cppVar_30565 = (cppVar_30565 & cppMask_un_16_);
	BIT_VEC cppVar_30566 = ROM.rd(cppVar_30565);
	bool cppVar_30568 = (cppVar_30566 == 129);
	BIT_VEC cppVar_30569 = PC + 1;
	cppVar_30569 = (cppVar_30569 & cppMask_un_16_);
	BIT_VEC cppVar_30570 = ROM.rd(cppVar_30569);
	bool cppVar_30572 = (cppVar_30570 == 130);
	BIT_VEC cppVar_30573 = PC + 1;
	cppVar_30573 = (cppVar_30573 & cppMask_un_16_);
	BIT_VEC cppVar_30574 = ROM.rd(cppVar_30573);
	bool cppVar_30576 = (cppVar_30574 == 131);
	BIT_VEC cppVar_30577 = PC + 1;
	cppVar_30577 = (cppVar_30577 & cppMask_un_16_);
	BIT_VEC cppVar_30578 = ROM.rd(cppVar_30577);
	bool cppVar_30580 = (cppVar_30578 == 135);
	BIT_VEC cppVar_30581 = PC + 1;
	cppVar_30581 = (cppVar_30581 & cppMask_un_16_);
	BIT_VEC cppVar_30582 = ROM.rd(cppVar_30581);
	bool cppVar_30584 = (cppVar_30582 == 136);
	BIT_VEC cppVar_30585 = PC + 1;
	cppVar_30585 = (cppVar_30585 & cppMask_un_16_);
	BIT_VEC cppVar_30586 = ROM.rd(cppVar_30585);
	bool cppVar_30588 = (cppVar_30586 == 137);
	BIT_VEC cppVar_30589 = PC + 1;
	cppVar_30589 = (cppVar_30589 & cppMask_un_16_);
	BIT_VEC cppVar_30590 = ROM.rd(cppVar_30589);
	bool cppVar_30592 = (cppVar_30590 == 138);
	BIT_VEC cppVar_30593 = PC + 1;
	cppVar_30593 = (cppVar_30593 & cppMask_un_16_);
	BIT_VEC cppVar_30594 = ROM.rd(cppVar_30593);
	bool cppVar_30596 = (cppVar_30594 == 140);
	BIT_VEC cppVar_30597 = PC + 1;
	cppVar_30597 = (cppVar_30597 & cppMask_un_16_);
	BIT_VEC cppVar_30598 = ROM.rd(cppVar_30597);
	bool cppVar_30600 = (cppVar_30598 == 139);
	BIT_VEC cppVar_30601 = PC + 1;
	cppVar_30601 = (cppVar_30601 & cppMask_un_16_);
	BIT_VEC cppVar_30602 = ROM.rd(cppVar_30601);
	bool cppVar_30604 = (cppVar_30602 == 141);
	BIT_VEC cppVar_30605 = PC + 1;
	cppVar_30605 = (cppVar_30605 & cppMask_un_16_);
	BIT_VEC cppVar_30606 = ROM.rd(cppVar_30605);
	bool cppVar_30608 = (cppVar_30606 == 144);
	BIT_VEC cppVar_30609 = PC + 1;
	cppVar_30609 = (cppVar_30609 & cppMask_un_16_);
	BIT_VEC cppVar_30610 = ROM.rd(cppVar_30609);
	bool cppVar_30612 = (cppVar_30610 == 152);
	BIT_VEC cppVar_30613 = PC + 1;
	cppVar_30613 = (cppVar_30613 & cppMask_un_16_);
	BIT_VEC cppVar_30614 = ROM.rd(cppVar_30613);
	bool cppVar_30616 = (cppVar_30614 == 153);
	BIT_VEC cppVar_30617 = PC + 1;
	cppVar_30617 = (cppVar_30617 & cppMask_un_16_);
	BIT_VEC cppVar_30618 = ROM.rd(cppVar_30617);
	bool cppVar_30620 = (cppVar_30618 == 160);
	BIT_VEC cppVar_30621 = PC + 1;
	cppVar_30621 = (cppVar_30621 & cppMask_un_16_);
	BIT_VEC cppVar_30622 = ROM.rd(cppVar_30621);
	bool cppVar_30624 = (cppVar_30622 == 168);
	BIT_VEC cppVar_30625 = PC + 1;
	cppVar_30625 = (cppVar_30625 & cppMask_un_16_);
	BIT_VEC cppVar_30626 = ROM.rd(cppVar_30625);
	bool cppVar_30628 = (cppVar_30626 == 176);
	BIT_VEC cppVar_30629 = PC + 1;
	cppVar_30629 = (cppVar_30629 & cppMask_un_16_);
	BIT_VEC cppVar_30630 = ROM.rd(cppVar_30629);
	bool cppVar_30632 = (cppVar_30630 == 184);
	BIT_VEC cppVar_30633 = PC + 1;
	cppVar_30633 = (cppVar_30633 & cppMask_un_16_);
	BIT_VEC cppVar_30634 = ROM.rd(cppVar_30633);
	bool cppVar_30636 = (cppVar_30634 == 208);
	BIT_VEC cppVar_30637 = PC + 1;
	cppVar_30637 = (cppVar_30637 & cppMask_un_16_);
	BIT_VEC cppVar_30638 = ROM.rd(cppVar_30637);
	bool cppVar_30640 = (cppVar_30638 == 224);
	BIT_VEC cppVar_30641 = PC + 1;
	cppVar_30641 = (cppVar_30641 & cppMask_un_16_);
	BIT_VEC cppVar_30642 = ROM.rd(cppVar_30641);
	bool cppVar_30644 = (cppVar_30642 == 240);
	BIT_VEC cppVar_30646 = (cppVar_30644) ? B : 0;
	BIT_VEC cppVar_30647 = (cppVar_30640) ? ACC : cppVar_30646;
	BIT_VEC cppVar_30648 = (cppVar_30636) ? PSW : cppVar_30647;
	BIT_VEC cppVar_30649 = (cppVar_30632) ? IP : cppVar_30648;
	BIT_VEC cppVar_30650 = (cppVar_30628) ? P3 : cppVar_30649;
	BIT_VEC cppVar_30651 = (cppVar_30624) ? IE : cppVar_30650;
	BIT_VEC cppVar_30652 = (cppVar_30620) ? P2 : cppVar_30651;
	BIT_VEC cppVar_30653 = (cppVar_30616) ? SBUF : cppVar_30652;
	BIT_VEC cppVar_30654 = (cppVar_30612) ? SCON : cppVar_30653;
	BIT_VEC cppVar_30655 = (cppVar_30608) ? P1 : cppVar_30654;
	BIT_VEC cppVar_30656 = (cppVar_30604) ? TH1 : cppVar_30655;
	BIT_VEC cppVar_30657 = (cppVar_30600) ? TL1 : cppVar_30656;
	BIT_VEC cppVar_30658 = (cppVar_30596) ? TH0 : cppVar_30657;
	BIT_VEC cppVar_30659 = (cppVar_30592) ? TL0 : cppVar_30658;
	BIT_VEC cppVar_30660 = (cppVar_30588) ? TMOD : cppVar_30659;
	BIT_VEC cppVar_30661 = (cppVar_30584) ? TCON : cppVar_30660;
	BIT_VEC cppVar_30662 = (cppVar_30580) ? PCON : cppVar_30661;
	BIT_VEC cppVar_30663 = (cppVar_30576) ? DPH : cppVar_30662;
	BIT_VEC cppVar_30664 = (cppVar_30572) ? DPL : cppVar_30663;
	BIT_VEC cppVar_30665 = (cppVar_30568) ? SP : cppVar_30664;
	BIT_VEC cppVar_30666 = (cppVar_30564) ? P0 : cppVar_30665;
	BIT_VEC cppVar_30667 = (cppVar_30557) ? cppVar_30560 : cppVar_30666;
	BIT_VEC cppVar_30668 = cppVar_30667 & ACC;
	BIT_VEC cppVar_30669 = (cppVar_30552) ? cppVar_30668 : P1;
	BIT_VEC cppVar_30670 = ROM.rd(PC);
	bool cppVar_30672 = (cppVar_30670 == 67);
	BIT_VEC cppVar_30674 = PC + 1;
	cppVar_30674 = (cppVar_30674 & cppMask_un_16_);
	BIT_VEC cppVar_30675 = ROM.rd(cppVar_30674);
	bool cppVar_30677 = (cppVar_30675 == 144);
	BIT_VEC cppVar_30678 = PC + 1;
	cppVar_30678 = (cppVar_30678 & cppMask_un_16_);
	BIT_VEC cppVar_30679 = ROM.rd(cppVar_30678);
	BIT_VEC cppVar_30680 = (cppVar_30679 >> 7) & cppMask_un_1_;
	bool cppVar_30682 = (cppVar_30680 == 0);
	BIT_VEC cppVar_30683 = PC + 1;
	cppVar_30683 = (cppVar_30683 & cppMask_un_16_);
	BIT_VEC cppVar_30684 = ROM.rd(cppVar_30683);
	BIT_VEC cppVar_30685 = IRAM.rd(cppVar_30684);
	BIT_VEC cppVar_30686 = PC + 1;
	cppVar_30686 = (cppVar_30686 & cppMask_un_16_);
	BIT_VEC cppVar_30687 = ROM.rd(cppVar_30686);
	bool cppVar_30689 = (cppVar_30687 == 128);
	BIT_VEC cppVar_30690 = PC + 1;
	cppVar_30690 = (cppVar_30690 & cppMask_un_16_);
	BIT_VEC cppVar_30691 = ROM.rd(cppVar_30690);
	bool cppVar_30693 = (cppVar_30691 == 129);
	BIT_VEC cppVar_30694 = PC + 1;
	cppVar_30694 = (cppVar_30694 & cppMask_un_16_);
	BIT_VEC cppVar_30695 = ROM.rd(cppVar_30694);
	bool cppVar_30697 = (cppVar_30695 == 130);
	BIT_VEC cppVar_30698 = PC + 1;
	cppVar_30698 = (cppVar_30698 & cppMask_un_16_);
	BIT_VEC cppVar_30699 = ROM.rd(cppVar_30698);
	bool cppVar_30701 = (cppVar_30699 == 131);
	BIT_VEC cppVar_30702 = PC + 1;
	cppVar_30702 = (cppVar_30702 & cppMask_un_16_);
	BIT_VEC cppVar_30703 = ROM.rd(cppVar_30702);
	bool cppVar_30705 = (cppVar_30703 == 135);
	BIT_VEC cppVar_30706 = PC + 1;
	cppVar_30706 = (cppVar_30706 & cppMask_un_16_);
	BIT_VEC cppVar_30707 = ROM.rd(cppVar_30706);
	bool cppVar_30709 = (cppVar_30707 == 136);
	BIT_VEC cppVar_30710 = PC + 1;
	cppVar_30710 = (cppVar_30710 & cppMask_un_16_);
	BIT_VEC cppVar_30711 = ROM.rd(cppVar_30710);
	bool cppVar_30713 = (cppVar_30711 == 137);
	BIT_VEC cppVar_30714 = PC + 1;
	cppVar_30714 = (cppVar_30714 & cppMask_un_16_);
	BIT_VEC cppVar_30715 = ROM.rd(cppVar_30714);
	bool cppVar_30717 = (cppVar_30715 == 138);
	BIT_VEC cppVar_30718 = PC + 1;
	cppVar_30718 = (cppVar_30718 & cppMask_un_16_);
	BIT_VEC cppVar_30719 = ROM.rd(cppVar_30718);
	bool cppVar_30721 = (cppVar_30719 == 140);
	BIT_VEC cppVar_30722 = PC + 1;
	cppVar_30722 = (cppVar_30722 & cppMask_un_16_);
	BIT_VEC cppVar_30723 = ROM.rd(cppVar_30722);
	bool cppVar_30725 = (cppVar_30723 == 139);
	BIT_VEC cppVar_30726 = PC + 1;
	cppVar_30726 = (cppVar_30726 & cppMask_un_16_);
	BIT_VEC cppVar_30727 = ROM.rd(cppVar_30726);
	bool cppVar_30729 = (cppVar_30727 == 141);
	BIT_VEC cppVar_30730 = PC + 1;
	cppVar_30730 = (cppVar_30730 & cppMask_un_16_);
	BIT_VEC cppVar_30731 = ROM.rd(cppVar_30730);
	bool cppVar_30733 = (cppVar_30731 == 144);
	BIT_VEC cppVar_30734 = PC + 1;
	cppVar_30734 = (cppVar_30734 & cppMask_un_16_);
	BIT_VEC cppVar_30735 = ROM.rd(cppVar_30734);
	bool cppVar_30737 = (cppVar_30735 == 152);
	BIT_VEC cppVar_30738 = PC + 1;
	cppVar_30738 = (cppVar_30738 & cppMask_un_16_);
	BIT_VEC cppVar_30739 = ROM.rd(cppVar_30738);
	bool cppVar_30741 = (cppVar_30739 == 153);
	BIT_VEC cppVar_30742 = PC + 1;
	cppVar_30742 = (cppVar_30742 & cppMask_un_16_);
	BIT_VEC cppVar_30743 = ROM.rd(cppVar_30742);
	bool cppVar_30745 = (cppVar_30743 == 160);
	BIT_VEC cppVar_30746 = PC + 1;
	cppVar_30746 = (cppVar_30746 & cppMask_un_16_);
	BIT_VEC cppVar_30747 = ROM.rd(cppVar_30746);
	bool cppVar_30749 = (cppVar_30747 == 168);
	BIT_VEC cppVar_30750 = PC + 1;
	cppVar_30750 = (cppVar_30750 & cppMask_un_16_);
	BIT_VEC cppVar_30751 = ROM.rd(cppVar_30750);
	bool cppVar_30753 = (cppVar_30751 == 176);
	BIT_VEC cppVar_30754 = PC + 1;
	cppVar_30754 = (cppVar_30754 & cppMask_un_16_);
	BIT_VEC cppVar_30755 = ROM.rd(cppVar_30754);
	bool cppVar_30757 = (cppVar_30755 == 184);
	BIT_VEC cppVar_30758 = PC + 1;
	cppVar_30758 = (cppVar_30758 & cppMask_un_16_);
	BIT_VEC cppVar_30759 = ROM.rd(cppVar_30758);
	bool cppVar_30761 = (cppVar_30759 == 208);
	BIT_VEC cppVar_30762 = PC + 1;
	cppVar_30762 = (cppVar_30762 & cppMask_un_16_);
	BIT_VEC cppVar_30763 = ROM.rd(cppVar_30762);
	bool cppVar_30765 = (cppVar_30763 == 224);
	BIT_VEC cppVar_30766 = PC + 1;
	cppVar_30766 = (cppVar_30766 & cppMask_un_16_);
	BIT_VEC cppVar_30767 = ROM.rd(cppVar_30766);
	bool cppVar_30769 = (cppVar_30767 == 240);
	BIT_VEC cppVar_30771 = (cppVar_30769) ? B : 0;
	BIT_VEC cppVar_30772 = (cppVar_30765) ? ACC : cppVar_30771;
	BIT_VEC cppVar_30773 = (cppVar_30761) ? PSW : cppVar_30772;
	BIT_VEC cppVar_30774 = (cppVar_30757) ? IP : cppVar_30773;
	BIT_VEC cppVar_30775 = (cppVar_30753) ? P3 : cppVar_30774;
	BIT_VEC cppVar_30776 = (cppVar_30749) ? IE : cppVar_30775;
	BIT_VEC cppVar_30777 = (cppVar_30745) ? P2 : cppVar_30776;
	BIT_VEC cppVar_30778 = (cppVar_30741) ? SBUF : cppVar_30777;
	BIT_VEC cppVar_30779 = (cppVar_30737) ? SCON : cppVar_30778;
	BIT_VEC cppVar_30780 = (cppVar_30733) ? P1 : cppVar_30779;
	BIT_VEC cppVar_30781 = (cppVar_30729) ? TH1 : cppVar_30780;
	BIT_VEC cppVar_30782 = (cppVar_30725) ? TL1 : cppVar_30781;
	BIT_VEC cppVar_30783 = (cppVar_30721) ? TH0 : cppVar_30782;
	BIT_VEC cppVar_30784 = (cppVar_30717) ? TL0 : cppVar_30783;
	BIT_VEC cppVar_30785 = (cppVar_30713) ? TMOD : cppVar_30784;
	BIT_VEC cppVar_30786 = (cppVar_30709) ? TCON : cppVar_30785;
	BIT_VEC cppVar_30787 = (cppVar_30705) ? PCON : cppVar_30786;
	BIT_VEC cppVar_30788 = (cppVar_30701) ? DPH : cppVar_30787;
	BIT_VEC cppVar_30789 = (cppVar_30697) ? DPL : cppVar_30788;
	BIT_VEC cppVar_30790 = (cppVar_30693) ? SP : cppVar_30789;
	BIT_VEC cppVar_30791 = (cppVar_30689) ? P0 : cppVar_30790;
	BIT_VEC cppVar_30792 = (cppVar_30682) ? cppVar_30685 : cppVar_30791;
	BIT_VEC cppVar_30794 = PC + 2;
	cppVar_30794 = (cppVar_30794 & cppMask_un_16_);
	BIT_VEC cppVar_30795 = ROM.rd(cppVar_30794);
	BIT_VEC cppVar_30796 = cppVar_30792 | cppVar_30795;
	BIT_VEC cppVar_30797 = (cppVar_30677) ? cppVar_30796 : P1;
	BIT_VEC cppVar_30798 = ROM.rd(PC);
	bool cppVar_30800 = (cppVar_30798 == 66);
	BIT_VEC cppVar_30802 = PC + 1;
	cppVar_30802 = (cppVar_30802 & cppMask_un_16_);
	BIT_VEC cppVar_30803 = ROM.rd(cppVar_30802);
	bool cppVar_30805 = (cppVar_30803 == 144);
	BIT_VEC cppVar_30806 = PC + 1;
	cppVar_30806 = (cppVar_30806 & cppMask_un_16_);
	BIT_VEC cppVar_30807 = ROM.rd(cppVar_30806);
	BIT_VEC cppVar_30808 = (cppVar_30807 >> 7) & cppMask_un_1_;
	bool cppVar_30810 = (cppVar_30808 == 0);
	BIT_VEC cppVar_30811 = PC + 1;
	cppVar_30811 = (cppVar_30811 & cppMask_un_16_);
	BIT_VEC cppVar_30812 = ROM.rd(cppVar_30811);
	BIT_VEC cppVar_30813 = IRAM.rd(cppVar_30812);
	BIT_VEC cppVar_30814 = PC + 1;
	cppVar_30814 = (cppVar_30814 & cppMask_un_16_);
	BIT_VEC cppVar_30815 = ROM.rd(cppVar_30814);
	bool cppVar_30817 = (cppVar_30815 == 128);
	BIT_VEC cppVar_30818 = PC + 1;
	cppVar_30818 = (cppVar_30818 & cppMask_un_16_);
	BIT_VEC cppVar_30819 = ROM.rd(cppVar_30818);
	bool cppVar_30821 = (cppVar_30819 == 129);
	BIT_VEC cppVar_30822 = PC + 1;
	cppVar_30822 = (cppVar_30822 & cppMask_un_16_);
	BIT_VEC cppVar_30823 = ROM.rd(cppVar_30822);
	bool cppVar_30825 = (cppVar_30823 == 130);
	BIT_VEC cppVar_30826 = PC + 1;
	cppVar_30826 = (cppVar_30826 & cppMask_un_16_);
	BIT_VEC cppVar_30827 = ROM.rd(cppVar_30826);
	bool cppVar_30829 = (cppVar_30827 == 131);
	BIT_VEC cppVar_30830 = PC + 1;
	cppVar_30830 = (cppVar_30830 & cppMask_un_16_);
	BIT_VEC cppVar_30831 = ROM.rd(cppVar_30830);
	bool cppVar_30833 = (cppVar_30831 == 135);
	BIT_VEC cppVar_30834 = PC + 1;
	cppVar_30834 = (cppVar_30834 & cppMask_un_16_);
	BIT_VEC cppVar_30835 = ROM.rd(cppVar_30834);
	bool cppVar_30837 = (cppVar_30835 == 136);
	BIT_VEC cppVar_30838 = PC + 1;
	cppVar_30838 = (cppVar_30838 & cppMask_un_16_);
	BIT_VEC cppVar_30839 = ROM.rd(cppVar_30838);
	bool cppVar_30841 = (cppVar_30839 == 137);
	BIT_VEC cppVar_30842 = PC + 1;
	cppVar_30842 = (cppVar_30842 & cppMask_un_16_);
	BIT_VEC cppVar_30843 = ROM.rd(cppVar_30842);
	bool cppVar_30845 = (cppVar_30843 == 138);
	BIT_VEC cppVar_30846 = PC + 1;
	cppVar_30846 = (cppVar_30846 & cppMask_un_16_);
	BIT_VEC cppVar_30847 = ROM.rd(cppVar_30846);
	bool cppVar_30849 = (cppVar_30847 == 140);
	BIT_VEC cppVar_30850 = PC + 1;
	cppVar_30850 = (cppVar_30850 & cppMask_un_16_);
	BIT_VEC cppVar_30851 = ROM.rd(cppVar_30850);
	bool cppVar_30853 = (cppVar_30851 == 139);
	BIT_VEC cppVar_30854 = PC + 1;
	cppVar_30854 = (cppVar_30854 & cppMask_un_16_);
	BIT_VEC cppVar_30855 = ROM.rd(cppVar_30854);
	bool cppVar_30857 = (cppVar_30855 == 141);
	BIT_VEC cppVar_30858 = PC + 1;
	cppVar_30858 = (cppVar_30858 & cppMask_un_16_);
	BIT_VEC cppVar_30859 = ROM.rd(cppVar_30858);
	bool cppVar_30861 = (cppVar_30859 == 144);
	BIT_VEC cppVar_30862 = PC + 1;
	cppVar_30862 = (cppVar_30862 & cppMask_un_16_);
	BIT_VEC cppVar_30863 = ROM.rd(cppVar_30862);
	bool cppVar_30865 = (cppVar_30863 == 152);
	BIT_VEC cppVar_30866 = PC + 1;
	cppVar_30866 = (cppVar_30866 & cppMask_un_16_);
	BIT_VEC cppVar_30867 = ROM.rd(cppVar_30866);
	bool cppVar_30869 = (cppVar_30867 == 153);
	BIT_VEC cppVar_30870 = PC + 1;
	cppVar_30870 = (cppVar_30870 & cppMask_un_16_);
	BIT_VEC cppVar_30871 = ROM.rd(cppVar_30870);
	bool cppVar_30873 = (cppVar_30871 == 160);
	BIT_VEC cppVar_30874 = PC + 1;
	cppVar_30874 = (cppVar_30874 & cppMask_un_16_);
	BIT_VEC cppVar_30875 = ROM.rd(cppVar_30874);
	bool cppVar_30877 = (cppVar_30875 == 168);
	BIT_VEC cppVar_30878 = PC + 1;
	cppVar_30878 = (cppVar_30878 & cppMask_un_16_);
	BIT_VEC cppVar_30879 = ROM.rd(cppVar_30878);
	bool cppVar_30881 = (cppVar_30879 == 176);
	BIT_VEC cppVar_30882 = PC + 1;
	cppVar_30882 = (cppVar_30882 & cppMask_un_16_);
	BIT_VEC cppVar_30883 = ROM.rd(cppVar_30882);
	bool cppVar_30885 = (cppVar_30883 == 184);
	BIT_VEC cppVar_30886 = PC + 1;
	cppVar_30886 = (cppVar_30886 & cppMask_un_16_);
	BIT_VEC cppVar_30887 = ROM.rd(cppVar_30886);
	bool cppVar_30889 = (cppVar_30887 == 208);
	BIT_VEC cppVar_30890 = PC + 1;
	cppVar_30890 = (cppVar_30890 & cppMask_un_16_);
	BIT_VEC cppVar_30891 = ROM.rd(cppVar_30890);
	bool cppVar_30893 = (cppVar_30891 == 224);
	BIT_VEC cppVar_30894 = PC + 1;
	cppVar_30894 = (cppVar_30894 & cppMask_un_16_);
	BIT_VEC cppVar_30895 = ROM.rd(cppVar_30894);
	bool cppVar_30897 = (cppVar_30895 == 240);
	BIT_VEC cppVar_30899 = (cppVar_30897) ? B : 0;
	BIT_VEC cppVar_30900 = (cppVar_30893) ? ACC : cppVar_30899;
	BIT_VEC cppVar_30901 = (cppVar_30889) ? PSW : cppVar_30900;
	BIT_VEC cppVar_30902 = (cppVar_30885) ? IP : cppVar_30901;
	BIT_VEC cppVar_30903 = (cppVar_30881) ? P3 : cppVar_30902;
	BIT_VEC cppVar_30904 = (cppVar_30877) ? IE : cppVar_30903;
	BIT_VEC cppVar_30905 = (cppVar_30873) ? P2 : cppVar_30904;
	BIT_VEC cppVar_30906 = (cppVar_30869) ? SBUF : cppVar_30905;
	BIT_VEC cppVar_30907 = (cppVar_30865) ? SCON : cppVar_30906;
	BIT_VEC cppVar_30908 = (cppVar_30861) ? P1 : cppVar_30907;
	BIT_VEC cppVar_30909 = (cppVar_30857) ? TH1 : cppVar_30908;
	BIT_VEC cppVar_30910 = (cppVar_30853) ? TL1 : cppVar_30909;
	BIT_VEC cppVar_30911 = (cppVar_30849) ? TH0 : cppVar_30910;
	BIT_VEC cppVar_30912 = (cppVar_30845) ? TL0 : cppVar_30911;
	BIT_VEC cppVar_30913 = (cppVar_30841) ? TMOD : cppVar_30912;
	BIT_VEC cppVar_30914 = (cppVar_30837) ? TCON : cppVar_30913;
	BIT_VEC cppVar_30915 = (cppVar_30833) ? PCON : cppVar_30914;
	BIT_VEC cppVar_30916 = (cppVar_30829) ? DPH : cppVar_30915;
	BIT_VEC cppVar_30917 = (cppVar_30825) ? DPL : cppVar_30916;
	BIT_VEC cppVar_30918 = (cppVar_30821) ? SP : cppVar_30917;
	BIT_VEC cppVar_30919 = (cppVar_30817) ? P0 : cppVar_30918;
	BIT_VEC cppVar_30920 = (cppVar_30810) ? cppVar_30813 : cppVar_30919;
	BIT_VEC cppVar_30921 = cppVar_30920 | ACC;
	BIT_VEC cppVar_30922 = (cppVar_30805) ? cppVar_30921 : P1;
	BIT_VEC cppVar_30923 = ROM.rd(PC);
	bool cppVar_30925 = (cppVar_30923 == 213);
	BIT_VEC cppVar_30926 = ROM.rd(PC);
	bool cppVar_30928 = (cppVar_30926 == 21);
	bool cppVar_30929 = cppVar_30925 || cppVar_30928;
	BIT_VEC cppVar_30931 = PC + 1;
	cppVar_30931 = (cppVar_30931 & cppMask_un_16_);
	BIT_VEC cppVar_30932 = ROM.rd(cppVar_30931);
	bool cppVar_30934 = (cppVar_30932 == 144);
	BIT_VEC cppVar_30935 = PC + 1;
	cppVar_30935 = (cppVar_30935 & cppMask_un_16_);
	BIT_VEC cppVar_30936 = ROM.rd(cppVar_30935);
	BIT_VEC cppVar_30937 = (cppVar_30936 >> 7) & cppMask_un_1_;
	bool cppVar_30939 = (cppVar_30937 == 0);
	BIT_VEC cppVar_30940 = PC + 1;
	cppVar_30940 = (cppVar_30940 & cppMask_un_16_);
	BIT_VEC cppVar_30941 = ROM.rd(cppVar_30940);
	BIT_VEC cppVar_30942 = IRAM.rd(cppVar_30941);
	BIT_VEC cppVar_30943 = PC + 1;
	cppVar_30943 = (cppVar_30943 & cppMask_un_16_);
	BIT_VEC cppVar_30944 = ROM.rd(cppVar_30943);
	bool cppVar_30946 = (cppVar_30944 == 128);
	BIT_VEC cppVar_30947 = PC + 1;
	cppVar_30947 = (cppVar_30947 & cppMask_un_16_);
	BIT_VEC cppVar_30948 = ROM.rd(cppVar_30947);
	bool cppVar_30950 = (cppVar_30948 == 129);
	BIT_VEC cppVar_30951 = PC + 1;
	cppVar_30951 = (cppVar_30951 & cppMask_un_16_);
	BIT_VEC cppVar_30952 = ROM.rd(cppVar_30951);
	bool cppVar_30954 = (cppVar_30952 == 130);
	BIT_VEC cppVar_30955 = PC + 1;
	cppVar_30955 = (cppVar_30955 & cppMask_un_16_);
	BIT_VEC cppVar_30956 = ROM.rd(cppVar_30955);
	bool cppVar_30958 = (cppVar_30956 == 131);
	BIT_VEC cppVar_30959 = PC + 1;
	cppVar_30959 = (cppVar_30959 & cppMask_un_16_);
	BIT_VEC cppVar_30960 = ROM.rd(cppVar_30959);
	bool cppVar_30962 = (cppVar_30960 == 135);
	BIT_VEC cppVar_30963 = PC + 1;
	cppVar_30963 = (cppVar_30963 & cppMask_un_16_);
	BIT_VEC cppVar_30964 = ROM.rd(cppVar_30963);
	bool cppVar_30966 = (cppVar_30964 == 136);
	BIT_VEC cppVar_30967 = PC + 1;
	cppVar_30967 = (cppVar_30967 & cppMask_un_16_);
	BIT_VEC cppVar_30968 = ROM.rd(cppVar_30967);
	bool cppVar_30970 = (cppVar_30968 == 137);
	BIT_VEC cppVar_30971 = PC + 1;
	cppVar_30971 = (cppVar_30971 & cppMask_un_16_);
	BIT_VEC cppVar_30972 = ROM.rd(cppVar_30971);
	bool cppVar_30974 = (cppVar_30972 == 138);
	BIT_VEC cppVar_30975 = PC + 1;
	cppVar_30975 = (cppVar_30975 & cppMask_un_16_);
	BIT_VEC cppVar_30976 = ROM.rd(cppVar_30975);
	bool cppVar_30978 = (cppVar_30976 == 140);
	BIT_VEC cppVar_30979 = PC + 1;
	cppVar_30979 = (cppVar_30979 & cppMask_un_16_);
	BIT_VEC cppVar_30980 = ROM.rd(cppVar_30979);
	bool cppVar_30982 = (cppVar_30980 == 139);
	BIT_VEC cppVar_30983 = PC + 1;
	cppVar_30983 = (cppVar_30983 & cppMask_un_16_);
	BIT_VEC cppVar_30984 = ROM.rd(cppVar_30983);
	bool cppVar_30986 = (cppVar_30984 == 141);
	BIT_VEC cppVar_30987 = PC + 1;
	cppVar_30987 = (cppVar_30987 & cppMask_un_16_);
	BIT_VEC cppVar_30988 = ROM.rd(cppVar_30987);
	bool cppVar_30990 = (cppVar_30988 == 144);
	BIT_VEC cppVar_30991 = PC + 1;
	cppVar_30991 = (cppVar_30991 & cppMask_un_16_);
	BIT_VEC cppVar_30992 = ROM.rd(cppVar_30991);
	bool cppVar_30994 = (cppVar_30992 == 152);
	BIT_VEC cppVar_30995 = PC + 1;
	cppVar_30995 = (cppVar_30995 & cppMask_un_16_);
	BIT_VEC cppVar_30996 = ROM.rd(cppVar_30995);
	bool cppVar_30998 = (cppVar_30996 == 153);
	BIT_VEC cppVar_30999 = PC + 1;
	cppVar_30999 = (cppVar_30999 & cppMask_un_16_);
	BIT_VEC cppVar_31000 = ROM.rd(cppVar_30999);
	bool cppVar_31002 = (cppVar_31000 == 160);
	BIT_VEC cppVar_31003 = PC + 1;
	cppVar_31003 = (cppVar_31003 & cppMask_un_16_);
	BIT_VEC cppVar_31004 = ROM.rd(cppVar_31003);
	bool cppVar_31006 = (cppVar_31004 == 168);
	BIT_VEC cppVar_31007 = PC + 1;
	cppVar_31007 = (cppVar_31007 & cppMask_un_16_);
	BIT_VEC cppVar_31008 = ROM.rd(cppVar_31007);
	bool cppVar_31010 = (cppVar_31008 == 176);
	BIT_VEC cppVar_31011 = PC + 1;
	cppVar_31011 = (cppVar_31011 & cppMask_un_16_);
	BIT_VEC cppVar_31012 = ROM.rd(cppVar_31011);
	bool cppVar_31014 = (cppVar_31012 == 184);
	BIT_VEC cppVar_31015 = PC + 1;
	cppVar_31015 = (cppVar_31015 & cppMask_un_16_);
	BIT_VEC cppVar_31016 = ROM.rd(cppVar_31015);
	bool cppVar_31018 = (cppVar_31016 == 208);
	BIT_VEC cppVar_31019 = PC + 1;
	cppVar_31019 = (cppVar_31019 & cppMask_un_16_);
	BIT_VEC cppVar_31020 = ROM.rd(cppVar_31019);
	bool cppVar_31022 = (cppVar_31020 == 224);
	BIT_VEC cppVar_31023 = PC + 1;
	cppVar_31023 = (cppVar_31023 & cppMask_un_16_);
	BIT_VEC cppVar_31024 = ROM.rd(cppVar_31023);
	bool cppVar_31026 = (cppVar_31024 == 240);
	BIT_VEC cppVar_31028 = (cppVar_31026) ? B : 0;
	BIT_VEC cppVar_31029 = (cppVar_31022) ? ACC : cppVar_31028;
	BIT_VEC cppVar_31030 = (cppVar_31018) ? PSW : cppVar_31029;
	BIT_VEC cppVar_31031 = (cppVar_31014) ? IP : cppVar_31030;
	BIT_VEC cppVar_31032 = (cppVar_31010) ? P3 : cppVar_31031;
	BIT_VEC cppVar_31033 = (cppVar_31006) ? IE : cppVar_31032;
	BIT_VEC cppVar_31034 = (cppVar_31002) ? P2 : cppVar_31033;
	BIT_VEC cppVar_31035 = (cppVar_30998) ? SBUF : cppVar_31034;
	BIT_VEC cppVar_31036 = (cppVar_30994) ? SCON : cppVar_31035;
	BIT_VEC cppVar_31037 = (cppVar_30990) ? P1 : cppVar_31036;
	BIT_VEC cppVar_31038 = (cppVar_30986) ? TH1 : cppVar_31037;
	BIT_VEC cppVar_31039 = (cppVar_30982) ? TL1 : cppVar_31038;
	BIT_VEC cppVar_31040 = (cppVar_30978) ? TH0 : cppVar_31039;
	BIT_VEC cppVar_31041 = (cppVar_30974) ? TL0 : cppVar_31040;
	BIT_VEC cppVar_31042 = (cppVar_30970) ? TMOD : cppVar_31041;
	BIT_VEC cppVar_31043 = (cppVar_30966) ? TCON : cppVar_31042;
	BIT_VEC cppVar_31044 = (cppVar_30962) ? PCON : cppVar_31043;
	BIT_VEC cppVar_31045 = (cppVar_30958) ? DPH : cppVar_31044;
	BIT_VEC cppVar_31046 = (cppVar_30954) ? DPL : cppVar_31045;
	BIT_VEC cppVar_31047 = (cppVar_30950) ? SP : cppVar_31046;
	BIT_VEC cppVar_31048 = (cppVar_30946) ? P0 : cppVar_31047;
	BIT_VEC cppVar_31049 = (cppVar_30939) ? cppVar_30942 : cppVar_31048;
	BIT_VEC cppVar_31051 = cppVar_31049 - 1;
	cppVar_31051 = (cppVar_31051 & cppMask_un_8_);
	BIT_VEC cppVar_31052 = (cppVar_30934) ? cppVar_31051 : P1;
	BIT_VEC cppVar_31053 = ROM.rd(PC);
	bool cppVar_31055 = (cppVar_31053 == 194);
	BIT_VEC cppVar_31056 = ROM.rd(PC);
	bool cppVar_31058 = (cppVar_31056 == 16);
	bool cppVar_31059 = cppVar_31055 || cppVar_31058;
	BIT_VEC cppVar_31061 = PC + 1;
	cppVar_31061 = (cppVar_31061 & cppMask_un_16_);
	BIT_VEC cppVar_31062 = ROM.rd(cppVar_31061);
	BIT_VEC cppVar_31063 = (cppVar_31062 >> 7) & cppMask_un_1_;
	bool cppVar_31065 = (cppVar_31063 == 1);
	BIT_VEC cppVar_31066 = PC + 1;
	cppVar_31066 = (cppVar_31066 & cppMask_un_16_);
	BIT_VEC cppVar_31067 = ROM.rd(cppVar_31066);
	BIT_VEC cppVar_31068 = (cppVar_31067 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31070 = (cppVar_31068 << 3) | 0;
	cppVar_31070 = (cppVar_31070 & cppMask_un_8_);
	BIT_VEC cppVar_31071 = PC + 1;
	cppVar_31071 = (cppVar_31071 & cppMask_un_16_);
	BIT_VEC cppVar_31072 = ROM.rd(cppVar_31071);
	BIT_VEC cppVar_31073 = (cppVar_31072 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31074 = (cppVar_31073 & cppMask_un_5_);
	BIT_VEC cppVar_31076 = cppVar_31074 + 32;
	cppVar_31076 = (cppVar_31076 & cppMask_un_8_);
	BIT_VEC cppVar_31077 = (cppVar_31065) ? cppVar_31070 : cppVar_31076;
	bool cppVar_31079 = (cppVar_31077 == 144);
	BIT_VEC cppVar_31081 = PC + 1;
	cppVar_31081 = (cppVar_31081 & cppMask_un_16_);
	BIT_VEC cppVar_31082 = ROM.rd(cppVar_31081);
	BIT_VEC cppVar_31083 = (cppVar_31082 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_31084 = (cppVar_31083 & cppMask_un_3_);
	BIT_VEC cppVar_31085 = 1 << static_cast<unsigned>(cppVar_31084);
	cppVar_31085 = (cppVar_31085 & cppMask_un_8_);
	BIT_VEC cppVar_31086 = ~cppVar_31085;
	BIT_VEC cppVar_31087 = PC + 1;
	cppVar_31087 = (cppVar_31087 & cppMask_un_16_);
	BIT_VEC cppVar_31088 = ROM.rd(cppVar_31087);
	BIT_VEC cppVar_31089 = (cppVar_31088 >> 7) & cppMask_un_1_;
	bool cppVar_31090 = (cppVar_31089 == 1);
	BIT_VEC cppVar_31091 = PC + 1;
	cppVar_31091 = (cppVar_31091 & cppMask_un_16_);
	BIT_VEC cppVar_31092 = ROM.rd(cppVar_31091);
	BIT_VEC cppVar_31093 = (cppVar_31092 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31094 = (cppVar_31093 << 3) | 0;
	cppVar_31094 = (cppVar_31094 & cppMask_un_8_);
	BIT_VEC cppVar_31095 = PC + 1;
	cppVar_31095 = (cppVar_31095 & cppMask_un_16_);
	BIT_VEC cppVar_31096 = ROM.rd(cppVar_31095);
	BIT_VEC cppVar_31097 = (cppVar_31096 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31098 = (cppVar_31097 & cppMask_un_5_);
	BIT_VEC cppVar_31099 = cppVar_31098 + 32;
	cppVar_31099 = (cppVar_31099 & cppMask_un_8_);
	BIT_VEC cppVar_31100 = (cppVar_31090) ? cppVar_31094 : cppVar_31099;
	BIT_VEC cppVar_31101 = (cppVar_31100 >> 7) & cppMask_un_1_;
	bool cppVar_31103 = (cppVar_31101 == 0);
	BIT_VEC cppVar_31104 = PC + 1;
	cppVar_31104 = (cppVar_31104 & cppMask_un_16_);
	BIT_VEC cppVar_31105 = ROM.rd(cppVar_31104);
	BIT_VEC cppVar_31106 = (cppVar_31105 >> 7) & cppMask_un_1_;
	bool cppVar_31107 = (cppVar_31106 == 1);
	BIT_VEC cppVar_31108 = PC + 1;
	cppVar_31108 = (cppVar_31108 & cppMask_un_16_);
	BIT_VEC cppVar_31109 = ROM.rd(cppVar_31108);
	BIT_VEC cppVar_31110 = (cppVar_31109 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31111 = (cppVar_31110 << 3) | 0;
	cppVar_31111 = (cppVar_31111 & cppMask_un_8_);
	BIT_VEC cppVar_31112 = PC + 1;
	cppVar_31112 = (cppVar_31112 & cppMask_un_16_);
	BIT_VEC cppVar_31113 = ROM.rd(cppVar_31112);
	BIT_VEC cppVar_31114 = (cppVar_31113 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31115 = (cppVar_31114 & cppMask_un_5_);
	BIT_VEC cppVar_31116 = cppVar_31115 + 32;
	cppVar_31116 = (cppVar_31116 & cppMask_un_8_);
	BIT_VEC cppVar_31117 = (cppVar_31107) ? cppVar_31111 : cppVar_31116;
	BIT_VEC cppVar_31118 = IRAM.rd(cppVar_31117);
	BIT_VEC cppVar_31119 = PC + 1;
	cppVar_31119 = (cppVar_31119 & cppMask_un_16_);
	BIT_VEC cppVar_31120 = ROM.rd(cppVar_31119);
	BIT_VEC cppVar_31121 = (cppVar_31120 >> 7) & cppMask_un_1_;
	bool cppVar_31122 = (cppVar_31121 == 1);
	BIT_VEC cppVar_31123 = PC + 1;
	cppVar_31123 = (cppVar_31123 & cppMask_un_16_);
	BIT_VEC cppVar_31124 = ROM.rd(cppVar_31123);
	BIT_VEC cppVar_31125 = (cppVar_31124 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31126 = (cppVar_31125 << 3) | 0;
	cppVar_31126 = (cppVar_31126 & cppMask_un_8_);
	BIT_VEC cppVar_31127 = PC + 1;
	cppVar_31127 = (cppVar_31127 & cppMask_un_16_);
	BIT_VEC cppVar_31128 = ROM.rd(cppVar_31127);
	BIT_VEC cppVar_31129 = (cppVar_31128 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31130 = (cppVar_31129 & cppMask_un_5_);
	BIT_VEC cppVar_31131 = cppVar_31130 + 32;
	cppVar_31131 = (cppVar_31131 & cppMask_un_8_);
	BIT_VEC cppVar_31132 = (cppVar_31122) ? cppVar_31126 : cppVar_31131;
	bool cppVar_31134 = (cppVar_31132 == 128);
	BIT_VEC cppVar_31135 = PC + 1;
	cppVar_31135 = (cppVar_31135 & cppMask_un_16_);
	BIT_VEC cppVar_31136 = ROM.rd(cppVar_31135);
	BIT_VEC cppVar_31137 = (cppVar_31136 >> 7) & cppMask_un_1_;
	bool cppVar_31138 = (cppVar_31137 == 1);
	BIT_VEC cppVar_31139 = PC + 1;
	cppVar_31139 = (cppVar_31139 & cppMask_un_16_);
	BIT_VEC cppVar_31140 = ROM.rd(cppVar_31139);
	BIT_VEC cppVar_31141 = (cppVar_31140 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31142 = (cppVar_31141 << 3) | 0;
	cppVar_31142 = (cppVar_31142 & cppMask_un_8_);
	BIT_VEC cppVar_31143 = PC + 1;
	cppVar_31143 = (cppVar_31143 & cppMask_un_16_);
	BIT_VEC cppVar_31144 = ROM.rd(cppVar_31143);
	BIT_VEC cppVar_31145 = (cppVar_31144 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31146 = (cppVar_31145 & cppMask_un_5_);
	BIT_VEC cppVar_31147 = cppVar_31146 + 32;
	cppVar_31147 = (cppVar_31147 & cppMask_un_8_);
	BIT_VEC cppVar_31148 = (cppVar_31138) ? cppVar_31142 : cppVar_31147;
	bool cppVar_31150 = (cppVar_31148 == 129);
	BIT_VEC cppVar_31151 = PC + 1;
	cppVar_31151 = (cppVar_31151 & cppMask_un_16_);
	BIT_VEC cppVar_31152 = ROM.rd(cppVar_31151);
	BIT_VEC cppVar_31153 = (cppVar_31152 >> 7) & cppMask_un_1_;
	bool cppVar_31154 = (cppVar_31153 == 1);
	BIT_VEC cppVar_31155 = PC + 1;
	cppVar_31155 = (cppVar_31155 & cppMask_un_16_);
	BIT_VEC cppVar_31156 = ROM.rd(cppVar_31155);
	BIT_VEC cppVar_31157 = (cppVar_31156 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31158 = (cppVar_31157 << 3) | 0;
	cppVar_31158 = (cppVar_31158 & cppMask_un_8_);
	BIT_VEC cppVar_31159 = PC + 1;
	cppVar_31159 = (cppVar_31159 & cppMask_un_16_);
	BIT_VEC cppVar_31160 = ROM.rd(cppVar_31159);
	BIT_VEC cppVar_31161 = (cppVar_31160 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31162 = (cppVar_31161 & cppMask_un_5_);
	BIT_VEC cppVar_31163 = cppVar_31162 + 32;
	cppVar_31163 = (cppVar_31163 & cppMask_un_8_);
	BIT_VEC cppVar_31164 = (cppVar_31154) ? cppVar_31158 : cppVar_31163;
	bool cppVar_31166 = (cppVar_31164 == 130);
	BIT_VEC cppVar_31167 = PC + 1;
	cppVar_31167 = (cppVar_31167 & cppMask_un_16_);
	BIT_VEC cppVar_31168 = ROM.rd(cppVar_31167);
	BIT_VEC cppVar_31169 = (cppVar_31168 >> 7) & cppMask_un_1_;
	bool cppVar_31170 = (cppVar_31169 == 1);
	BIT_VEC cppVar_31171 = PC + 1;
	cppVar_31171 = (cppVar_31171 & cppMask_un_16_);
	BIT_VEC cppVar_31172 = ROM.rd(cppVar_31171);
	BIT_VEC cppVar_31173 = (cppVar_31172 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31174 = (cppVar_31173 << 3) | 0;
	cppVar_31174 = (cppVar_31174 & cppMask_un_8_);
	BIT_VEC cppVar_31175 = PC + 1;
	cppVar_31175 = (cppVar_31175 & cppMask_un_16_);
	BIT_VEC cppVar_31176 = ROM.rd(cppVar_31175);
	BIT_VEC cppVar_31177 = (cppVar_31176 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31178 = (cppVar_31177 & cppMask_un_5_);
	BIT_VEC cppVar_31179 = cppVar_31178 + 32;
	cppVar_31179 = (cppVar_31179 & cppMask_un_8_);
	BIT_VEC cppVar_31180 = (cppVar_31170) ? cppVar_31174 : cppVar_31179;
	bool cppVar_31182 = (cppVar_31180 == 131);
	BIT_VEC cppVar_31183 = PC + 1;
	cppVar_31183 = (cppVar_31183 & cppMask_un_16_);
	BIT_VEC cppVar_31184 = ROM.rd(cppVar_31183);
	BIT_VEC cppVar_31185 = (cppVar_31184 >> 7) & cppMask_un_1_;
	bool cppVar_31186 = (cppVar_31185 == 1);
	BIT_VEC cppVar_31187 = PC + 1;
	cppVar_31187 = (cppVar_31187 & cppMask_un_16_);
	BIT_VEC cppVar_31188 = ROM.rd(cppVar_31187);
	BIT_VEC cppVar_31189 = (cppVar_31188 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31190 = (cppVar_31189 << 3) | 0;
	cppVar_31190 = (cppVar_31190 & cppMask_un_8_);
	BIT_VEC cppVar_31191 = PC + 1;
	cppVar_31191 = (cppVar_31191 & cppMask_un_16_);
	BIT_VEC cppVar_31192 = ROM.rd(cppVar_31191);
	BIT_VEC cppVar_31193 = (cppVar_31192 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31194 = (cppVar_31193 & cppMask_un_5_);
	BIT_VEC cppVar_31195 = cppVar_31194 + 32;
	cppVar_31195 = (cppVar_31195 & cppMask_un_8_);
	BIT_VEC cppVar_31196 = (cppVar_31186) ? cppVar_31190 : cppVar_31195;
	bool cppVar_31198 = (cppVar_31196 == 135);
	BIT_VEC cppVar_31199 = PC + 1;
	cppVar_31199 = (cppVar_31199 & cppMask_un_16_);
	BIT_VEC cppVar_31200 = ROM.rd(cppVar_31199);
	BIT_VEC cppVar_31201 = (cppVar_31200 >> 7) & cppMask_un_1_;
	bool cppVar_31202 = (cppVar_31201 == 1);
	BIT_VEC cppVar_31203 = PC + 1;
	cppVar_31203 = (cppVar_31203 & cppMask_un_16_);
	BIT_VEC cppVar_31204 = ROM.rd(cppVar_31203);
	BIT_VEC cppVar_31205 = (cppVar_31204 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31206 = (cppVar_31205 << 3) | 0;
	cppVar_31206 = (cppVar_31206 & cppMask_un_8_);
	BIT_VEC cppVar_31207 = PC + 1;
	cppVar_31207 = (cppVar_31207 & cppMask_un_16_);
	BIT_VEC cppVar_31208 = ROM.rd(cppVar_31207);
	BIT_VEC cppVar_31209 = (cppVar_31208 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31210 = (cppVar_31209 & cppMask_un_5_);
	BIT_VEC cppVar_31211 = cppVar_31210 + 32;
	cppVar_31211 = (cppVar_31211 & cppMask_un_8_);
	BIT_VEC cppVar_31212 = (cppVar_31202) ? cppVar_31206 : cppVar_31211;
	bool cppVar_31214 = (cppVar_31212 == 136);
	BIT_VEC cppVar_31215 = PC + 1;
	cppVar_31215 = (cppVar_31215 & cppMask_un_16_);
	BIT_VEC cppVar_31216 = ROM.rd(cppVar_31215);
	BIT_VEC cppVar_31217 = (cppVar_31216 >> 7) & cppMask_un_1_;
	bool cppVar_31218 = (cppVar_31217 == 1);
	BIT_VEC cppVar_31219 = PC + 1;
	cppVar_31219 = (cppVar_31219 & cppMask_un_16_);
	BIT_VEC cppVar_31220 = ROM.rd(cppVar_31219);
	BIT_VEC cppVar_31221 = (cppVar_31220 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31222 = (cppVar_31221 << 3) | 0;
	cppVar_31222 = (cppVar_31222 & cppMask_un_8_);
	BIT_VEC cppVar_31223 = PC + 1;
	cppVar_31223 = (cppVar_31223 & cppMask_un_16_);
	BIT_VEC cppVar_31224 = ROM.rd(cppVar_31223);
	BIT_VEC cppVar_31225 = (cppVar_31224 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31226 = (cppVar_31225 & cppMask_un_5_);
	BIT_VEC cppVar_31227 = cppVar_31226 + 32;
	cppVar_31227 = (cppVar_31227 & cppMask_un_8_);
	BIT_VEC cppVar_31228 = (cppVar_31218) ? cppVar_31222 : cppVar_31227;
	bool cppVar_31230 = (cppVar_31228 == 137);
	BIT_VEC cppVar_31231 = PC + 1;
	cppVar_31231 = (cppVar_31231 & cppMask_un_16_);
	BIT_VEC cppVar_31232 = ROM.rd(cppVar_31231);
	BIT_VEC cppVar_31233 = (cppVar_31232 >> 7) & cppMask_un_1_;
	bool cppVar_31234 = (cppVar_31233 == 1);
	BIT_VEC cppVar_31235 = PC + 1;
	cppVar_31235 = (cppVar_31235 & cppMask_un_16_);
	BIT_VEC cppVar_31236 = ROM.rd(cppVar_31235);
	BIT_VEC cppVar_31237 = (cppVar_31236 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31238 = (cppVar_31237 << 3) | 0;
	cppVar_31238 = (cppVar_31238 & cppMask_un_8_);
	BIT_VEC cppVar_31239 = PC + 1;
	cppVar_31239 = (cppVar_31239 & cppMask_un_16_);
	BIT_VEC cppVar_31240 = ROM.rd(cppVar_31239);
	BIT_VEC cppVar_31241 = (cppVar_31240 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31242 = (cppVar_31241 & cppMask_un_5_);
	BIT_VEC cppVar_31243 = cppVar_31242 + 32;
	cppVar_31243 = (cppVar_31243 & cppMask_un_8_);
	BIT_VEC cppVar_31244 = (cppVar_31234) ? cppVar_31238 : cppVar_31243;
	bool cppVar_31246 = (cppVar_31244 == 138);
	BIT_VEC cppVar_31247 = PC + 1;
	cppVar_31247 = (cppVar_31247 & cppMask_un_16_);
	BIT_VEC cppVar_31248 = ROM.rd(cppVar_31247);
	BIT_VEC cppVar_31249 = (cppVar_31248 >> 7) & cppMask_un_1_;
	bool cppVar_31250 = (cppVar_31249 == 1);
	BIT_VEC cppVar_31251 = PC + 1;
	cppVar_31251 = (cppVar_31251 & cppMask_un_16_);
	BIT_VEC cppVar_31252 = ROM.rd(cppVar_31251);
	BIT_VEC cppVar_31253 = (cppVar_31252 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31254 = (cppVar_31253 << 3) | 0;
	cppVar_31254 = (cppVar_31254 & cppMask_un_8_);
	BIT_VEC cppVar_31255 = PC + 1;
	cppVar_31255 = (cppVar_31255 & cppMask_un_16_);
	BIT_VEC cppVar_31256 = ROM.rd(cppVar_31255);
	BIT_VEC cppVar_31257 = (cppVar_31256 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31258 = (cppVar_31257 & cppMask_un_5_);
	BIT_VEC cppVar_31259 = cppVar_31258 + 32;
	cppVar_31259 = (cppVar_31259 & cppMask_un_8_);
	BIT_VEC cppVar_31260 = (cppVar_31250) ? cppVar_31254 : cppVar_31259;
	bool cppVar_31262 = (cppVar_31260 == 140);
	BIT_VEC cppVar_31263 = PC + 1;
	cppVar_31263 = (cppVar_31263 & cppMask_un_16_);
	BIT_VEC cppVar_31264 = ROM.rd(cppVar_31263);
	BIT_VEC cppVar_31265 = (cppVar_31264 >> 7) & cppMask_un_1_;
	bool cppVar_31266 = (cppVar_31265 == 1);
	BIT_VEC cppVar_31267 = PC + 1;
	cppVar_31267 = (cppVar_31267 & cppMask_un_16_);
	BIT_VEC cppVar_31268 = ROM.rd(cppVar_31267);
	BIT_VEC cppVar_31269 = (cppVar_31268 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31270 = (cppVar_31269 << 3) | 0;
	cppVar_31270 = (cppVar_31270 & cppMask_un_8_);
	BIT_VEC cppVar_31271 = PC + 1;
	cppVar_31271 = (cppVar_31271 & cppMask_un_16_);
	BIT_VEC cppVar_31272 = ROM.rd(cppVar_31271);
	BIT_VEC cppVar_31273 = (cppVar_31272 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31274 = (cppVar_31273 & cppMask_un_5_);
	BIT_VEC cppVar_31275 = cppVar_31274 + 32;
	cppVar_31275 = (cppVar_31275 & cppMask_un_8_);
	BIT_VEC cppVar_31276 = (cppVar_31266) ? cppVar_31270 : cppVar_31275;
	bool cppVar_31278 = (cppVar_31276 == 139);
	BIT_VEC cppVar_31279 = PC + 1;
	cppVar_31279 = (cppVar_31279 & cppMask_un_16_);
	BIT_VEC cppVar_31280 = ROM.rd(cppVar_31279);
	BIT_VEC cppVar_31281 = (cppVar_31280 >> 7) & cppMask_un_1_;
	bool cppVar_31282 = (cppVar_31281 == 1);
	BIT_VEC cppVar_31283 = PC + 1;
	cppVar_31283 = (cppVar_31283 & cppMask_un_16_);
	BIT_VEC cppVar_31284 = ROM.rd(cppVar_31283);
	BIT_VEC cppVar_31285 = (cppVar_31284 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31286 = (cppVar_31285 << 3) | 0;
	cppVar_31286 = (cppVar_31286 & cppMask_un_8_);
	BIT_VEC cppVar_31287 = PC + 1;
	cppVar_31287 = (cppVar_31287 & cppMask_un_16_);
	BIT_VEC cppVar_31288 = ROM.rd(cppVar_31287);
	BIT_VEC cppVar_31289 = (cppVar_31288 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31290 = (cppVar_31289 & cppMask_un_5_);
	BIT_VEC cppVar_31291 = cppVar_31290 + 32;
	cppVar_31291 = (cppVar_31291 & cppMask_un_8_);
	BIT_VEC cppVar_31292 = (cppVar_31282) ? cppVar_31286 : cppVar_31291;
	bool cppVar_31294 = (cppVar_31292 == 141);
	BIT_VEC cppVar_31295 = PC + 1;
	cppVar_31295 = (cppVar_31295 & cppMask_un_16_);
	BIT_VEC cppVar_31296 = ROM.rd(cppVar_31295);
	BIT_VEC cppVar_31297 = (cppVar_31296 >> 7) & cppMask_un_1_;
	bool cppVar_31298 = (cppVar_31297 == 1);
	BIT_VEC cppVar_31299 = PC + 1;
	cppVar_31299 = (cppVar_31299 & cppMask_un_16_);
	BIT_VEC cppVar_31300 = ROM.rd(cppVar_31299);
	BIT_VEC cppVar_31301 = (cppVar_31300 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31302 = (cppVar_31301 << 3) | 0;
	cppVar_31302 = (cppVar_31302 & cppMask_un_8_);
	BIT_VEC cppVar_31303 = PC + 1;
	cppVar_31303 = (cppVar_31303 & cppMask_un_16_);
	BIT_VEC cppVar_31304 = ROM.rd(cppVar_31303);
	BIT_VEC cppVar_31305 = (cppVar_31304 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31306 = (cppVar_31305 & cppMask_un_5_);
	BIT_VEC cppVar_31307 = cppVar_31306 + 32;
	cppVar_31307 = (cppVar_31307 & cppMask_un_8_);
	BIT_VEC cppVar_31308 = (cppVar_31298) ? cppVar_31302 : cppVar_31307;
	bool cppVar_31310 = (cppVar_31308 == 144);
	BIT_VEC cppVar_31311 = PC + 1;
	cppVar_31311 = (cppVar_31311 & cppMask_un_16_);
	BIT_VEC cppVar_31312 = ROM.rd(cppVar_31311);
	BIT_VEC cppVar_31313 = (cppVar_31312 >> 7) & cppMask_un_1_;
	bool cppVar_31314 = (cppVar_31313 == 1);
	BIT_VEC cppVar_31315 = PC + 1;
	cppVar_31315 = (cppVar_31315 & cppMask_un_16_);
	BIT_VEC cppVar_31316 = ROM.rd(cppVar_31315);
	BIT_VEC cppVar_31317 = (cppVar_31316 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31318 = (cppVar_31317 << 3) | 0;
	cppVar_31318 = (cppVar_31318 & cppMask_un_8_);
	BIT_VEC cppVar_31319 = PC + 1;
	cppVar_31319 = (cppVar_31319 & cppMask_un_16_);
	BIT_VEC cppVar_31320 = ROM.rd(cppVar_31319);
	BIT_VEC cppVar_31321 = (cppVar_31320 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31322 = (cppVar_31321 & cppMask_un_5_);
	BIT_VEC cppVar_31323 = cppVar_31322 + 32;
	cppVar_31323 = (cppVar_31323 & cppMask_un_8_);
	BIT_VEC cppVar_31324 = (cppVar_31314) ? cppVar_31318 : cppVar_31323;
	bool cppVar_31326 = (cppVar_31324 == 152);
	BIT_VEC cppVar_31327 = PC + 1;
	cppVar_31327 = (cppVar_31327 & cppMask_un_16_);
	BIT_VEC cppVar_31328 = ROM.rd(cppVar_31327);
	BIT_VEC cppVar_31329 = (cppVar_31328 >> 7) & cppMask_un_1_;
	bool cppVar_31330 = (cppVar_31329 == 1);
	BIT_VEC cppVar_31331 = PC + 1;
	cppVar_31331 = (cppVar_31331 & cppMask_un_16_);
	BIT_VEC cppVar_31332 = ROM.rd(cppVar_31331);
	BIT_VEC cppVar_31333 = (cppVar_31332 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31334 = (cppVar_31333 << 3) | 0;
	cppVar_31334 = (cppVar_31334 & cppMask_un_8_);
	BIT_VEC cppVar_31335 = PC + 1;
	cppVar_31335 = (cppVar_31335 & cppMask_un_16_);
	BIT_VEC cppVar_31336 = ROM.rd(cppVar_31335);
	BIT_VEC cppVar_31337 = (cppVar_31336 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31338 = (cppVar_31337 & cppMask_un_5_);
	BIT_VEC cppVar_31339 = cppVar_31338 + 32;
	cppVar_31339 = (cppVar_31339 & cppMask_un_8_);
	BIT_VEC cppVar_31340 = (cppVar_31330) ? cppVar_31334 : cppVar_31339;
	bool cppVar_31342 = (cppVar_31340 == 153);
	BIT_VEC cppVar_31343 = PC + 1;
	cppVar_31343 = (cppVar_31343 & cppMask_un_16_);
	BIT_VEC cppVar_31344 = ROM.rd(cppVar_31343);
	BIT_VEC cppVar_31345 = (cppVar_31344 >> 7) & cppMask_un_1_;
	bool cppVar_31346 = (cppVar_31345 == 1);
	BIT_VEC cppVar_31347 = PC + 1;
	cppVar_31347 = (cppVar_31347 & cppMask_un_16_);
	BIT_VEC cppVar_31348 = ROM.rd(cppVar_31347);
	BIT_VEC cppVar_31349 = (cppVar_31348 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31350 = (cppVar_31349 << 3) | 0;
	cppVar_31350 = (cppVar_31350 & cppMask_un_8_);
	BIT_VEC cppVar_31351 = PC + 1;
	cppVar_31351 = (cppVar_31351 & cppMask_un_16_);
	BIT_VEC cppVar_31352 = ROM.rd(cppVar_31351);
	BIT_VEC cppVar_31353 = (cppVar_31352 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31354 = (cppVar_31353 & cppMask_un_5_);
	BIT_VEC cppVar_31355 = cppVar_31354 + 32;
	cppVar_31355 = (cppVar_31355 & cppMask_un_8_);
	BIT_VEC cppVar_31356 = (cppVar_31346) ? cppVar_31350 : cppVar_31355;
	bool cppVar_31358 = (cppVar_31356 == 160);
	BIT_VEC cppVar_31359 = PC + 1;
	cppVar_31359 = (cppVar_31359 & cppMask_un_16_);
	BIT_VEC cppVar_31360 = ROM.rd(cppVar_31359);
	BIT_VEC cppVar_31361 = (cppVar_31360 >> 7) & cppMask_un_1_;
	bool cppVar_31362 = (cppVar_31361 == 1);
	BIT_VEC cppVar_31363 = PC + 1;
	cppVar_31363 = (cppVar_31363 & cppMask_un_16_);
	BIT_VEC cppVar_31364 = ROM.rd(cppVar_31363);
	BIT_VEC cppVar_31365 = (cppVar_31364 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31366 = (cppVar_31365 << 3) | 0;
	cppVar_31366 = (cppVar_31366 & cppMask_un_8_);
	BIT_VEC cppVar_31367 = PC + 1;
	cppVar_31367 = (cppVar_31367 & cppMask_un_16_);
	BIT_VEC cppVar_31368 = ROM.rd(cppVar_31367);
	BIT_VEC cppVar_31369 = (cppVar_31368 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31370 = (cppVar_31369 & cppMask_un_5_);
	BIT_VEC cppVar_31371 = cppVar_31370 + 32;
	cppVar_31371 = (cppVar_31371 & cppMask_un_8_);
	BIT_VEC cppVar_31372 = (cppVar_31362) ? cppVar_31366 : cppVar_31371;
	bool cppVar_31374 = (cppVar_31372 == 168);
	BIT_VEC cppVar_31375 = PC + 1;
	cppVar_31375 = (cppVar_31375 & cppMask_un_16_);
	BIT_VEC cppVar_31376 = ROM.rd(cppVar_31375);
	BIT_VEC cppVar_31377 = (cppVar_31376 >> 7) & cppMask_un_1_;
	bool cppVar_31378 = (cppVar_31377 == 1);
	BIT_VEC cppVar_31379 = PC + 1;
	cppVar_31379 = (cppVar_31379 & cppMask_un_16_);
	BIT_VEC cppVar_31380 = ROM.rd(cppVar_31379);
	BIT_VEC cppVar_31381 = (cppVar_31380 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31382 = (cppVar_31381 << 3) | 0;
	cppVar_31382 = (cppVar_31382 & cppMask_un_8_);
	BIT_VEC cppVar_31383 = PC + 1;
	cppVar_31383 = (cppVar_31383 & cppMask_un_16_);
	BIT_VEC cppVar_31384 = ROM.rd(cppVar_31383);
	BIT_VEC cppVar_31385 = (cppVar_31384 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31386 = (cppVar_31385 & cppMask_un_5_);
	BIT_VEC cppVar_31387 = cppVar_31386 + 32;
	cppVar_31387 = (cppVar_31387 & cppMask_un_8_);
	BIT_VEC cppVar_31388 = (cppVar_31378) ? cppVar_31382 : cppVar_31387;
	bool cppVar_31390 = (cppVar_31388 == 176);
	BIT_VEC cppVar_31391 = PC + 1;
	cppVar_31391 = (cppVar_31391 & cppMask_un_16_);
	BIT_VEC cppVar_31392 = ROM.rd(cppVar_31391);
	BIT_VEC cppVar_31393 = (cppVar_31392 >> 7) & cppMask_un_1_;
	bool cppVar_31394 = (cppVar_31393 == 1);
	BIT_VEC cppVar_31395 = PC + 1;
	cppVar_31395 = (cppVar_31395 & cppMask_un_16_);
	BIT_VEC cppVar_31396 = ROM.rd(cppVar_31395);
	BIT_VEC cppVar_31397 = (cppVar_31396 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31398 = (cppVar_31397 << 3) | 0;
	cppVar_31398 = (cppVar_31398 & cppMask_un_8_);
	BIT_VEC cppVar_31399 = PC + 1;
	cppVar_31399 = (cppVar_31399 & cppMask_un_16_);
	BIT_VEC cppVar_31400 = ROM.rd(cppVar_31399);
	BIT_VEC cppVar_31401 = (cppVar_31400 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31402 = (cppVar_31401 & cppMask_un_5_);
	BIT_VEC cppVar_31403 = cppVar_31402 + 32;
	cppVar_31403 = (cppVar_31403 & cppMask_un_8_);
	BIT_VEC cppVar_31404 = (cppVar_31394) ? cppVar_31398 : cppVar_31403;
	bool cppVar_31406 = (cppVar_31404 == 184);
	BIT_VEC cppVar_31407 = PC + 1;
	cppVar_31407 = (cppVar_31407 & cppMask_un_16_);
	BIT_VEC cppVar_31408 = ROM.rd(cppVar_31407);
	BIT_VEC cppVar_31409 = (cppVar_31408 >> 7) & cppMask_un_1_;
	bool cppVar_31410 = (cppVar_31409 == 1);
	BIT_VEC cppVar_31411 = PC + 1;
	cppVar_31411 = (cppVar_31411 & cppMask_un_16_);
	BIT_VEC cppVar_31412 = ROM.rd(cppVar_31411);
	BIT_VEC cppVar_31413 = (cppVar_31412 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31414 = (cppVar_31413 << 3) | 0;
	cppVar_31414 = (cppVar_31414 & cppMask_un_8_);
	BIT_VEC cppVar_31415 = PC + 1;
	cppVar_31415 = (cppVar_31415 & cppMask_un_16_);
	BIT_VEC cppVar_31416 = ROM.rd(cppVar_31415);
	BIT_VEC cppVar_31417 = (cppVar_31416 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31418 = (cppVar_31417 & cppMask_un_5_);
	BIT_VEC cppVar_31419 = cppVar_31418 + 32;
	cppVar_31419 = (cppVar_31419 & cppMask_un_8_);
	BIT_VEC cppVar_31420 = (cppVar_31410) ? cppVar_31414 : cppVar_31419;
	bool cppVar_31422 = (cppVar_31420 == 208);
	BIT_VEC cppVar_31423 = PC + 1;
	cppVar_31423 = (cppVar_31423 & cppMask_un_16_);
	BIT_VEC cppVar_31424 = ROM.rd(cppVar_31423);
	BIT_VEC cppVar_31425 = (cppVar_31424 >> 7) & cppMask_un_1_;
	bool cppVar_31426 = (cppVar_31425 == 1);
	BIT_VEC cppVar_31427 = PC + 1;
	cppVar_31427 = (cppVar_31427 & cppMask_un_16_);
	BIT_VEC cppVar_31428 = ROM.rd(cppVar_31427);
	BIT_VEC cppVar_31429 = (cppVar_31428 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31430 = (cppVar_31429 << 3) | 0;
	cppVar_31430 = (cppVar_31430 & cppMask_un_8_);
	BIT_VEC cppVar_31431 = PC + 1;
	cppVar_31431 = (cppVar_31431 & cppMask_un_16_);
	BIT_VEC cppVar_31432 = ROM.rd(cppVar_31431);
	BIT_VEC cppVar_31433 = (cppVar_31432 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31434 = (cppVar_31433 & cppMask_un_5_);
	BIT_VEC cppVar_31435 = cppVar_31434 + 32;
	cppVar_31435 = (cppVar_31435 & cppMask_un_8_);
	BIT_VEC cppVar_31436 = (cppVar_31426) ? cppVar_31430 : cppVar_31435;
	bool cppVar_31438 = (cppVar_31436 == 224);
	BIT_VEC cppVar_31439 = PC + 1;
	cppVar_31439 = (cppVar_31439 & cppMask_un_16_);
	BIT_VEC cppVar_31440 = ROM.rd(cppVar_31439);
	BIT_VEC cppVar_31441 = (cppVar_31440 >> 7) & cppMask_un_1_;
	bool cppVar_31442 = (cppVar_31441 == 1);
	BIT_VEC cppVar_31443 = PC + 1;
	cppVar_31443 = (cppVar_31443 & cppMask_un_16_);
	BIT_VEC cppVar_31444 = ROM.rd(cppVar_31443);
	BIT_VEC cppVar_31445 = (cppVar_31444 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31446 = (cppVar_31445 << 3) | 0;
	cppVar_31446 = (cppVar_31446 & cppMask_un_8_);
	BIT_VEC cppVar_31447 = PC + 1;
	cppVar_31447 = (cppVar_31447 & cppMask_un_16_);
	BIT_VEC cppVar_31448 = ROM.rd(cppVar_31447);
	BIT_VEC cppVar_31449 = (cppVar_31448 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31450 = (cppVar_31449 & cppMask_un_5_);
	BIT_VEC cppVar_31451 = cppVar_31450 + 32;
	cppVar_31451 = (cppVar_31451 & cppMask_un_8_);
	BIT_VEC cppVar_31452 = (cppVar_31442) ? cppVar_31446 : cppVar_31451;
	bool cppVar_31454 = (cppVar_31452 == 240);
	BIT_VEC cppVar_31456 = (cppVar_31454) ? B : 0;
	BIT_VEC cppVar_31457 = (cppVar_31438) ? ACC : cppVar_31456;
	BIT_VEC cppVar_31458 = (cppVar_31422) ? PSW : cppVar_31457;
	BIT_VEC cppVar_31459 = (cppVar_31406) ? IP : cppVar_31458;
	BIT_VEC cppVar_31460 = (cppVar_31390) ? P3 : cppVar_31459;
	BIT_VEC cppVar_31461 = (cppVar_31374) ? IE : cppVar_31460;
	BIT_VEC cppVar_31462 = (cppVar_31358) ? P2 : cppVar_31461;
	BIT_VEC cppVar_31463 = (cppVar_31342) ? SBUF : cppVar_31462;
	BIT_VEC cppVar_31464 = (cppVar_31326) ? SCON : cppVar_31463;
	BIT_VEC cppVar_31465 = (cppVar_31310) ? P1 : cppVar_31464;
	BIT_VEC cppVar_31466 = (cppVar_31294) ? TH1 : cppVar_31465;
	BIT_VEC cppVar_31467 = (cppVar_31278) ? TL1 : cppVar_31466;
	BIT_VEC cppVar_31468 = (cppVar_31262) ? TH0 : cppVar_31467;
	BIT_VEC cppVar_31469 = (cppVar_31246) ? TL0 : cppVar_31468;
	BIT_VEC cppVar_31470 = (cppVar_31230) ? TMOD : cppVar_31469;
	BIT_VEC cppVar_31471 = (cppVar_31214) ? TCON : cppVar_31470;
	BIT_VEC cppVar_31472 = (cppVar_31198) ? PCON : cppVar_31471;
	BIT_VEC cppVar_31473 = (cppVar_31182) ? DPH : cppVar_31472;
	BIT_VEC cppVar_31474 = (cppVar_31166) ? DPL : cppVar_31473;
	BIT_VEC cppVar_31475 = (cppVar_31150) ? SP : cppVar_31474;
	BIT_VEC cppVar_31476 = (cppVar_31134) ? P0 : cppVar_31475;
	BIT_VEC cppVar_31477 = (cppVar_31103) ? cppVar_31118 : cppVar_31476;
	BIT_VEC cppVar_31478 = cppVar_31086 & cppVar_31477;
	BIT_VEC cppVar_31480 = 0;
	BIT_VEC cppVar_31481 = PC + 1;
	cppVar_31481 = (cppVar_31481 & cppMask_un_16_);
	BIT_VEC cppVar_31482 = ROM.rd(cppVar_31481);
	BIT_VEC cppVar_31483 = (cppVar_31482 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_31484 = (cppVar_31483 & cppMask_un_3_);
	BIT_VEC cppVar_31485 = cppVar_31480 << static_cast<unsigned>(cppVar_31484);
	cppVar_31485 = (cppVar_31485 & cppMask_un_8_);
	BIT_VEC cppVar_31486 = cppVar_31478 | cppVar_31485;
	BIT_VEC cppVar_31487 = (cppVar_31079) ? cppVar_31486 : P1;
	BIT_VEC cppVar_31488 = ROM.rd(PC);
	bool cppVar_31490 = (cppVar_31488 == 5);
	BIT_VEC cppVar_31492 = PC + 1;
	cppVar_31492 = (cppVar_31492 & cppMask_un_16_);
	BIT_VEC cppVar_31493 = ROM.rd(cppVar_31492);
	bool cppVar_31495 = (cppVar_31493 == 144);
	BIT_VEC cppVar_31496 = PC + 1;
	cppVar_31496 = (cppVar_31496 & cppMask_un_16_);
	BIT_VEC cppVar_31497 = ROM.rd(cppVar_31496);
	BIT_VEC cppVar_31498 = (cppVar_31497 >> 7) & cppMask_un_1_;
	bool cppVar_31500 = (cppVar_31498 == 0);
	BIT_VEC cppVar_31501 = PC + 1;
	cppVar_31501 = (cppVar_31501 & cppMask_un_16_);
	BIT_VEC cppVar_31502 = ROM.rd(cppVar_31501);
	BIT_VEC cppVar_31503 = IRAM.rd(cppVar_31502);
	BIT_VEC cppVar_31504 = PC + 1;
	cppVar_31504 = (cppVar_31504 & cppMask_un_16_);
	BIT_VEC cppVar_31505 = ROM.rd(cppVar_31504);
	bool cppVar_31507 = (cppVar_31505 == 128);
	BIT_VEC cppVar_31508 = PC + 1;
	cppVar_31508 = (cppVar_31508 & cppMask_un_16_);
	BIT_VEC cppVar_31509 = ROM.rd(cppVar_31508);
	bool cppVar_31511 = (cppVar_31509 == 129);
	BIT_VEC cppVar_31512 = PC + 1;
	cppVar_31512 = (cppVar_31512 & cppMask_un_16_);
	BIT_VEC cppVar_31513 = ROM.rd(cppVar_31512);
	bool cppVar_31515 = (cppVar_31513 == 130);
	BIT_VEC cppVar_31516 = PC + 1;
	cppVar_31516 = (cppVar_31516 & cppMask_un_16_);
	BIT_VEC cppVar_31517 = ROM.rd(cppVar_31516);
	bool cppVar_31519 = (cppVar_31517 == 131);
	BIT_VEC cppVar_31520 = PC + 1;
	cppVar_31520 = (cppVar_31520 & cppMask_un_16_);
	BIT_VEC cppVar_31521 = ROM.rd(cppVar_31520);
	bool cppVar_31523 = (cppVar_31521 == 135);
	BIT_VEC cppVar_31524 = PC + 1;
	cppVar_31524 = (cppVar_31524 & cppMask_un_16_);
	BIT_VEC cppVar_31525 = ROM.rd(cppVar_31524);
	bool cppVar_31527 = (cppVar_31525 == 136);
	BIT_VEC cppVar_31528 = PC + 1;
	cppVar_31528 = (cppVar_31528 & cppMask_un_16_);
	BIT_VEC cppVar_31529 = ROM.rd(cppVar_31528);
	bool cppVar_31531 = (cppVar_31529 == 137);
	BIT_VEC cppVar_31532 = PC + 1;
	cppVar_31532 = (cppVar_31532 & cppMask_un_16_);
	BIT_VEC cppVar_31533 = ROM.rd(cppVar_31532);
	bool cppVar_31535 = (cppVar_31533 == 138);
	BIT_VEC cppVar_31536 = PC + 1;
	cppVar_31536 = (cppVar_31536 & cppMask_un_16_);
	BIT_VEC cppVar_31537 = ROM.rd(cppVar_31536);
	bool cppVar_31539 = (cppVar_31537 == 140);
	BIT_VEC cppVar_31540 = PC + 1;
	cppVar_31540 = (cppVar_31540 & cppMask_un_16_);
	BIT_VEC cppVar_31541 = ROM.rd(cppVar_31540);
	bool cppVar_31543 = (cppVar_31541 == 139);
	BIT_VEC cppVar_31544 = PC + 1;
	cppVar_31544 = (cppVar_31544 & cppMask_un_16_);
	BIT_VEC cppVar_31545 = ROM.rd(cppVar_31544);
	bool cppVar_31547 = (cppVar_31545 == 141);
	BIT_VEC cppVar_31548 = PC + 1;
	cppVar_31548 = (cppVar_31548 & cppMask_un_16_);
	BIT_VEC cppVar_31549 = ROM.rd(cppVar_31548);
	bool cppVar_31551 = (cppVar_31549 == 144);
	BIT_VEC cppVar_31552 = PC + 1;
	cppVar_31552 = (cppVar_31552 & cppMask_un_16_);
	BIT_VEC cppVar_31553 = ROM.rd(cppVar_31552);
	bool cppVar_31555 = (cppVar_31553 == 152);
	BIT_VEC cppVar_31556 = PC + 1;
	cppVar_31556 = (cppVar_31556 & cppMask_un_16_);
	BIT_VEC cppVar_31557 = ROM.rd(cppVar_31556);
	bool cppVar_31559 = (cppVar_31557 == 153);
	BIT_VEC cppVar_31560 = PC + 1;
	cppVar_31560 = (cppVar_31560 & cppMask_un_16_);
	BIT_VEC cppVar_31561 = ROM.rd(cppVar_31560);
	bool cppVar_31563 = (cppVar_31561 == 160);
	BIT_VEC cppVar_31564 = PC + 1;
	cppVar_31564 = (cppVar_31564 & cppMask_un_16_);
	BIT_VEC cppVar_31565 = ROM.rd(cppVar_31564);
	bool cppVar_31567 = (cppVar_31565 == 168);
	BIT_VEC cppVar_31568 = PC + 1;
	cppVar_31568 = (cppVar_31568 & cppMask_un_16_);
	BIT_VEC cppVar_31569 = ROM.rd(cppVar_31568);
	bool cppVar_31571 = (cppVar_31569 == 176);
	BIT_VEC cppVar_31572 = PC + 1;
	cppVar_31572 = (cppVar_31572 & cppMask_un_16_);
	BIT_VEC cppVar_31573 = ROM.rd(cppVar_31572);
	bool cppVar_31575 = (cppVar_31573 == 184);
	BIT_VEC cppVar_31576 = PC + 1;
	cppVar_31576 = (cppVar_31576 & cppMask_un_16_);
	BIT_VEC cppVar_31577 = ROM.rd(cppVar_31576);
	bool cppVar_31579 = (cppVar_31577 == 208);
	BIT_VEC cppVar_31580 = PC + 1;
	cppVar_31580 = (cppVar_31580 & cppMask_un_16_);
	BIT_VEC cppVar_31581 = ROM.rd(cppVar_31580);
	bool cppVar_31583 = (cppVar_31581 == 224);
	BIT_VEC cppVar_31584 = PC + 1;
	cppVar_31584 = (cppVar_31584 & cppMask_un_16_);
	BIT_VEC cppVar_31585 = ROM.rd(cppVar_31584);
	bool cppVar_31587 = (cppVar_31585 == 240);
	BIT_VEC cppVar_31589 = (cppVar_31587) ? B : 0;
	BIT_VEC cppVar_31590 = (cppVar_31583) ? ACC : cppVar_31589;
	BIT_VEC cppVar_31591 = (cppVar_31579) ? PSW : cppVar_31590;
	BIT_VEC cppVar_31592 = (cppVar_31575) ? IP : cppVar_31591;
	BIT_VEC cppVar_31593 = (cppVar_31571) ? P3 : cppVar_31592;
	BIT_VEC cppVar_31594 = (cppVar_31567) ? IE : cppVar_31593;
	BIT_VEC cppVar_31595 = (cppVar_31563) ? P2 : cppVar_31594;
	BIT_VEC cppVar_31596 = (cppVar_31559) ? SBUF : cppVar_31595;
	BIT_VEC cppVar_31597 = (cppVar_31555) ? SCON : cppVar_31596;
	BIT_VEC cppVar_31598 = (cppVar_31551) ? P1 : cppVar_31597;
	BIT_VEC cppVar_31599 = (cppVar_31547) ? TH1 : cppVar_31598;
	BIT_VEC cppVar_31600 = (cppVar_31543) ? TL1 : cppVar_31599;
	BIT_VEC cppVar_31601 = (cppVar_31539) ? TH0 : cppVar_31600;
	BIT_VEC cppVar_31602 = (cppVar_31535) ? TL0 : cppVar_31601;
	BIT_VEC cppVar_31603 = (cppVar_31531) ? TMOD : cppVar_31602;
	BIT_VEC cppVar_31604 = (cppVar_31527) ? TCON : cppVar_31603;
	BIT_VEC cppVar_31605 = (cppVar_31523) ? PCON : cppVar_31604;
	BIT_VEC cppVar_31606 = (cppVar_31519) ? DPH : cppVar_31605;
	BIT_VEC cppVar_31607 = (cppVar_31515) ? DPL : cppVar_31606;
	BIT_VEC cppVar_31608 = (cppVar_31511) ? SP : cppVar_31607;
	BIT_VEC cppVar_31609 = (cppVar_31507) ? P0 : cppVar_31608;
	BIT_VEC cppVar_31610 = (cppVar_31500) ? cppVar_31503 : cppVar_31609;
	BIT_VEC cppVar_31612 = cppVar_31610 + 1;
	cppVar_31612 = (cppVar_31612 & cppMask_un_8_);
	BIT_VEC cppVar_31613 = (cppVar_31495) ? cppVar_31612 : P1;
	BIT_VEC cppVar_31614 = (cppVar_31490) ? cppVar_31613 : P1;
	BIT_VEC cppVar_31615 = (cppVar_31059) ? cppVar_31487 : cppVar_31614;
	BIT_VEC cppVar_31616 = (cppVar_30929) ? cppVar_31052 : cppVar_31615;
	BIT_VEC cppVar_31617 = (cppVar_30800) ? cppVar_30922 : cppVar_31616;
	BIT_VEC cppVar_31618 = (cppVar_30672) ? cppVar_30797 : cppVar_31617;
	BIT_VEC cppVar_31619 = (cppVar_30547) ? cppVar_30669 : cppVar_31618;
	BIT_VEC cppVar_31620 = (cppVar_30419) ? cppVar_30544 : cppVar_31619;
	BIT_VEC cppVar_31621 = (cppVar_30294) ? cppVar_30416 : cppVar_31620;
	BIT_VEC cppVar_31622 = (cppVar_30166) ? cppVar_30291 : cppVar_31621;
	BIT_VEC cppVar_31623 = (cppVar_30154) ? cppVar_30163 : cppVar_31622;
	BIT_VEC cppVar_31624 = (cppVar_30029) ? cppVar_30151 : cppVar_31623;
	BIT_VEC cppVar_31625 = (cppVar_30013) ? cppVar_30026 : cppVar_31624;
	BIT_VEC cppVar_31626 = (cppVar_29997) ? cppVar_30010 : cppVar_31625;
	BIT_VEC cppVar_31627 = (cppVar_29848) ? cppVar_29994 : cppVar_31626;
	BIT_VEC cppVar_31628 = (cppVar_29699) ? cppVar_29845 : cppVar_31627;
	BIT_VEC cppVar_31629 = (cppVar_29550) ? cppVar_29696 : cppVar_31628;
	BIT_VEC cppVar_31630 = (cppVar_29401) ? cppVar_29547 : cppVar_31629;
	BIT_VEC cppVar_31631 = (cppVar_29252) ? cppVar_29398 : cppVar_31630;
	BIT_VEC cppVar_31632 = (cppVar_29103) ? cppVar_29249 : cppVar_31631;
	BIT_VEC cppVar_31633 = (cppVar_28954) ? cppVar_29100 : cppVar_31632;
	BIT_VEC cppVar_31634 = (cppVar_28805) ? cppVar_28951 : cppVar_31633;
	BIT_VEC cppVar_31635 = (cppVar_28374) ? cppVar_28802 : cppVar_31634;
	BIT_VEC cppVar_31636 = (cppVar_27545) ? cppVar_28371 : cppVar_31635;
	BIT_VEC cppVar_31637 = (cppVar_27536) ? cppVar_27542 : cppVar_31636;
	BIT_VEC cppVar_31638 = (cppVar_27522) ? cppVar_27529 : cppVar_31637;
	BIT_VEC cppVar_31639 = (cppVar_27091) ? cppVar_27519 : cppVar_31638;
	return cppVar_31639;
}
