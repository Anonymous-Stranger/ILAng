#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_P0()
{
	BIT_VEC cppVar_22537 = ROM.rd(PC);
	bool cppVar_22539 = (cppVar_22537 == 210);
	BIT_VEC cppVar_22541 = PC + 1;
	cppVar_22541 = (cppVar_22541 & cppMask_un_16_);
	BIT_VEC cppVar_22542 = ROM.rd(cppVar_22541);
	BIT_VEC cppVar_22543 = (cppVar_22542 >> 7) & cppMask_un_1_;
	bool cppVar_22545 = (cppVar_22543 == 1);
	BIT_VEC cppVar_22546 = PC + 1;
	cppVar_22546 = (cppVar_22546 & cppMask_un_16_);
	BIT_VEC cppVar_22547 = ROM.rd(cppVar_22546);
	BIT_VEC cppVar_22548 = (cppVar_22547 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22550 = (cppVar_22548 << 3) | 0;
	cppVar_22550 = (cppVar_22550 & cppMask_un_8_);
	BIT_VEC cppVar_22551 = PC + 1;
	cppVar_22551 = (cppVar_22551 & cppMask_un_16_);
	BIT_VEC cppVar_22552 = ROM.rd(cppVar_22551);
	BIT_VEC cppVar_22553 = (cppVar_22552 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22554 = (cppVar_22553 & cppMask_un_5_);
	BIT_VEC cppVar_22556 = cppVar_22554 + 32;
	cppVar_22556 = (cppVar_22556 & cppMask_un_8_);
	BIT_VEC cppVar_22557 = (cppVar_22545) ? cppVar_22550 : cppVar_22556;
	bool cppVar_22559 = (cppVar_22557 == 128);
	BIT_VEC cppVar_22561 = PC + 1;
	cppVar_22561 = (cppVar_22561 & cppMask_un_16_);
	BIT_VEC cppVar_22562 = ROM.rd(cppVar_22561);
	BIT_VEC cppVar_22563 = (cppVar_22562 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_22564 = (cppVar_22563 & cppMask_un_3_);
	BIT_VEC cppVar_22565 = 1 << static_cast<unsigned>(cppVar_22564);
	cppVar_22565 = (cppVar_22565 & cppMask_un_8_);
	BIT_VEC cppVar_22566 = ~cppVar_22565;
	BIT_VEC cppVar_22567 = PC + 1;
	cppVar_22567 = (cppVar_22567 & cppMask_un_16_);
	BIT_VEC cppVar_22568 = ROM.rd(cppVar_22567);
	BIT_VEC cppVar_22569 = (cppVar_22568 >> 7) & cppMask_un_1_;
	bool cppVar_22570 = (cppVar_22569 == 1);
	BIT_VEC cppVar_22571 = PC + 1;
	cppVar_22571 = (cppVar_22571 & cppMask_un_16_);
	BIT_VEC cppVar_22572 = ROM.rd(cppVar_22571);
	BIT_VEC cppVar_22573 = (cppVar_22572 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22574 = (cppVar_22573 << 3) | 0;
	cppVar_22574 = (cppVar_22574 & cppMask_un_8_);
	BIT_VEC cppVar_22575 = PC + 1;
	cppVar_22575 = (cppVar_22575 & cppMask_un_16_);
	BIT_VEC cppVar_22576 = ROM.rd(cppVar_22575);
	BIT_VEC cppVar_22577 = (cppVar_22576 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22578 = (cppVar_22577 & cppMask_un_5_);
	BIT_VEC cppVar_22579 = cppVar_22578 + 32;
	cppVar_22579 = (cppVar_22579 & cppMask_un_8_);
	BIT_VEC cppVar_22580 = (cppVar_22570) ? cppVar_22574 : cppVar_22579;
	BIT_VEC cppVar_22581 = (cppVar_22580 >> 7) & cppMask_un_1_;
	bool cppVar_22583 = (cppVar_22581 == 0);
	BIT_VEC cppVar_22584 = PC + 1;
	cppVar_22584 = (cppVar_22584 & cppMask_un_16_);
	BIT_VEC cppVar_22585 = ROM.rd(cppVar_22584);
	BIT_VEC cppVar_22586 = (cppVar_22585 >> 7) & cppMask_un_1_;
	bool cppVar_22587 = (cppVar_22586 == 1);
	BIT_VEC cppVar_22588 = PC + 1;
	cppVar_22588 = (cppVar_22588 & cppMask_un_16_);
	BIT_VEC cppVar_22589 = ROM.rd(cppVar_22588);
	BIT_VEC cppVar_22590 = (cppVar_22589 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22591 = (cppVar_22590 << 3) | 0;
	cppVar_22591 = (cppVar_22591 & cppMask_un_8_);
	BIT_VEC cppVar_22592 = PC + 1;
	cppVar_22592 = (cppVar_22592 & cppMask_un_16_);
	BIT_VEC cppVar_22593 = ROM.rd(cppVar_22592);
	BIT_VEC cppVar_22594 = (cppVar_22593 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22595 = (cppVar_22594 & cppMask_un_5_);
	BIT_VEC cppVar_22596 = cppVar_22595 + 32;
	cppVar_22596 = (cppVar_22596 & cppMask_un_8_);
	BIT_VEC cppVar_22597 = (cppVar_22587) ? cppVar_22591 : cppVar_22596;
	BIT_VEC cppVar_22598 = IRAM.rd(cppVar_22597);
	BIT_VEC cppVar_22599 = PC + 1;
	cppVar_22599 = (cppVar_22599 & cppMask_un_16_);
	BIT_VEC cppVar_22600 = ROM.rd(cppVar_22599);
	BIT_VEC cppVar_22601 = (cppVar_22600 >> 7) & cppMask_un_1_;
	bool cppVar_22602 = (cppVar_22601 == 1);
	BIT_VEC cppVar_22603 = PC + 1;
	cppVar_22603 = (cppVar_22603 & cppMask_un_16_);
	BIT_VEC cppVar_22604 = ROM.rd(cppVar_22603);
	BIT_VEC cppVar_22605 = (cppVar_22604 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22606 = (cppVar_22605 << 3) | 0;
	cppVar_22606 = (cppVar_22606 & cppMask_un_8_);
	BIT_VEC cppVar_22607 = PC + 1;
	cppVar_22607 = (cppVar_22607 & cppMask_un_16_);
	BIT_VEC cppVar_22608 = ROM.rd(cppVar_22607);
	BIT_VEC cppVar_22609 = (cppVar_22608 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22610 = (cppVar_22609 & cppMask_un_5_);
	BIT_VEC cppVar_22611 = cppVar_22610 + 32;
	cppVar_22611 = (cppVar_22611 & cppMask_un_8_);
	BIT_VEC cppVar_22612 = (cppVar_22602) ? cppVar_22606 : cppVar_22611;
	bool cppVar_22614 = (cppVar_22612 == 128);
	BIT_VEC cppVar_22615 = PC + 1;
	cppVar_22615 = (cppVar_22615 & cppMask_un_16_);
	BIT_VEC cppVar_22616 = ROM.rd(cppVar_22615);
	BIT_VEC cppVar_22617 = (cppVar_22616 >> 7) & cppMask_un_1_;
	bool cppVar_22618 = (cppVar_22617 == 1);
	BIT_VEC cppVar_22619 = PC + 1;
	cppVar_22619 = (cppVar_22619 & cppMask_un_16_);
	BIT_VEC cppVar_22620 = ROM.rd(cppVar_22619);
	BIT_VEC cppVar_22621 = (cppVar_22620 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22622 = (cppVar_22621 << 3) | 0;
	cppVar_22622 = (cppVar_22622 & cppMask_un_8_);
	BIT_VEC cppVar_22623 = PC + 1;
	cppVar_22623 = (cppVar_22623 & cppMask_un_16_);
	BIT_VEC cppVar_22624 = ROM.rd(cppVar_22623);
	BIT_VEC cppVar_22625 = (cppVar_22624 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22626 = (cppVar_22625 & cppMask_un_5_);
	BIT_VEC cppVar_22627 = cppVar_22626 + 32;
	cppVar_22627 = (cppVar_22627 & cppMask_un_8_);
	BIT_VEC cppVar_22628 = (cppVar_22618) ? cppVar_22622 : cppVar_22627;
	bool cppVar_22630 = (cppVar_22628 == 129);
	BIT_VEC cppVar_22631 = PC + 1;
	cppVar_22631 = (cppVar_22631 & cppMask_un_16_);
	BIT_VEC cppVar_22632 = ROM.rd(cppVar_22631);
	BIT_VEC cppVar_22633 = (cppVar_22632 >> 7) & cppMask_un_1_;
	bool cppVar_22634 = (cppVar_22633 == 1);
	BIT_VEC cppVar_22635 = PC + 1;
	cppVar_22635 = (cppVar_22635 & cppMask_un_16_);
	BIT_VEC cppVar_22636 = ROM.rd(cppVar_22635);
	BIT_VEC cppVar_22637 = (cppVar_22636 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22638 = (cppVar_22637 << 3) | 0;
	cppVar_22638 = (cppVar_22638 & cppMask_un_8_);
	BIT_VEC cppVar_22639 = PC + 1;
	cppVar_22639 = (cppVar_22639 & cppMask_un_16_);
	BIT_VEC cppVar_22640 = ROM.rd(cppVar_22639);
	BIT_VEC cppVar_22641 = (cppVar_22640 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22642 = (cppVar_22641 & cppMask_un_5_);
	BIT_VEC cppVar_22643 = cppVar_22642 + 32;
	cppVar_22643 = (cppVar_22643 & cppMask_un_8_);
	BIT_VEC cppVar_22644 = (cppVar_22634) ? cppVar_22638 : cppVar_22643;
	bool cppVar_22646 = (cppVar_22644 == 130);
	BIT_VEC cppVar_22647 = PC + 1;
	cppVar_22647 = (cppVar_22647 & cppMask_un_16_);
	BIT_VEC cppVar_22648 = ROM.rd(cppVar_22647);
	BIT_VEC cppVar_22649 = (cppVar_22648 >> 7) & cppMask_un_1_;
	bool cppVar_22650 = (cppVar_22649 == 1);
	BIT_VEC cppVar_22651 = PC + 1;
	cppVar_22651 = (cppVar_22651 & cppMask_un_16_);
	BIT_VEC cppVar_22652 = ROM.rd(cppVar_22651);
	BIT_VEC cppVar_22653 = (cppVar_22652 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22654 = (cppVar_22653 << 3) | 0;
	cppVar_22654 = (cppVar_22654 & cppMask_un_8_);
	BIT_VEC cppVar_22655 = PC + 1;
	cppVar_22655 = (cppVar_22655 & cppMask_un_16_);
	BIT_VEC cppVar_22656 = ROM.rd(cppVar_22655);
	BIT_VEC cppVar_22657 = (cppVar_22656 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22658 = (cppVar_22657 & cppMask_un_5_);
	BIT_VEC cppVar_22659 = cppVar_22658 + 32;
	cppVar_22659 = (cppVar_22659 & cppMask_un_8_);
	BIT_VEC cppVar_22660 = (cppVar_22650) ? cppVar_22654 : cppVar_22659;
	bool cppVar_22662 = (cppVar_22660 == 131);
	BIT_VEC cppVar_22663 = PC + 1;
	cppVar_22663 = (cppVar_22663 & cppMask_un_16_);
	BIT_VEC cppVar_22664 = ROM.rd(cppVar_22663);
	BIT_VEC cppVar_22665 = (cppVar_22664 >> 7) & cppMask_un_1_;
	bool cppVar_22666 = (cppVar_22665 == 1);
	BIT_VEC cppVar_22667 = PC + 1;
	cppVar_22667 = (cppVar_22667 & cppMask_un_16_);
	BIT_VEC cppVar_22668 = ROM.rd(cppVar_22667);
	BIT_VEC cppVar_22669 = (cppVar_22668 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22670 = (cppVar_22669 << 3) | 0;
	cppVar_22670 = (cppVar_22670 & cppMask_un_8_);
	BIT_VEC cppVar_22671 = PC + 1;
	cppVar_22671 = (cppVar_22671 & cppMask_un_16_);
	BIT_VEC cppVar_22672 = ROM.rd(cppVar_22671);
	BIT_VEC cppVar_22673 = (cppVar_22672 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22674 = (cppVar_22673 & cppMask_un_5_);
	BIT_VEC cppVar_22675 = cppVar_22674 + 32;
	cppVar_22675 = (cppVar_22675 & cppMask_un_8_);
	BIT_VEC cppVar_22676 = (cppVar_22666) ? cppVar_22670 : cppVar_22675;
	bool cppVar_22678 = (cppVar_22676 == 135);
	BIT_VEC cppVar_22679 = PC + 1;
	cppVar_22679 = (cppVar_22679 & cppMask_un_16_);
	BIT_VEC cppVar_22680 = ROM.rd(cppVar_22679);
	BIT_VEC cppVar_22681 = (cppVar_22680 >> 7) & cppMask_un_1_;
	bool cppVar_22682 = (cppVar_22681 == 1);
	BIT_VEC cppVar_22683 = PC + 1;
	cppVar_22683 = (cppVar_22683 & cppMask_un_16_);
	BIT_VEC cppVar_22684 = ROM.rd(cppVar_22683);
	BIT_VEC cppVar_22685 = (cppVar_22684 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22686 = (cppVar_22685 << 3) | 0;
	cppVar_22686 = (cppVar_22686 & cppMask_un_8_);
	BIT_VEC cppVar_22687 = PC + 1;
	cppVar_22687 = (cppVar_22687 & cppMask_un_16_);
	BIT_VEC cppVar_22688 = ROM.rd(cppVar_22687);
	BIT_VEC cppVar_22689 = (cppVar_22688 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22690 = (cppVar_22689 & cppMask_un_5_);
	BIT_VEC cppVar_22691 = cppVar_22690 + 32;
	cppVar_22691 = (cppVar_22691 & cppMask_un_8_);
	BIT_VEC cppVar_22692 = (cppVar_22682) ? cppVar_22686 : cppVar_22691;
	bool cppVar_22694 = (cppVar_22692 == 136);
	BIT_VEC cppVar_22695 = PC + 1;
	cppVar_22695 = (cppVar_22695 & cppMask_un_16_);
	BIT_VEC cppVar_22696 = ROM.rd(cppVar_22695);
	BIT_VEC cppVar_22697 = (cppVar_22696 >> 7) & cppMask_un_1_;
	bool cppVar_22698 = (cppVar_22697 == 1);
	BIT_VEC cppVar_22699 = PC + 1;
	cppVar_22699 = (cppVar_22699 & cppMask_un_16_);
	BIT_VEC cppVar_22700 = ROM.rd(cppVar_22699);
	BIT_VEC cppVar_22701 = (cppVar_22700 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22702 = (cppVar_22701 << 3) | 0;
	cppVar_22702 = (cppVar_22702 & cppMask_un_8_);
	BIT_VEC cppVar_22703 = PC + 1;
	cppVar_22703 = (cppVar_22703 & cppMask_un_16_);
	BIT_VEC cppVar_22704 = ROM.rd(cppVar_22703);
	BIT_VEC cppVar_22705 = (cppVar_22704 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22706 = (cppVar_22705 & cppMask_un_5_);
	BIT_VEC cppVar_22707 = cppVar_22706 + 32;
	cppVar_22707 = (cppVar_22707 & cppMask_un_8_);
	BIT_VEC cppVar_22708 = (cppVar_22698) ? cppVar_22702 : cppVar_22707;
	bool cppVar_22710 = (cppVar_22708 == 137);
	BIT_VEC cppVar_22711 = PC + 1;
	cppVar_22711 = (cppVar_22711 & cppMask_un_16_);
	BIT_VEC cppVar_22712 = ROM.rd(cppVar_22711);
	BIT_VEC cppVar_22713 = (cppVar_22712 >> 7) & cppMask_un_1_;
	bool cppVar_22714 = (cppVar_22713 == 1);
	BIT_VEC cppVar_22715 = PC + 1;
	cppVar_22715 = (cppVar_22715 & cppMask_un_16_);
	BIT_VEC cppVar_22716 = ROM.rd(cppVar_22715);
	BIT_VEC cppVar_22717 = (cppVar_22716 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22718 = (cppVar_22717 << 3) | 0;
	cppVar_22718 = (cppVar_22718 & cppMask_un_8_);
	BIT_VEC cppVar_22719 = PC + 1;
	cppVar_22719 = (cppVar_22719 & cppMask_un_16_);
	BIT_VEC cppVar_22720 = ROM.rd(cppVar_22719);
	BIT_VEC cppVar_22721 = (cppVar_22720 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22722 = (cppVar_22721 & cppMask_un_5_);
	BIT_VEC cppVar_22723 = cppVar_22722 + 32;
	cppVar_22723 = (cppVar_22723 & cppMask_un_8_);
	BIT_VEC cppVar_22724 = (cppVar_22714) ? cppVar_22718 : cppVar_22723;
	bool cppVar_22726 = (cppVar_22724 == 138);
	BIT_VEC cppVar_22727 = PC + 1;
	cppVar_22727 = (cppVar_22727 & cppMask_un_16_);
	BIT_VEC cppVar_22728 = ROM.rd(cppVar_22727);
	BIT_VEC cppVar_22729 = (cppVar_22728 >> 7) & cppMask_un_1_;
	bool cppVar_22730 = (cppVar_22729 == 1);
	BIT_VEC cppVar_22731 = PC + 1;
	cppVar_22731 = (cppVar_22731 & cppMask_un_16_);
	BIT_VEC cppVar_22732 = ROM.rd(cppVar_22731);
	BIT_VEC cppVar_22733 = (cppVar_22732 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22734 = (cppVar_22733 << 3) | 0;
	cppVar_22734 = (cppVar_22734 & cppMask_un_8_);
	BIT_VEC cppVar_22735 = PC + 1;
	cppVar_22735 = (cppVar_22735 & cppMask_un_16_);
	BIT_VEC cppVar_22736 = ROM.rd(cppVar_22735);
	BIT_VEC cppVar_22737 = (cppVar_22736 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22738 = (cppVar_22737 & cppMask_un_5_);
	BIT_VEC cppVar_22739 = cppVar_22738 + 32;
	cppVar_22739 = (cppVar_22739 & cppMask_un_8_);
	BIT_VEC cppVar_22740 = (cppVar_22730) ? cppVar_22734 : cppVar_22739;
	bool cppVar_22742 = (cppVar_22740 == 140);
	BIT_VEC cppVar_22743 = PC + 1;
	cppVar_22743 = (cppVar_22743 & cppMask_un_16_);
	BIT_VEC cppVar_22744 = ROM.rd(cppVar_22743);
	BIT_VEC cppVar_22745 = (cppVar_22744 >> 7) & cppMask_un_1_;
	bool cppVar_22746 = (cppVar_22745 == 1);
	BIT_VEC cppVar_22747 = PC + 1;
	cppVar_22747 = (cppVar_22747 & cppMask_un_16_);
	BIT_VEC cppVar_22748 = ROM.rd(cppVar_22747);
	BIT_VEC cppVar_22749 = (cppVar_22748 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22750 = (cppVar_22749 << 3) | 0;
	cppVar_22750 = (cppVar_22750 & cppMask_un_8_);
	BIT_VEC cppVar_22751 = PC + 1;
	cppVar_22751 = (cppVar_22751 & cppMask_un_16_);
	BIT_VEC cppVar_22752 = ROM.rd(cppVar_22751);
	BIT_VEC cppVar_22753 = (cppVar_22752 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22754 = (cppVar_22753 & cppMask_un_5_);
	BIT_VEC cppVar_22755 = cppVar_22754 + 32;
	cppVar_22755 = (cppVar_22755 & cppMask_un_8_);
	BIT_VEC cppVar_22756 = (cppVar_22746) ? cppVar_22750 : cppVar_22755;
	bool cppVar_22758 = (cppVar_22756 == 139);
	BIT_VEC cppVar_22759 = PC + 1;
	cppVar_22759 = (cppVar_22759 & cppMask_un_16_);
	BIT_VEC cppVar_22760 = ROM.rd(cppVar_22759);
	BIT_VEC cppVar_22761 = (cppVar_22760 >> 7) & cppMask_un_1_;
	bool cppVar_22762 = (cppVar_22761 == 1);
	BIT_VEC cppVar_22763 = PC + 1;
	cppVar_22763 = (cppVar_22763 & cppMask_un_16_);
	BIT_VEC cppVar_22764 = ROM.rd(cppVar_22763);
	BIT_VEC cppVar_22765 = (cppVar_22764 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22766 = (cppVar_22765 << 3) | 0;
	cppVar_22766 = (cppVar_22766 & cppMask_un_8_);
	BIT_VEC cppVar_22767 = PC + 1;
	cppVar_22767 = (cppVar_22767 & cppMask_un_16_);
	BIT_VEC cppVar_22768 = ROM.rd(cppVar_22767);
	BIT_VEC cppVar_22769 = (cppVar_22768 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22770 = (cppVar_22769 & cppMask_un_5_);
	BIT_VEC cppVar_22771 = cppVar_22770 + 32;
	cppVar_22771 = (cppVar_22771 & cppMask_un_8_);
	BIT_VEC cppVar_22772 = (cppVar_22762) ? cppVar_22766 : cppVar_22771;
	bool cppVar_22774 = (cppVar_22772 == 141);
	BIT_VEC cppVar_22775 = PC + 1;
	cppVar_22775 = (cppVar_22775 & cppMask_un_16_);
	BIT_VEC cppVar_22776 = ROM.rd(cppVar_22775);
	BIT_VEC cppVar_22777 = (cppVar_22776 >> 7) & cppMask_un_1_;
	bool cppVar_22778 = (cppVar_22777 == 1);
	BIT_VEC cppVar_22779 = PC + 1;
	cppVar_22779 = (cppVar_22779 & cppMask_un_16_);
	BIT_VEC cppVar_22780 = ROM.rd(cppVar_22779);
	BIT_VEC cppVar_22781 = (cppVar_22780 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22782 = (cppVar_22781 << 3) | 0;
	cppVar_22782 = (cppVar_22782 & cppMask_un_8_);
	BIT_VEC cppVar_22783 = PC + 1;
	cppVar_22783 = (cppVar_22783 & cppMask_un_16_);
	BIT_VEC cppVar_22784 = ROM.rd(cppVar_22783);
	BIT_VEC cppVar_22785 = (cppVar_22784 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22786 = (cppVar_22785 & cppMask_un_5_);
	BIT_VEC cppVar_22787 = cppVar_22786 + 32;
	cppVar_22787 = (cppVar_22787 & cppMask_un_8_);
	BIT_VEC cppVar_22788 = (cppVar_22778) ? cppVar_22782 : cppVar_22787;
	bool cppVar_22790 = (cppVar_22788 == 144);
	BIT_VEC cppVar_22791 = PC + 1;
	cppVar_22791 = (cppVar_22791 & cppMask_un_16_);
	BIT_VEC cppVar_22792 = ROM.rd(cppVar_22791);
	BIT_VEC cppVar_22793 = (cppVar_22792 >> 7) & cppMask_un_1_;
	bool cppVar_22794 = (cppVar_22793 == 1);
	BIT_VEC cppVar_22795 = PC + 1;
	cppVar_22795 = (cppVar_22795 & cppMask_un_16_);
	BIT_VEC cppVar_22796 = ROM.rd(cppVar_22795);
	BIT_VEC cppVar_22797 = (cppVar_22796 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22798 = (cppVar_22797 << 3) | 0;
	cppVar_22798 = (cppVar_22798 & cppMask_un_8_);
	BIT_VEC cppVar_22799 = PC + 1;
	cppVar_22799 = (cppVar_22799 & cppMask_un_16_);
	BIT_VEC cppVar_22800 = ROM.rd(cppVar_22799);
	BIT_VEC cppVar_22801 = (cppVar_22800 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22802 = (cppVar_22801 & cppMask_un_5_);
	BIT_VEC cppVar_22803 = cppVar_22802 + 32;
	cppVar_22803 = (cppVar_22803 & cppMask_un_8_);
	BIT_VEC cppVar_22804 = (cppVar_22794) ? cppVar_22798 : cppVar_22803;
	bool cppVar_22806 = (cppVar_22804 == 152);
	BIT_VEC cppVar_22807 = PC + 1;
	cppVar_22807 = (cppVar_22807 & cppMask_un_16_);
	BIT_VEC cppVar_22808 = ROM.rd(cppVar_22807);
	BIT_VEC cppVar_22809 = (cppVar_22808 >> 7) & cppMask_un_1_;
	bool cppVar_22810 = (cppVar_22809 == 1);
	BIT_VEC cppVar_22811 = PC + 1;
	cppVar_22811 = (cppVar_22811 & cppMask_un_16_);
	BIT_VEC cppVar_22812 = ROM.rd(cppVar_22811);
	BIT_VEC cppVar_22813 = (cppVar_22812 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22814 = (cppVar_22813 << 3) | 0;
	cppVar_22814 = (cppVar_22814 & cppMask_un_8_);
	BIT_VEC cppVar_22815 = PC + 1;
	cppVar_22815 = (cppVar_22815 & cppMask_un_16_);
	BIT_VEC cppVar_22816 = ROM.rd(cppVar_22815);
	BIT_VEC cppVar_22817 = (cppVar_22816 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22818 = (cppVar_22817 & cppMask_un_5_);
	BIT_VEC cppVar_22819 = cppVar_22818 + 32;
	cppVar_22819 = (cppVar_22819 & cppMask_un_8_);
	BIT_VEC cppVar_22820 = (cppVar_22810) ? cppVar_22814 : cppVar_22819;
	bool cppVar_22822 = (cppVar_22820 == 153);
	BIT_VEC cppVar_22823 = PC + 1;
	cppVar_22823 = (cppVar_22823 & cppMask_un_16_);
	BIT_VEC cppVar_22824 = ROM.rd(cppVar_22823);
	BIT_VEC cppVar_22825 = (cppVar_22824 >> 7) & cppMask_un_1_;
	bool cppVar_22826 = (cppVar_22825 == 1);
	BIT_VEC cppVar_22827 = PC + 1;
	cppVar_22827 = (cppVar_22827 & cppMask_un_16_);
	BIT_VEC cppVar_22828 = ROM.rd(cppVar_22827);
	BIT_VEC cppVar_22829 = (cppVar_22828 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22830 = (cppVar_22829 << 3) | 0;
	cppVar_22830 = (cppVar_22830 & cppMask_un_8_);
	BIT_VEC cppVar_22831 = PC + 1;
	cppVar_22831 = (cppVar_22831 & cppMask_un_16_);
	BIT_VEC cppVar_22832 = ROM.rd(cppVar_22831);
	BIT_VEC cppVar_22833 = (cppVar_22832 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22834 = (cppVar_22833 & cppMask_un_5_);
	BIT_VEC cppVar_22835 = cppVar_22834 + 32;
	cppVar_22835 = (cppVar_22835 & cppMask_un_8_);
	BIT_VEC cppVar_22836 = (cppVar_22826) ? cppVar_22830 : cppVar_22835;
	bool cppVar_22838 = (cppVar_22836 == 160);
	BIT_VEC cppVar_22839 = PC + 1;
	cppVar_22839 = (cppVar_22839 & cppMask_un_16_);
	BIT_VEC cppVar_22840 = ROM.rd(cppVar_22839);
	BIT_VEC cppVar_22841 = (cppVar_22840 >> 7) & cppMask_un_1_;
	bool cppVar_22842 = (cppVar_22841 == 1);
	BIT_VEC cppVar_22843 = PC + 1;
	cppVar_22843 = (cppVar_22843 & cppMask_un_16_);
	BIT_VEC cppVar_22844 = ROM.rd(cppVar_22843);
	BIT_VEC cppVar_22845 = (cppVar_22844 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22846 = (cppVar_22845 << 3) | 0;
	cppVar_22846 = (cppVar_22846 & cppMask_un_8_);
	BIT_VEC cppVar_22847 = PC + 1;
	cppVar_22847 = (cppVar_22847 & cppMask_un_16_);
	BIT_VEC cppVar_22848 = ROM.rd(cppVar_22847);
	BIT_VEC cppVar_22849 = (cppVar_22848 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22850 = (cppVar_22849 & cppMask_un_5_);
	BIT_VEC cppVar_22851 = cppVar_22850 + 32;
	cppVar_22851 = (cppVar_22851 & cppMask_un_8_);
	BIT_VEC cppVar_22852 = (cppVar_22842) ? cppVar_22846 : cppVar_22851;
	bool cppVar_22854 = (cppVar_22852 == 168);
	BIT_VEC cppVar_22855 = PC + 1;
	cppVar_22855 = (cppVar_22855 & cppMask_un_16_);
	BIT_VEC cppVar_22856 = ROM.rd(cppVar_22855);
	BIT_VEC cppVar_22857 = (cppVar_22856 >> 7) & cppMask_un_1_;
	bool cppVar_22858 = (cppVar_22857 == 1);
	BIT_VEC cppVar_22859 = PC + 1;
	cppVar_22859 = (cppVar_22859 & cppMask_un_16_);
	BIT_VEC cppVar_22860 = ROM.rd(cppVar_22859);
	BIT_VEC cppVar_22861 = (cppVar_22860 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22862 = (cppVar_22861 << 3) | 0;
	cppVar_22862 = (cppVar_22862 & cppMask_un_8_);
	BIT_VEC cppVar_22863 = PC + 1;
	cppVar_22863 = (cppVar_22863 & cppMask_un_16_);
	BIT_VEC cppVar_22864 = ROM.rd(cppVar_22863);
	BIT_VEC cppVar_22865 = (cppVar_22864 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22866 = (cppVar_22865 & cppMask_un_5_);
	BIT_VEC cppVar_22867 = cppVar_22866 + 32;
	cppVar_22867 = (cppVar_22867 & cppMask_un_8_);
	BIT_VEC cppVar_22868 = (cppVar_22858) ? cppVar_22862 : cppVar_22867;
	bool cppVar_22870 = (cppVar_22868 == 176);
	BIT_VEC cppVar_22871 = PC + 1;
	cppVar_22871 = (cppVar_22871 & cppMask_un_16_);
	BIT_VEC cppVar_22872 = ROM.rd(cppVar_22871);
	BIT_VEC cppVar_22873 = (cppVar_22872 >> 7) & cppMask_un_1_;
	bool cppVar_22874 = (cppVar_22873 == 1);
	BIT_VEC cppVar_22875 = PC + 1;
	cppVar_22875 = (cppVar_22875 & cppMask_un_16_);
	BIT_VEC cppVar_22876 = ROM.rd(cppVar_22875);
	BIT_VEC cppVar_22877 = (cppVar_22876 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22878 = (cppVar_22877 << 3) | 0;
	cppVar_22878 = (cppVar_22878 & cppMask_un_8_);
	BIT_VEC cppVar_22879 = PC + 1;
	cppVar_22879 = (cppVar_22879 & cppMask_un_16_);
	BIT_VEC cppVar_22880 = ROM.rd(cppVar_22879);
	BIT_VEC cppVar_22881 = (cppVar_22880 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22882 = (cppVar_22881 & cppMask_un_5_);
	BIT_VEC cppVar_22883 = cppVar_22882 + 32;
	cppVar_22883 = (cppVar_22883 & cppMask_un_8_);
	BIT_VEC cppVar_22884 = (cppVar_22874) ? cppVar_22878 : cppVar_22883;
	bool cppVar_22886 = (cppVar_22884 == 184);
	BIT_VEC cppVar_22887 = PC + 1;
	cppVar_22887 = (cppVar_22887 & cppMask_un_16_);
	BIT_VEC cppVar_22888 = ROM.rd(cppVar_22887);
	BIT_VEC cppVar_22889 = (cppVar_22888 >> 7) & cppMask_un_1_;
	bool cppVar_22890 = (cppVar_22889 == 1);
	BIT_VEC cppVar_22891 = PC + 1;
	cppVar_22891 = (cppVar_22891 & cppMask_un_16_);
	BIT_VEC cppVar_22892 = ROM.rd(cppVar_22891);
	BIT_VEC cppVar_22893 = (cppVar_22892 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22894 = (cppVar_22893 << 3) | 0;
	cppVar_22894 = (cppVar_22894 & cppMask_un_8_);
	BIT_VEC cppVar_22895 = PC + 1;
	cppVar_22895 = (cppVar_22895 & cppMask_un_16_);
	BIT_VEC cppVar_22896 = ROM.rd(cppVar_22895);
	BIT_VEC cppVar_22897 = (cppVar_22896 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22898 = (cppVar_22897 & cppMask_un_5_);
	BIT_VEC cppVar_22899 = cppVar_22898 + 32;
	cppVar_22899 = (cppVar_22899 & cppMask_un_8_);
	BIT_VEC cppVar_22900 = (cppVar_22890) ? cppVar_22894 : cppVar_22899;
	bool cppVar_22902 = (cppVar_22900 == 208);
	BIT_VEC cppVar_22903 = PC + 1;
	cppVar_22903 = (cppVar_22903 & cppMask_un_16_);
	BIT_VEC cppVar_22904 = ROM.rd(cppVar_22903);
	BIT_VEC cppVar_22905 = (cppVar_22904 >> 7) & cppMask_un_1_;
	bool cppVar_22906 = (cppVar_22905 == 1);
	BIT_VEC cppVar_22907 = PC + 1;
	cppVar_22907 = (cppVar_22907 & cppMask_un_16_);
	BIT_VEC cppVar_22908 = ROM.rd(cppVar_22907);
	BIT_VEC cppVar_22909 = (cppVar_22908 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22910 = (cppVar_22909 << 3) | 0;
	cppVar_22910 = (cppVar_22910 & cppMask_un_8_);
	BIT_VEC cppVar_22911 = PC + 1;
	cppVar_22911 = (cppVar_22911 & cppMask_un_16_);
	BIT_VEC cppVar_22912 = ROM.rd(cppVar_22911);
	BIT_VEC cppVar_22913 = (cppVar_22912 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22914 = (cppVar_22913 & cppMask_un_5_);
	BIT_VEC cppVar_22915 = cppVar_22914 + 32;
	cppVar_22915 = (cppVar_22915 & cppMask_un_8_);
	BIT_VEC cppVar_22916 = (cppVar_22906) ? cppVar_22910 : cppVar_22915;
	bool cppVar_22918 = (cppVar_22916 == 224);
	BIT_VEC cppVar_22919 = PC + 1;
	cppVar_22919 = (cppVar_22919 & cppMask_un_16_);
	BIT_VEC cppVar_22920 = ROM.rd(cppVar_22919);
	BIT_VEC cppVar_22921 = (cppVar_22920 >> 7) & cppMask_un_1_;
	bool cppVar_22922 = (cppVar_22921 == 1);
	BIT_VEC cppVar_22923 = PC + 1;
	cppVar_22923 = (cppVar_22923 & cppMask_un_16_);
	BIT_VEC cppVar_22924 = ROM.rd(cppVar_22923);
	BIT_VEC cppVar_22925 = (cppVar_22924 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22926 = (cppVar_22925 << 3) | 0;
	cppVar_22926 = (cppVar_22926 & cppMask_un_8_);
	BIT_VEC cppVar_22927 = PC + 1;
	cppVar_22927 = (cppVar_22927 & cppMask_un_16_);
	BIT_VEC cppVar_22928 = ROM.rd(cppVar_22927);
	BIT_VEC cppVar_22929 = (cppVar_22928 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_22930 = (cppVar_22929 & cppMask_un_5_);
	BIT_VEC cppVar_22931 = cppVar_22930 + 32;
	cppVar_22931 = (cppVar_22931 & cppMask_un_8_);
	BIT_VEC cppVar_22932 = (cppVar_22922) ? cppVar_22926 : cppVar_22931;
	bool cppVar_22934 = (cppVar_22932 == 240);
	BIT_VEC cppVar_22936 = (cppVar_22934) ? B : 0;
	BIT_VEC cppVar_22937 = (cppVar_22918) ? ACC : cppVar_22936;
	BIT_VEC cppVar_22938 = (cppVar_22902) ? PSW : cppVar_22937;
	BIT_VEC cppVar_22939 = (cppVar_22886) ? IP : cppVar_22938;
	BIT_VEC cppVar_22940 = (cppVar_22870) ? P3 : cppVar_22939;
	BIT_VEC cppVar_22941 = (cppVar_22854) ? IE : cppVar_22940;
	BIT_VEC cppVar_22942 = (cppVar_22838) ? P2 : cppVar_22941;
	BIT_VEC cppVar_22943 = (cppVar_22822) ? SBUF : cppVar_22942;
	BIT_VEC cppVar_22944 = (cppVar_22806) ? SCON : cppVar_22943;
	BIT_VEC cppVar_22945 = (cppVar_22790) ? P1 : cppVar_22944;
	BIT_VEC cppVar_22946 = (cppVar_22774) ? TH1 : cppVar_22945;
	BIT_VEC cppVar_22947 = (cppVar_22758) ? TL1 : cppVar_22946;
	BIT_VEC cppVar_22948 = (cppVar_22742) ? TH0 : cppVar_22947;
	BIT_VEC cppVar_22949 = (cppVar_22726) ? TL0 : cppVar_22948;
	BIT_VEC cppVar_22950 = (cppVar_22710) ? TMOD : cppVar_22949;
	BIT_VEC cppVar_22951 = (cppVar_22694) ? TCON : cppVar_22950;
	BIT_VEC cppVar_22952 = (cppVar_22678) ? PCON : cppVar_22951;
	BIT_VEC cppVar_22953 = (cppVar_22662) ? DPH : cppVar_22952;
	BIT_VEC cppVar_22954 = (cppVar_22646) ? DPL : cppVar_22953;
	BIT_VEC cppVar_22955 = (cppVar_22630) ? SP : cppVar_22954;
	BIT_VEC cppVar_22956 = (cppVar_22614) ? P0 : cppVar_22955;
	BIT_VEC cppVar_22957 = (cppVar_22583) ? cppVar_22598 : cppVar_22956;
	BIT_VEC cppVar_22958 = cppVar_22566 & cppVar_22957;
	BIT_VEC cppVar_22960 = 1;
	BIT_VEC cppVar_22961 = PC + 1;
	cppVar_22961 = (cppVar_22961 & cppMask_un_16_);
	BIT_VEC cppVar_22962 = ROM.rd(cppVar_22961);
	BIT_VEC cppVar_22963 = (cppVar_22962 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_22964 = (cppVar_22963 & cppMask_un_3_);
	BIT_VEC cppVar_22965 = cppVar_22960 << static_cast<unsigned>(cppVar_22964);
	cppVar_22965 = (cppVar_22965 & cppMask_un_8_);
	BIT_VEC cppVar_22966 = cppVar_22958 | cppVar_22965;
	BIT_VEC cppVar_22967 = (cppVar_22559) ? cppVar_22966 : P0;
	BIT_VEC cppVar_22968 = ROM.rd(PC);
	bool cppVar_22970 = (cppVar_22968 == 208);
	BIT_VEC cppVar_22972 = PC + 1;
	cppVar_22972 = (cppVar_22972 & cppMask_un_16_);
	BIT_VEC cppVar_22973 = ROM.rd(cppVar_22972);
	bool cppVar_22975 = (cppVar_22973 == 128);
	BIT_VEC cppVar_22976 = IRAM.rd(SP);
	BIT_VEC cppVar_22977 = (cppVar_22975) ? cppVar_22976 : P0;
	BIT_VEC cppVar_22978 = ROM.rd(PC);
	bool cppVar_22980 = (cppVar_22978 == 245);
	BIT_VEC cppVar_22981 = ROM.rd(PC);
	bool cppVar_22983 = (cppVar_22981 == 197);
	bool cppVar_22984 = cppVar_22980 || cppVar_22983;
	BIT_VEC cppVar_22986 = PC + 1;
	cppVar_22986 = (cppVar_22986 & cppMask_un_16_);
	BIT_VEC cppVar_22987 = ROM.rd(cppVar_22986);
	bool cppVar_22989 = (cppVar_22987 == 128);
	BIT_VEC cppVar_22990 = (cppVar_22989) ? ACC : P0;
	BIT_VEC cppVar_22991 = ROM.rd(PC);
	bool cppVar_22993 = (cppVar_22991 == 178);
	BIT_VEC cppVar_22995 = PC + 1;
	cppVar_22995 = (cppVar_22995 & cppMask_un_16_);
	BIT_VEC cppVar_22996 = ROM.rd(cppVar_22995);
	BIT_VEC cppVar_22997 = (cppVar_22996 >> 7) & cppMask_un_1_;
	bool cppVar_22999 = (cppVar_22997 == 1);
	BIT_VEC cppVar_23000 = PC + 1;
	cppVar_23000 = (cppVar_23000 & cppMask_un_16_);
	BIT_VEC cppVar_23001 = ROM.rd(cppVar_23000);
	BIT_VEC cppVar_23002 = (cppVar_23001 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23004 = (cppVar_23002 << 3) | 0;
	cppVar_23004 = (cppVar_23004 & cppMask_un_8_);
	BIT_VEC cppVar_23005 = PC + 1;
	cppVar_23005 = (cppVar_23005 & cppMask_un_16_);
	BIT_VEC cppVar_23006 = ROM.rd(cppVar_23005);
	BIT_VEC cppVar_23007 = (cppVar_23006 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23008 = (cppVar_23007 & cppMask_un_5_);
	BIT_VEC cppVar_23010 = cppVar_23008 + 32;
	cppVar_23010 = (cppVar_23010 & cppMask_un_8_);
	BIT_VEC cppVar_23011 = (cppVar_22999) ? cppVar_23004 : cppVar_23010;
	bool cppVar_23013 = (cppVar_23011 == 128);
	BIT_VEC cppVar_23015 = PC + 1;
	cppVar_23015 = (cppVar_23015 & cppMask_un_16_);
	BIT_VEC cppVar_23016 = ROM.rd(cppVar_23015);
	BIT_VEC cppVar_23017 = (cppVar_23016 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_23018 = (cppVar_23017 & cppMask_un_3_);
	BIT_VEC cppVar_23019 = 1 << static_cast<unsigned>(cppVar_23018);
	cppVar_23019 = (cppVar_23019 & cppMask_un_8_);
	BIT_VEC cppVar_23020 = ~cppVar_23019;
	BIT_VEC cppVar_23021 = PC + 1;
	cppVar_23021 = (cppVar_23021 & cppMask_un_16_);
	BIT_VEC cppVar_23022 = ROM.rd(cppVar_23021);
	BIT_VEC cppVar_23023 = (cppVar_23022 >> 7) & cppMask_un_1_;
	bool cppVar_23024 = (cppVar_23023 == 1);
	BIT_VEC cppVar_23025 = PC + 1;
	cppVar_23025 = (cppVar_23025 & cppMask_un_16_);
	BIT_VEC cppVar_23026 = ROM.rd(cppVar_23025);
	BIT_VEC cppVar_23027 = (cppVar_23026 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23028 = (cppVar_23027 << 3) | 0;
	cppVar_23028 = (cppVar_23028 & cppMask_un_8_);
	BIT_VEC cppVar_23029 = PC + 1;
	cppVar_23029 = (cppVar_23029 & cppMask_un_16_);
	BIT_VEC cppVar_23030 = ROM.rd(cppVar_23029);
	BIT_VEC cppVar_23031 = (cppVar_23030 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23032 = (cppVar_23031 & cppMask_un_5_);
	BIT_VEC cppVar_23033 = cppVar_23032 + 32;
	cppVar_23033 = (cppVar_23033 & cppMask_un_8_);
	BIT_VEC cppVar_23034 = (cppVar_23024) ? cppVar_23028 : cppVar_23033;
	BIT_VEC cppVar_23035 = (cppVar_23034 >> 7) & cppMask_un_1_;
	bool cppVar_23037 = (cppVar_23035 == 0);
	BIT_VEC cppVar_23038 = PC + 1;
	cppVar_23038 = (cppVar_23038 & cppMask_un_16_);
	BIT_VEC cppVar_23039 = ROM.rd(cppVar_23038);
	BIT_VEC cppVar_23040 = (cppVar_23039 >> 7) & cppMask_un_1_;
	bool cppVar_23041 = (cppVar_23040 == 1);
	BIT_VEC cppVar_23042 = PC + 1;
	cppVar_23042 = (cppVar_23042 & cppMask_un_16_);
	BIT_VEC cppVar_23043 = ROM.rd(cppVar_23042);
	BIT_VEC cppVar_23044 = (cppVar_23043 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23045 = (cppVar_23044 << 3) | 0;
	cppVar_23045 = (cppVar_23045 & cppMask_un_8_);
	BIT_VEC cppVar_23046 = PC + 1;
	cppVar_23046 = (cppVar_23046 & cppMask_un_16_);
	BIT_VEC cppVar_23047 = ROM.rd(cppVar_23046);
	BIT_VEC cppVar_23048 = (cppVar_23047 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23049 = (cppVar_23048 & cppMask_un_5_);
	BIT_VEC cppVar_23050 = cppVar_23049 + 32;
	cppVar_23050 = (cppVar_23050 & cppMask_un_8_);
	BIT_VEC cppVar_23051 = (cppVar_23041) ? cppVar_23045 : cppVar_23050;
	BIT_VEC cppVar_23052 = IRAM.rd(cppVar_23051);
	BIT_VEC cppVar_23053 = PC + 1;
	cppVar_23053 = (cppVar_23053 & cppMask_un_16_);
	BIT_VEC cppVar_23054 = ROM.rd(cppVar_23053);
	BIT_VEC cppVar_23055 = (cppVar_23054 >> 7) & cppMask_un_1_;
	bool cppVar_23056 = (cppVar_23055 == 1);
	BIT_VEC cppVar_23057 = PC + 1;
	cppVar_23057 = (cppVar_23057 & cppMask_un_16_);
	BIT_VEC cppVar_23058 = ROM.rd(cppVar_23057);
	BIT_VEC cppVar_23059 = (cppVar_23058 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23060 = (cppVar_23059 << 3) | 0;
	cppVar_23060 = (cppVar_23060 & cppMask_un_8_);
	BIT_VEC cppVar_23061 = PC + 1;
	cppVar_23061 = (cppVar_23061 & cppMask_un_16_);
	BIT_VEC cppVar_23062 = ROM.rd(cppVar_23061);
	BIT_VEC cppVar_23063 = (cppVar_23062 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23064 = (cppVar_23063 & cppMask_un_5_);
	BIT_VEC cppVar_23065 = cppVar_23064 + 32;
	cppVar_23065 = (cppVar_23065 & cppMask_un_8_);
	BIT_VEC cppVar_23066 = (cppVar_23056) ? cppVar_23060 : cppVar_23065;
	bool cppVar_23068 = (cppVar_23066 == 128);
	BIT_VEC cppVar_23069 = PC + 1;
	cppVar_23069 = (cppVar_23069 & cppMask_un_16_);
	BIT_VEC cppVar_23070 = ROM.rd(cppVar_23069);
	BIT_VEC cppVar_23071 = (cppVar_23070 >> 7) & cppMask_un_1_;
	bool cppVar_23072 = (cppVar_23071 == 1);
	BIT_VEC cppVar_23073 = PC + 1;
	cppVar_23073 = (cppVar_23073 & cppMask_un_16_);
	BIT_VEC cppVar_23074 = ROM.rd(cppVar_23073);
	BIT_VEC cppVar_23075 = (cppVar_23074 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23076 = (cppVar_23075 << 3) | 0;
	cppVar_23076 = (cppVar_23076 & cppMask_un_8_);
	BIT_VEC cppVar_23077 = PC + 1;
	cppVar_23077 = (cppVar_23077 & cppMask_un_16_);
	BIT_VEC cppVar_23078 = ROM.rd(cppVar_23077);
	BIT_VEC cppVar_23079 = (cppVar_23078 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23080 = (cppVar_23079 & cppMask_un_5_);
	BIT_VEC cppVar_23081 = cppVar_23080 + 32;
	cppVar_23081 = (cppVar_23081 & cppMask_un_8_);
	BIT_VEC cppVar_23082 = (cppVar_23072) ? cppVar_23076 : cppVar_23081;
	bool cppVar_23084 = (cppVar_23082 == 129);
	BIT_VEC cppVar_23085 = PC + 1;
	cppVar_23085 = (cppVar_23085 & cppMask_un_16_);
	BIT_VEC cppVar_23086 = ROM.rd(cppVar_23085);
	BIT_VEC cppVar_23087 = (cppVar_23086 >> 7) & cppMask_un_1_;
	bool cppVar_23088 = (cppVar_23087 == 1);
	BIT_VEC cppVar_23089 = PC + 1;
	cppVar_23089 = (cppVar_23089 & cppMask_un_16_);
	BIT_VEC cppVar_23090 = ROM.rd(cppVar_23089);
	BIT_VEC cppVar_23091 = (cppVar_23090 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23092 = (cppVar_23091 << 3) | 0;
	cppVar_23092 = (cppVar_23092 & cppMask_un_8_);
	BIT_VEC cppVar_23093 = PC + 1;
	cppVar_23093 = (cppVar_23093 & cppMask_un_16_);
	BIT_VEC cppVar_23094 = ROM.rd(cppVar_23093);
	BIT_VEC cppVar_23095 = (cppVar_23094 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23096 = (cppVar_23095 & cppMask_un_5_);
	BIT_VEC cppVar_23097 = cppVar_23096 + 32;
	cppVar_23097 = (cppVar_23097 & cppMask_un_8_);
	BIT_VEC cppVar_23098 = (cppVar_23088) ? cppVar_23092 : cppVar_23097;
	bool cppVar_23100 = (cppVar_23098 == 130);
	BIT_VEC cppVar_23101 = PC + 1;
	cppVar_23101 = (cppVar_23101 & cppMask_un_16_);
	BIT_VEC cppVar_23102 = ROM.rd(cppVar_23101);
	BIT_VEC cppVar_23103 = (cppVar_23102 >> 7) & cppMask_un_1_;
	bool cppVar_23104 = (cppVar_23103 == 1);
	BIT_VEC cppVar_23105 = PC + 1;
	cppVar_23105 = (cppVar_23105 & cppMask_un_16_);
	BIT_VEC cppVar_23106 = ROM.rd(cppVar_23105);
	BIT_VEC cppVar_23107 = (cppVar_23106 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23108 = (cppVar_23107 << 3) | 0;
	cppVar_23108 = (cppVar_23108 & cppMask_un_8_);
	BIT_VEC cppVar_23109 = PC + 1;
	cppVar_23109 = (cppVar_23109 & cppMask_un_16_);
	BIT_VEC cppVar_23110 = ROM.rd(cppVar_23109);
	BIT_VEC cppVar_23111 = (cppVar_23110 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23112 = (cppVar_23111 & cppMask_un_5_);
	BIT_VEC cppVar_23113 = cppVar_23112 + 32;
	cppVar_23113 = (cppVar_23113 & cppMask_un_8_);
	BIT_VEC cppVar_23114 = (cppVar_23104) ? cppVar_23108 : cppVar_23113;
	bool cppVar_23116 = (cppVar_23114 == 131);
	BIT_VEC cppVar_23117 = PC + 1;
	cppVar_23117 = (cppVar_23117 & cppMask_un_16_);
	BIT_VEC cppVar_23118 = ROM.rd(cppVar_23117);
	BIT_VEC cppVar_23119 = (cppVar_23118 >> 7) & cppMask_un_1_;
	bool cppVar_23120 = (cppVar_23119 == 1);
	BIT_VEC cppVar_23121 = PC + 1;
	cppVar_23121 = (cppVar_23121 & cppMask_un_16_);
	BIT_VEC cppVar_23122 = ROM.rd(cppVar_23121);
	BIT_VEC cppVar_23123 = (cppVar_23122 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23124 = (cppVar_23123 << 3) | 0;
	cppVar_23124 = (cppVar_23124 & cppMask_un_8_);
	BIT_VEC cppVar_23125 = PC + 1;
	cppVar_23125 = (cppVar_23125 & cppMask_un_16_);
	BIT_VEC cppVar_23126 = ROM.rd(cppVar_23125);
	BIT_VEC cppVar_23127 = (cppVar_23126 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23128 = (cppVar_23127 & cppMask_un_5_);
	BIT_VEC cppVar_23129 = cppVar_23128 + 32;
	cppVar_23129 = (cppVar_23129 & cppMask_un_8_);
	BIT_VEC cppVar_23130 = (cppVar_23120) ? cppVar_23124 : cppVar_23129;
	bool cppVar_23132 = (cppVar_23130 == 135);
	BIT_VEC cppVar_23133 = PC + 1;
	cppVar_23133 = (cppVar_23133 & cppMask_un_16_);
	BIT_VEC cppVar_23134 = ROM.rd(cppVar_23133);
	BIT_VEC cppVar_23135 = (cppVar_23134 >> 7) & cppMask_un_1_;
	bool cppVar_23136 = (cppVar_23135 == 1);
	BIT_VEC cppVar_23137 = PC + 1;
	cppVar_23137 = (cppVar_23137 & cppMask_un_16_);
	BIT_VEC cppVar_23138 = ROM.rd(cppVar_23137);
	BIT_VEC cppVar_23139 = (cppVar_23138 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23140 = (cppVar_23139 << 3) | 0;
	cppVar_23140 = (cppVar_23140 & cppMask_un_8_);
	BIT_VEC cppVar_23141 = PC + 1;
	cppVar_23141 = (cppVar_23141 & cppMask_un_16_);
	BIT_VEC cppVar_23142 = ROM.rd(cppVar_23141);
	BIT_VEC cppVar_23143 = (cppVar_23142 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23144 = (cppVar_23143 & cppMask_un_5_);
	BIT_VEC cppVar_23145 = cppVar_23144 + 32;
	cppVar_23145 = (cppVar_23145 & cppMask_un_8_);
	BIT_VEC cppVar_23146 = (cppVar_23136) ? cppVar_23140 : cppVar_23145;
	bool cppVar_23148 = (cppVar_23146 == 136);
	BIT_VEC cppVar_23149 = PC + 1;
	cppVar_23149 = (cppVar_23149 & cppMask_un_16_);
	BIT_VEC cppVar_23150 = ROM.rd(cppVar_23149);
	BIT_VEC cppVar_23151 = (cppVar_23150 >> 7) & cppMask_un_1_;
	bool cppVar_23152 = (cppVar_23151 == 1);
	BIT_VEC cppVar_23153 = PC + 1;
	cppVar_23153 = (cppVar_23153 & cppMask_un_16_);
	BIT_VEC cppVar_23154 = ROM.rd(cppVar_23153);
	BIT_VEC cppVar_23155 = (cppVar_23154 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23156 = (cppVar_23155 << 3) | 0;
	cppVar_23156 = (cppVar_23156 & cppMask_un_8_);
	BIT_VEC cppVar_23157 = PC + 1;
	cppVar_23157 = (cppVar_23157 & cppMask_un_16_);
	BIT_VEC cppVar_23158 = ROM.rd(cppVar_23157);
	BIT_VEC cppVar_23159 = (cppVar_23158 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23160 = (cppVar_23159 & cppMask_un_5_);
	BIT_VEC cppVar_23161 = cppVar_23160 + 32;
	cppVar_23161 = (cppVar_23161 & cppMask_un_8_);
	BIT_VEC cppVar_23162 = (cppVar_23152) ? cppVar_23156 : cppVar_23161;
	bool cppVar_23164 = (cppVar_23162 == 137);
	BIT_VEC cppVar_23165 = PC + 1;
	cppVar_23165 = (cppVar_23165 & cppMask_un_16_);
	BIT_VEC cppVar_23166 = ROM.rd(cppVar_23165);
	BIT_VEC cppVar_23167 = (cppVar_23166 >> 7) & cppMask_un_1_;
	bool cppVar_23168 = (cppVar_23167 == 1);
	BIT_VEC cppVar_23169 = PC + 1;
	cppVar_23169 = (cppVar_23169 & cppMask_un_16_);
	BIT_VEC cppVar_23170 = ROM.rd(cppVar_23169);
	BIT_VEC cppVar_23171 = (cppVar_23170 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23172 = (cppVar_23171 << 3) | 0;
	cppVar_23172 = (cppVar_23172 & cppMask_un_8_);
	BIT_VEC cppVar_23173 = PC + 1;
	cppVar_23173 = (cppVar_23173 & cppMask_un_16_);
	BIT_VEC cppVar_23174 = ROM.rd(cppVar_23173);
	BIT_VEC cppVar_23175 = (cppVar_23174 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23176 = (cppVar_23175 & cppMask_un_5_);
	BIT_VEC cppVar_23177 = cppVar_23176 + 32;
	cppVar_23177 = (cppVar_23177 & cppMask_un_8_);
	BIT_VEC cppVar_23178 = (cppVar_23168) ? cppVar_23172 : cppVar_23177;
	bool cppVar_23180 = (cppVar_23178 == 138);
	BIT_VEC cppVar_23181 = PC + 1;
	cppVar_23181 = (cppVar_23181 & cppMask_un_16_);
	BIT_VEC cppVar_23182 = ROM.rd(cppVar_23181);
	BIT_VEC cppVar_23183 = (cppVar_23182 >> 7) & cppMask_un_1_;
	bool cppVar_23184 = (cppVar_23183 == 1);
	BIT_VEC cppVar_23185 = PC + 1;
	cppVar_23185 = (cppVar_23185 & cppMask_un_16_);
	BIT_VEC cppVar_23186 = ROM.rd(cppVar_23185);
	BIT_VEC cppVar_23187 = (cppVar_23186 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23188 = (cppVar_23187 << 3) | 0;
	cppVar_23188 = (cppVar_23188 & cppMask_un_8_);
	BIT_VEC cppVar_23189 = PC + 1;
	cppVar_23189 = (cppVar_23189 & cppMask_un_16_);
	BIT_VEC cppVar_23190 = ROM.rd(cppVar_23189);
	BIT_VEC cppVar_23191 = (cppVar_23190 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23192 = (cppVar_23191 & cppMask_un_5_);
	BIT_VEC cppVar_23193 = cppVar_23192 + 32;
	cppVar_23193 = (cppVar_23193 & cppMask_un_8_);
	BIT_VEC cppVar_23194 = (cppVar_23184) ? cppVar_23188 : cppVar_23193;
	bool cppVar_23196 = (cppVar_23194 == 140);
	BIT_VEC cppVar_23197 = PC + 1;
	cppVar_23197 = (cppVar_23197 & cppMask_un_16_);
	BIT_VEC cppVar_23198 = ROM.rd(cppVar_23197);
	BIT_VEC cppVar_23199 = (cppVar_23198 >> 7) & cppMask_un_1_;
	bool cppVar_23200 = (cppVar_23199 == 1);
	BIT_VEC cppVar_23201 = PC + 1;
	cppVar_23201 = (cppVar_23201 & cppMask_un_16_);
	BIT_VEC cppVar_23202 = ROM.rd(cppVar_23201);
	BIT_VEC cppVar_23203 = (cppVar_23202 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23204 = (cppVar_23203 << 3) | 0;
	cppVar_23204 = (cppVar_23204 & cppMask_un_8_);
	BIT_VEC cppVar_23205 = PC + 1;
	cppVar_23205 = (cppVar_23205 & cppMask_un_16_);
	BIT_VEC cppVar_23206 = ROM.rd(cppVar_23205);
	BIT_VEC cppVar_23207 = (cppVar_23206 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23208 = (cppVar_23207 & cppMask_un_5_);
	BIT_VEC cppVar_23209 = cppVar_23208 + 32;
	cppVar_23209 = (cppVar_23209 & cppMask_un_8_);
	BIT_VEC cppVar_23210 = (cppVar_23200) ? cppVar_23204 : cppVar_23209;
	bool cppVar_23212 = (cppVar_23210 == 139);
	BIT_VEC cppVar_23213 = PC + 1;
	cppVar_23213 = (cppVar_23213 & cppMask_un_16_);
	BIT_VEC cppVar_23214 = ROM.rd(cppVar_23213);
	BIT_VEC cppVar_23215 = (cppVar_23214 >> 7) & cppMask_un_1_;
	bool cppVar_23216 = (cppVar_23215 == 1);
	BIT_VEC cppVar_23217 = PC + 1;
	cppVar_23217 = (cppVar_23217 & cppMask_un_16_);
	BIT_VEC cppVar_23218 = ROM.rd(cppVar_23217);
	BIT_VEC cppVar_23219 = (cppVar_23218 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23220 = (cppVar_23219 << 3) | 0;
	cppVar_23220 = (cppVar_23220 & cppMask_un_8_);
	BIT_VEC cppVar_23221 = PC + 1;
	cppVar_23221 = (cppVar_23221 & cppMask_un_16_);
	BIT_VEC cppVar_23222 = ROM.rd(cppVar_23221);
	BIT_VEC cppVar_23223 = (cppVar_23222 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23224 = (cppVar_23223 & cppMask_un_5_);
	BIT_VEC cppVar_23225 = cppVar_23224 + 32;
	cppVar_23225 = (cppVar_23225 & cppMask_un_8_);
	BIT_VEC cppVar_23226 = (cppVar_23216) ? cppVar_23220 : cppVar_23225;
	bool cppVar_23228 = (cppVar_23226 == 141);
	BIT_VEC cppVar_23229 = PC + 1;
	cppVar_23229 = (cppVar_23229 & cppMask_un_16_);
	BIT_VEC cppVar_23230 = ROM.rd(cppVar_23229);
	BIT_VEC cppVar_23231 = (cppVar_23230 >> 7) & cppMask_un_1_;
	bool cppVar_23232 = (cppVar_23231 == 1);
	BIT_VEC cppVar_23233 = PC + 1;
	cppVar_23233 = (cppVar_23233 & cppMask_un_16_);
	BIT_VEC cppVar_23234 = ROM.rd(cppVar_23233);
	BIT_VEC cppVar_23235 = (cppVar_23234 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23236 = (cppVar_23235 << 3) | 0;
	cppVar_23236 = (cppVar_23236 & cppMask_un_8_);
	BIT_VEC cppVar_23237 = PC + 1;
	cppVar_23237 = (cppVar_23237 & cppMask_un_16_);
	BIT_VEC cppVar_23238 = ROM.rd(cppVar_23237);
	BIT_VEC cppVar_23239 = (cppVar_23238 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23240 = (cppVar_23239 & cppMask_un_5_);
	BIT_VEC cppVar_23241 = cppVar_23240 + 32;
	cppVar_23241 = (cppVar_23241 & cppMask_un_8_);
	BIT_VEC cppVar_23242 = (cppVar_23232) ? cppVar_23236 : cppVar_23241;
	bool cppVar_23244 = (cppVar_23242 == 144);
	BIT_VEC cppVar_23245 = PC + 1;
	cppVar_23245 = (cppVar_23245 & cppMask_un_16_);
	BIT_VEC cppVar_23246 = ROM.rd(cppVar_23245);
	BIT_VEC cppVar_23247 = (cppVar_23246 >> 7) & cppMask_un_1_;
	bool cppVar_23248 = (cppVar_23247 == 1);
	BIT_VEC cppVar_23249 = PC + 1;
	cppVar_23249 = (cppVar_23249 & cppMask_un_16_);
	BIT_VEC cppVar_23250 = ROM.rd(cppVar_23249);
	BIT_VEC cppVar_23251 = (cppVar_23250 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23252 = (cppVar_23251 << 3) | 0;
	cppVar_23252 = (cppVar_23252 & cppMask_un_8_);
	BIT_VEC cppVar_23253 = PC + 1;
	cppVar_23253 = (cppVar_23253 & cppMask_un_16_);
	BIT_VEC cppVar_23254 = ROM.rd(cppVar_23253);
	BIT_VEC cppVar_23255 = (cppVar_23254 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23256 = (cppVar_23255 & cppMask_un_5_);
	BIT_VEC cppVar_23257 = cppVar_23256 + 32;
	cppVar_23257 = (cppVar_23257 & cppMask_un_8_);
	BIT_VEC cppVar_23258 = (cppVar_23248) ? cppVar_23252 : cppVar_23257;
	bool cppVar_23260 = (cppVar_23258 == 152);
	BIT_VEC cppVar_23261 = PC + 1;
	cppVar_23261 = (cppVar_23261 & cppMask_un_16_);
	BIT_VEC cppVar_23262 = ROM.rd(cppVar_23261);
	BIT_VEC cppVar_23263 = (cppVar_23262 >> 7) & cppMask_un_1_;
	bool cppVar_23264 = (cppVar_23263 == 1);
	BIT_VEC cppVar_23265 = PC + 1;
	cppVar_23265 = (cppVar_23265 & cppMask_un_16_);
	BIT_VEC cppVar_23266 = ROM.rd(cppVar_23265);
	BIT_VEC cppVar_23267 = (cppVar_23266 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23268 = (cppVar_23267 << 3) | 0;
	cppVar_23268 = (cppVar_23268 & cppMask_un_8_);
	BIT_VEC cppVar_23269 = PC + 1;
	cppVar_23269 = (cppVar_23269 & cppMask_un_16_);
	BIT_VEC cppVar_23270 = ROM.rd(cppVar_23269);
	BIT_VEC cppVar_23271 = (cppVar_23270 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23272 = (cppVar_23271 & cppMask_un_5_);
	BIT_VEC cppVar_23273 = cppVar_23272 + 32;
	cppVar_23273 = (cppVar_23273 & cppMask_un_8_);
	BIT_VEC cppVar_23274 = (cppVar_23264) ? cppVar_23268 : cppVar_23273;
	bool cppVar_23276 = (cppVar_23274 == 153);
	BIT_VEC cppVar_23277 = PC + 1;
	cppVar_23277 = (cppVar_23277 & cppMask_un_16_);
	BIT_VEC cppVar_23278 = ROM.rd(cppVar_23277);
	BIT_VEC cppVar_23279 = (cppVar_23278 >> 7) & cppMask_un_1_;
	bool cppVar_23280 = (cppVar_23279 == 1);
	BIT_VEC cppVar_23281 = PC + 1;
	cppVar_23281 = (cppVar_23281 & cppMask_un_16_);
	BIT_VEC cppVar_23282 = ROM.rd(cppVar_23281);
	BIT_VEC cppVar_23283 = (cppVar_23282 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23284 = (cppVar_23283 << 3) | 0;
	cppVar_23284 = (cppVar_23284 & cppMask_un_8_);
	BIT_VEC cppVar_23285 = PC + 1;
	cppVar_23285 = (cppVar_23285 & cppMask_un_16_);
	BIT_VEC cppVar_23286 = ROM.rd(cppVar_23285);
	BIT_VEC cppVar_23287 = (cppVar_23286 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23288 = (cppVar_23287 & cppMask_un_5_);
	BIT_VEC cppVar_23289 = cppVar_23288 + 32;
	cppVar_23289 = (cppVar_23289 & cppMask_un_8_);
	BIT_VEC cppVar_23290 = (cppVar_23280) ? cppVar_23284 : cppVar_23289;
	bool cppVar_23292 = (cppVar_23290 == 160);
	BIT_VEC cppVar_23293 = PC + 1;
	cppVar_23293 = (cppVar_23293 & cppMask_un_16_);
	BIT_VEC cppVar_23294 = ROM.rd(cppVar_23293);
	BIT_VEC cppVar_23295 = (cppVar_23294 >> 7) & cppMask_un_1_;
	bool cppVar_23296 = (cppVar_23295 == 1);
	BIT_VEC cppVar_23297 = PC + 1;
	cppVar_23297 = (cppVar_23297 & cppMask_un_16_);
	BIT_VEC cppVar_23298 = ROM.rd(cppVar_23297);
	BIT_VEC cppVar_23299 = (cppVar_23298 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23300 = (cppVar_23299 << 3) | 0;
	cppVar_23300 = (cppVar_23300 & cppMask_un_8_);
	BIT_VEC cppVar_23301 = PC + 1;
	cppVar_23301 = (cppVar_23301 & cppMask_un_16_);
	BIT_VEC cppVar_23302 = ROM.rd(cppVar_23301);
	BIT_VEC cppVar_23303 = (cppVar_23302 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23304 = (cppVar_23303 & cppMask_un_5_);
	BIT_VEC cppVar_23305 = cppVar_23304 + 32;
	cppVar_23305 = (cppVar_23305 & cppMask_un_8_);
	BIT_VEC cppVar_23306 = (cppVar_23296) ? cppVar_23300 : cppVar_23305;
	bool cppVar_23308 = (cppVar_23306 == 168);
	BIT_VEC cppVar_23309 = PC + 1;
	cppVar_23309 = (cppVar_23309 & cppMask_un_16_);
	BIT_VEC cppVar_23310 = ROM.rd(cppVar_23309);
	BIT_VEC cppVar_23311 = (cppVar_23310 >> 7) & cppMask_un_1_;
	bool cppVar_23312 = (cppVar_23311 == 1);
	BIT_VEC cppVar_23313 = PC + 1;
	cppVar_23313 = (cppVar_23313 & cppMask_un_16_);
	BIT_VEC cppVar_23314 = ROM.rd(cppVar_23313);
	BIT_VEC cppVar_23315 = (cppVar_23314 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23316 = (cppVar_23315 << 3) | 0;
	cppVar_23316 = (cppVar_23316 & cppMask_un_8_);
	BIT_VEC cppVar_23317 = PC + 1;
	cppVar_23317 = (cppVar_23317 & cppMask_un_16_);
	BIT_VEC cppVar_23318 = ROM.rd(cppVar_23317);
	BIT_VEC cppVar_23319 = (cppVar_23318 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23320 = (cppVar_23319 & cppMask_un_5_);
	BIT_VEC cppVar_23321 = cppVar_23320 + 32;
	cppVar_23321 = (cppVar_23321 & cppMask_un_8_);
	BIT_VEC cppVar_23322 = (cppVar_23312) ? cppVar_23316 : cppVar_23321;
	bool cppVar_23324 = (cppVar_23322 == 176);
	BIT_VEC cppVar_23325 = PC + 1;
	cppVar_23325 = (cppVar_23325 & cppMask_un_16_);
	BIT_VEC cppVar_23326 = ROM.rd(cppVar_23325);
	BIT_VEC cppVar_23327 = (cppVar_23326 >> 7) & cppMask_un_1_;
	bool cppVar_23328 = (cppVar_23327 == 1);
	BIT_VEC cppVar_23329 = PC + 1;
	cppVar_23329 = (cppVar_23329 & cppMask_un_16_);
	BIT_VEC cppVar_23330 = ROM.rd(cppVar_23329);
	BIT_VEC cppVar_23331 = (cppVar_23330 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23332 = (cppVar_23331 << 3) | 0;
	cppVar_23332 = (cppVar_23332 & cppMask_un_8_);
	BIT_VEC cppVar_23333 = PC + 1;
	cppVar_23333 = (cppVar_23333 & cppMask_un_16_);
	BIT_VEC cppVar_23334 = ROM.rd(cppVar_23333);
	BIT_VEC cppVar_23335 = (cppVar_23334 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23336 = (cppVar_23335 & cppMask_un_5_);
	BIT_VEC cppVar_23337 = cppVar_23336 + 32;
	cppVar_23337 = (cppVar_23337 & cppMask_un_8_);
	BIT_VEC cppVar_23338 = (cppVar_23328) ? cppVar_23332 : cppVar_23337;
	bool cppVar_23340 = (cppVar_23338 == 184);
	BIT_VEC cppVar_23341 = PC + 1;
	cppVar_23341 = (cppVar_23341 & cppMask_un_16_);
	BIT_VEC cppVar_23342 = ROM.rd(cppVar_23341);
	BIT_VEC cppVar_23343 = (cppVar_23342 >> 7) & cppMask_un_1_;
	bool cppVar_23344 = (cppVar_23343 == 1);
	BIT_VEC cppVar_23345 = PC + 1;
	cppVar_23345 = (cppVar_23345 & cppMask_un_16_);
	BIT_VEC cppVar_23346 = ROM.rd(cppVar_23345);
	BIT_VEC cppVar_23347 = (cppVar_23346 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23348 = (cppVar_23347 << 3) | 0;
	cppVar_23348 = (cppVar_23348 & cppMask_un_8_);
	BIT_VEC cppVar_23349 = PC + 1;
	cppVar_23349 = (cppVar_23349 & cppMask_un_16_);
	BIT_VEC cppVar_23350 = ROM.rd(cppVar_23349);
	BIT_VEC cppVar_23351 = (cppVar_23350 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23352 = (cppVar_23351 & cppMask_un_5_);
	BIT_VEC cppVar_23353 = cppVar_23352 + 32;
	cppVar_23353 = (cppVar_23353 & cppMask_un_8_);
	BIT_VEC cppVar_23354 = (cppVar_23344) ? cppVar_23348 : cppVar_23353;
	bool cppVar_23356 = (cppVar_23354 == 208);
	BIT_VEC cppVar_23357 = PC + 1;
	cppVar_23357 = (cppVar_23357 & cppMask_un_16_);
	BIT_VEC cppVar_23358 = ROM.rd(cppVar_23357);
	BIT_VEC cppVar_23359 = (cppVar_23358 >> 7) & cppMask_un_1_;
	bool cppVar_23360 = (cppVar_23359 == 1);
	BIT_VEC cppVar_23361 = PC + 1;
	cppVar_23361 = (cppVar_23361 & cppMask_un_16_);
	BIT_VEC cppVar_23362 = ROM.rd(cppVar_23361);
	BIT_VEC cppVar_23363 = (cppVar_23362 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23364 = (cppVar_23363 << 3) | 0;
	cppVar_23364 = (cppVar_23364 & cppMask_un_8_);
	BIT_VEC cppVar_23365 = PC + 1;
	cppVar_23365 = (cppVar_23365 & cppMask_un_16_);
	BIT_VEC cppVar_23366 = ROM.rd(cppVar_23365);
	BIT_VEC cppVar_23367 = (cppVar_23366 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23368 = (cppVar_23367 & cppMask_un_5_);
	BIT_VEC cppVar_23369 = cppVar_23368 + 32;
	cppVar_23369 = (cppVar_23369 & cppMask_un_8_);
	BIT_VEC cppVar_23370 = (cppVar_23360) ? cppVar_23364 : cppVar_23369;
	bool cppVar_23372 = (cppVar_23370 == 224);
	BIT_VEC cppVar_23373 = PC + 1;
	cppVar_23373 = (cppVar_23373 & cppMask_un_16_);
	BIT_VEC cppVar_23374 = ROM.rd(cppVar_23373);
	BIT_VEC cppVar_23375 = (cppVar_23374 >> 7) & cppMask_un_1_;
	bool cppVar_23376 = (cppVar_23375 == 1);
	BIT_VEC cppVar_23377 = PC + 1;
	cppVar_23377 = (cppVar_23377 & cppMask_un_16_);
	BIT_VEC cppVar_23378 = ROM.rd(cppVar_23377);
	BIT_VEC cppVar_23379 = (cppVar_23378 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23380 = (cppVar_23379 << 3) | 0;
	cppVar_23380 = (cppVar_23380 & cppMask_un_8_);
	BIT_VEC cppVar_23381 = PC + 1;
	cppVar_23381 = (cppVar_23381 & cppMask_un_16_);
	BIT_VEC cppVar_23382 = ROM.rd(cppVar_23381);
	BIT_VEC cppVar_23383 = (cppVar_23382 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23384 = (cppVar_23383 & cppMask_un_5_);
	BIT_VEC cppVar_23385 = cppVar_23384 + 32;
	cppVar_23385 = (cppVar_23385 & cppMask_un_8_);
	BIT_VEC cppVar_23386 = (cppVar_23376) ? cppVar_23380 : cppVar_23385;
	bool cppVar_23388 = (cppVar_23386 == 240);
	BIT_VEC cppVar_23390 = (cppVar_23388) ? B : 0;
	BIT_VEC cppVar_23391 = (cppVar_23372) ? ACC : cppVar_23390;
	BIT_VEC cppVar_23392 = (cppVar_23356) ? PSW : cppVar_23391;
	BIT_VEC cppVar_23393 = (cppVar_23340) ? IP : cppVar_23392;
	BIT_VEC cppVar_23394 = (cppVar_23324) ? P3 : cppVar_23393;
	BIT_VEC cppVar_23395 = (cppVar_23308) ? IE : cppVar_23394;
	BIT_VEC cppVar_23396 = (cppVar_23292) ? P2 : cppVar_23395;
	BIT_VEC cppVar_23397 = (cppVar_23276) ? SBUF : cppVar_23396;
	BIT_VEC cppVar_23398 = (cppVar_23260) ? SCON : cppVar_23397;
	BIT_VEC cppVar_23399 = (cppVar_23244) ? P1 : cppVar_23398;
	BIT_VEC cppVar_23400 = (cppVar_23228) ? TH1 : cppVar_23399;
	BIT_VEC cppVar_23401 = (cppVar_23212) ? TL1 : cppVar_23400;
	BIT_VEC cppVar_23402 = (cppVar_23196) ? TH0 : cppVar_23401;
	BIT_VEC cppVar_23403 = (cppVar_23180) ? TL0 : cppVar_23402;
	BIT_VEC cppVar_23404 = (cppVar_23164) ? TMOD : cppVar_23403;
	BIT_VEC cppVar_23405 = (cppVar_23148) ? TCON : cppVar_23404;
	BIT_VEC cppVar_23406 = (cppVar_23132) ? PCON : cppVar_23405;
	BIT_VEC cppVar_23407 = (cppVar_23116) ? DPH : cppVar_23406;
	BIT_VEC cppVar_23408 = (cppVar_23100) ? DPL : cppVar_23407;
	BIT_VEC cppVar_23409 = (cppVar_23084) ? SP : cppVar_23408;
	BIT_VEC cppVar_23410 = (cppVar_23068) ? P0 : cppVar_23409;
	BIT_VEC cppVar_23411 = (cppVar_23037) ? cppVar_23052 : cppVar_23410;
	BIT_VEC cppVar_23412 = cppVar_23020 & cppVar_23411;
	BIT_VEC cppVar_23413 = PC + 1;
	cppVar_23413 = (cppVar_23413 & cppMask_un_16_);
	BIT_VEC cppVar_23414 = ROM.rd(cppVar_23413);
	BIT_VEC cppVar_23415 = (cppVar_23414 >> 7) & cppMask_un_1_;
	bool cppVar_23417 = (cppVar_23415 == 1);
	BIT_VEC cppVar_23418 = PC + 1;
	cppVar_23418 = (cppVar_23418 & cppMask_un_16_);
	BIT_VEC cppVar_23419 = ROM.rd(cppVar_23418);
	BIT_VEC cppVar_23420 = (cppVar_23419 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23422 = (cppVar_23420 << 3) | 0;
	cppVar_23422 = (cppVar_23422 & cppMask_un_8_);
	BIT_VEC cppVar_23423 = PC + 1;
	cppVar_23423 = (cppVar_23423 & cppMask_un_16_);
	BIT_VEC cppVar_23424 = ROM.rd(cppVar_23423);
	BIT_VEC cppVar_23425 = (cppVar_23424 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23426 = (cppVar_23425 & cppMask_un_5_);
	BIT_VEC cppVar_23428 = cppVar_23426 + 32;
	cppVar_23428 = (cppVar_23428 & cppMask_un_8_);
	BIT_VEC cppVar_23429 = (cppVar_23417) ? cppVar_23422 : cppVar_23428;
	BIT_VEC cppVar_23430 = (cppVar_23429 >> 7) & cppMask_un_1_;
	bool cppVar_23432 = (cppVar_23430 == 0);
	BIT_VEC cppVar_23433 = PC + 1;
	cppVar_23433 = (cppVar_23433 & cppMask_un_16_);
	BIT_VEC cppVar_23434 = ROM.rd(cppVar_23433);
	BIT_VEC cppVar_23435 = (cppVar_23434 >> 7) & cppMask_un_1_;
	bool cppVar_23436 = (cppVar_23435 == 1);
	BIT_VEC cppVar_23437 = PC + 1;
	cppVar_23437 = (cppVar_23437 & cppMask_un_16_);
	BIT_VEC cppVar_23438 = ROM.rd(cppVar_23437);
	BIT_VEC cppVar_23439 = (cppVar_23438 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23440 = (cppVar_23439 << 3) | 0;
	cppVar_23440 = (cppVar_23440 & cppMask_un_8_);
	BIT_VEC cppVar_23441 = PC + 1;
	cppVar_23441 = (cppVar_23441 & cppMask_un_16_);
	BIT_VEC cppVar_23442 = ROM.rd(cppVar_23441);
	BIT_VEC cppVar_23443 = (cppVar_23442 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23444 = (cppVar_23443 & cppMask_un_5_);
	BIT_VEC cppVar_23445 = cppVar_23444 + 32;
	cppVar_23445 = (cppVar_23445 & cppMask_un_8_);
	BIT_VEC cppVar_23446 = (cppVar_23436) ? cppVar_23440 : cppVar_23445;
	BIT_VEC cppVar_23447 = IRAM.rd(cppVar_23446);
	BIT_VEC cppVar_23448 = PC + 1;
	cppVar_23448 = (cppVar_23448 & cppMask_un_16_);
	BIT_VEC cppVar_23449 = ROM.rd(cppVar_23448);
	BIT_VEC cppVar_23450 = (cppVar_23449 >> 7) & cppMask_un_1_;
	bool cppVar_23451 = (cppVar_23450 == 1);
	BIT_VEC cppVar_23452 = PC + 1;
	cppVar_23452 = (cppVar_23452 & cppMask_un_16_);
	BIT_VEC cppVar_23453 = ROM.rd(cppVar_23452);
	BIT_VEC cppVar_23454 = (cppVar_23453 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23455 = (cppVar_23454 << 3) | 0;
	cppVar_23455 = (cppVar_23455 & cppMask_un_8_);
	BIT_VEC cppVar_23456 = PC + 1;
	cppVar_23456 = (cppVar_23456 & cppMask_un_16_);
	BIT_VEC cppVar_23457 = ROM.rd(cppVar_23456);
	BIT_VEC cppVar_23458 = (cppVar_23457 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23459 = (cppVar_23458 & cppMask_un_5_);
	BIT_VEC cppVar_23460 = cppVar_23459 + 32;
	cppVar_23460 = (cppVar_23460 & cppMask_un_8_);
	BIT_VEC cppVar_23461 = (cppVar_23451) ? cppVar_23455 : cppVar_23460;
	bool cppVar_23463 = (cppVar_23461 == 128);
	BIT_VEC cppVar_23464 = PC + 1;
	cppVar_23464 = (cppVar_23464 & cppMask_un_16_);
	BIT_VEC cppVar_23465 = ROM.rd(cppVar_23464);
	BIT_VEC cppVar_23466 = (cppVar_23465 >> 7) & cppMask_un_1_;
	bool cppVar_23467 = (cppVar_23466 == 1);
	BIT_VEC cppVar_23468 = PC + 1;
	cppVar_23468 = (cppVar_23468 & cppMask_un_16_);
	BIT_VEC cppVar_23469 = ROM.rd(cppVar_23468);
	BIT_VEC cppVar_23470 = (cppVar_23469 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23471 = (cppVar_23470 << 3) | 0;
	cppVar_23471 = (cppVar_23471 & cppMask_un_8_);
	BIT_VEC cppVar_23472 = PC + 1;
	cppVar_23472 = (cppVar_23472 & cppMask_un_16_);
	BIT_VEC cppVar_23473 = ROM.rd(cppVar_23472);
	BIT_VEC cppVar_23474 = (cppVar_23473 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23475 = (cppVar_23474 & cppMask_un_5_);
	BIT_VEC cppVar_23476 = cppVar_23475 + 32;
	cppVar_23476 = (cppVar_23476 & cppMask_un_8_);
	BIT_VEC cppVar_23477 = (cppVar_23467) ? cppVar_23471 : cppVar_23476;
	bool cppVar_23479 = (cppVar_23477 == 129);
	BIT_VEC cppVar_23480 = PC + 1;
	cppVar_23480 = (cppVar_23480 & cppMask_un_16_);
	BIT_VEC cppVar_23481 = ROM.rd(cppVar_23480);
	BIT_VEC cppVar_23482 = (cppVar_23481 >> 7) & cppMask_un_1_;
	bool cppVar_23483 = (cppVar_23482 == 1);
	BIT_VEC cppVar_23484 = PC + 1;
	cppVar_23484 = (cppVar_23484 & cppMask_un_16_);
	BIT_VEC cppVar_23485 = ROM.rd(cppVar_23484);
	BIT_VEC cppVar_23486 = (cppVar_23485 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23487 = (cppVar_23486 << 3) | 0;
	cppVar_23487 = (cppVar_23487 & cppMask_un_8_);
	BIT_VEC cppVar_23488 = PC + 1;
	cppVar_23488 = (cppVar_23488 & cppMask_un_16_);
	BIT_VEC cppVar_23489 = ROM.rd(cppVar_23488);
	BIT_VEC cppVar_23490 = (cppVar_23489 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23491 = (cppVar_23490 & cppMask_un_5_);
	BIT_VEC cppVar_23492 = cppVar_23491 + 32;
	cppVar_23492 = (cppVar_23492 & cppMask_un_8_);
	BIT_VEC cppVar_23493 = (cppVar_23483) ? cppVar_23487 : cppVar_23492;
	bool cppVar_23495 = (cppVar_23493 == 130);
	BIT_VEC cppVar_23496 = PC + 1;
	cppVar_23496 = (cppVar_23496 & cppMask_un_16_);
	BIT_VEC cppVar_23497 = ROM.rd(cppVar_23496);
	BIT_VEC cppVar_23498 = (cppVar_23497 >> 7) & cppMask_un_1_;
	bool cppVar_23499 = (cppVar_23498 == 1);
	BIT_VEC cppVar_23500 = PC + 1;
	cppVar_23500 = (cppVar_23500 & cppMask_un_16_);
	BIT_VEC cppVar_23501 = ROM.rd(cppVar_23500);
	BIT_VEC cppVar_23502 = (cppVar_23501 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23503 = (cppVar_23502 << 3) | 0;
	cppVar_23503 = (cppVar_23503 & cppMask_un_8_);
	BIT_VEC cppVar_23504 = PC + 1;
	cppVar_23504 = (cppVar_23504 & cppMask_un_16_);
	BIT_VEC cppVar_23505 = ROM.rd(cppVar_23504);
	BIT_VEC cppVar_23506 = (cppVar_23505 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23507 = (cppVar_23506 & cppMask_un_5_);
	BIT_VEC cppVar_23508 = cppVar_23507 + 32;
	cppVar_23508 = (cppVar_23508 & cppMask_un_8_);
	BIT_VEC cppVar_23509 = (cppVar_23499) ? cppVar_23503 : cppVar_23508;
	bool cppVar_23511 = (cppVar_23509 == 131);
	BIT_VEC cppVar_23512 = PC + 1;
	cppVar_23512 = (cppVar_23512 & cppMask_un_16_);
	BIT_VEC cppVar_23513 = ROM.rd(cppVar_23512);
	BIT_VEC cppVar_23514 = (cppVar_23513 >> 7) & cppMask_un_1_;
	bool cppVar_23515 = (cppVar_23514 == 1);
	BIT_VEC cppVar_23516 = PC + 1;
	cppVar_23516 = (cppVar_23516 & cppMask_un_16_);
	BIT_VEC cppVar_23517 = ROM.rd(cppVar_23516);
	BIT_VEC cppVar_23518 = (cppVar_23517 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23519 = (cppVar_23518 << 3) | 0;
	cppVar_23519 = (cppVar_23519 & cppMask_un_8_);
	BIT_VEC cppVar_23520 = PC + 1;
	cppVar_23520 = (cppVar_23520 & cppMask_un_16_);
	BIT_VEC cppVar_23521 = ROM.rd(cppVar_23520);
	BIT_VEC cppVar_23522 = (cppVar_23521 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23523 = (cppVar_23522 & cppMask_un_5_);
	BIT_VEC cppVar_23524 = cppVar_23523 + 32;
	cppVar_23524 = (cppVar_23524 & cppMask_un_8_);
	BIT_VEC cppVar_23525 = (cppVar_23515) ? cppVar_23519 : cppVar_23524;
	bool cppVar_23527 = (cppVar_23525 == 135);
	BIT_VEC cppVar_23528 = PC + 1;
	cppVar_23528 = (cppVar_23528 & cppMask_un_16_);
	BIT_VEC cppVar_23529 = ROM.rd(cppVar_23528);
	BIT_VEC cppVar_23530 = (cppVar_23529 >> 7) & cppMask_un_1_;
	bool cppVar_23531 = (cppVar_23530 == 1);
	BIT_VEC cppVar_23532 = PC + 1;
	cppVar_23532 = (cppVar_23532 & cppMask_un_16_);
	BIT_VEC cppVar_23533 = ROM.rd(cppVar_23532);
	BIT_VEC cppVar_23534 = (cppVar_23533 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23535 = (cppVar_23534 << 3) | 0;
	cppVar_23535 = (cppVar_23535 & cppMask_un_8_);
	BIT_VEC cppVar_23536 = PC + 1;
	cppVar_23536 = (cppVar_23536 & cppMask_un_16_);
	BIT_VEC cppVar_23537 = ROM.rd(cppVar_23536);
	BIT_VEC cppVar_23538 = (cppVar_23537 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23539 = (cppVar_23538 & cppMask_un_5_);
	BIT_VEC cppVar_23540 = cppVar_23539 + 32;
	cppVar_23540 = (cppVar_23540 & cppMask_un_8_);
	BIT_VEC cppVar_23541 = (cppVar_23531) ? cppVar_23535 : cppVar_23540;
	bool cppVar_23543 = (cppVar_23541 == 136);
	BIT_VEC cppVar_23544 = PC + 1;
	cppVar_23544 = (cppVar_23544 & cppMask_un_16_);
	BIT_VEC cppVar_23545 = ROM.rd(cppVar_23544);
	BIT_VEC cppVar_23546 = (cppVar_23545 >> 7) & cppMask_un_1_;
	bool cppVar_23547 = (cppVar_23546 == 1);
	BIT_VEC cppVar_23548 = PC + 1;
	cppVar_23548 = (cppVar_23548 & cppMask_un_16_);
	BIT_VEC cppVar_23549 = ROM.rd(cppVar_23548);
	BIT_VEC cppVar_23550 = (cppVar_23549 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23551 = (cppVar_23550 << 3) | 0;
	cppVar_23551 = (cppVar_23551 & cppMask_un_8_);
	BIT_VEC cppVar_23552 = PC + 1;
	cppVar_23552 = (cppVar_23552 & cppMask_un_16_);
	BIT_VEC cppVar_23553 = ROM.rd(cppVar_23552);
	BIT_VEC cppVar_23554 = (cppVar_23553 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23555 = (cppVar_23554 & cppMask_un_5_);
	BIT_VEC cppVar_23556 = cppVar_23555 + 32;
	cppVar_23556 = (cppVar_23556 & cppMask_un_8_);
	BIT_VEC cppVar_23557 = (cppVar_23547) ? cppVar_23551 : cppVar_23556;
	bool cppVar_23559 = (cppVar_23557 == 137);
	BIT_VEC cppVar_23560 = PC + 1;
	cppVar_23560 = (cppVar_23560 & cppMask_un_16_);
	BIT_VEC cppVar_23561 = ROM.rd(cppVar_23560);
	BIT_VEC cppVar_23562 = (cppVar_23561 >> 7) & cppMask_un_1_;
	bool cppVar_23563 = (cppVar_23562 == 1);
	BIT_VEC cppVar_23564 = PC + 1;
	cppVar_23564 = (cppVar_23564 & cppMask_un_16_);
	BIT_VEC cppVar_23565 = ROM.rd(cppVar_23564);
	BIT_VEC cppVar_23566 = (cppVar_23565 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23567 = (cppVar_23566 << 3) | 0;
	cppVar_23567 = (cppVar_23567 & cppMask_un_8_);
	BIT_VEC cppVar_23568 = PC + 1;
	cppVar_23568 = (cppVar_23568 & cppMask_un_16_);
	BIT_VEC cppVar_23569 = ROM.rd(cppVar_23568);
	BIT_VEC cppVar_23570 = (cppVar_23569 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23571 = (cppVar_23570 & cppMask_un_5_);
	BIT_VEC cppVar_23572 = cppVar_23571 + 32;
	cppVar_23572 = (cppVar_23572 & cppMask_un_8_);
	BIT_VEC cppVar_23573 = (cppVar_23563) ? cppVar_23567 : cppVar_23572;
	bool cppVar_23575 = (cppVar_23573 == 138);
	BIT_VEC cppVar_23576 = PC + 1;
	cppVar_23576 = (cppVar_23576 & cppMask_un_16_);
	BIT_VEC cppVar_23577 = ROM.rd(cppVar_23576);
	BIT_VEC cppVar_23578 = (cppVar_23577 >> 7) & cppMask_un_1_;
	bool cppVar_23579 = (cppVar_23578 == 1);
	BIT_VEC cppVar_23580 = PC + 1;
	cppVar_23580 = (cppVar_23580 & cppMask_un_16_);
	BIT_VEC cppVar_23581 = ROM.rd(cppVar_23580);
	BIT_VEC cppVar_23582 = (cppVar_23581 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23583 = (cppVar_23582 << 3) | 0;
	cppVar_23583 = (cppVar_23583 & cppMask_un_8_);
	BIT_VEC cppVar_23584 = PC + 1;
	cppVar_23584 = (cppVar_23584 & cppMask_un_16_);
	BIT_VEC cppVar_23585 = ROM.rd(cppVar_23584);
	BIT_VEC cppVar_23586 = (cppVar_23585 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23587 = (cppVar_23586 & cppMask_un_5_);
	BIT_VEC cppVar_23588 = cppVar_23587 + 32;
	cppVar_23588 = (cppVar_23588 & cppMask_un_8_);
	BIT_VEC cppVar_23589 = (cppVar_23579) ? cppVar_23583 : cppVar_23588;
	bool cppVar_23591 = (cppVar_23589 == 140);
	BIT_VEC cppVar_23592 = PC + 1;
	cppVar_23592 = (cppVar_23592 & cppMask_un_16_);
	BIT_VEC cppVar_23593 = ROM.rd(cppVar_23592);
	BIT_VEC cppVar_23594 = (cppVar_23593 >> 7) & cppMask_un_1_;
	bool cppVar_23595 = (cppVar_23594 == 1);
	BIT_VEC cppVar_23596 = PC + 1;
	cppVar_23596 = (cppVar_23596 & cppMask_un_16_);
	BIT_VEC cppVar_23597 = ROM.rd(cppVar_23596);
	BIT_VEC cppVar_23598 = (cppVar_23597 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23599 = (cppVar_23598 << 3) | 0;
	cppVar_23599 = (cppVar_23599 & cppMask_un_8_);
	BIT_VEC cppVar_23600 = PC + 1;
	cppVar_23600 = (cppVar_23600 & cppMask_un_16_);
	BIT_VEC cppVar_23601 = ROM.rd(cppVar_23600);
	BIT_VEC cppVar_23602 = (cppVar_23601 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23603 = (cppVar_23602 & cppMask_un_5_);
	BIT_VEC cppVar_23604 = cppVar_23603 + 32;
	cppVar_23604 = (cppVar_23604 & cppMask_un_8_);
	BIT_VEC cppVar_23605 = (cppVar_23595) ? cppVar_23599 : cppVar_23604;
	bool cppVar_23607 = (cppVar_23605 == 139);
	BIT_VEC cppVar_23608 = PC + 1;
	cppVar_23608 = (cppVar_23608 & cppMask_un_16_);
	BIT_VEC cppVar_23609 = ROM.rd(cppVar_23608);
	BIT_VEC cppVar_23610 = (cppVar_23609 >> 7) & cppMask_un_1_;
	bool cppVar_23611 = (cppVar_23610 == 1);
	BIT_VEC cppVar_23612 = PC + 1;
	cppVar_23612 = (cppVar_23612 & cppMask_un_16_);
	BIT_VEC cppVar_23613 = ROM.rd(cppVar_23612);
	BIT_VEC cppVar_23614 = (cppVar_23613 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23615 = (cppVar_23614 << 3) | 0;
	cppVar_23615 = (cppVar_23615 & cppMask_un_8_);
	BIT_VEC cppVar_23616 = PC + 1;
	cppVar_23616 = (cppVar_23616 & cppMask_un_16_);
	BIT_VEC cppVar_23617 = ROM.rd(cppVar_23616);
	BIT_VEC cppVar_23618 = (cppVar_23617 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23619 = (cppVar_23618 & cppMask_un_5_);
	BIT_VEC cppVar_23620 = cppVar_23619 + 32;
	cppVar_23620 = (cppVar_23620 & cppMask_un_8_);
	BIT_VEC cppVar_23621 = (cppVar_23611) ? cppVar_23615 : cppVar_23620;
	bool cppVar_23623 = (cppVar_23621 == 141);
	BIT_VEC cppVar_23624 = PC + 1;
	cppVar_23624 = (cppVar_23624 & cppMask_un_16_);
	BIT_VEC cppVar_23625 = ROM.rd(cppVar_23624);
	BIT_VEC cppVar_23626 = (cppVar_23625 >> 7) & cppMask_un_1_;
	bool cppVar_23627 = (cppVar_23626 == 1);
	BIT_VEC cppVar_23628 = PC + 1;
	cppVar_23628 = (cppVar_23628 & cppMask_un_16_);
	BIT_VEC cppVar_23629 = ROM.rd(cppVar_23628);
	BIT_VEC cppVar_23630 = (cppVar_23629 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23631 = (cppVar_23630 << 3) | 0;
	cppVar_23631 = (cppVar_23631 & cppMask_un_8_);
	BIT_VEC cppVar_23632 = PC + 1;
	cppVar_23632 = (cppVar_23632 & cppMask_un_16_);
	BIT_VEC cppVar_23633 = ROM.rd(cppVar_23632);
	BIT_VEC cppVar_23634 = (cppVar_23633 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23635 = (cppVar_23634 & cppMask_un_5_);
	BIT_VEC cppVar_23636 = cppVar_23635 + 32;
	cppVar_23636 = (cppVar_23636 & cppMask_un_8_);
	BIT_VEC cppVar_23637 = (cppVar_23627) ? cppVar_23631 : cppVar_23636;
	bool cppVar_23639 = (cppVar_23637 == 144);
	BIT_VEC cppVar_23640 = PC + 1;
	cppVar_23640 = (cppVar_23640 & cppMask_un_16_);
	BIT_VEC cppVar_23641 = ROM.rd(cppVar_23640);
	BIT_VEC cppVar_23642 = (cppVar_23641 >> 7) & cppMask_un_1_;
	bool cppVar_23643 = (cppVar_23642 == 1);
	BIT_VEC cppVar_23644 = PC + 1;
	cppVar_23644 = (cppVar_23644 & cppMask_un_16_);
	BIT_VEC cppVar_23645 = ROM.rd(cppVar_23644);
	BIT_VEC cppVar_23646 = (cppVar_23645 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23647 = (cppVar_23646 << 3) | 0;
	cppVar_23647 = (cppVar_23647 & cppMask_un_8_);
	BIT_VEC cppVar_23648 = PC + 1;
	cppVar_23648 = (cppVar_23648 & cppMask_un_16_);
	BIT_VEC cppVar_23649 = ROM.rd(cppVar_23648);
	BIT_VEC cppVar_23650 = (cppVar_23649 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23651 = (cppVar_23650 & cppMask_un_5_);
	BIT_VEC cppVar_23652 = cppVar_23651 + 32;
	cppVar_23652 = (cppVar_23652 & cppMask_un_8_);
	BIT_VEC cppVar_23653 = (cppVar_23643) ? cppVar_23647 : cppVar_23652;
	bool cppVar_23655 = (cppVar_23653 == 152);
	BIT_VEC cppVar_23656 = PC + 1;
	cppVar_23656 = (cppVar_23656 & cppMask_un_16_);
	BIT_VEC cppVar_23657 = ROM.rd(cppVar_23656);
	BIT_VEC cppVar_23658 = (cppVar_23657 >> 7) & cppMask_un_1_;
	bool cppVar_23659 = (cppVar_23658 == 1);
	BIT_VEC cppVar_23660 = PC + 1;
	cppVar_23660 = (cppVar_23660 & cppMask_un_16_);
	BIT_VEC cppVar_23661 = ROM.rd(cppVar_23660);
	BIT_VEC cppVar_23662 = (cppVar_23661 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23663 = (cppVar_23662 << 3) | 0;
	cppVar_23663 = (cppVar_23663 & cppMask_un_8_);
	BIT_VEC cppVar_23664 = PC + 1;
	cppVar_23664 = (cppVar_23664 & cppMask_un_16_);
	BIT_VEC cppVar_23665 = ROM.rd(cppVar_23664);
	BIT_VEC cppVar_23666 = (cppVar_23665 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23667 = (cppVar_23666 & cppMask_un_5_);
	BIT_VEC cppVar_23668 = cppVar_23667 + 32;
	cppVar_23668 = (cppVar_23668 & cppMask_un_8_);
	BIT_VEC cppVar_23669 = (cppVar_23659) ? cppVar_23663 : cppVar_23668;
	bool cppVar_23671 = (cppVar_23669 == 153);
	BIT_VEC cppVar_23672 = PC + 1;
	cppVar_23672 = (cppVar_23672 & cppMask_un_16_);
	BIT_VEC cppVar_23673 = ROM.rd(cppVar_23672);
	BIT_VEC cppVar_23674 = (cppVar_23673 >> 7) & cppMask_un_1_;
	bool cppVar_23675 = (cppVar_23674 == 1);
	BIT_VEC cppVar_23676 = PC + 1;
	cppVar_23676 = (cppVar_23676 & cppMask_un_16_);
	BIT_VEC cppVar_23677 = ROM.rd(cppVar_23676);
	BIT_VEC cppVar_23678 = (cppVar_23677 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23679 = (cppVar_23678 << 3) | 0;
	cppVar_23679 = (cppVar_23679 & cppMask_un_8_);
	BIT_VEC cppVar_23680 = PC + 1;
	cppVar_23680 = (cppVar_23680 & cppMask_un_16_);
	BIT_VEC cppVar_23681 = ROM.rd(cppVar_23680);
	BIT_VEC cppVar_23682 = (cppVar_23681 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23683 = (cppVar_23682 & cppMask_un_5_);
	BIT_VEC cppVar_23684 = cppVar_23683 + 32;
	cppVar_23684 = (cppVar_23684 & cppMask_un_8_);
	BIT_VEC cppVar_23685 = (cppVar_23675) ? cppVar_23679 : cppVar_23684;
	bool cppVar_23687 = (cppVar_23685 == 160);
	BIT_VEC cppVar_23688 = PC + 1;
	cppVar_23688 = (cppVar_23688 & cppMask_un_16_);
	BIT_VEC cppVar_23689 = ROM.rd(cppVar_23688);
	BIT_VEC cppVar_23690 = (cppVar_23689 >> 7) & cppMask_un_1_;
	bool cppVar_23691 = (cppVar_23690 == 1);
	BIT_VEC cppVar_23692 = PC + 1;
	cppVar_23692 = (cppVar_23692 & cppMask_un_16_);
	BIT_VEC cppVar_23693 = ROM.rd(cppVar_23692);
	BIT_VEC cppVar_23694 = (cppVar_23693 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23695 = (cppVar_23694 << 3) | 0;
	cppVar_23695 = (cppVar_23695 & cppMask_un_8_);
	BIT_VEC cppVar_23696 = PC + 1;
	cppVar_23696 = (cppVar_23696 & cppMask_un_16_);
	BIT_VEC cppVar_23697 = ROM.rd(cppVar_23696);
	BIT_VEC cppVar_23698 = (cppVar_23697 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23699 = (cppVar_23698 & cppMask_un_5_);
	BIT_VEC cppVar_23700 = cppVar_23699 + 32;
	cppVar_23700 = (cppVar_23700 & cppMask_un_8_);
	BIT_VEC cppVar_23701 = (cppVar_23691) ? cppVar_23695 : cppVar_23700;
	bool cppVar_23703 = (cppVar_23701 == 168);
	BIT_VEC cppVar_23704 = PC + 1;
	cppVar_23704 = (cppVar_23704 & cppMask_un_16_);
	BIT_VEC cppVar_23705 = ROM.rd(cppVar_23704);
	BIT_VEC cppVar_23706 = (cppVar_23705 >> 7) & cppMask_un_1_;
	bool cppVar_23707 = (cppVar_23706 == 1);
	BIT_VEC cppVar_23708 = PC + 1;
	cppVar_23708 = (cppVar_23708 & cppMask_un_16_);
	BIT_VEC cppVar_23709 = ROM.rd(cppVar_23708);
	BIT_VEC cppVar_23710 = (cppVar_23709 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23711 = (cppVar_23710 << 3) | 0;
	cppVar_23711 = (cppVar_23711 & cppMask_un_8_);
	BIT_VEC cppVar_23712 = PC + 1;
	cppVar_23712 = (cppVar_23712 & cppMask_un_16_);
	BIT_VEC cppVar_23713 = ROM.rd(cppVar_23712);
	BIT_VEC cppVar_23714 = (cppVar_23713 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23715 = (cppVar_23714 & cppMask_un_5_);
	BIT_VEC cppVar_23716 = cppVar_23715 + 32;
	cppVar_23716 = (cppVar_23716 & cppMask_un_8_);
	BIT_VEC cppVar_23717 = (cppVar_23707) ? cppVar_23711 : cppVar_23716;
	bool cppVar_23719 = (cppVar_23717 == 176);
	BIT_VEC cppVar_23720 = PC + 1;
	cppVar_23720 = (cppVar_23720 & cppMask_un_16_);
	BIT_VEC cppVar_23721 = ROM.rd(cppVar_23720);
	BIT_VEC cppVar_23722 = (cppVar_23721 >> 7) & cppMask_un_1_;
	bool cppVar_23723 = (cppVar_23722 == 1);
	BIT_VEC cppVar_23724 = PC + 1;
	cppVar_23724 = (cppVar_23724 & cppMask_un_16_);
	BIT_VEC cppVar_23725 = ROM.rd(cppVar_23724);
	BIT_VEC cppVar_23726 = (cppVar_23725 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23727 = (cppVar_23726 << 3) | 0;
	cppVar_23727 = (cppVar_23727 & cppMask_un_8_);
	BIT_VEC cppVar_23728 = PC + 1;
	cppVar_23728 = (cppVar_23728 & cppMask_un_16_);
	BIT_VEC cppVar_23729 = ROM.rd(cppVar_23728);
	BIT_VEC cppVar_23730 = (cppVar_23729 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23731 = (cppVar_23730 & cppMask_un_5_);
	BIT_VEC cppVar_23732 = cppVar_23731 + 32;
	cppVar_23732 = (cppVar_23732 & cppMask_un_8_);
	BIT_VEC cppVar_23733 = (cppVar_23723) ? cppVar_23727 : cppVar_23732;
	bool cppVar_23735 = (cppVar_23733 == 184);
	BIT_VEC cppVar_23736 = PC + 1;
	cppVar_23736 = (cppVar_23736 & cppMask_un_16_);
	BIT_VEC cppVar_23737 = ROM.rd(cppVar_23736);
	BIT_VEC cppVar_23738 = (cppVar_23737 >> 7) & cppMask_un_1_;
	bool cppVar_23739 = (cppVar_23738 == 1);
	BIT_VEC cppVar_23740 = PC + 1;
	cppVar_23740 = (cppVar_23740 & cppMask_un_16_);
	BIT_VEC cppVar_23741 = ROM.rd(cppVar_23740);
	BIT_VEC cppVar_23742 = (cppVar_23741 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23743 = (cppVar_23742 << 3) | 0;
	cppVar_23743 = (cppVar_23743 & cppMask_un_8_);
	BIT_VEC cppVar_23744 = PC + 1;
	cppVar_23744 = (cppVar_23744 & cppMask_un_16_);
	BIT_VEC cppVar_23745 = ROM.rd(cppVar_23744);
	BIT_VEC cppVar_23746 = (cppVar_23745 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23747 = (cppVar_23746 & cppMask_un_5_);
	BIT_VEC cppVar_23748 = cppVar_23747 + 32;
	cppVar_23748 = (cppVar_23748 & cppMask_un_8_);
	BIT_VEC cppVar_23749 = (cppVar_23739) ? cppVar_23743 : cppVar_23748;
	bool cppVar_23751 = (cppVar_23749 == 208);
	BIT_VEC cppVar_23752 = PC + 1;
	cppVar_23752 = (cppVar_23752 & cppMask_un_16_);
	BIT_VEC cppVar_23753 = ROM.rd(cppVar_23752);
	BIT_VEC cppVar_23754 = (cppVar_23753 >> 7) & cppMask_un_1_;
	bool cppVar_23755 = (cppVar_23754 == 1);
	BIT_VEC cppVar_23756 = PC + 1;
	cppVar_23756 = (cppVar_23756 & cppMask_un_16_);
	BIT_VEC cppVar_23757 = ROM.rd(cppVar_23756);
	BIT_VEC cppVar_23758 = (cppVar_23757 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23759 = (cppVar_23758 << 3) | 0;
	cppVar_23759 = (cppVar_23759 & cppMask_un_8_);
	BIT_VEC cppVar_23760 = PC + 1;
	cppVar_23760 = (cppVar_23760 & cppMask_un_16_);
	BIT_VEC cppVar_23761 = ROM.rd(cppVar_23760);
	BIT_VEC cppVar_23762 = (cppVar_23761 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23763 = (cppVar_23762 & cppMask_un_5_);
	BIT_VEC cppVar_23764 = cppVar_23763 + 32;
	cppVar_23764 = (cppVar_23764 & cppMask_un_8_);
	BIT_VEC cppVar_23765 = (cppVar_23755) ? cppVar_23759 : cppVar_23764;
	bool cppVar_23767 = (cppVar_23765 == 224);
	BIT_VEC cppVar_23768 = PC + 1;
	cppVar_23768 = (cppVar_23768 & cppMask_un_16_);
	BIT_VEC cppVar_23769 = ROM.rd(cppVar_23768);
	BIT_VEC cppVar_23770 = (cppVar_23769 >> 7) & cppMask_un_1_;
	bool cppVar_23771 = (cppVar_23770 == 1);
	BIT_VEC cppVar_23772 = PC + 1;
	cppVar_23772 = (cppVar_23772 & cppMask_un_16_);
	BIT_VEC cppVar_23773 = ROM.rd(cppVar_23772);
	BIT_VEC cppVar_23774 = (cppVar_23773 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23775 = (cppVar_23774 << 3) | 0;
	cppVar_23775 = (cppVar_23775 & cppMask_un_8_);
	BIT_VEC cppVar_23776 = PC + 1;
	cppVar_23776 = (cppVar_23776 & cppMask_un_16_);
	BIT_VEC cppVar_23777 = ROM.rd(cppVar_23776);
	BIT_VEC cppVar_23778 = (cppVar_23777 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23779 = (cppVar_23778 & cppMask_un_5_);
	BIT_VEC cppVar_23780 = cppVar_23779 + 32;
	cppVar_23780 = (cppVar_23780 & cppMask_un_8_);
	BIT_VEC cppVar_23781 = (cppVar_23771) ? cppVar_23775 : cppVar_23780;
	bool cppVar_23783 = (cppVar_23781 == 240);
	BIT_VEC cppVar_23785 = (cppVar_23783) ? B : 0;
	BIT_VEC cppVar_23786 = (cppVar_23767) ? ACC : cppVar_23785;
	BIT_VEC cppVar_23787 = (cppVar_23751) ? PSW : cppVar_23786;
	BIT_VEC cppVar_23788 = (cppVar_23735) ? IP : cppVar_23787;
	BIT_VEC cppVar_23789 = (cppVar_23719) ? P3 : cppVar_23788;
	BIT_VEC cppVar_23790 = (cppVar_23703) ? IE : cppVar_23789;
	BIT_VEC cppVar_23791 = (cppVar_23687) ? P2 : cppVar_23790;
	BIT_VEC cppVar_23792 = (cppVar_23671) ? SBUF : cppVar_23791;
	BIT_VEC cppVar_23793 = (cppVar_23655) ? SCON : cppVar_23792;
	BIT_VEC cppVar_23794 = (cppVar_23639) ? P1 : cppVar_23793;
	BIT_VEC cppVar_23795 = (cppVar_23623) ? TH1 : cppVar_23794;
	BIT_VEC cppVar_23796 = (cppVar_23607) ? TL1 : cppVar_23795;
	BIT_VEC cppVar_23797 = (cppVar_23591) ? TH0 : cppVar_23796;
	BIT_VEC cppVar_23798 = (cppVar_23575) ? TL0 : cppVar_23797;
	BIT_VEC cppVar_23799 = (cppVar_23559) ? TMOD : cppVar_23798;
	BIT_VEC cppVar_23800 = (cppVar_23543) ? TCON : cppVar_23799;
	BIT_VEC cppVar_23801 = (cppVar_23527) ? PCON : cppVar_23800;
	BIT_VEC cppVar_23802 = (cppVar_23511) ? DPH : cppVar_23801;
	BIT_VEC cppVar_23803 = (cppVar_23495) ? DPL : cppVar_23802;
	BIT_VEC cppVar_23804 = (cppVar_23479) ? SP : cppVar_23803;
	BIT_VEC cppVar_23805 = (cppVar_23463) ? P0 : cppVar_23804;
	BIT_VEC cppVar_23806 = (cppVar_23432) ? cppVar_23447 : cppVar_23805;
	BIT_VEC cppVar_23807 = PC + 1;
	cppVar_23807 = (cppVar_23807 & cppMask_un_16_);
	BIT_VEC cppVar_23808 = ROM.rd(cppVar_23807);
	BIT_VEC cppVar_23809 = (cppVar_23808 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_23810 = (cppVar_23806 >> static_cast<unsigned>(cppVar_23809)) & 0x1;
	BIT_VEC cppVar_23811 = ~cppVar_23810;
	BIT_VEC cppVar_23812 = (cppVar_23811 & cppMask_un_1_);
	BIT_VEC cppVar_23813 = PC + 1;
	cppVar_23813 = (cppVar_23813 & cppMask_un_16_);
	BIT_VEC cppVar_23814 = ROM.rd(cppVar_23813);
	BIT_VEC cppVar_23815 = (cppVar_23814 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_23816 = (cppVar_23815 & cppMask_un_3_);
	BIT_VEC cppVar_23817 = cppVar_23812 << static_cast<unsigned>(cppVar_23816);
	cppVar_23817 = (cppVar_23817 & cppMask_un_8_);
	BIT_VEC cppVar_23818 = cppVar_23412 | cppVar_23817;
	BIT_VEC cppVar_23819 = (cppVar_23013) ? cppVar_23818 : P0;
	BIT_VEC cppVar_23820 = ROM.rd(PC);
	bool cppVar_23822 = (cppVar_23820 == 146);
	BIT_VEC cppVar_23824 = PC + 1;
	cppVar_23824 = (cppVar_23824 & cppMask_un_16_);
	BIT_VEC cppVar_23825 = ROM.rd(cppVar_23824);
	BIT_VEC cppVar_23826 = (cppVar_23825 >> 7) & cppMask_un_1_;
	bool cppVar_23828 = (cppVar_23826 == 1);
	BIT_VEC cppVar_23829 = PC + 1;
	cppVar_23829 = (cppVar_23829 & cppMask_un_16_);
	BIT_VEC cppVar_23830 = ROM.rd(cppVar_23829);
	BIT_VEC cppVar_23831 = (cppVar_23830 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23833 = (cppVar_23831 << 3) | 0;
	cppVar_23833 = (cppVar_23833 & cppMask_un_8_);
	BIT_VEC cppVar_23834 = PC + 1;
	cppVar_23834 = (cppVar_23834 & cppMask_un_16_);
	BIT_VEC cppVar_23835 = ROM.rd(cppVar_23834);
	BIT_VEC cppVar_23836 = (cppVar_23835 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23837 = (cppVar_23836 & cppMask_un_5_);
	BIT_VEC cppVar_23839 = cppVar_23837 + 32;
	cppVar_23839 = (cppVar_23839 & cppMask_un_8_);
	BIT_VEC cppVar_23840 = (cppVar_23828) ? cppVar_23833 : cppVar_23839;
	bool cppVar_23842 = (cppVar_23840 == 128);
	BIT_VEC cppVar_23844 = PC + 1;
	cppVar_23844 = (cppVar_23844 & cppMask_un_16_);
	BIT_VEC cppVar_23845 = ROM.rd(cppVar_23844);
	BIT_VEC cppVar_23846 = (cppVar_23845 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_23847 = (cppVar_23846 & cppMask_un_3_);
	BIT_VEC cppVar_23848 = 1 << static_cast<unsigned>(cppVar_23847);
	cppVar_23848 = (cppVar_23848 & cppMask_un_8_);
	BIT_VEC cppVar_23849 = ~cppVar_23848;
	BIT_VEC cppVar_23850 = PC + 1;
	cppVar_23850 = (cppVar_23850 & cppMask_un_16_);
	BIT_VEC cppVar_23851 = ROM.rd(cppVar_23850);
	BIT_VEC cppVar_23852 = (cppVar_23851 >> 7) & cppMask_un_1_;
	bool cppVar_23853 = (cppVar_23852 == 1);
	BIT_VEC cppVar_23854 = PC + 1;
	cppVar_23854 = (cppVar_23854 & cppMask_un_16_);
	BIT_VEC cppVar_23855 = ROM.rd(cppVar_23854);
	BIT_VEC cppVar_23856 = (cppVar_23855 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23857 = (cppVar_23856 << 3) | 0;
	cppVar_23857 = (cppVar_23857 & cppMask_un_8_);
	BIT_VEC cppVar_23858 = PC + 1;
	cppVar_23858 = (cppVar_23858 & cppMask_un_16_);
	BIT_VEC cppVar_23859 = ROM.rd(cppVar_23858);
	BIT_VEC cppVar_23860 = (cppVar_23859 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23861 = (cppVar_23860 & cppMask_un_5_);
	BIT_VEC cppVar_23862 = cppVar_23861 + 32;
	cppVar_23862 = (cppVar_23862 & cppMask_un_8_);
	BIT_VEC cppVar_23863 = (cppVar_23853) ? cppVar_23857 : cppVar_23862;
	BIT_VEC cppVar_23864 = (cppVar_23863 >> 7) & cppMask_un_1_;
	bool cppVar_23866 = (cppVar_23864 == 0);
	BIT_VEC cppVar_23867 = PC + 1;
	cppVar_23867 = (cppVar_23867 & cppMask_un_16_);
	BIT_VEC cppVar_23868 = ROM.rd(cppVar_23867);
	BIT_VEC cppVar_23869 = (cppVar_23868 >> 7) & cppMask_un_1_;
	bool cppVar_23870 = (cppVar_23869 == 1);
	BIT_VEC cppVar_23871 = PC + 1;
	cppVar_23871 = (cppVar_23871 & cppMask_un_16_);
	BIT_VEC cppVar_23872 = ROM.rd(cppVar_23871);
	BIT_VEC cppVar_23873 = (cppVar_23872 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23874 = (cppVar_23873 << 3) | 0;
	cppVar_23874 = (cppVar_23874 & cppMask_un_8_);
	BIT_VEC cppVar_23875 = PC + 1;
	cppVar_23875 = (cppVar_23875 & cppMask_un_16_);
	BIT_VEC cppVar_23876 = ROM.rd(cppVar_23875);
	BIT_VEC cppVar_23877 = (cppVar_23876 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23878 = (cppVar_23877 & cppMask_un_5_);
	BIT_VEC cppVar_23879 = cppVar_23878 + 32;
	cppVar_23879 = (cppVar_23879 & cppMask_un_8_);
	BIT_VEC cppVar_23880 = (cppVar_23870) ? cppVar_23874 : cppVar_23879;
	BIT_VEC cppVar_23881 = IRAM.rd(cppVar_23880);
	BIT_VEC cppVar_23882 = PC + 1;
	cppVar_23882 = (cppVar_23882 & cppMask_un_16_);
	BIT_VEC cppVar_23883 = ROM.rd(cppVar_23882);
	BIT_VEC cppVar_23884 = (cppVar_23883 >> 7) & cppMask_un_1_;
	bool cppVar_23885 = (cppVar_23884 == 1);
	BIT_VEC cppVar_23886 = PC + 1;
	cppVar_23886 = (cppVar_23886 & cppMask_un_16_);
	BIT_VEC cppVar_23887 = ROM.rd(cppVar_23886);
	BIT_VEC cppVar_23888 = (cppVar_23887 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23889 = (cppVar_23888 << 3) | 0;
	cppVar_23889 = (cppVar_23889 & cppMask_un_8_);
	BIT_VEC cppVar_23890 = PC + 1;
	cppVar_23890 = (cppVar_23890 & cppMask_un_16_);
	BIT_VEC cppVar_23891 = ROM.rd(cppVar_23890);
	BIT_VEC cppVar_23892 = (cppVar_23891 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23893 = (cppVar_23892 & cppMask_un_5_);
	BIT_VEC cppVar_23894 = cppVar_23893 + 32;
	cppVar_23894 = (cppVar_23894 & cppMask_un_8_);
	BIT_VEC cppVar_23895 = (cppVar_23885) ? cppVar_23889 : cppVar_23894;
	bool cppVar_23897 = (cppVar_23895 == 128);
	BIT_VEC cppVar_23898 = PC + 1;
	cppVar_23898 = (cppVar_23898 & cppMask_un_16_);
	BIT_VEC cppVar_23899 = ROM.rd(cppVar_23898);
	BIT_VEC cppVar_23900 = (cppVar_23899 >> 7) & cppMask_un_1_;
	bool cppVar_23901 = (cppVar_23900 == 1);
	BIT_VEC cppVar_23902 = PC + 1;
	cppVar_23902 = (cppVar_23902 & cppMask_un_16_);
	BIT_VEC cppVar_23903 = ROM.rd(cppVar_23902);
	BIT_VEC cppVar_23904 = (cppVar_23903 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23905 = (cppVar_23904 << 3) | 0;
	cppVar_23905 = (cppVar_23905 & cppMask_un_8_);
	BIT_VEC cppVar_23906 = PC + 1;
	cppVar_23906 = (cppVar_23906 & cppMask_un_16_);
	BIT_VEC cppVar_23907 = ROM.rd(cppVar_23906);
	BIT_VEC cppVar_23908 = (cppVar_23907 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23909 = (cppVar_23908 & cppMask_un_5_);
	BIT_VEC cppVar_23910 = cppVar_23909 + 32;
	cppVar_23910 = (cppVar_23910 & cppMask_un_8_);
	BIT_VEC cppVar_23911 = (cppVar_23901) ? cppVar_23905 : cppVar_23910;
	bool cppVar_23913 = (cppVar_23911 == 129);
	BIT_VEC cppVar_23914 = PC + 1;
	cppVar_23914 = (cppVar_23914 & cppMask_un_16_);
	BIT_VEC cppVar_23915 = ROM.rd(cppVar_23914);
	BIT_VEC cppVar_23916 = (cppVar_23915 >> 7) & cppMask_un_1_;
	bool cppVar_23917 = (cppVar_23916 == 1);
	BIT_VEC cppVar_23918 = PC + 1;
	cppVar_23918 = (cppVar_23918 & cppMask_un_16_);
	BIT_VEC cppVar_23919 = ROM.rd(cppVar_23918);
	BIT_VEC cppVar_23920 = (cppVar_23919 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23921 = (cppVar_23920 << 3) | 0;
	cppVar_23921 = (cppVar_23921 & cppMask_un_8_);
	BIT_VEC cppVar_23922 = PC + 1;
	cppVar_23922 = (cppVar_23922 & cppMask_un_16_);
	BIT_VEC cppVar_23923 = ROM.rd(cppVar_23922);
	BIT_VEC cppVar_23924 = (cppVar_23923 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23925 = (cppVar_23924 & cppMask_un_5_);
	BIT_VEC cppVar_23926 = cppVar_23925 + 32;
	cppVar_23926 = (cppVar_23926 & cppMask_un_8_);
	BIT_VEC cppVar_23927 = (cppVar_23917) ? cppVar_23921 : cppVar_23926;
	bool cppVar_23929 = (cppVar_23927 == 130);
	BIT_VEC cppVar_23930 = PC + 1;
	cppVar_23930 = (cppVar_23930 & cppMask_un_16_);
	BIT_VEC cppVar_23931 = ROM.rd(cppVar_23930);
	BIT_VEC cppVar_23932 = (cppVar_23931 >> 7) & cppMask_un_1_;
	bool cppVar_23933 = (cppVar_23932 == 1);
	BIT_VEC cppVar_23934 = PC + 1;
	cppVar_23934 = (cppVar_23934 & cppMask_un_16_);
	BIT_VEC cppVar_23935 = ROM.rd(cppVar_23934);
	BIT_VEC cppVar_23936 = (cppVar_23935 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23937 = (cppVar_23936 << 3) | 0;
	cppVar_23937 = (cppVar_23937 & cppMask_un_8_);
	BIT_VEC cppVar_23938 = PC + 1;
	cppVar_23938 = (cppVar_23938 & cppMask_un_16_);
	BIT_VEC cppVar_23939 = ROM.rd(cppVar_23938);
	BIT_VEC cppVar_23940 = (cppVar_23939 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23941 = (cppVar_23940 & cppMask_un_5_);
	BIT_VEC cppVar_23942 = cppVar_23941 + 32;
	cppVar_23942 = (cppVar_23942 & cppMask_un_8_);
	BIT_VEC cppVar_23943 = (cppVar_23933) ? cppVar_23937 : cppVar_23942;
	bool cppVar_23945 = (cppVar_23943 == 131);
	BIT_VEC cppVar_23946 = PC + 1;
	cppVar_23946 = (cppVar_23946 & cppMask_un_16_);
	BIT_VEC cppVar_23947 = ROM.rd(cppVar_23946);
	BIT_VEC cppVar_23948 = (cppVar_23947 >> 7) & cppMask_un_1_;
	bool cppVar_23949 = (cppVar_23948 == 1);
	BIT_VEC cppVar_23950 = PC + 1;
	cppVar_23950 = (cppVar_23950 & cppMask_un_16_);
	BIT_VEC cppVar_23951 = ROM.rd(cppVar_23950);
	BIT_VEC cppVar_23952 = (cppVar_23951 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23953 = (cppVar_23952 << 3) | 0;
	cppVar_23953 = (cppVar_23953 & cppMask_un_8_);
	BIT_VEC cppVar_23954 = PC + 1;
	cppVar_23954 = (cppVar_23954 & cppMask_un_16_);
	BIT_VEC cppVar_23955 = ROM.rd(cppVar_23954);
	BIT_VEC cppVar_23956 = (cppVar_23955 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23957 = (cppVar_23956 & cppMask_un_5_);
	BIT_VEC cppVar_23958 = cppVar_23957 + 32;
	cppVar_23958 = (cppVar_23958 & cppMask_un_8_);
	BIT_VEC cppVar_23959 = (cppVar_23949) ? cppVar_23953 : cppVar_23958;
	bool cppVar_23961 = (cppVar_23959 == 135);
	BIT_VEC cppVar_23962 = PC + 1;
	cppVar_23962 = (cppVar_23962 & cppMask_un_16_);
	BIT_VEC cppVar_23963 = ROM.rd(cppVar_23962);
	BIT_VEC cppVar_23964 = (cppVar_23963 >> 7) & cppMask_un_1_;
	bool cppVar_23965 = (cppVar_23964 == 1);
	BIT_VEC cppVar_23966 = PC + 1;
	cppVar_23966 = (cppVar_23966 & cppMask_un_16_);
	BIT_VEC cppVar_23967 = ROM.rd(cppVar_23966);
	BIT_VEC cppVar_23968 = (cppVar_23967 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23969 = (cppVar_23968 << 3) | 0;
	cppVar_23969 = (cppVar_23969 & cppMask_un_8_);
	BIT_VEC cppVar_23970 = PC + 1;
	cppVar_23970 = (cppVar_23970 & cppMask_un_16_);
	BIT_VEC cppVar_23971 = ROM.rd(cppVar_23970);
	BIT_VEC cppVar_23972 = (cppVar_23971 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23973 = (cppVar_23972 & cppMask_un_5_);
	BIT_VEC cppVar_23974 = cppVar_23973 + 32;
	cppVar_23974 = (cppVar_23974 & cppMask_un_8_);
	BIT_VEC cppVar_23975 = (cppVar_23965) ? cppVar_23969 : cppVar_23974;
	bool cppVar_23977 = (cppVar_23975 == 136);
	BIT_VEC cppVar_23978 = PC + 1;
	cppVar_23978 = (cppVar_23978 & cppMask_un_16_);
	BIT_VEC cppVar_23979 = ROM.rd(cppVar_23978);
	BIT_VEC cppVar_23980 = (cppVar_23979 >> 7) & cppMask_un_1_;
	bool cppVar_23981 = (cppVar_23980 == 1);
	BIT_VEC cppVar_23982 = PC + 1;
	cppVar_23982 = (cppVar_23982 & cppMask_un_16_);
	BIT_VEC cppVar_23983 = ROM.rd(cppVar_23982);
	BIT_VEC cppVar_23984 = (cppVar_23983 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23985 = (cppVar_23984 << 3) | 0;
	cppVar_23985 = (cppVar_23985 & cppMask_un_8_);
	BIT_VEC cppVar_23986 = PC + 1;
	cppVar_23986 = (cppVar_23986 & cppMask_un_16_);
	BIT_VEC cppVar_23987 = ROM.rd(cppVar_23986);
	BIT_VEC cppVar_23988 = (cppVar_23987 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_23989 = (cppVar_23988 & cppMask_un_5_);
	BIT_VEC cppVar_23990 = cppVar_23989 + 32;
	cppVar_23990 = (cppVar_23990 & cppMask_un_8_);
	BIT_VEC cppVar_23991 = (cppVar_23981) ? cppVar_23985 : cppVar_23990;
	bool cppVar_23993 = (cppVar_23991 == 137);
	BIT_VEC cppVar_23994 = PC + 1;
	cppVar_23994 = (cppVar_23994 & cppMask_un_16_);
	BIT_VEC cppVar_23995 = ROM.rd(cppVar_23994);
	BIT_VEC cppVar_23996 = (cppVar_23995 >> 7) & cppMask_un_1_;
	bool cppVar_23997 = (cppVar_23996 == 1);
	BIT_VEC cppVar_23998 = PC + 1;
	cppVar_23998 = (cppVar_23998 & cppMask_un_16_);
	BIT_VEC cppVar_23999 = ROM.rd(cppVar_23998);
	BIT_VEC cppVar_24000 = (cppVar_23999 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24001 = (cppVar_24000 << 3) | 0;
	cppVar_24001 = (cppVar_24001 & cppMask_un_8_);
	BIT_VEC cppVar_24002 = PC + 1;
	cppVar_24002 = (cppVar_24002 & cppMask_un_16_);
	BIT_VEC cppVar_24003 = ROM.rd(cppVar_24002);
	BIT_VEC cppVar_24004 = (cppVar_24003 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24005 = (cppVar_24004 & cppMask_un_5_);
	BIT_VEC cppVar_24006 = cppVar_24005 + 32;
	cppVar_24006 = (cppVar_24006 & cppMask_un_8_);
	BIT_VEC cppVar_24007 = (cppVar_23997) ? cppVar_24001 : cppVar_24006;
	bool cppVar_24009 = (cppVar_24007 == 138);
	BIT_VEC cppVar_24010 = PC + 1;
	cppVar_24010 = (cppVar_24010 & cppMask_un_16_);
	BIT_VEC cppVar_24011 = ROM.rd(cppVar_24010);
	BIT_VEC cppVar_24012 = (cppVar_24011 >> 7) & cppMask_un_1_;
	bool cppVar_24013 = (cppVar_24012 == 1);
	BIT_VEC cppVar_24014 = PC + 1;
	cppVar_24014 = (cppVar_24014 & cppMask_un_16_);
	BIT_VEC cppVar_24015 = ROM.rd(cppVar_24014);
	BIT_VEC cppVar_24016 = (cppVar_24015 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24017 = (cppVar_24016 << 3) | 0;
	cppVar_24017 = (cppVar_24017 & cppMask_un_8_);
	BIT_VEC cppVar_24018 = PC + 1;
	cppVar_24018 = (cppVar_24018 & cppMask_un_16_);
	BIT_VEC cppVar_24019 = ROM.rd(cppVar_24018);
	BIT_VEC cppVar_24020 = (cppVar_24019 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24021 = (cppVar_24020 & cppMask_un_5_);
	BIT_VEC cppVar_24022 = cppVar_24021 + 32;
	cppVar_24022 = (cppVar_24022 & cppMask_un_8_);
	BIT_VEC cppVar_24023 = (cppVar_24013) ? cppVar_24017 : cppVar_24022;
	bool cppVar_24025 = (cppVar_24023 == 140);
	BIT_VEC cppVar_24026 = PC + 1;
	cppVar_24026 = (cppVar_24026 & cppMask_un_16_);
	BIT_VEC cppVar_24027 = ROM.rd(cppVar_24026);
	BIT_VEC cppVar_24028 = (cppVar_24027 >> 7) & cppMask_un_1_;
	bool cppVar_24029 = (cppVar_24028 == 1);
	BIT_VEC cppVar_24030 = PC + 1;
	cppVar_24030 = (cppVar_24030 & cppMask_un_16_);
	BIT_VEC cppVar_24031 = ROM.rd(cppVar_24030);
	BIT_VEC cppVar_24032 = (cppVar_24031 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24033 = (cppVar_24032 << 3) | 0;
	cppVar_24033 = (cppVar_24033 & cppMask_un_8_);
	BIT_VEC cppVar_24034 = PC + 1;
	cppVar_24034 = (cppVar_24034 & cppMask_un_16_);
	BIT_VEC cppVar_24035 = ROM.rd(cppVar_24034);
	BIT_VEC cppVar_24036 = (cppVar_24035 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24037 = (cppVar_24036 & cppMask_un_5_);
	BIT_VEC cppVar_24038 = cppVar_24037 + 32;
	cppVar_24038 = (cppVar_24038 & cppMask_un_8_);
	BIT_VEC cppVar_24039 = (cppVar_24029) ? cppVar_24033 : cppVar_24038;
	bool cppVar_24041 = (cppVar_24039 == 139);
	BIT_VEC cppVar_24042 = PC + 1;
	cppVar_24042 = (cppVar_24042 & cppMask_un_16_);
	BIT_VEC cppVar_24043 = ROM.rd(cppVar_24042);
	BIT_VEC cppVar_24044 = (cppVar_24043 >> 7) & cppMask_un_1_;
	bool cppVar_24045 = (cppVar_24044 == 1);
	BIT_VEC cppVar_24046 = PC + 1;
	cppVar_24046 = (cppVar_24046 & cppMask_un_16_);
	BIT_VEC cppVar_24047 = ROM.rd(cppVar_24046);
	BIT_VEC cppVar_24048 = (cppVar_24047 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24049 = (cppVar_24048 << 3) | 0;
	cppVar_24049 = (cppVar_24049 & cppMask_un_8_);
	BIT_VEC cppVar_24050 = PC + 1;
	cppVar_24050 = (cppVar_24050 & cppMask_un_16_);
	BIT_VEC cppVar_24051 = ROM.rd(cppVar_24050);
	BIT_VEC cppVar_24052 = (cppVar_24051 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24053 = (cppVar_24052 & cppMask_un_5_);
	BIT_VEC cppVar_24054 = cppVar_24053 + 32;
	cppVar_24054 = (cppVar_24054 & cppMask_un_8_);
	BIT_VEC cppVar_24055 = (cppVar_24045) ? cppVar_24049 : cppVar_24054;
	bool cppVar_24057 = (cppVar_24055 == 141);
	BIT_VEC cppVar_24058 = PC + 1;
	cppVar_24058 = (cppVar_24058 & cppMask_un_16_);
	BIT_VEC cppVar_24059 = ROM.rd(cppVar_24058);
	BIT_VEC cppVar_24060 = (cppVar_24059 >> 7) & cppMask_un_1_;
	bool cppVar_24061 = (cppVar_24060 == 1);
	BIT_VEC cppVar_24062 = PC + 1;
	cppVar_24062 = (cppVar_24062 & cppMask_un_16_);
	BIT_VEC cppVar_24063 = ROM.rd(cppVar_24062);
	BIT_VEC cppVar_24064 = (cppVar_24063 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24065 = (cppVar_24064 << 3) | 0;
	cppVar_24065 = (cppVar_24065 & cppMask_un_8_);
	BIT_VEC cppVar_24066 = PC + 1;
	cppVar_24066 = (cppVar_24066 & cppMask_un_16_);
	BIT_VEC cppVar_24067 = ROM.rd(cppVar_24066);
	BIT_VEC cppVar_24068 = (cppVar_24067 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24069 = (cppVar_24068 & cppMask_un_5_);
	BIT_VEC cppVar_24070 = cppVar_24069 + 32;
	cppVar_24070 = (cppVar_24070 & cppMask_un_8_);
	BIT_VEC cppVar_24071 = (cppVar_24061) ? cppVar_24065 : cppVar_24070;
	bool cppVar_24073 = (cppVar_24071 == 144);
	BIT_VEC cppVar_24074 = PC + 1;
	cppVar_24074 = (cppVar_24074 & cppMask_un_16_);
	BIT_VEC cppVar_24075 = ROM.rd(cppVar_24074);
	BIT_VEC cppVar_24076 = (cppVar_24075 >> 7) & cppMask_un_1_;
	bool cppVar_24077 = (cppVar_24076 == 1);
	BIT_VEC cppVar_24078 = PC + 1;
	cppVar_24078 = (cppVar_24078 & cppMask_un_16_);
	BIT_VEC cppVar_24079 = ROM.rd(cppVar_24078);
	BIT_VEC cppVar_24080 = (cppVar_24079 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24081 = (cppVar_24080 << 3) | 0;
	cppVar_24081 = (cppVar_24081 & cppMask_un_8_);
	BIT_VEC cppVar_24082 = PC + 1;
	cppVar_24082 = (cppVar_24082 & cppMask_un_16_);
	BIT_VEC cppVar_24083 = ROM.rd(cppVar_24082);
	BIT_VEC cppVar_24084 = (cppVar_24083 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24085 = (cppVar_24084 & cppMask_un_5_);
	BIT_VEC cppVar_24086 = cppVar_24085 + 32;
	cppVar_24086 = (cppVar_24086 & cppMask_un_8_);
	BIT_VEC cppVar_24087 = (cppVar_24077) ? cppVar_24081 : cppVar_24086;
	bool cppVar_24089 = (cppVar_24087 == 152);
	BIT_VEC cppVar_24090 = PC + 1;
	cppVar_24090 = (cppVar_24090 & cppMask_un_16_);
	BIT_VEC cppVar_24091 = ROM.rd(cppVar_24090);
	BIT_VEC cppVar_24092 = (cppVar_24091 >> 7) & cppMask_un_1_;
	bool cppVar_24093 = (cppVar_24092 == 1);
	BIT_VEC cppVar_24094 = PC + 1;
	cppVar_24094 = (cppVar_24094 & cppMask_un_16_);
	BIT_VEC cppVar_24095 = ROM.rd(cppVar_24094);
	BIT_VEC cppVar_24096 = (cppVar_24095 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24097 = (cppVar_24096 << 3) | 0;
	cppVar_24097 = (cppVar_24097 & cppMask_un_8_);
	BIT_VEC cppVar_24098 = PC + 1;
	cppVar_24098 = (cppVar_24098 & cppMask_un_16_);
	BIT_VEC cppVar_24099 = ROM.rd(cppVar_24098);
	BIT_VEC cppVar_24100 = (cppVar_24099 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24101 = (cppVar_24100 & cppMask_un_5_);
	BIT_VEC cppVar_24102 = cppVar_24101 + 32;
	cppVar_24102 = (cppVar_24102 & cppMask_un_8_);
	BIT_VEC cppVar_24103 = (cppVar_24093) ? cppVar_24097 : cppVar_24102;
	bool cppVar_24105 = (cppVar_24103 == 153);
	BIT_VEC cppVar_24106 = PC + 1;
	cppVar_24106 = (cppVar_24106 & cppMask_un_16_);
	BIT_VEC cppVar_24107 = ROM.rd(cppVar_24106);
	BIT_VEC cppVar_24108 = (cppVar_24107 >> 7) & cppMask_un_1_;
	bool cppVar_24109 = (cppVar_24108 == 1);
	BIT_VEC cppVar_24110 = PC + 1;
	cppVar_24110 = (cppVar_24110 & cppMask_un_16_);
	BIT_VEC cppVar_24111 = ROM.rd(cppVar_24110);
	BIT_VEC cppVar_24112 = (cppVar_24111 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24113 = (cppVar_24112 << 3) | 0;
	cppVar_24113 = (cppVar_24113 & cppMask_un_8_);
	BIT_VEC cppVar_24114 = PC + 1;
	cppVar_24114 = (cppVar_24114 & cppMask_un_16_);
	BIT_VEC cppVar_24115 = ROM.rd(cppVar_24114);
	BIT_VEC cppVar_24116 = (cppVar_24115 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24117 = (cppVar_24116 & cppMask_un_5_);
	BIT_VEC cppVar_24118 = cppVar_24117 + 32;
	cppVar_24118 = (cppVar_24118 & cppMask_un_8_);
	BIT_VEC cppVar_24119 = (cppVar_24109) ? cppVar_24113 : cppVar_24118;
	bool cppVar_24121 = (cppVar_24119 == 160);
	BIT_VEC cppVar_24122 = PC + 1;
	cppVar_24122 = (cppVar_24122 & cppMask_un_16_);
	BIT_VEC cppVar_24123 = ROM.rd(cppVar_24122);
	BIT_VEC cppVar_24124 = (cppVar_24123 >> 7) & cppMask_un_1_;
	bool cppVar_24125 = (cppVar_24124 == 1);
	BIT_VEC cppVar_24126 = PC + 1;
	cppVar_24126 = (cppVar_24126 & cppMask_un_16_);
	BIT_VEC cppVar_24127 = ROM.rd(cppVar_24126);
	BIT_VEC cppVar_24128 = (cppVar_24127 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24129 = (cppVar_24128 << 3) | 0;
	cppVar_24129 = (cppVar_24129 & cppMask_un_8_);
	BIT_VEC cppVar_24130 = PC + 1;
	cppVar_24130 = (cppVar_24130 & cppMask_un_16_);
	BIT_VEC cppVar_24131 = ROM.rd(cppVar_24130);
	BIT_VEC cppVar_24132 = (cppVar_24131 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24133 = (cppVar_24132 & cppMask_un_5_);
	BIT_VEC cppVar_24134 = cppVar_24133 + 32;
	cppVar_24134 = (cppVar_24134 & cppMask_un_8_);
	BIT_VEC cppVar_24135 = (cppVar_24125) ? cppVar_24129 : cppVar_24134;
	bool cppVar_24137 = (cppVar_24135 == 168);
	BIT_VEC cppVar_24138 = PC + 1;
	cppVar_24138 = (cppVar_24138 & cppMask_un_16_);
	BIT_VEC cppVar_24139 = ROM.rd(cppVar_24138);
	BIT_VEC cppVar_24140 = (cppVar_24139 >> 7) & cppMask_un_1_;
	bool cppVar_24141 = (cppVar_24140 == 1);
	BIT_VEC cppVar_24142 = PC + 1;
	cppVar_24142 = (cppVar_24142 & cppMask_un_16_);
	BIT_VEC cppVar_24143 = ROM.rd(cppVar_24142);
	BIT_VEC cppVar_24144 = (cppVar_24143 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24145 = (cppVar_24144 << 3) | 0;
	cppVar_24145 = (cppVar_24145 & cppMask_un_8_);
	BIT_VEC cppVar_24146 = PC + 1;
	cppVar_24146 = (cppVar_24146 & cppMask_un_16_);
	BIT_VEC cppVar_24147 = ROM.rd(cppVar_24146);
	BIT_VEC cppVar_24148 = (cppVar_24147 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24149 = (cppVar_24148 & cppMask_un_5_);
	BIT_VEC cppVar_24150 = cppVar_24149 + 32;
	cppVar_24150 = (cppVar_24150 & cppMask_un_8_);
	BIT_VEC cppVar_24151 = (cppVar_24141) ? cppVar_24145 : cppVar_24150;
	bool cppVar_24153 = (cppVar_24151 == 176);
	BIT_VEC cppVar_24154 = PC + 1;
	cppVar_24154 = (cppVar_24154 & cppMask_un_16_);
	BIT_VEC cppVar_24155 = ROM.rd(cppVar_24154);
	BIT_VEC cppVar_24156 = (cppVar_24155 >> 7) & cppMask_un_1_;
	bool cppVar_24157 = (cppVar_24156 == 1);
	BIT_VEC cppVar_24158 = PC + 1;
	cppVar_24158 = (cppVar_24158 & cppMask_un_16_);
	BIT_VEC cppVar_24159 = ROM.rd(cppVar_24158);
	BIT_VEC cppVar_24160 = (cppVar_24159 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24161 = (cppVar_24160 << 3) | 0;
	cppVar_24161 = (cppVar_24161 & cppMask_un_8_);
	BIT_VEC cppVar_24162 = PC + 1;
	cppVar_24162 = (cppVar_24162 & cppMask_un_16_);
	BIT_VEC cppVar_24163 = ROM.rd(cppVar_24162);
	BIT_VEC cppVar_24164 = (cppVar_24163 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24165 = (cppVar_24164 & cppMask_un_5_);
	BIT_VEC cppVar_24166 = cppVar_24165 + 32;
	cppVar_24166 = (cppVar_24166 & cppMask_un_8_);
	BIT_VEC cppVar_24167 = (cppVar_24157) ? cppVar_24161 : cppVar_24166;
	bool cppVar_24169 = (cppVar_24167 == 184);
	BIT_VEC cppVar_24170 = PC + 1;
	cppVar_24170 = (cppVar_24170 & cppMask_un_16_);
	BIT_VEC cppVar_24171 = ROM.rd(cppVar_24170);
	BIT_VEC cppVar_24172 = (cppVar_24171 >> 7) & cppMask_un_1_;
	bool cppVar_24173 = (cppVar_24172 == 1);
	BIT_VEC cppVar_24174 = PC + 1;
	cppVar_24174 = (cppVar_24174 & cppMask_un_16_);
	BIT_VEC cppVar_24175 = ROM.rd(cppVar_24174);
	BIT_VEC cppVar_24176 = (cppVar_24175 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24177 = (cppVar_24176 << 3) | 0;
	cppVar_24177 = (cppVar_24177 & cppMask_un_8_);
	BIT_VEC cppVar_24178 = PC + 1;
	cppVar_24178 = (cppVar_24178 & cppMask_un_16_);
	BIT_VEC cppVar_24179 = ROM.rd(cppVar_24178);
	BIT_VEC cppVar_24180 = (cppVar_24179 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24181 = (cppVar_24180 & cppMask_un_5_);
	BIT_VEC cppVar_24182 = cppVar_24181 + 32;
	cppVar_24182 = (cppVar_24182 & cppMask_un_8_);
	BIT_VEC cppVar_24183 = (cppVar_24173) ? cppVar_24177 : cppVar_24182;
	bool cppVar_24185 = (cppVar_24183 == 208);
	BIT_VEC cppVar_24186 = PC + 1;
	cppVar_24186 = (cppVar_24186 & cppMask_un_16_);
	BIT_VEC cppVar_24187 = ROM.rd(cppVar_24186);
	BIT_VEC cppVar_24188 = (cppVar_24187 >> 7) & cppMask_un_1_;
	bool cppVar_24189 = (cppVar_24188 == 1);
	BIT_VEC cppVar_24190 = PC + 1;
	cppVar_24190 = (cppVar_24190 & cppMask_un_16_);
	BIT_VEC cppVar_24191 = ROM.rd(cppVar_24190);
	BIT_VEC cppVar_24192 = (cppVar_24191 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24193 = (cppVar_24192 << 3) | 0;
	cppVar_24193 = (cppVar_24193 & cppMask_un_8_);
	BIT_VEC cppVar_24194 = PC + 1;
	cppVar_24194 = (cppVar_24194 & cppMask_un_16_);
	BIT_VEC cppVar_24195 = ROM.rd(cppVar_24194);
	BIT_VEC cppVar_24196 = (cppVar_24195 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24197 = (cppVar_24196 & cppMask_un_5_);
	BIT_VEC cppVar_24198 = cppVar_24197 + 32;
	cppVar_24198 = (cppVar_24198 & cppMask_un_8_);
	BIT_VEC cppVar_24199 = (cppVar_24189) ? cppVar_24193 : cppVar_24198;
	bool cppVar_24201 = (cppVar_24199 == 224);
	BIT_VEC cppVar_24202 = PC + 1;
	cppVar_24202 = (cppVar_24202 & cppMask_un_16_);
	BIT_VEC cppVar_24203 = ROM.rd(cppVar_24202);
	BIT_VEC cppVar_24204 = (cppVar_24203 >> 7) & cppMask_un_1_;
	bool cppVar_24205 = (cppVar_24204 == 1);
	BIT_VEC cppVar_24206 = PC + 1;
	cppVar_24206 = (cppVar_24206 & cppMask_un_16_);
	BIT_VEC cppVar_24207 = ROM.rd(cppVar_24206);
	BIT_VEC cppVar_24208 = (cppVar_24207 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24209 = (cppVar_24208 << 3) | 0;
	cppVar_24209 = (cppVar_24209 & cppMask_un_8_);
	BIT_VEC cppVar_24210 = PC + 1;
	cppVar_24210 = (cppVar_24210 & cppMask_un_16_);
	BIT_VEC cppVar_24211 = ROM.rd(cppVar_24210);
	BIT_VEC cppVar_24212 = (cppVar_24211 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_24213 = (cppVar_24212 & cppMask_un_5_);
	BIT_VEC cppVar_24214 = cppVar_24213 + 32;
	cppVar_24214 = (cppVar_24214 & cppMask_un_8_);
	BIT_VEC cppVar_24215 = (cppVar_24205) ? cppVar_24209 : cppVar_24214;
	bool cppVar_24217 = (cppVar_24215 == 240);
	BIT_VEC cppVar_24219 = (cppVar_24217) ? B : 0;
	BIT_VEC cppVar_24220 = (cppVar_24201) ? ACC : cppVar_24219;
	BIT_VEC cppVar_24221 = (cppVar_24185) ? PSW : cppVar_24220;
	BIT_VEC cppVar_24222 = (cppVar_24169) ? IP : cppVar_24221;
	BIT_VEC cppVar_24223 = (cppVar_24153) ? P3 : cppVar_24222;
	BIT_VEC cppVar_24224 = (cppVar_24137) ? IE : cppVar_24223;
	BIT_VEC cppVar_24225 = (cppVar_24121) ? P2 : cppVar_24224;
	BIT_VEC cppVar_24226 = (cppVar_24105) ? SBUF : cppVar_24225;
	BIT_VEC cppVar_24227 = (cppVar_24089) ? SCON : cppVar_24226;
	BIT_VEC cppVar_24228 = (cppVar_24073) ? P1 : cppVar_24227;
	BIT_VEC cppVar_24229 = (cppVar_24057) ? TH1 : cppVar_24228;
	BIT_VEC cppVar_24230 = (cppVar_24041) ? TL1 : cppVar_24229;
	BIT_VEC cppVar_24231 = (cppVar_24025) ? TH0 : cppVar_24230;
	BIT_VEC cppVar_24232 = (cppVar_24009) ? TL0 : cppVar_24231;
	BIT_VEC cppVar_24233 = (cppVar_23993) ? TMOD : cppVar_24232;
	BIT_VEC cppVar_24234 = (cppVar_23977) ? TCON : cppVar_24233;
	BIT_VEC cppVar_24235 = (cppVar_23961) ? PCON : cppVar_24234;
	BIT_VEC cppVar_24236 = (cppVar_23945) ? DPH : cppVar_24235;
	BIT_VEC cppVar_24237 = (cppVar_23929) ? DPL : cppVar_24236;
	BIT_VEC cppVar_24238 = (cppVar_23913) ? SP : cppVar_24237;
	BIT_VEC cppVar_24239 = (cppVar_23897) ? P0 : cppVar_24238;
	BIT_VEC cppVar_24240 = (cppVar_23866) ? cppVar_23881 : cppVar_24239;
	BIT_VEC cppVar_24241 = cppVar_23849 & cppVar_24240;
	BIT_VEC cppVar_24242 = (PSW >> 7) & cppMask_un_1_;
	BIT_VEC cppVar_24243 = (cppVar_24242 & cppMask_un_1_);
	BIT_VEC cppVar_24244 = PC + 1;
	cppVar_24244 = (cppVar_24244 & cppMask_un_16_);
	BIT_VEC cppVar_24245 = ROM.rd(cppVar_24244);
	BIT_VEC cppVar_24246 = (cppVar_24245 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_24247 = (cppVar_24246 & cppMask_un_3_);
	BIT_VEC cppVar_24248 = cppVar_24243 << static_cast<unsigned>(cppVar_24247);
	cppVar_24248 = (cppVar_24248 & cppMask_un_8_);
	BIT_VEC cppVar_24249 = cppVar_24241 | cppVar_24248;
	BIT_VEC cppVar_24250 = (cppVar_23842) ? cppVar_24249 : P0;
	BIT_VEC cppVar_24251 = ROM.rd(PC);
	bool cppVar_24253 = (cppVar_24251 == 143);
	BIT_VEC cppVar_24255 = PC + 1;
	cppVar_24255 = (cppVar_24255 & cppMask_un_16_);
	BIT_VEC cppVar_24256 = ROM.rd(cppVar_24255);
	bool cppVar_24258 = (cppVar_24256 == 128);
	BIT_VEC cppVar_24260 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24262 = (cppVar_24260 << 3) | 7;
	cppVar_24262 = (cppVar_24262 & cppMask_un_5_);
	BIT_VEC cppVar_24263 = (0 << 5) | cppVar_24262;
	cppVar_24263 = (cppVar_24263 & cppMask_un_8_);
	BIT_VEC cppVar_24264 = (cppVar_24263 >> 7) & cppMask_un_1_;
	bool cppVar_24266 = (cppVar_24264 == 0);
	BIT_VEC cppVar_24267 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24268 = (cppVar_24267 << 3) | 7;
	cppVar_24268 = (cppVar_24268 & cppMask_un_5_);
	BIT_VEC cppVar_24269 = (0 << 5) | cppVar_24268;
	cppVar_24269 = (cppVar_24269 & cppMask_un_8_);
	BIT_VEC cppVar_24270 = IRAM.rd(cppVar_24269);
	BIT_VEC cppVar_24271 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24272 = (cppVar_24271 << 3) | 7;
	cppVar_24272 = (cppVar_24272 & cppMask_un_5_);
	BIT_VEC cppVar_24273 = (0 << 5) | cppVar_24272;
	cppVar_24273 = (cppVar_24273 & cppMask_un_8_);
	bool cppVar_24275 = (cppVar_24273 == 128);
	BIT_VEC cppVar_24276 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24277 = (cppVar_24276 << 3) | 7;
	cppVar_24277 = (cppVar_24277 & cppMask_un_5_);
	BIT_VEC cppVar_24278 = (0 << 5) | cppVar_24277;
	cppVar_24278 = (cppVar_24278 & cppMask_un_8_);
	bool cppVar_24280 = (cppVar_24278 == 129);
	BIT_VEC cppVar_24281 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24282 = (cppVar_24281 << 3) | 7;
	cppVar_24282 = (cppVar_24282 & cppMask_un_5_);
	BIT_VEC cppVar_24283 = (0 << 5) | cppVar_24282;
	cppVar_24283 = (cppVar_24283 & cppMask_un_8_);
	bool cppVar_24285 = (cppVar_24283 == 130);
	BIT_VEC cppVar_24286 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24287 = (cppVar_24286 << 3) | 7;
	cppVar_24287 = (cppVar_24287 & cppMask_un_5_);
	BIT_VEC cppVar_24288 = (0 << 5) | cppVar_24287;
	cppVar_24288 = (cppVar_24288 & cppMask_un_8_);
	bool cppVar_24290 = (cppVar_24288 == 131);
	BIT_VEC cppVar_24291 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24292 = (cppVar_24291 << 3) | 7;
	cppVar_24292 = (cppVar_24292 & cppMask_un_5_);
	BIT_VEC cppVar_24293 = (0 << 5) | cppVar_24292;
	cppVar_24293 = (cppVar_24293 & cppMask_un_8_);
	bool cppVar_24295 = (cppVar_24293 == 135);
	BIT_VEC cppVar_24296 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24297 = (cppVar_24296 << 3) | 7;
	cppVar_24297 = (cppVar_24297 & cppMask_un_5_);
	BIT_VEC cppVar_24298 = (0 << 5) | cppVar_24297;
	cppVar_24298 = (cppVar_24298 & cppMask_un_8_);
	bool cppVar_24300 = (cppVar_24298 == 136);
	BIT_VEC cppVar_24301 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24302 = (cppVar_24301 << 3) | 7;
	cppVar_24302 = (cppVar_24302 & cppMask_un_5_);
	BIT_VEC cppVar_24303 = (0 << 5) | cppVar_24302;
	cppVar_24303 = (cppVar_24303 & cppMask_un_8_);
	bool cppVar_24305 = (cppVar_24303 == 137);
	BIT_VEC cppVar_24306 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24307 = (cppVar_24306 << 3) | 7;
	cppVar_24307 = (cppVar_24307 & cppMask_un_5_);
	BIT_VEC cppVar_24308 = (0 << 5) | cppVar_24307;
	cppVar_24308 = (cppVar_24308 & cppMask_un_8_);
	bool cppVar_24310 = (cppVar_24308 == 138);
	BIT_VEC cppVar_24311 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24312 = (cppVar_24311 << 3) | 7;
	cppVar_24312 = (cppVar_24312 & cppMask_un_5_);
	BIT_VEC cppVar_24313 = (0 << 5) | cppVar_24312;
	cppVar_24313 = (cppVar_24313 & cppMask_un_8_);
	bool cppVar_24315 = (cppVar_24313 == 140);
	BIT_VEC cppVar_24316 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24317 = (cppVar_24316 << 3) | 7;
	cppVar_24317 = (cppVar_24317 & cppMask_un_5_);
	BIT_VEC cppVar_24318 = (0 << 5) | cppVar_24317;
	cppVar_24318 = (cppVar_24318 & cppMask_un_8_);
	bool cppVar_24320 = (cppVar_24318 == 139);
	BIT_VEC cppVar_24321 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24322 = (cppVar_24321 << 3) | 7;
	cppVar_24322 = (cppVar_24322 & cppMask_un_5_);
	BIT_VEC cppVar_24323 = (0 << 5) | cppVar_24322;
	cppVar_24323 = (cppVar_24323 & cppMask_un_8_);
	bool cppVar_24325 = (cppVar_24323 == 141);
	BIT_VEC cppVar_24326 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24327 = (cppVar_24326 << 3) | 7;
	cppVar_24327 = (cppVar_24327 & cppMask_un_5_);
	BIT_VEC cppVar_24328 = (0 << 5) | cppVar_24327;
	cppVar_24328 = (cppVar_24328 & cppMask_un_8_);
	bool cppVar_24330 = (cppVar_24328 == 144);
	BIT_VEC cppVar_24331 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24332 = (cppVar_24331 << 3) | 7;
	cppVar_24332 = (cppVar_24332 & cppMask_un_5_);
	BIT_VEC cppVar_24333 = (0 << 5) | cppVar_24332;
	cppVar_24333 = (cppVar_24333 & cppMask_un_8_);
	bool cppVar_24335 = (cppVar_24333 == 152);
	BIT_VEC cppVar_24336 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24337 = (cppVar_24336 << 3) | 7;
	cppVar_24337 = (cppVar_24337 & cppMask_un_5_);
	BIT_VEC cppVar_24338 = (0 << 5) | cppVar_24337;
	cppVar_24338 = (cppVar_24338 & cppMask_un_8_);
	bool cppVar_24340 = (cppVar_24338 == 153);
	BIT_VEC cppVar_24341 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24342 = (cppVar_24341 << 3) | 7;
	cppVar_24342 = (cppVar_24342 & cppMask_un_5_);
	BIT_VEC cppVar_24343 = (0 << 5) | cppVar_24342;
	cppVar_24343 = (cppVar_24343 & cppMask_un_8_);
	bool cppVar_24345 = (cppVar_24343 == 160);
	BIT_VEC cppVar_24346 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24347 = (cppVar_24346 << 3) | 7;
	cppVar_24347 = (cppVar_24347 & cppMask_un_5_);
	BIT_VEC cppVar_24348 = (0 << 5) | cppVar_24347;
	cppVar_24348 = (cppVar_24348 & cppMask_un_8_);
	bool cppVar_24350 = (cppVar_24348 == 168);
	BIT_VEC cppVar_24351 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24352 = (cppVar_24351 << 3) | 7;
	cppVar_24352 = (cppVar_24352 & cppMask_un_5_);
	BIT_VEC cppVar_24353 = (0 << 5) | cppVar_24352;
	cppVar_24353 = (cppVar_24353 & cppMask_un_8_);
	bool cppVar_24355 = (cppVar_24353 == 176);
	BIT_VEC cppVar_24356 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24357 = (cppVar_24356 << 3) | 7;
	cppVar_24357 = (cppVar_24357 & cppMask_un_5_);
	BIT_VEC cppVar_24358 = (0 << 5) | cppVar_24357;
	cppVar_24358 = (cppVar_24358 & cppMask_un_8_);
	bool cppVar_24360 = (cppVar_24358 == 184);
	BIT_VEC cppVar_24361 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24362 = (cppVar_24361 << 3) | 7;
	cppVar_24362 = (cppVar_24362 & cppMask_un_5_);
	BIT_VEC cppVar_24363 = (0 << 5) | cppVar_24362;
	cppVar_24363 = (cppVar_24363 & cppMask_un_8_);
	bool cppVar_24365 = (cppVar_24363 == 208);
	BIT_VEC cppVar_24366 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24367 = (cppVar_24366 << 3) | 7;
	cppVar_24367 = (cppVar_24367 & cppMask_un_5_);
	BIT_VEC cppVar_24368 = (0 << 5) | cppVar_24367;
	cppVar_24368 = (cppVar_24368 & cppMask_un_8_);
	bool cppVar_24370 = (cppVar_24368 == 224);
	BIT_VEC cppVar_24371 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24372 = (cppVar_24371 << 3) | 7;
	cppVar_24372 = (cppVar_24372 & cppMask_un_5_);
	BIT_VEC cppVar_24373 = (0 << 5) | cppVar_24372;
	cppVar_24373 = (cppVar_24373 & cppMask_un_8_);
	bool cppVar_24375 = (cppVar_24373 == 240);
	BIT_VEC cppVar_24377 = (cppVar_24375) ? B : 0;
	BIT_VEC cppVar_24378 = (cppVar_24370) ? ACC : cppVar_24377;
	BIT_VEC cppVar_24379 = (cppVar_24365) ? PSW : cppVar_24378;
	BIT_VEC cppVar_24380 = (cppVar_24360) ? IP : cppVar_24379;
	BIT_VEC cppVar_24381 = (cppVar_24355) ? P3 : cppVar_24380;
	BIT_VEC cppVar_24382 = (cppVar_24350) ? IE : cppVar_24381;
	BIT_VEC cppVar_24383 = (cppVar_24345) ? P2 : cppVar_24382;
	BIT_VEC cppVar_24384 = (cppVar_24340) ? SBUF : cppVar_24383;
	BIT_VEC cppVar_24385 = (cppVar_24335) ? SCON : cppVar_24384;
	BIT_VEC cppVar_24386 = (cppVar_24330) ? P1 : cppVar_24385;
	BIT_VEC cppVar_24387 = (cppVar_24325) ? TH1 : cppVar_24386;
	BIT_VEC cppVar_24388 = (cppVar_24320) ? TL1 : cppVar_24387;
	BIT_VEC cppVar_24389 = (cppVar_24315) ? TH0 : cppVar_24388;
	BIT_VEC cppVar_24390 = (cppVar_24310) ? TL0 : cppVar_24389;
	BIT_VEC cppVar_24391 = (cppVar_24305) ? TMOD : cppVar_24390;
	BIT_VEC cppVar_24392 = (cppVar_24300) ? TCON : cppVar_24391;
	BIT_VEC cppVar_24393 = (cppVar_24295) ? PCON : cppVar_24392;
	BIT_VEC cppVar_24394 = (cppVar_24290) ? DPH : cppVar_24393;
	BIT_VEC cppVar_24395 = (cppVar_24285) ? DPL : cppVar_24394;
	BIT_VEC cppVar_24396 = (cppVar_24280) ? SP : cppVar_24395;
	BIT_VEC cppVar_24397 = (cppVar_24275) ? P0 : cppVar_24396;
	BIT_VEC cppVar_24398 = (cppVar_24266) ? cppVar_24270 : cppVar_24397;
	BIT_VEC cppVar_24399 = (cppVar_24258) ? cppVar_24398 : P0;
	BIT_VEC cppVar_24400 = ROM.rd(PC);
	bool cppVar_24402 = (cppVar_24400 == 142);
	BIT_VEC cppVar_24404 = PC + 1;
	cppVar_24404 = (cppVar_24404 & cppMask_un_16_);
	BIT_VEC cppVar_24405 = ROM.rd(cppVar_24404);
	bool cppVar_24407 = (cppVar_24405 == 128);
	BIT_VEC cppVar_24409 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24411 = (cppVar_24409 << 3) | 6;
	cppVar_24411 = (cppVar_24411 & cppMask_un_5_);
	BIT_VEC cppVar_24412 = (0 << 5) | cppVar_24411;
	cppVar_24412 = (cppVar_24412 & cppMask_un_8_);
	BIT_VEC cppVar_24413 = (cppVar_24412 >> 7) & cppMask_un_1_;
	bool cppVar_24415 = (cppVar_24413 == 0);
	BIT_VEC cppVar_24416 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24417 = (cppVar_24416 << 3) | 6;
	cppVar_24417 = (cppVar_24417 & cppMask_un_5_);
	BIT_VEC cppVar_24418 = (0 << 5) | cppVar_24417;
	cppVar_24418 = (cppVar_24418 & cppMask_un_8_);
	BIT_VEC cppVar_24419 = IRAM.rd(cppVar_24418);
	BIT_VEC cppVar_24420 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24421 = (cppVar_24420 << 3) | 6;
	cppVar_24421 = (cppVar_24421 & cppMask_un_5_);
	BIT_VEC cppVar_24422 = (0 << 5) | cppVar_24421;
	cppVar_24422 = (cppVar_24422 & cppMask_un_8_);
	bool cppVar_24424 = (cppVar_24422 == 128);
	BIT_VEC cppVar_24425 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24426 = (cppVar_24425 << 3) | 6;
	cppVar_24426 = (cppVar_24426 & cppMask_un_5_);
	BIT_VEC cppVar_24427 = (0 << 5) | cppVar_24426;
	cppVar_24427 = (cppVar_24427 & cppMask_un_8_);
	bool cppVar_24429 = (cppVar_24427 == 129);
	BIT_VEC cppVar_24430 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24431 = (cppVar_24430 << 3) | 6;
	cppVar_24431 = (cppVar_24431 & cppMask_un_5_);
	BIT_VEC cppVar_24432 = (0 << 5) | cppVar_24431;
	cppVar_24432 = (cppVar_24432 & cppMask_un_8_);
	bool cppVar_24434 = (cppVar_24432 == 130);
	BIT_VEC cppVar_24435 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24436 = (cppVar_24435 << 3) | 6;
	cppVar_24436 = (cppVar_24436 & cppMask_un_5_);
	BIT_VEC cppVar_24437 = (0 << 5) | cppVar_24436;
	cppVar_24437 = (cppVar_24437 & cppMask_un_8_);
	bool cppVar_24439 = (cppVar_24437 == 131);
	BIT_VEC cppVar_24440 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24441 = (cppVar_24440 << 3) | 6;
	cppVar_24441 = (cppVar_24441 & cppMask_un_5_);
	BIT_VEC cppVar_24442 = (0 << 5) | cppVar_24441;
	cppVar_24442 = (cppVar_24442 & cppMask_un_8_);
	bool cppVar_24444 = (cppVar_24442 == 135);
	BIT_VEC cppVar_24445 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24446 = (cppVar_24445 << 3) | 6;
	cppVar_24446 = (cppVar_24446 & cppMask_un_5_);
	BIT_VEC cppVar_24447 = (0 << 5) | cppVar_24446;
	cppVar_24447 = (cppVar_24447 & cppMask_un_8_);
	bool cppVar_24449 = (cppVar_24447 == 136);
	BIT_VEC cppVar_24450 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24451 = (cppVar_24450 << 3) | 6;
	cppVar_24451 = (cppVar_24451 & cppMask_un_5_);
	BIT_VEC cppVar_24452 = (0 << 5) | cppVar_24451;
	cppVar_24452 = (cppVar_24452 & cppMask_un_8_);
	bool cppVar_24454 = (cppVar_24452 == 137);
	BIT_VEC cppVar_24455 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24456 = (cppVar_24455 << 3) | 6;
	cppVar_24456 = (cppVar_24456 & cppMask_un_5_);
	BIT_VEC cppVar_24457 = (0 << 5) | cppVar_24456;
	cppVar_24457 = (cppVar_24457 & cppMask_un_8_);
	bool cppVar_24459 = (cppVar_24457 == 138);
	BIT_VEC cppVar_24460 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24461 = (cppVar_24460 << 3) | 6;
	cppVar_24461 = (cppVar_24461 & cppMask_un_5_);
	BIT_VEC cppVar_24462 = (0 << 5) | cppVar_24461;
	cppVar_24462 = (cppVar_24462 & cppMask_un_8_);
	bool cppVar_24464 = (cppVar_24462 == 140);
	BIT_VEC cppVar_24465 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24466 = (cppVar_24465 << 3) | 6;
	cppVar_24466 = (cppVar_24466 & cppMask_un_5_);
	BIT_VEC cppVar_24467 = (0 << 5) | cppVar_24466;
	cppVar_24467 = (cppVar_24467 & cppMask_un_8_);
	bool cppVar_24469 = (cppVar_24467 == 139);
	BIT_VEC cppVar_24470 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24471 = (cppVar_24470 << 3) | 6;
	cppVar_24471 = (cppVar_24471 & cppMask_un_5_);
	BIT_VEC cppVar_24472 = (0 << 5) | cppVar_24471;
	cppVar_24472 = (cppVar_24472 & cppMask_un_8_);
	bool cppVar_24474 = (cppVar_24472 == 141);
	BIT_VEC cppVar_24475 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24476 = (cppVar_24475 << 3) | 6;
	cppVar_24476 = (cppVar_24476 & cppMask_un_5_);
	BIT_VEC cppVar_24477 = (0 << 5) | cppVar_24476;
	cppVar_24477 = (cppVar_24477 & cppMask_un_8_);
	bool cppVar_24479 = (cppVar_24477 == 144);
	BIT_VEC cppVar_24480 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24481 = (cppVar_24480 << 3) | 6;
	cppVar_24481 = (cppVar_24481 & cppMask_un_5_);
	BIT_VEC cppVar_24482 = (0 << 5) | cppVar_24481;
	cppVar_24482 = (cppVar_24482 & cppMask_un_8_);
	bool cppVar_24484 = (cppVar_24482 == 152);
	BIT_VEC cppVar_24485 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24486 = (cppVar_24485 << 3) | 6;
	cppVar_24486 = (cppVar_24486 & cppMask_un_5_);
	BIT_VEC cppVar_24487 = (0 << 5) | cppVar_24486;
	cppVar_24487 = (cppVar_24487 & cppMask_un_8_);
	bool cppVar_24489 = (cppVar_24487 == 153);
	BIT_VEC cppVar_24490 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24491 = (cppVar_24490 << 3) | 6;
	cppVar_24491 = (cppVar_24491 & cppMask_un_5_);
	BIT_VEC cppVar_24492 = (0 << 5) | cppVar_24491;
	cppVar_24492 = (cppVar_24492 & cppMask_un_8_);
	bool cppVar_24494 = (cppVar_24492 == 160);
	BIT_VEC cppVar_24495 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24496 = (cppVar_24495 << 3) | 6;
	cppVar_24496 = (cppVar_24496 & cppMask_un_5_);
	BIT_VEC cppVar_24497 = (0 << 5) | cppVar_24496;
	cppVar_24497 = (cppVar_24497 & cppMask_un_8_);
	bool cppVar_24499 = (cppVar_24497 == 168);
	BIT_VEC cppVar_24500 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24501 = (cppVar_24500 << 3) | 6;
	cppVar_24501 = (cppVar_24501 & cppMask_un_5_);
	BIT_VEC cppVar_24502 = (0 << 5) | cppVar_24501;
	cppVar_24502 = (cppVar_24502 & cppMask_un_8_);
	bool cppVar_24504 = (cppVar_24502 == 176);
	BIT_VEC cppVar_24505 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24506 = (cppVar_24505 << 3) | 6;
	cppVar_24506 = (cppVar_24506 & cppMask_un_5_);
	BIT_VEC cppVar_24507 = (0 << 5) | cppVar_24506;
	cppVar_24507 = (cppVar_24507 & cppMask_un_8_);
	bool cppVar_24509 = (cppVar_24507 == 184);
	BIT_VEC cppVar_24510 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24511 = (cppVar_24510 << 3) | 6;
	cppVar_24511 = (cppVar_24511 & cppMask_un_5_);
	BIT_VEC cppVar_24512 = (0 << 5) | cppVar_24511;
	cppVar_24512 = (cppVar_24512 & cppMask_un_8_);
	bool cppVar_24514 = (cppVar_24512 == 208);
	BIT_VEC cppVar_24515 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24516 = (cppVar_24515 << 3) | 6;
	cppVar_24516 = (cppVar_24516 & cppMask_un_5_);
	BIT_VEC cppVar_24517 = (0 << 5) | cppVar_24516;
	cppVar_24517 = (cppVar_24517 & cppMask_un_8_);
	bool cppVar_24519 = (cppVar_24517 == 224);
	BIT_VEC cppVar_24520 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24521 = (cppVar_24520 << 3) | 6;
	cppVar_24521 = (cppVar_24521 & cppMask_un_5_);
	BIT_VEC cppVar_24522 = (0 << 5) | cppVar_24521;
	cppVar_24522 = (cppVar_24522 & cppMask_un_8_);
	bool cppVar_24524 = (cppVar_24522 == 240);
	BIT_VEC cppVar_24526 = (cppVar_24524) ? B : 0;
	BIT_VEC cppVar_24527 = (cppVar_24519) ? ACC : cppVar_24526;
	BIT_VEC cppVar_24528 = (cppVar_24514) ? PSW : cppVar_24527;
	BIT_VEC cppVar_24529 = (cppVar_24509) ? IP : cppVar_24528;
	BIT_VEC cppVar_24530 = (cppVar_24504) ? P3 : cppVar_24529;
	BIT_VEC cppVar_24531 = (cppVar_24499) ? IE : cppVar_24530;
	BIT_VEC cppVar_24532 = (cppVar_24494) ? P2 : cppVar_24531;
	BIT_VEC cppVar_24533 = (cppVar_24489) ? SBUF : cppVar_24532;
	BIT_VEC cppVar_24534 = (cppVar_24484) ? SCON : cppVar_24533;
	BIT_VEC cppVar_24535 = (cppVar_24479) ? P1 : cppVar_24534;
	BIT_VEC cppVar_24536 = (cppVar_24474) ? TH1 : cppVar_24535;
	BIT_VEC cppVar_24537 = (cppVar_24469) ? TL1 : cppVar_24536;
	BIT_VEC cppVar_24538 = (cppVar_24464) ? TH0 : cppVar_24537;
	BIT_VEC cppVar_24539 = (cppVar_24459) ? TL0 : cppVar_24538;
	BIT_VEC cppVar_24540 = (cppVar_24454) ? TMOD : cppVar_24539;
	BIT_VEC cppVar_24541 = (cppVar_24449) ? TCON : cppVar_24540;
	BIT_VEC cppVar_24542 = (cppVar_24444) ? PCON : cppVar_24541;
	BIT_VEC cppVar_24543 = (cppVar_24439) ? DPH : cppVar_24542;
	BIT_VEC cppVar_24544 = (cppVar_24434) ? DPL : cppVar_24543;
	BIT_VEC cppVar_24545 = (cppVar_24429) ? SP : cppVar_24544;
	BIT_VEC cppVar_24546 = (cppVar_24424) ? P0 : cppVar_24545;
	BIT_VEC cppVar_24547 = (cppVar_24415) ? cppVar_24419 : cppVar_24546;
	BIT_VEC cppVar_24548 = (cppVar_24407) ? cppVar_24547 : P0;
	BIT_VEC cppVar_24549 = ROM.rd(PC);
	bool cppVar_24551 = (cppVar_24549 == 141);
	BIT_VEC cppVar_24553 = PC + 1;
	cppVar_24553 = (cppVar_24553 & cppMask_un_16_);
	BIT_VEC cppVar_24554 = ROM.rd(cppVar_24553);
	bool cppVar_24556 = (cppVar_24554 == 128);
	BIT_VEC cppVar_24558 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24560 = (cppVar_24558 << 3) | 5;
	cppVar_24560 = (cppVar_24560 & cppMask_un_5_);
	BIT_VEC cppVar_24561 = (0 << 5) | cppVar_24560;
	cppVar_24561 = (cppVar_24561 & cppMask_un_8_);
	BIT_VEC cppVar_24562 = (cppVar_24561 >> 7) & cppMask_un_1_;
	bool cppVar_24564 = (cppVar_24562 == 0);
	BIT_VEC cppVar_24565 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24566 = (cppVar_24565 << 3) | 5;
	cppVar_24566 = (cppVar_24566 & cppMask_un_5_);
	BIT_VEC cppVar_24567 = (0 << 5) | cppVar_24566;
	cppVar_24567 = (cppVar_24567 & cppMask_un_8_);
	BIT_VEC cppVar_24568 = IRAM.rd(cppVar_24567);
	BIT_VEC cppVar_24569 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24570 = (cppVar_24569 << 3) | 5;
	cppVar_24570 = (cppVar_24570 & cppMask_un_5_);
	BIT_VEC cppVar_24571 = (0 << 5) | cppVar_24570;
	cppVar_24571 = (cppVar_24571 & cppMask_un_8_);
	bool cppVar_24573 = (cppVar_24571 == 128);
	BIT_VEC cppVar_24574 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24575 = (cppVar_24574 << 3) | 5;
	cppVar_24575 = (cppVar_24575 & cppMask_un_5_);
	BIT_VEC cppVar_24576 = (0 << 5) | cppVar_24575;
	cppVar_24576 = (cppVar_24576 & cppMask_un_8_);
	bool cppVar_24578 = (cppVar_24576 == 129);
	BIT_VEC cppVar_24579 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24580 = (cppVar_24579 << 3) | 5;
	cppVar_24580 = (cppVar_24580 & cppMask_un_5_);
	BIT_VEC cppVar_24581 = (0 << 5) | cppVar_24580;
	cppVar_24581 = (cppVar_24581 & cppMask_un_8_);
	bool cppVar_24583 = (cppVar_24581 == 130);
	BIT_VEC cppVar_24584 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24585 = (cppVar_24584 << 3) | 5;
	cppVar_24585 = (cppVar_24585 & cppMask_un_5_);
	BIT_VEC cppVar_24586 = (0 << 5) | cppVar_24585;
	cppVar_24586 = (cppVar_24586 & cppMask_un_8_);
	bool cppVar_24588 = (cppVar_24586 == 131);
	BIT_VEC cppVar_24589 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24590 = (cppVar_24589 << 3) | 5;
	cppVar_24590 = (cppVar_24590 & cppMask_un_5_);
	BIT_VEC cppVar_24591 = (0 << 5) | cppVar_24590;
	cppVar_24591 = (cppVar_24591 & cppMask_un_8_);
	bool cppVar_24593 = (cppVar_24591 == 135);
	BIT_VEC cppVar_24594 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24595 = (cppVar_24594 << 3) | 5;
	cppVar_24595 = (cppVar_24595 & cppMask_un_5_);
	BIT_VEC cppVar_24596 = (0 << 5) | cppVar_24595;
	cppVar_24596 = (cppVar_24596 & cppMask_un_8_);
	bool cppVar_24598 = (cppVar_24596 == 136);
	BIT_VEC cppVar_24599 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24600 = (cppVar_24599 << 3) | 5;
	cppVar_24600 = (cppVar_24600 & cppMask_un_5_);
	BIT_VEC cppVar_24601 = (0 << 5) | cppVar_24600;
	cppVar_24601 = (cppVar_24601 & cppMask_un_8_);
	bool cppVar_24603 = (cppVar_24601 == 137);
	BIT_VEC cppVar_24604 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24605 = (cppVar_24604 << 3) | 5;
	cppVar_24605 = (cppVar_24605 & cppMask_un_5_);
	BIT_VEC cppVar_24606 = (0 << 5) | cppVar_24605;
	cppVar_24606 = (cppVar_24606 & cppMask_un_8_);
	bool cppVar_24608 = (cppVar_24606 == 138);
	BIT_VEC cppVar_24609 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24610 = (cppVar_24609 << 3) | 5;
	cppVar_24610 = (cppVar_24610 & cppMask_un_5_);
	BIT_VEC cppVar_24611 = (0 << 5) | cppVar_24610;
	cppVar_24611 = (cppVar_24611 & cppMask_un_8_);
	bool cppVar_24613 = (cppVar_24611 == 140);
	BIT_VEC cppVar_24614 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24615 = (cppVar_24614 << 3) | 5;
	cppVar_24615 = (cppVar_24615 & cppMask_un_5_);
	BIT_VEC cppVar_24616 = (0 << 5) | cppVar_24615;
	cppVar_24616 = (cppVar_24616 & cppMask_un_8_);
	bool cppVar_24618 = (cppVar_24616 == 139);
	BIT_VEC cppVar_24619 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24620 = (cppVar_24619 << 3) | 5;
	cppVar_24620 = (cppVar_24620 & cppMask_un_5_);
	BIT_VEC cppVar_24621 = (0 << 5) | cppVar_24620;
	cppVar_24621 = (cppVar_24621 & cppMask_un_8_);
	bool cppVar_24623 = (cppVar_24621 == 141);
	BIT_VEC cppVar_24624 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24625 = (cppVar_24624 << 3) | 5;
	cppVar_24625 = (cppVar_24625 & cppMask_un_5_);
	BIT_VEC cppVar_24626 = (0 << 5) | cppVar_24625;
	cppVar_24626 = (cppVar_24626 & cppMask_un_8_);
	bool cppVar_24628 = (cppVar_24626 == 144);
	BIT_VEC cppVar_24629 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24630 = (cppVar_24629 << 3) | 5;
	cppVar_24630 = (cppVar_24630 & cppMask_un_5_);
	BIT_VEC cppVar_24631 = (0 << 5) | cppVar_24630;
	cppVar_24631 = (cppVar_24631 & cppMask_un_8_);
	bool cppVar_24633 = (cppVar_24631 == 152);
	BIT_VEC cppVar_24634 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24635 = (cppVar_24634 << 3) | 5;
	cppVar_24635 = (cppVar_24635 & cppMask_un_5_);
	BIT_VEC cppVar_24636 = (0 << 5) | cppVar_24635;
	cppVar_24636 = (cppVar_24636 & cppMask_un_8_);
	bool cppVar_24638 = (cppVar_24636 == 153);
	BIT_VEC cppVar_24639 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24640 = (cppVar_24639 << 3) | 5;
	cppVar_24640 = (cppVar_24640 & cppMask_un_5_);
	BIT_VEC cppVar_24641 = (0 << 5) | cppVar_24640;
	cppVar_24641 = (cppVar_24641 & cppMask_un_8_);
	bool cppVar_24643 = (cppVar_24641 == 160);
	BIT_VEC cppVar_24644 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24645 = (cppVar_24644 << 3) | 5;
	cppVar_24645 = (cppVar_24645 & cppMask_un_5_);
	BIT_VEC cppVar_24646 = (0 << 5) | cppVar_24645;
	cppVar_24646 = (cppVar_24646 & cppMask_un_8_);
	bool cppVar_24648 = (cppVar_24646 == 168);
	BIT_VEC cppVar_24649 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24650 = (cppVar_24649 << 3) | 5;
	cppVar_24650 = (cppVar_24650 & cppMask_un_5_);
	BIT_VEC cppVar_24651 = (0 << 5) | cppVar_24650;
	cppVar_24651 = (cppVar_24651 & cppMask_un_8_);
	bool cppVar_24653 = (cppVar_24651 == 176);
	BIT_VEC cppVar_24654 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24655 = (cppVar_24654 << 3) | 5;
	cppVar_24655 = (cppVar_24655 & cppMask_un_5_);
	BIT_VEC cppVar_24656 = (0 << 5) | cppVar_24655;
	cppVar_24656 = (cppVar_24656 & cppMask_un_8_);
	bool cppVar_24658 = (cppVar_24656 == 184);
	BIT_VEC cppVar_24659 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24660 = (cppVar_24659 << 3) | 5;
	cppVar_24660 = (cppVar_24660 & cppMask_un_5_);
	BIT_VEC cppVar_24661 = (0 << 5) | cppVar_24660;
	cppVar_24661 = (cppVar_24661 & cppMask_un_8_);
	bool cppVar_24663 = (cppVar_24661 == 208);
	BIT_VEC cppVar_24664 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24665 = (cppVar_24664 << 3) | 5;
	cppVar_24665 = (cppVar_24665 & cppMask_un_5_);
	BIT_VEC cppVar_24666 = (0 << 5) | cppVar_24665;
	cppVar_24666 = (cppVar_24666 & cppMask_un_8_);
	bool cppVar_24668 = (cppVar_24666 == 224);
	BIT_VEC cppVar_24669 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24670 = (cppVar_24669 << 3) | 5;
	cppVar_24670 = (cppVar_24670 & cppMask_un_5_);
	BIT_VEC cppVar_24671 = (0 << 5) | cppVar_24670;
	cppVar_24671 = (cppVar_24671 & cppMask_un_8_);
	bool cppVar_24673 = (cppVar_24671 == 240);
	BIT_VEC cppVar_24675 = (cppVar_24673) ? B : 0;
	BIT_VEC cppVar_24676 = (cppVar_24668) ? ACC : cppVar_24675;
	BIT_VEC cppVar_24677 = (cppVar_24663) ? PSW : cppVar_24676;
	BIT_VEC cppVar_24678 = (cppVar_24658) ? IP : cppVar_24677;
	BIT_VEC cppVar_24679 = (cppVar_24653) ? P3 : cppVar_24678;
	BIT_VEC cppVar_24680 = (cppVar_24648) ? IE : cppVar_24679;
	BIT_VEC cppVar_24681 = (cppVar_24643) ? P2 : cppVar_24680;
	BIT_VEC cppVar_24682 = (cppVar_24638) ? SBUF : cppVar_24681;
	BIT_VEC cppVar_24683 = (cppVar_24633) ? SCON : cppVar_24682;
	BIT_VEC cppVar_24684 = (cppVar_24628) ? P1 : cppVar_24683;
	BIT_VEC cppVar_24685 = (cppVar_24623) ? TH1 : cppVar_24684;
	BIT_VEC cppVar_24686 = (cppVar_24618) ? TL1 : cppVar_24685;
	BIT_VEC cppVar_24687 = (cppVar_24613) ? TH0 : cppVar_24686;
	BIT_VEC cppVar_24688 = (cppVar_24608) ? TL0 : cppVar_24687;
	BIT_VEC cppVar_24689 = (cppVar_24603) ? TMOD : cppVar_24688;
	BIT_VEC cppVar_24690 = (cppVar_24598) ? TCON : cppVar_24689;
	BIT_VEC cppVar_24691 = (cppVar_24593) ? PCON : cppVar_24690;
	BIT_VEC cppVar_24692 = (cppVar_24588) ? DPH : cppVar_24691;
	BIT_VEC cppVar_24693 = (cppVar_24583) ? DPL : cppVar_24692;
	BIT_VEC cppVar_24694 = (cppVar_24578) ? SP : cppVar_24693;
	BIT_VEC cppVar_24695 = (cppVar_24573) ? P0 : cppVar_24694;
	BIT_VEC cppVar_24696 = (cppVar_24564) ? cppVar_24568 : cppVar_24695;
	BIT_VEC cppVar_24697 = (cppVar_24556) ? cppVar_24696 : P0;
	BIT_VEC cppVar_24698 = ROM.rd(PC);
	bool cppVar_24700 = (cppVar_24698 == 140);
	BIT_VEC cppVar_24702 = PC + 1;
	cppVar_24702 = (cppVar_24702 & cppMask_un_16_);
	BIT_VEC cppVar_24703 = ROM.rd(cppVar_24702);
	bool cppVar_24705 = (cppVar_24703 == 128);
	BIT_VEC cppVar_24707 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24709 = (cppVar_24707 << 3) | 4;
	cppVar_24709 = (cppVar_24709 & cppMask_un_5_);
	BIT_VEC cppVar_24710 = (0 << 5) | cppVar_24709;
	cppVar_24710 = (cppVar_24710 & cppMask_un_8_);
	BIT_VEC cppVar_24711 = (cppVar_24710 >> 7) & cppMask_un_1_;
	bool cppVar_24713 = (cppVar_24711 == 0);
	BIT_VEC cppVar_24714 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24715 = (cppVar_24714 << 3) | 4;
	cppVar_24715 = (cppVar_24715 & cppMask_un_5_);
	BIT_VEC cppVar_24716 = (0 << 5) | cppVar_24715;
	cppVar_24716 = (cppVar_24716 & cppMask_un_8_);
	BIT_VEC cppVar_24717 = IRAM.rd(cppVar_24716);
	BIT_VEC cppVar_24718 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24719 = (cppVar_24718 << 3) | 4;
	cppVar_24719 = (cppVar_24719 & cppMask_un_5_);
	BIT_VEC cppVar_24720 = (0 << 5) | cppVar_24719;
	cppVar_24720 = (cppVar_24720 & cppMask_un_8_);
	bool cppVar_24722 = (cppVar_24720 == 128);
	BIT_VEC cppVar_24723 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24724 = (cppVar_24723 << 3) | 4;
	cppVar_24724 = (cppVar_24724 & cppMask_un_5_);
	BIT_VEC cppVar_24725 = (0 << 5) | cppVar_24724;
	cppVar_24725 = (cppVar_24725 & cppMask_un_8_);
	bool cppVar_24727 = (cppVar_24725 == 129);
	BIT_VEC cppVar_24728 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24729 = (cppVar_24728 << 3) | 4;
	cppVar_24729 = (cppVar_24729 & cppMask_un_5_);
	BIT_VEC cppVar_24730 = (0 << 5) | cppVar_24729;
	cppVar_24730 = (cppVar_24730 & cppMask_un_8_);
	bool cppVar_24732 = (cppVar_24730 == 130);
	BIT_VEC cppVar_24733 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24734 = (cppVar_24733 << 3) | 4;
	cppVar_24734 = (cppVar_24734 & cppMask_un_5_);
	BIT_VEC cppVar_24735 = (0 << 5) | cppVar_24734;
	cppVar_24735 = (cppVar_24735 & cppMask_un_8_);
	bool cppVar_24737 = (cppVar_24735 == 131);
	BIT_VEC cppVar_24738 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24739 = (cppVar_24738 << 3) | 4;
	cppVar_24739 = (cppVar_24739 & cppMask_un_5_);
	BIT_VEC cppVar_24740 = (0 << 5) | cppVar_24739;
	cppVar_24740 = (cppVar_24740 & cppMask_un_8_);
	bool cppVar_24742 = (cppVar_24740 == 135);
	BIT_VEC cppVar_24743 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24744 = (cppVar_24743 << 3) | 4;
	cppVar_24744 = (cppVar_24744 & cppMask_un_5_);
	BIT_VEC cppVar_24745 = (0 << 5) | cppVar_24744;
	cppVar_24745 = (cppVar_24745 & cppMask_un_8_);
	bool cppVar_24747 = (cppVar_24745 == 136);
	BIT_VEC cppVar_24748 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24749 = (cppVar_24748 << 3) | 4;
	cppVar_24749 = (cppVar_24749 & cppMask_un_5_);
	BIT_VEC cppVar_24750 = (0 << 5) | cppVar_24749;
	cppVar_24750 = (cppVar_24750 & cppMask_un_8_);
	bool cppVar_24752 = (cppVar_24750 == 137);
	BIT_VEC cppVar_24753 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24754 = (cppVar_24753 << 3) | 4;
	cppVar_24754 = (cppVar_24754 & cppMask_un_5_);
	BIT_VEC cppVar_24755 = (0 << 5) | cppVar_24754;
	cppVar_24755 = (cppVar_24755 & cppMask_un_8_);
	bool cppVar_24757 = (cppVar_24755 == 138);
	BIT_VEC cppVar_24758 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24759 = (cppVar_24758 << 3) | 4;
	cppVar_24759 = (cppVar_24759 & cppMask_un_5_);
	BIT_VEC cppVar_24760 = (0 << 5) | cppVar_24759;
	cppVar_24760 = (cppVar_24760 & cppMask_un_8_);
	bool cppVar_24762 = (cppVar_24760 == 140);
	BIT_VEC cppVar_24763 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24764 = (cppVar_24763 << 3) | 4;
	cppVar_24764 = (cppVar_24764 & cppMask_un_5_);
	BIT_VEC cppVar_24765 = (0 << 5) | cppVar_24764;
	cppVar_24765 = (cppVar_24765 & cppMask_un_8_);
	bool cppVar_24767 = (cppVar_24765 == 139);
	BIT_VEC cppVar_24768 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24769 = (cppVar_24768 << 3) | 4;
	cppVar_24769 = (cppVar_24769 & cppMask_un_5_);
	BIT_VEC cppVar_24770 = (0 << 5) | cppVar_24769;
	cppVar_24770 = (cppVar_24770 & cppMask_un_8_);
	bool cppVar_24772 = (cppVar_24770 == 141);
	BIT_VEC cppVar_24773 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24774 = (cppVar_24773 << 3) | 4;
	cppVar_24774 = (cppVar_24774 & cppMask_un_5_);
	BIT_VEC cppVar_24775 = (0 << 5) | cppVar_24774;
	cppVar_24775 = (cppVar_24775 & cppMask_un_8_);
	bool cppVar_24777 = (cppVar_24775 == 144);
	BIT_VEC cppVar_24778 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24779 = (cppVar_24778 << 3) | 4;
	cppVar_24779 = (cppVar_24779 & cppMask_un_5_);
	BIT_VEC cppVar_24780 = (0 << 5) | cppVar_24779;
	cppVar_24780 = (cppVar_24780 & cppMask_un_8_);
	bool cppVar_24782 = (cppVar_24780 == 152);
	BIT_VEC cppVar_24783 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24784 = (cppVar_24783 << 3) | 4;
	cppVar_24784 = (cppVar_24784 & cppMask_un_5_);
	BIT_VEC cppVar_24785 = (0 << 5) | cppVar_24784;
	cppVar_24785 = (cppVar_24785 & cppMask_un_8_);
	bool cppVar_24787 = (cppVar_24785 == 153);
	BIT_VEC cppVar_24788 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24789 = (cppVar_24788 << 3) | 4;
	cppVar_24789 = (cppVar_24789 & cppMask_un_5_);
	BIT_VEC cppVar_24790 = (0 << 5) | cppVar_24789;
	cppVar_24790 = (cppVar_24790 & cppMask_un_8_);
	bool cppVar_24792 = (cppVar_24790 == 160);
	BIT_VEC cppVar_24793 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24794 = (cppVar_24793 << 3) | 4;
	cppVar_24794 = (cppVar_24794 & cppMask_un_5_);
	BIT_VEC cppVar_24795 = (0 << 5) | cppVar_24794;
	cppVar_24795 = (cppVar_24795 & cppMask_un_8_);
	bool cppVar_24797 = (cppVar_24795 == 168);
	BIT_VEC cppVar_24798 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24799 = (cppVar_24798 << 3) | 4;
	cppVar_24799 = (cppVar_24799 & cppMask_un_5_);
	BIT_VEC cppVar_24800 = (0 << 5) | cppVar_24799;
	cppVar_24800 = (cppVar_24800 & cppMask_un_8_);
	bool cppVar_24802 = (cppVar_24800 == 176);
	BIT_VEC cppVar_24803 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24804 = (cppVar_24803 << 3) | 4;
	cppVar_24804 = (cppVar_24804 & cppMask_un_5_);
	BIT_VEC cppVar_24805 = (0 << 5) | cppVar_24804;
	cppVar_24805 = (cppVar_24805 & cppMask_un_8_);
	bool cppVar_24807 = (cppVar_24805 == 184);
	BIT_VEC cppVar_24808 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24809 = (cppVar_24808 << 3) | 4;
	cppVar_24809 = (cppVar_24809 & cppMask_un_5_);
	BIT_VEC cppVar_24810 = (0 << 5) | cppVar_24809;
	cppVar_24810 = (cppVar_24810 & cppMask_un_8_);
	bool cppVar_24812 = (cppVar_24810 == 208);
	BIT_VEC cppVar_24813 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24814 = (cppVar_24813 << 3) | 4;
	cppVar_24814 = (cppVar_24814 & cppMask_un_5_);
	BIT_VEC cppVar_24815 = (0 << 5) | cppVar_24814;
	cppVar_24815 = (cppVar_24815 & cppMask_un_8_);
	bool cppVar_24817 = (cppVar_24815 == 224);
	BIT_VEC cppVar_24818 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24819 = (cppVar_24818 << 3) | 4;
	cppVar_24819 = (cppVar_24819 & cppMask_un_5_);
	BIT_VEC cppVar_24820 = (0 << 5) | cppVar_24819;
	cppVar_24820 = (cppVar_24820 & cppMask_un_8_);
	bool cppVar_24822 = (cppVar_24820 == 240);
	BIT_VEC cppVar_24824 = (cppVar_24822) ? B : 0;
	BIT_VEC cppVar_24825 = (cppVar_24817) ? ACC : cppVar_24824;
	BIT_VEC cppVar_24826 = (cppVar_24812) ? PSW : cppVar_24825;
	BIT_VEC cppVar_24827 = (cppVar_24807) ? IP : cppVar_24826;
	BIT_VEC cppVar_24828 = (cppVar_24802) ? P3 : cppVar_24827;
	BIT_VEC cppVar_24829 = (cppVar_24797) ? IE : cppVar_24828;
	BIT_VEC cppVar_24830 = (cppVar_24792) ? P2 : cppVar_24829;
	BIT_VEC cppVar_24831 = (cppVar_24787) ? SBUF : cppVar_24830;
	BIT_VEC cppVar_24832 = (cppVar_24782) ? SCON : cppVar_24831;
	BIT_VEC cppVar_24833 = (cppVar_24777) ? P1 : cppVar_24832;
	BIT_VEC cppVar_24834 = (cppVar_24772) ? TH1 : cppVar_24833;
	BIT_VEC cppVar_24835 = (cppVar_24767) ? TL1 : cppVar_24834;
	BIT_VEC cppVar_24836 = (cppVar_24762) ? TH0 : cppVar_24835;
	BIT_VEC cppVar_24837 = (cppVar_24757) ? TL0 : cppVar_24836;
	BIT_VEC cppVar_24838 = (cppVar_24752) ? TMOD : cppVar_24837;
	BIT_VEC cppVar_24839 = (cppVar_24747) ? TCON : cppVar_24838;
	BIT_VEC cppVar_24840 = (cppVar_24742) ? PCON : cppVar_24839;
	BIT_VEC cppVar_24841 = (cppVar_24737) ? DPH : cppVar_24840;
	BIT_VEC cppVar_24842 = (cppVar_24732) ? DPL : cppVar_24841;
	BIT_VEC cppVar_24843 = (cppVar_24727) ? SP : cppVar_24842;
	BIT_VEC cppVar_24844 = (cppVar_24722) ? P0 : cppVar_24843;
	BIT_VEC cppVar_24845 = (cppVar_24713) ? cppVar_24717 : cppVar_24844;
	BIT_VEC cppVar_24846 = (cppVar_24705) ? cppVar_24845 : P0;
	BIT_VEC cppVar_24847 = ROM.rd(PC);
	bool cppVar_24849 = (cppVar_24847 == 139);
	BIT_VEC cppVar_24851 = PC + 1;
	cppVar_24851 = (cppVar_24851 & cppMask_un_16_);
	BIT_VEC cppVar_24852 = ROM.rd(cppVar_24851);
	bool cppVar_24854 = (cppVar_24852 == 128);
	BIT_VEC cppVar_24856 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24858 = (cppVar_24856 << 3) | 3;
	cppVar_24858 = (cppVar_24858 & cppMask_un_5_);
	BIT_VEC cppVar_24859 = (0 << 5) | cppVar_24858;
	cppVar_24859 = (cppVar_24859 & cppMask_un_8_);
	BIT_VEC cppVar_24860 = (cppVar_24859 >> 7) & cppMask_un_1_;
	bool cppVar_24862 = (cppVar_24860 == 0);
	BIT_VEC cppVar_24863 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24864 = (cppVar_24863 << 3) | 3;
	cppVar_24864 = (cppVar_24864 & cppMask_un_5_);
	BIT_VEC cppVar_24865 = (0 << 5) | cppVar_24864;
	cppVar_24865 = (cppVar_24865 & cppMask_un_8_);
	BIT_VEC cppVar_24866 = IRAM.rd(cppVar_24865);
	BIT_VEC cppVar_24867 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24868 = (cppVar_24867 << 3) | 3;
	cppVar_24868 = (cppVar_24868 & cppMask_un_5_);
	BIT_VEC cppVar_24869 = (0 << 5) | cppVar_24868;
	cppVar_24869 = (cppVar_24869 & cppMask_un_8_);
	bool cppVar_24871 = (cppVar_24869 == 128);
	BIT_VEC cppVar_24872 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24873 = (cppVar_24872 << 3) | 3;
	cppVar_24873 = (cppVar_24873 & cppMask_un_5_);
	BIT_VEC cppVar_24874 = (0 << 5) | cppVar_24873;
	cppVar_24874 = (cppVar_24874 & cppMask_un_8_);
	bool cppVar_24876 = (cppVar_24874 == 129);
	BIT_VEC cppVar_24877 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24878 = (cppVar_24877 << 3) | 3;
	cppVar_24878 = (cppVar_24878 & cppMask_un_5_);
	BIT_VEC cppVar_24879 = (0 << 5) | cppVar_24878;
	cppVar_24879 = (cppVar_24879 & cppMask_un_8_);
	bool cppVar_24881 = (cppVar_24879 == 130);
	BIT_VEC cppVar_24882 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24883 = (cppVar_24882 << 3) | 3;
	cppVar_24883 = (cppVar_24883 & cppMask_un_5_);
	BIT_VEC cppVar_24884 = (0 << 5) | cppVar_24883;
	cppVar_24884 = (cppVar_24884 & cppMask_un_8_);
	bool cppVar_24886 = (cppVar_24884 == 131);
	BIT_VEC cppVar_24887 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24888 = (cppVar_24887 << 3) | 3;
	cppVar_24888 = (cppVar_24888 & cppMask_un_5_);
	BIT_VEC cppVar_24889 = (0 << 5) | cppVar_24888;
	cppVar_24889 = (cppVar_24889 & cppMask_un_8_);
	bool cppVar_24891 = (cppVar_24889 == 135);
	BIT_VEC cppVar_24892 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24893 = (cppVar_24892 << 3) | 3;
	cppVar_24893 = (cppVar_24893 & cppMask_un_5_);
	BIT_VEC cppVar_24894 = (0 << 5) | cppVar_24893;
	cppVar_24894 = (cppVar_24894 & cppMask_un_8_);
	bool cppVar_24896 = (cppVar_24894 == 136);
	BIT_VEC cppVar_24897 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24898 = (cppVar_24897 << 3) | 3;
	cppVar_24898 = (cppVar_24898 & cppMask_un_5_);
	BIT_VEC cppVar_24899 = (0 << 5) | cppVar_24898;
	cppVar_24899 = (cppVar_24899 & cppMask_un_8_);
	bool cppVar_24901 = (cppVar_24899 == 137);
	BIT_VEC cppVar_24902 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24903 = (cppVar_24902 << 3) | 3;
	cppVar_24903 = (cppVar_24903 & cppMask_un_5_);
	BIT_VEC cppVar_24904 = (0 << 5) | cppVar_24903;
	cppVar_24904 = (cppVar_24904 & cppMask_un_8_);
	bool cppVar_24906 = (cppVar_24904 == 138);
	BIT_VEC cppVar_24907 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24908 = (cppVar_24907 << 3) | 3;
	cppVar_24908 = (cppVar_24908 & cppMask_un_5_);
	BIT_VEC cppVar_24909 = (0 << 5) | cppVar_24908;
	cppVar_24909 = (cppVar_24909 & cppMask_un_8_);
	bool cppVar_24911 = (cppVar_24909 == 140);
	BIT_VEC cppVar_24912 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24913 = (cppVar_24912 << 3) | 3;
	cppVar_24913 = (cppVar_24913 & cppMask_un_5_);
	BIT_VEC cppVar_24914 = (0 << 5) | cppVar_24913;
	cppVar_24914 = (cppVar_24914 & cppMask_un_8_);
	bool cppVar_24916 = (cppVar_24914 == 139);
	BIT_VEC cppVar_24917 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24918 = (cppVar_24917 << 3) | 3;
	cppVar_24918 = (cppVar_24918 & cppMask_un_5_);
	BIT_VEC cppVar_24919 = (0 << 5) | cppVar_24918;
	cppVar_24919 = (cppVar_24919 & cppMask_un_8_);
	bool cppVar_24921 = (cppVar_24919 == 141);
	BIT_VEC cppVar_24922 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24923 = (cppVar_24922 << 3) | 3;
	cppVar_24923 = (cppVar_24923 & cppMask_un_5_);
	BIT_VEC cppVar_24924 = (0 << 5) | cppVar_24923;
	cppVar_24924 = (cppVar_24924 & cppMask_un_8_);
	bool cppVar_24926 = (cppVar_24924 == 144);
	BIT_VEC cppVar_24927 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24928 = (cppVar_24927 << 3) | 3;
	cppVar_24928 = (cppVar_24928 & cppMask_un_5_);
	BIT_VEC cppVar_24929 = (0 << 5) | cppVar_24928;
	cppVar_24929 = (cppVar_24929 & cppMask_un_8_);
	bool cppVar_24931 = (cppVar_24929 == 152);
	BIT_VEC cppVar_24932 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24933 = (cppVar_24932 << 3) | 3;
	cppVar_24933 = (cppVar_24933 & cppMask_un_5_);
	BIT_VEC cppVar_24934 = (0 << 5) | cppVar_24933;
	cppVar_24934 = (cppVar_24934 & cppMask_un_8_);
	bool cppVar_24936 = (cppVar_24934 == 153);
	BIT_VEC cppVar_24937 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24938 = (cppVar_24937 << 3) | 3;
	cppVar_24938 = (cppVar_24938 & cppMask_un_5_);
	BIT_VEC cppVar_24939 = (0 << 5) | cppVar_24938;
	cppVar_24939 = (cppVar_24939 & cppMask_un_8_);
	bool cppVar_24941 = (cppVar_24939 == 160);
	BIT_VEC cppVar_24942 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24943 = (cppVar_24942 << 3) | 3;
	cppVar_24943 = (cppVar_24943 & cppMask_un_5_);
	BIT_VEC cppVar_24944 = (0 << 5) | cppVar_24943;
	cppVar_24944 = (cppVar_24944 & cppMask_un_8_);
	bool cppVar_24946 = (cppVar_24944 == 168);
	BIT_VEC cppVar_24947 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24948 = (cppVar_24947 << 3) | 3;
	cppVar_24948 = (cppVar_24948 & cppMask_un_5_);
	BIT_VEC cppVar_24949 = (0 << 5) | cppVar_24948;
	cppVar_24949 = (cppVar_24949 & cppMask_un_8_);
	bool cppVar_24951 = (cppVar_24949 == 176);
	BIT_VEC cppVar_24952 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24953 = (cppVar_24952 << 3) | 3;
	cppVar_24953 = (cppVar_24953 & cppMask_un_5_);
	BIT_VEC cppVar_24954 = (0 << 5) | cppVar_24953;
	cppVar_24954 = (cppVar_24954 & cppMask_un_8_);
	bool cppVar_24956 = (cppVar_24954 == 184);
	BIT_VEC cppVar_24957 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24958 = (cppVar_24957 << 3) | 3;
	cppVar_24958 = (cppVar_24958 & cppMask_un_5_);
	BIT_VEC cppVar_24959 = (0 << 5) | cppVar_24958;
	cppVar_24959 = (cppVar_24959 & cppMask_un_8_);
	bool cppVar_24961 = (cppVar_24959 == 208);
	BIT_VEC cppVar_24962 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24963 = (cppVar_24962 << 3) | 3;
	cppVar_24963 = (cppVar_24963 & cppMask_un_5_);
	BIT_VEC cppVar_24964 = (0 << 5) | cppVar_24963;
	cppVar_24964 = (cppVar_24964 & cppMask_un_8_);
	bool cppVar_24966 = (cppVar_24964 == 224);
	BIT_VEC cppVar_24967 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_24968 = (cppVar_24967 << 3) | 3;
	cppVar_24968 = (cppVar_24968 & cppMask_un_5_);
	BIT_VEC cppVar_24969 = (0 << 5) | cppVar_24968;
	cppVar_24969 = (cppVar_24969 & cppMask_un_8_);
	bool cppVar_24971 = (cppVar_24969 == 240);
	BIT_VEC cppVar_24973 = (cppVar_24971) ? B : 0;
	BIT_VEC cppVar_24974 = (cppVar_24966) ? ACC : cppVar_24973;
	BIT_VEC cppVar_24975 = (cppVar_24961) ? PSW : cppVar_24974;
	BIT_VEC cppVar_24976 = (cppVar_24956) ? IP : cppVar_24975;
	BIT_VEC cppVar_24977 = (cppVar_24951) ? P3 : cppVar_24976;
	BIT_VEC cppVar_24978 = (cppVar_24946) ? IE : cppVar_24977;
	BIT_VEC cppVar_24979 = (cppVar_24941) ? P2 : cppVar_24978;
	BIT_VEC cppVar_24980 = (cppVar_24936) ? SBUF : cppVar_24979;
	BIT_VEC cppVar_24981 = (cppVar_24931) ? SCON : cppVar_24980;
	BIT_VEC cppVar_24982 = (cppVar_24926) ? P1 : cppVar_24981;
	BIT_VEC cppVar_24983 = (cppVar_24921) ? TH1 : cppVar_24982;
	BIT_VEC cppVar_24984 = (cppVar_24916) ? TL1 : cppVar_24983;
	BIT_VEC cppVar_24985 = (cppVar_24911) ? TH0 : cppVar_24984;
	BIT_VEC cppVar_24986 = (cppVar_24906) ? TL0 : cppVar_24985;
	BIT_VEC cppVar_24987 = (cppVar_24901) ? TMOD : cppVar_24986;
	BIT_VEC cppVar_24988 = (cppVar_24896) ? TCON : cppVar_24987;
	BIT_VEC cppVar_24989 = (cppVar_24891) ? PCON : cppVar_24988;
	BIT_VEC cppVar_24990 = (cppVar_24886) ? DPH : cppVar_24989;
	BIT_VEC cppVar_24991 = (cppVar_24881) ? DPL : cppVar_24990;
	BIT_VEC cppVar_24992 = (cppVar_24876) ? SP : cppVar_24991;
	BIT_VEC cppVar_24993 = (cppVar_24871) ? P0 : cppVar_24992;
	BIT_VEC cppVar_24994 = (cppVar_24862) ? cppVar_24866 : cppVar_24993;
	BIT_VEC cppVar_24995 = (cppVar_24854) ? cppVar_24994 : P0;
	BIT_VEC cppVar_24996 = ROM.rd(PC);
	bool cppVar_24998 = (cppVar_24996 == 138);
	BIT_VEC cppVar_25000 = PC + 1;
	cppVar_25000 = (cppVar_25000 & cppMask_un_16_);
	BIT_VEC cppVar_25001 = ROM.rd(cppVar_25000);
	bool cppVar_25003 = (cppVar_25001 == 128);
	BIT_VEC cppVar_25005 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25007 = (cppVar_25005 << 3) | 2;
	cppVar_25007 = (cppVar_25007 & cppMask_un_5_);
	BIT_VEC cppVar_25008 = (0 << 5) | cppVar_25007;
	cppVar_25008 = (cppVar_25008 & cppMask_un_8_);
	BIT_VEC cppVar_25009 = (cppVar_25008 >> 7) & cppMask_un_1_;
	bool cppVar_25011 = (cppVar_25009 == 0);
	BIT_VEC cppVar_25012 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25013 = (cppVar_25012 << 3) | 2;
	cppVar_25013 = (cppVar_25013 & cppMask_un_5_);
	BIT_VEC cppVar_25014 = (0 << 5) | cppVar_25013;
	cppVar_25014 = (cppVar_25014 & cppMask_un_8_);
	BIT_VEC cppVar_25015 = IRAM.rd(cppVar_25014);
	BIT_VEC cppVar_25016 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25017 = (cppVar_25016 << 3) | 2;
	cppVar_25017 = (cppVar_25017 & cppMask_un_5_);
	BIT_VEC cppVar_25018 = (0 << 5) | cppVar_25017;
	cppVar_25018 = (cppVar_25018 & cppMask_un_8_);
	bool cppVar_25020 = (cppVar_25018 == 128);
	BIT_VEC cppVar_25021 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25022 = (cppVar_25021 << 3) | 2;
	cppVar_25022 = (cppVar_25022 & cppMask_un_5_);
	BIT_VEC cppVar_25023 = (0 << 5) | cppVar_25022;
	cppVar_25023 = (cppVar_25023 & cppMask_un_8_);
	bool cppVar_25025 = (cppVar_25023 == 129);
	BIT_VEC cppVar_25026 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25027 = (cppVar_25026 << 3) | 2;
	cppVar_25027 = (cppVar_25027 & cppMask_un_5_);
	BIT_VEC cppVar_25028 = (0 << 5) | cppVar_25027;
	cppVar_25028 = (cppVar_25028 & cppMask_un_8_);
	bool cppVar_25030 = (cppVar_25028 == 130);
	BIT_VEC cppVar_25031 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25032 = (cppVar_25031 << 3) | 2;
	cppVar_25032 = (cppVar_25032 & cppMask_un_5_);
	BIT_VEC cppVar_25033 = (0 << 5) | cppVar_25032;
	cppVar_25033 = (cppVar_25033 & cppMask_un_8_);
	bool cppVar_25035 = (cppVar_25033 == 131);
	BIT_VEC cppVar_25036 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25037 = (cppVar_25036 << 3) | 2;
	cppVar_25037 = (cppVar_25037 & cppMask_un_5_);
	BIT_VEC cppVar_25038 = (0 << 5) | cppVar_25037;
	cppVar_25038 = (cppVar_25038 & cppMask_un_8_);
	bool cppVar_25040 = (cppVar_25038 == 135);
	BIT_VEC cppVar_25041 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25042 = (cppVar_25041 << 3) | 2;
	cppVar_25042 = (cppVar_25042 & cppMask_un_5_);
	BIT_VEC cppVar_25043 = (0 << 5) | cppVar_25042;
	cppVar_25043 = (cppVar_25043 & cppMask_un_8_);
	bool cppVar_25045 = (cppVar_25043 == 136);
	BIT_VEC cppVar_25046 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25047 = (cppVar_25046 << 3) | 2;
	cppVar_25047 = (cppVar_25047 & cppMask_un_5_);
	BIT_VEC cppVar_25048 = (0 << 5) | cppVar_25047;
	cppVar_25048 = (cppVar_25048 & cppMask_un_8_);
	bool cppVar_25050 = (cppVar_25048 == 137);
	BIT_VEC cppVar_25051 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25052 = (cppVar_25051 << 3) | 2;
	cppVar_25052 = (cppVar_25052 & cppMask_un_5_);
	BIT_VEC cppVar_25053 = (0 << 5) | cppVar_25052;
	cppVar_25053 = (cppVar_25053 & cppMask_un_8_);
	bool cppVar_25055 = (cppVar_25053 == 138);
	BIT_VEC cppVar_25056 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25057 = (cppVar_25056 << 3) | 2;
	cppVar_25057 = (cppVar_25057 & cppMask_un_5_);
	BIT_VEC cppVar_25058 = (0 << 5) | cppVar_25057;
	cppVar_25058 = (cppVar_25058 & cppMask_un_8_);
	bool cppVar_25060 = (cppVar_25058 == 140);
	BIT_VEC cppVar_25061 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25062 = (cppVar_25061 << 3) | 2;
	cppVar_25062 = (cppVar_25062 & cppMask_un_5_);
	BIT_VEC cppVar_25063 = (0 << 5) | cppVar_25062;
	cppVar_25063 = (cppVar_25063 & cppMask_un_8_);
	bool cppVar_25065 = (cppVar_25063 == 139);
	BIT_VEC cppVar_25066 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25067 = (cppVar_25066 << 3) | 2;
	cppVar_25067 = (cppVar_25067 & cppMask_un_5_);
	BIT_VEC cppVar_25068 = (0 << 5) | cppVar_25067;
	cppVar_25068 = (cppVar_25068 & cppMask_un_8_);
	bool cppVar_25070 = (cppVar_25068 == 141);
	BIT_VEC cppVar_25071 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25072 = (cppVar_25071 << 3) | 2;
	cppVar_25072 = (cppVar_25072 & cppMask_un_5_);
	BIT_VEC cppVar_25073 = (0 << 5) | cppVar_25072;
	cppVar_25073 = (cppVar_25073 & cppMask_un_8_);
	bool cppVar_25075 = (cppVar_25073 == 144);
	BIT_VEC cppVar_25076 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25077 = (cppVar_25076 << 3) | 2;
	cppVar_25077 = (cppVar_25077 & cppMask_un_5_);
	BIT_VEC cppVar_25078 = (0 << 5) | cppVar_25077;
	cppVar_25078 = (cppVar_25078 & cppMask_un_8_);
	bool cppVar_25080 = (cppVar_25078 == 152);
	BIT_VEC cppVar_25081 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25082 = (cppVar_25081 << 3) | 2;
	cppVar_25082 = (cppVar_25082 & cppMask_un_5_);
	BIT_VEC cppVar_25083 = (0 << 5) | cppVar_25082;
	cppVar_25083 = (cppVar_25083 & cppMask_un_8_);
	bool cppVar_25085 = (cppVar_25083 == 153);
	BIT_VEC cppVar_25086 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25087 = (cppVar_25086 << 3) | 2;
	cppVar_25087 = (cppVar_25087 & cppMask_un_5_);
	BIT_VEC cppVar_25088 = (0 << 5) | cppVar_25087;
	cppVar_25088 = (cppVar_25088 & cppMask_un_8_);
	bool cppVar_25090 = (cppVar_25088 == 160);
	BIT_VEC cppVar_25091 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25092 = (cppVar_25091 << 3) | 2;
	cppVar_25092 = (cppVar_25092 & cppMask_un_5_);
	BIT_VEC cppVar_25093 = (0 << 5) | cppVar_25092;
	cppVar_25093 = (cppVar_25093 & cppMask_un_8_);
	bool cppVar_25095 = (cppVar_25093 == 168);
	BIT_VEC cppVar_25096 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25097 = (cppVar_25096 << 3) | 2;
	cppVar_25097 = (cppVar_25097 & cppMask_un_5_);
	BIT_VEC cppVar_25098 = (0 << 5) | cppVar_25097;
	cppVar_25098 = (cppVar_25098 & cppMask_un_8_);
	bool cppVar_25100 = (cppVar_25098 == 176);
	BIT_VEC cppVar_25101 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25102 = (cppVar_25101 << 3) | 2;
	cppVar_25102 = (cppVar_25102 & cppMask_un_5_);
	BIT_VEC cppVar_25103 = (0 << 5) | cppVar_25102;
	cppVar_25103 = (cppVar_25103 & cppMask_un_8_);
	bool cppVar_25105 = (cppVar_25103 == 184);
	BIT_VEC cppVar_25106 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25107 = (cppVar_25106 << 3) | 2;
	cppVar_25107 = (cppVar_25107 & cppMask_un_5_);
	BIT_VEC cppVar_25108 = (0 << 5) | cppVar_25107;
	cppVar_25108 = (cppVar_25108 & cppMask_un_8_);
	bool cppVar_25110 = (cppVar_25108 == 208);
	BIT_VEC cppVar_25111 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25112 = (cppVar_25111 << 3) | 2;
	cppVar_25112 = (cppVar_25112 & cppMask_un_5_);
	BIT_VEC cppVar_25113 = (0 << 5) | cppVar_25112;
	cppVar_25113 = (cppVar_25113 & cppMask_un_8_);
	bool cppVar_25115 = (cppVar_25113 == 224);
	BIT_VEC cppVar_25116 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25117 = (cppVar_25116 << 3) | 2;
	cppVar_25117 = (cppVar_25117 & cppMask_un_5_);
	BIT_VEC cppVar_25118 = (0 << 5) | cppVar_25117;
	cppVar_25118 = (cppVar_25118 & cppMask_un_8_);
	bool cppVar_25120 = (cppVar_25118 == 240);
	BIT_VEC cppVar_25122 = (cppVar_25120) ? B : 0;
	BIT_VEC cppVar_25123 = (cppVar_25115) ? ACC : cppVar_25122;
	BIT_VEC cppVar_25124 = (cppVar_25110) ? PSW : cppVar_25123;
	BIT_VEC cppVar_25125 = (cppVar_25105) ? IP : cppVar_25124;
	BIT_VEC cppVar_25126 = (cppVar_25100) ? P3 : cppVar_25125;
	BIT_VEC cppVar_25127 = (cppVar_25095) ? IE : cppVar_25126;
	BIT_VEC cppVar_25128 = (cppVar_25090) ? P2 : cppVar_25127;
	BIT_VEC cppVar_25129 = (cppVar_25085) ? SBUF : cppVar_25128;
	BIT_VEC cppVar_25130 = (cppVar_25080) ? SCON : cppVar_25129;
	BIT_VEC cppVar_25131 = (cppVar_25075) ? P1 : cppVar_25130;
	BIT_VEC cppVar_25132 = (cppVar_25070) ? TH1 : cppVar_25131;
	BIT_VEC cppVar_25133 = (cppVar_25065) ? TL1 : cppVar_25132;
	BIT_VEC cppVar_25134 = (cppVar_25060) ? TH0 : cppVar_25133;
	BIT_VEC cppVar_25135 = (cppVar_25055) ? TL0 : cppVar_25134;
	BIT_VEC cppVar_25136 = (cppVar_25050) ? TMOD : cppVar_25135;
	BIT_VEC cppVar_25137 = (cppVar_25045) ? TCON : cppVar_25136;
	BIT_VEC cppVar_25138 = (cppVar_25040) ? PCON : cppVar_25137;
	BIT_VEC cppVar_25139 = (cppVar_25035) ? DPH : cppVar_25138;
	BIT_VEC cppVar_25140 = (cppVar_25030) ? DPL : cppVar_25139;
	BIT_VEC cppVar_25141 = (cppVar_25025) ? SP : cppVar_25140;
	BIT_VEC cppVar_25142 = (cppVar_25020) ? P0 : cppVar_25141;
	BIT_VEC cppVar_25143 = (cppVar_25011) ? cppVar_25015 : cppVar_25142;
	BIT_VEC cppVar_25144 = (cppVar_25003) ? cppVar_25143 : P0;
	BIT_VEC cppVar_25145 = ROM.rd(PC);
	bool cppVar_25147 = (cppVar_25145 == 137);
	BIT_VEC cppVar_25149 = PC + 1;
	cppVar_25149 = (cppVar_25149 & cppMask_un_16_);
	BIT_VEC cppVar_25150 = ROM.rd(cppVar_25149);
	bool cppVar_25152 = (cppVar_25150 == 128);
	BIT_VEC cppVar_25154 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25156 = (cppVar_25154 << 3) | 1;
	cppVar_25156 = (cppVar_25156 & cppMask_un_5_);
	BIT_VEC cppVar_25157 = (0 << 5) | cppVar_25156;
	cppVar_25157 = (cppVar_25157 & cppMask_un_8_);
	BIT_VEC cppVar_25158 = (cppVar_25157 >> 7) & cppMask_un_1_;
	bool cppVar_25160 = (cppVar_25158 == 0);
	BIT_VEC cppVar_25161 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25162 = (cppVar_25161 << 3) | 1;
	cppVar_25162 = (cppVar_25162 & cppMask_un_5_);
	BIT_VEC cppVar_25163 = (0 << 5) | cppVar_25162;
	cppVar_25163 = (cppVar_25163 & cppMask_un_8_);
	BIT_VEC cppVar_25164 = IRAM.rd(cppVar_25163);
	BIT_VEC cppVar_25165 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25166 = (cppVar_25165 << 3) | 1;
	cppVar_25166 = (cppVar_25166 & cppMask_un_5_);
	BIT_VEC cppVar_25167 = (0 << 5) | cppVar_25166;
	cppVar_25167 = (cppVar_25167 & cppMask_un_8_);
	bool cppVar_25169 = (cppVar_25167 == 128);
	BIT_VEC cppVar_25170 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25171 = (cppVar_25170 << 3) | 1;
	cppVar_25171 = (cppVar_25171 & cppMask_un_5_);
	BIT_VEC cppVar_25172 = (0 << 5) | cppVar_25171;
	cppVar_25172 = (cppVar_25172 & cppMask_un_8_);
	bool cppVar_25174 = (cppVar_25172 == 129);
	BIT_VEC cppVar_25175 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25176 = (cppVar_25175 << 3) | 1;
	cppVar_25176 = (cppVar_25176 & cppMask_un_5_);
	BIT_VEC cppVar_25177 = (0 << 5) | cppVar_25176;
	cppVar_25177 = (cppVar_25177 & cppMask_un_8_);
	bool cppVar_25179 = (cppVar_25177 == 130);
	BIT_VEC cppVar_25180 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25181 = (cppVar_25180 << 3) | 1;
	cppVar_25181 = (cppVar_25181 & cppMask_un_5_);
	BIT_VEC cppVar_25182 = (0 << 5) | cppVar_25181;
	cppVar_25182 = (cppVar_25182 & cppMask_un_8_);
	bool cppVar_25184 = (cppVar_25182 == 131);
	BIT_VEC cppVar_25185 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25186 = (cppVar_25185 << 3) | 1;
	cppVar_25186 = (cppVar_25186 & cppMask_un_5_);
	BIT_VEC cppVar_25187 = (0 << 5) | cppVar_25186;
	cppVar_25187 = (cppVar_25187 & cppMask_un_8_);
	bool cppVar_25189 = (cppVar_25187 == 135);
	BIT_VEC cppVar_25190 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25191 = (cppVar_25190 << 3) | 1;
	cppVar_25191 = (cppVar_25191 & cppMask_un_5_);
	BIT_VEC cppVar_25192 = (0 << 5) | cppVar_25191;
	cppVar_25192 = (cppVar_25192 & cppMask_un_8_);
	bool cppVar_25194 = (cppVar_25192 == 136);
	BIT_VEC cppVar_25195 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25196 = (cppVar_25195 << 3) | 1;
	cppVar_25196 = (cppVar_25196 & cppMask_un_5_);
	BIT_VEC cppVar_25197 = (0 << 5) | cppVar_25196;
	cppVar_25197 = (cppVar_25197 & cppMask_un_8_);
	bool cppVar_25199 = (cppVar_25197 == 137);
	BIT_VEC cppVar_25200 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25201 = (cppVar_25200 << 3) | 1;
	cppVar_25201 = (cppVar_25201 & cppMask_un_5_);
	BIT_VEC cppVar_25202 = (0 << 5) | cppVar_25201;
	cppVar_25202 = (cppVar_25202 & cppMask_un_8_);
	bool cppVar_25204 = (cppVar_25202 == 138);
	BIT_VEC cppVar_25205 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25206 = (cppVar_25205 << 3) | 1;
	cppVar_25206 = (cppVar_25206 & cppMask_un_5_);
	BIT_VEC cppVar_25207 = (0 << 5) | cppVar_25206;
	cppVar_25207 = (cppVar_25207 & cppMask_un_8_);
	bool cppVar_25209 = (cppVar_25207 == 140);
	BIT_VEC cppVar_25210 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25211 = (cppVar_25210 << 3) | 1;
	cppVar_25211 = (cppVar_25211 & cppMask_un_5_);
	BIT_VEC cppVar_25212 = (0 << 5) | cppVar_25211;
	cppVar_25212 = (cppVar_25212 & cppMask_un_8_);
	bool cppVar_25214 = (cppVar_25212 == 139);
	BIT_VEC cppVar_25215 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25216 = (cppVar_25215 << 3) | 1;
	cppVar_25216 = (cppVar_25216 & cppMask_un_5_);
	BIT_VEC cppVar_25217 = (0 << 5) | cppVar_25216;
	cppVar_25217 = (cppVar_25217 & cppMask_un_8_);
	bool cppVar_25219 = (cppVar_25217 == 141);
	BIT_VEC cppVar_25220 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25221 = (cppVar_25220 << 3) | 1;
	cppVar_25221 = (cppVar_25221 & cppMask_un_5_);
	BIT_VEC cppVar_25222 = (0 << 5) | cppVar_25221;
	cppVar_25222 = (cppVar_25222 & cppMask_un_8_);
	bool cppVar_25224 = (cppVar_25222 == 144);
	BIT_VEC cppVar_25225 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25226 = (cppVar_25225 << 3) | 1;
	cppVar_25226 = (cppVar_25226 & cppMask_un_5_);
	BIT_VEC cppVar_25227 = (0 << 5) | cppVar_25226;
	cppVar_25227 = (cppVar_25227 & cppMask_un_8_);
	bool cppVar_25229 = (cppVar_25227 == 152);
	BIT_VEC cppVar_25230 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25231 = (cppVar_25230 << 3) | 1;
	cppVar_25231 = (cppVar_25231 & cppMask_un_5_);
	BIT_VEC cppVar_25232 = (0 << 5) | cppVar_25231;
	cppVar_25232 = (cppVar_25232 & cppMask_un_8_);
	bool cppVar_25234 = (cppVar_25232 == 153);
	BIT_VEC cppVar_25235 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25236 = (cppVar_25235 << 3) | 1;
	cppVar_25236 = (cppVar_25236 & cppMask_un_5_);
	BIT_VEC cppVar_25237 = (0 << 5) | cppVar_25236;
	cppVar_25237 = (cppVar_25237 & cppMask_un_8_);
	bool cppVar_25239 = (cppVar_25237 == 160);
	BIT_VEC cppVar_25240 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25241 = (cppVar_25240 << 3) | 1;
	cppVar_25241 = (cppVar_25241 & cppMask_un_5_);
	BIT_VEC cppVar_25242 = (0 << 5) | cppVar_25241;
	cppVar_25242 = (cppVar_25242 & cppMask_un_8_);
	bool cppVar_25244 = (cppVar_25242 == 168);
	BIT_VEC cppVar_25245 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25246 = (cppVar_25245 << 3) | 1;
	cppVar_25246 = (cppVar_25246 & cppMask_un_5_);
	BIT_VEC cppVar_25247 = (0 << 5) | cppVar_25246;
	cppVar_25247 = (cppVar_25247 & cppMask_un_8_);
	bool cppVar_25249 = (cppVar_25247 == 176);
	BIT_VEC cppVar_25250 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25251 = (cppVar_25250 << 3) | 1;
	cppVar_25251 = (cppVar_25251 & cppMask_un_5_);
	BIT_VEC cppVar_25252 = (0 << 5) | cppVar_25251;
	cppVar_25252 = (cppVar_25252 & cppMask_un_8_);
	bool cppVar_25254 = (cppVar_25252 == 184);
	BIT_VEC cppVar_25255 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25256 = (cppVar_25255 << 3) | 1;
	cppVar_25256 = (cppVar_25256 & cppMask_un_5_);
	BIT_VEC cppVar_25257 = (0 << 5) | cppVar_25256;
	cppVar_25257 = (cppVar_25257 & cppMask_un_8_);
	bool cppVar_25259 = (cppVar_25257 == 208);
	BIT_VEC cppVar_25260 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25261 = (cppVar_25260 << 3) | 1;
	cppVar_25261 = (cppVar_25261 & cppMask_un_5_);
	BIT_VEC cppVar_25262 = (0 << 5) | cppVar_25261;
	cppVar_25262 = (cppVar_25262 & cppMask_un_8_);
	bool cppVar_25264 = (cppVar_25262 == 224);
	BIT_VEC cppVar_25265 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25266 = (cppVar_25265 << 3) | 1;
	cppVar_25266 = (cppVar_25266 & cppMask_un_5_);
	BIT_VEC cppVar_25267 = (0 << 5) | cppVar_25266;
	cppVar_25267 = (cppVar_25267 & cppMask_un_8_);
	bool cppVar_25269 = (cppVar_25267 == 240);
	BIT_VEC cppVar_25271 = (cppVar_25269) ? B : 0;
	BIT_VEC cppVar_25272 = (cppVar_25264) ? ACC : cppVar_25271;
	BIT_VEC cppVar_25273 = (cppVar_25259) ? PSW : cppVar_25272;
	BIT_VEC cppVar_25274 = (cppVar_25254) ? IP : cppVar_25273;
	BIT_VEC cppVar_25275 = (cppVar_25249) ? P3 : cppVar_25274;
	BIT_VEC cppVar_25276 = (cppVar_25244) ? IE : cppVar_25275;
	BIT_VEC cppVar_25277 = (cppVar_25239) ? P2 : cppVar_25276;
	BIT_VEC cppVar_25278 = (cppVar_25234) ? SBUF : cppVar_25277;
	BIT_VEC cppVar_25279 = (cppVar_25229) ? SCON : cppVar_25278;
	BIT_VEC cppVar_25280 = (cppVar_25224) ? P1 : cppVar_25279;
	BIT_VEC cppVar_25281 = (cppVar_25219) ? TH1 : cppVar_25280;
	BIT_VEC cppVar_25282 = (cppVar_25214) ? TL1 : cppVar_25281;
	BIT_VEC cppVar_25283 = (cppVar_25209) ? TH0 : cppVar_25282;
	BIT_VEC cppVar_25284 = (cppVar_25204) ? TL0 : cppVar_25283;
	BIT_VEC cppVar_25285 = (cppVar_25199) ? TMOD : cppVar_25284;
	BIT_VEC cppVar_25286 = (cppVar_25194) ? TCON : cppVar_25285;
	BIT_VEC cppVar_25287 = (cppVar_25189) ? PCON : cppVar_25286;
	BIT_VEC cppVar_25288 = (cppVar_25184) ? DPH : cppVar_25287;
	BIT_VEC cppVar_25289 = (cppVar_25179) ? DPL : cppVar_25288;
	BIT_VEC cppVar_25290 = (cppVar_25174) ? SP : cppVar_25289;
	BIT_VEC cppVar_25291 = (cppVar_25169) ? P0 : cppVar_25290;
	BIT_VEC cppVar_25292 = (cppVar_25160) ? cppVar_25164 : cppVar_25291;
	BIT_VEC cppVar_25293 = (cppVar_25152) ? cppVar_25292 : P0;
	BIT_VEC cppVar_25294 = ROM.rd(PC);
	bool cppVar_25296 = (cppVar_25294 == 136);
	BIT_VEC cppVar_25298 = PC + 1;
	cppVar_25298 = (cppVar_25298 & cppMask_un_16_);
	BIT_VEC cppVar_25299 = ROM.rd(cppVar_25298);
	bool cppVar_25301 = (cppVar_25299 == 128);
	BIT_VEC cppVar_25303 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25305 = (cppVar_25303 << 3) | 0;
	cppVar_25305 = (cppVar_25305 & cppMask_un_5_);
	BIT_VEC cppVar_25306 = (0 << 5) | cppVar_25305;
	cppVar_25306 = (cppVar_25306 & cppMask_un_8_);
	BIT_VEC cppVar_25307 = (cppVar_25306 >> 7) & cppMask_un_1_;
	bool cppVar_25309 = (cppVar_25307 == 0);
	BIT_VEC cppVar_25310 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25311 = (cppVar_25310 << 3) | 0;
	cppVar_25311 = (cppVar_25311 & cppMask_un_5_);
	BIT_VEC cppVar_25312 = (0 << 5) | cppVar_25311;
	cppVar_25312 = (cppVar_25312 & cppMask_un_8_);
	BIT_VEC cppVar_25313 = IRAM.rd(cppVar_25312);
	BIT_VEC cppVar_25314 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25315 = (cppVar_25314 << 3) | 0;
	cppVar_25315 = (cppVar_25315 & cppMask_un_5_);
	BIT_VEC cppVar_25316 = (0 << 5) | cppVar_25315;
	cppVar_25316 = (cppVar_25316 & cppMask_un_8_);
	bool cppVar_25318 = (cppVar_25316 == 128);
	BIT_VEC cppVar_25319 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25320 = (cppVar_25319 << 3) | 0;
	cppVar_25320 = (cppVar_25320 & cppMask_un_5_);
	BIT_VEC cppVar_25321 = (0 << 5) | cppVar_25320;
	cppVar_25321 = (cppVar_25321 & cppMask_un_8_);
	bool cppVar_25323 = (cppVar_25321 == 129);
	BIT_VEC cppVar_25324 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25325 = (cppVar_25324 << 3) | 0;
	cppVar_25325 = (cppVar_25325 & cppMask_un_5_);
	BIT_VEC cppVar_25326 = (0 << 5) | cppVar_25325;
	cppVar_25326 = (cppVar_25326 & cppMask_un_8_);
	bool cppVar_25328 = (cppVar_25326 == 130);
	BIT_VEC cppVar_25329 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25330 = (cppVar_25329 << 3) | 0;
	cppVar_25330 = (cppVar_25330 & cppMask_un_5_);
	BIT_VEC cppVar_25331 = (0 << 5) | cppVar_25330;
	cppVar_25331 = (cppVar_25331 & cppMask_un_8_);
	bool cppVar_25333 = (cppVar_25331 == 131);
	BIT_VEC cppVar_25334 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25335 = (cppVar_25334 << 3) | 0;
	cppVar_25335 = (cppVar_25335 & cppMask_un_5_);
	BIT_VEC cppVar_25336 = (0 << 5) | cppVar_25335;
	cppVar_25336 = (cppVar_25336 & cppMask_un_8_);
	bool cppVar_25338 = (cppVar_25336 == 135);
	BIT_VEC cppVar_25339 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25340 = (cppVar_25339 << 3) | 0;
	cppVar_25340 = (cppVar_25340 & cppMask_un_5_);
	BIT_VEC cppVar_25341 = (0 << 5) | cppVar_25340;
	cppVar_25341 = (cppVar_25341 & cppMask_un_8_);
	bool cppVar_25343 = (cppVar_25341 == 136);
	BIT_VEC cppVar_25344 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25345 = (cppVar_25344 << 3) | 0;
	cppVar_25345 = (cppVar_25345 & cppMask_un_5_);
	BIT_VEC cppVar_25346 = (0 << 5) | cppVar_25345;
	cppVar_25346 = (cppVar_25346 & cppMask_un_8_);
	bool cppVar_25348 = (cppVar_25346 == 137);
	BIT_VEC cppVar_25349 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25350 = (cppVar_25349 << 3) | 0;
	cppVar_25350 = (cppVar_25350 & cppMask_un_5_);
	BIT_VEC cppVar_25351 = (0 << 5) | cppVar_25350;
	cppVar_25351 = (cppVar_25351 & cppMask_un_8_);
	bool cppVar_25353 = (cppVar_25351 == 138);
	BIT_VEC cppVar_25354 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25355 = (cppVar_25354 << 3) | 0;
	cppVar_25355 = (cppVar_25355 & cppMask_un_5_);
	BIT_VEC cppVar_25356 = (0 << 5) | cppVar_25355;
	cppVar_25356 = (cppVar_25356 & cppMask_un_8_);
	bool cppVar_25358 = (cppVar_25356 == 140);
	BIT_VEC cppVar_25359 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25360 = (cppVar_25359 << 3) | 0;
	cppVar_25360 = (cppVar_25360 & cppMask_un_5_);
	BIT_VEC cppVar_25361 = (0 << 5) | cppVar_25360;
	cppVar_25361 = (cppVar_25361 & cppMask_un_8_);
	bool cppVar_25363 = (cppVar_25361 == 139);
	BIT_VEC cppVar_25364 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25365 = (cppVar_25364 << 3) | 0;
	cppVar_25365 = (cppVar_25365 & cppMask_un_5_);
	BIT_VEC cppVar_25366 = (0 << 5) | cppVar_25365;
	cppVar_25366 = (cppVar_25366 & cppMask_un_8_);
	bool cppVar_25368 = (cppVar_25366 == 141);
	BIT_VEC cppVar_25369 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25370 = (cppVar_25369 << 3) | 0;
	cppVar_25370 = (cppVar_25370 & cppMask_un_5_);
	BIT_VEC cppVar_25371 = (0 << 5) | cppVar_25370;
	cppVar_25371 = (cppVar_25371 & cppMask_un_8_);
	bool cppVar_25373 = (cppVar_25371 == 144);
	BIT_VEC cppVar_25374 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25375 = (cppVar_25374 << 3) | 0;
	cppVar_25375 = (cppVar_25375 & cppMask_un_5_);
	BIT_VEC cppVar_25376 = (0 << 5) | cppVar_25375;
	cppVar_25376 = (cppVar_25376 & cppMask_un_8_);
	bool cppVar_25378 = (cppVar_25376 == 152);
	BIT_VEC cppVar_25379 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25380 = (cppVar_25379 << 3) | 0;
	cppVar_25380 = (cppVar_25380 & cppMask_un_5_);
	BIT_VEC cppVar_25381 = (0 << 5) | cppVar_25380;
	cppVar_25381 = (cppVar_25381 & cppMask_un_8_);
	bool cppVar_25383 = (cppVar_25381 == 153);
	BIT_VEC cppVar_25384 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25385 = (cppVar_25384 << 3) | 0;
	cppVar_25385 = (cppVar_25385 & cppMask_un_5_);
	BIT_VEC cppVar_25386 = (0 << 5) | cppVar_25385;
	cppVar_25386 = (cppVar_25386 & cppMask_un_8_);
	bool cppVar_25388 = (cppVar_25386 == 160);
	BIT_VEC cppVar_25389 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25390 = (cppVar_25389 << 3) | 0;
	cppVar_25390 = (cppVar_25390 & cppMask_un_5_);
	BIT_VEC cppVar_25391 = (0 << 5) | cppVar_25390;
	cppVar_25391 = (cppVar_25391 & cppMask_un_8_);
	bool cppVar_25393 = (cppVar_25391 == 168);
	BIT_VEC cppVar_25394 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25395 = (cppVar_25394 << 3) | 0;
	cppVar_25395 = (cppVar_25395 & cppMask_un_5_);
	BIT_VEC cppVar_25396 = (0 << 5) | cppVar_25395;
	cppVar_25396 = (cppVar_25396 & cppMask_un_8_);
	bool cppVar_25398 = (cppVar_25396 == 176);
	BIT_VEC cppVar_25399 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25400 = (cppVar_25399 << 3) | 0;
	cppVar_25400 = (cppVar_25400 & cppMask_un_5_);
	BIT_VEC cppVar_25401 = (0 << 5) | cppVar_25400;
	cppVar_25401 = (cppVar_25401 & cppMask_un_8_);
	bool cppVar_25403 = (cppVar_25401 == 184);
	BIT_VEC cppVar_25404 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25405 = (cppVar_25404 << 3) | 0;
	cppVar_25405 = (cppVar_25405 & cppMask_un_5_);
	BIT_VEC cppVar_25406 = (0 << 5) | cppVar_25405;
	cppVar_25406 = (cppVar_25406 & cppMask_un_8_);
	bool cppVar_25408 = (cppVar_25406 == 208);
	BIT_VEC cppVar_25409 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25410 = (cppVar_25409 << 3) | 0;
	cppVar_25410 = (cppVar_25410 & cppMask_un_5_);
	BIT_VEC cppVar_25411 = (0 << 5) | cppVar_25410;
	cppVar_25411 = (cppVar_25411 & cppMask_un_8_);
	bool cppVar_25413 = (cppVar_25411 == 224);
	BIT_VEC cppVar_25414 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25415 = (cppVar_25414 << 3) | 0;
	cppVar_25415 = (cppVar_25415 & cppMask_un_5_);
	BIT_VEC cppVar_25416 = (0 << 5) | cppVar_25415;
	cppVar_25416 = (cppVar_25416 & cppMask_un_8_);
	bool cppVar_25418 = (cppVar_25416 == 240);
	BIT_VEC cppVar_25420 = (cppVar_25418) ? B : 0;
	BIT_VEC cppVar_25421 = (cppVar_25413) ? ACC : cppVar_25420;
	BIT_VEC cppVar_25422 = (cppVar_25408) ? PSW : cppVar_25421;
	BIT_VEC cppVar_25423 = (cppVar_25403) ? IP : cppVar_25422;
	BIT_VEC cppVar_25424 = (cppVar_25398) ? P3 : cppVar_25423;
	BIT_VEC cppVar_25425 = (cppVar_25393) ? IE : cppVar_25424;
	BIT_VEC cppVar_25426 = (cppVar_25388) ? P2 : cppVar_25425;
	BIT_VEC cppVar_25427 = (cppVar_25383) ? SBUF : cppVar_25426;
	BIT_VEC cppVar_25428 = (cppVar_25378) ? SCON : cppVar_25427;
	BIT_VEC cppVar_25429 = (cppVar_25373) ? P1 : cppVar_25428;
	BIT_VEC cppVar_25430 = (cppVar_25368) ? TH1 : cppVar_25429;
	BIT_VEC cppVar_25431 = (cppVar_25363) ? TL1 : cppVar_25430;
	BIT_VEC cppVar_25432 = (cppVar_25358) ? TH0 : cppVar_25431;
	BIT_VEC cppVar_25433 = (cppVar_25353) ? TL0 : cppVar_25432;
	BIT_VEC cppVar_25434 = (cppVar_25348) ? TMOD : cppVar_25433;
	BIT_VEC cppVar_25435 = (cppVar_25343) ? TCON : cppVar_25434;
	BIT_VEC cppVar_25436 = (cppVar_25338) ? PCON : cppVar_25435;
	BIT_VEC cppVar_25437 = (cppVar_25333) ? DPH : cppVar_25436;
	BIT_VEC cppVar_25438 = (cppVar_25328) ? DPL : cppVar_25437;
	BIT_VEC cppVar_25439 = (cppVar_25323) ? SP : cppVar_25438;
	BIT_VEC cppVar_25440 = (cppVar_25318) ? P0 : cppVar_25439;
	BIT_VEC cppVar_25441 = (cppVar_25309) ? cppVar_25313 : cppVar_25440;
	BIT_VEC cppVar_25442 = (cppVar_25301) ? cppVar_25441 : P0;
	BIT_VEC cppVar_25443 = ROM.rd(PC);
	bool cppVar_25445 = (cppVar_25443 == 135);
	BIT_VEC cppVar_25447 = PC + 1;
	cppVar_25447 = (cppVar_25447 & cppMask_un_16_);
	BIT_VEC cppVar_25448 = ROM.rd(cppVar_25447);
	bool cppVar_25450 = (cppVar_25448 == 128);
	BIT_VEC cppVar_25452 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25454 = (cppVar_25452 << 3) | 1;
	cppVar_25454 = (cppVar_25454 & cppMask_un_5_);
	BIT_VEC cppVar_25455 = (0 << 5) | cppVar_25454;
	cppVar_25455 = (cppVar_25455 & cppMask_un_8_);
	BIT_VEC cppVar_25456 = IRAM.rd(cppVar_25455);
	BIT_VEC cppVar_25457 = IRAM.rd(cppVar_25456);
	BIT_VEC cppVar_25458 = (cppVar_25450) ? cppVar_25457 : P0;
	BIT_VEC cppVar_25459 = ROM.rd(PC);
	bool cppVar_25461 = (cppVar_25459 == 134);
	BIT_VEC cppVar_25463 = PC + 1;
	cppVar_25463 = (cppVar_25463 & cppMask_un_16_);
	BIT_VEC cppVar_25464 = ROM.rd(cppVar_25463);
	bool cppVar_25466 = (cppVar_25464 == 128);
	BIT_VEC cppVar_25468 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_25470 = (cppVar_25468 << 3) | 0;
	cppVar_25470 = (cppVar_25470 & cppMask_un_5_);
	BIT_VEC cppVar_25471 = (0 << 5) | cppVar_25470;
	cppVar_25471 = (cppVar_25471 & cppMask_un_8_);
	BIT_VEC cppVar_25472 = IRAM.rd(cppVar_25471);
	BIT_VEC cppVar_25473 = IRAM.rd(cppVar_25472);
	BIT_VEC cppVar_25474 = (cppVar_25466) ? cppVar_25473 : P0;
	BIT_VEC cppVar_25475 = ROM.rd(PC);
	bool cppVar_25477 = (cppVar_25475 == 133);
	BIT_VEC cppVar_25479 = PC + 2;
	cppVar_25479 = (cppVar_25479 & cppMask_un_16_);
	BIT_VEC cppVar_25480 = ROM.rd(cppVar_25479);
	bool cppVar_25482 = (cppVar_25480 == 128);
	BIT_VEC cppVar_25484 = PC + 1;
	cppVar_25484 = (cppVar_25484 & cppMask_un_16_);
	BIT_VEC cppVar_25485 = ROM.rd(cppVar_25484);
	BIT_VEC cppVar_25486 = (cppVar_25485 >> 7) & cppMask_un_1_;
	bool cppVar_25488 = (cppVar_25486 == 0);
	BIT_VEC cppVar_25489 = PC + 1;
	cppVar_25489 = (cppVar_25489 & cppMask_un_16_);
	BIT_VEC cppVar_25490 = ROM.rd(cppVar_25489);
	BIT_VEC cppVar_25491 = IRAM.rd(cppVar_25490);
	BIT_VEC cppVar_25492 = PC + 1;
	cppVar_25492 = (cppVar_25492 & cppMask_un_16_);
	BIT_VEC cppVar_25493 = ROM.rd(cppVar_25492);
	bool cppVar_25495 = (cppVar_25493 == 128);
	BIT_VEC cppVar_25496 = PC + 1;
	cppVar_25496 = (cppVar_25496 & cppMask_un_16_);
	BIT_VEC cppVar_25497 = ROM.rd(cppVar_25496);
	bool cppVar_25499 = (cppVar_25497 == 129);
	BIT_VEC cppVar_25500 = PC + 1;
	cppVar_25500 = (cppVar_25500 & cppMask_un_16_);
	BIT_VEC cppVar_25501 = ROM.rd(cppVar_25500);
	bool cppVar_25503 = (cppVar_25501 == 130);
	BIT_VEC cppVar_25504 = PC + 1;
	cppVar_25504 = (cppVar_25504 & cppMask_un_16_);
	BIT_VEC cppVar_25505 = ROM.rd(cppVar_25504);
	bool cppVar_25507 = (cppVar_25505 == 131);
	BIT_VEC cppVar_25508 = PC + 1;
	cppVar_25508 = (cppVar_25508 & cppMask_un_16_);
	BIT_VEC cppVar_25509 = ROM.rd(cppVar_25508);
	bool cppVar_25511 = (cppVar_25509 == 135);
	BIT_VEC cppVar_25512 = PC + 1;
	cppVar_25512 = (cppVar_25512 & cppMask_un_16_);
	BIT_VEC cppVar_25513 = ROM.rd(cppVar_25512);
	bool cppVar_25515 = (cppVar_25513 == 136);
	BIT_VEC cppVar_25516 = PC + 1;
	cppVar_25516 = (cppVar_25516 & cppMask_un_16_);
	BIT_VEC cppVar_25517 = ROM.rd(cppVar_25516);
	bool cppVar_25519 = (cppVar_25517 == 137);
	BIT_VEC cppVar_25520 = PC + 1;
	cppVar_25520 = (cppVar_25520 & cppMask_un_16_);
	BIT_VEC cppVar_25521 = ROM.rd(cppVar_25520);
	bool cppVar_25523 = (cppVar_25521 == 138);
	BIT_VEC cppVar_25524 = PC + 1;
	cppVar_25524 = (cppVar_25524 & cppMask_un_16_);
	BIT_VEC cppVar_25525 = ROM.rd(cppVar_25524);
	bool cppVar_25527 = (cppVar_25525 == 140);
	BIT_VEC cppVar_25528 = PC + 1;
	cppVar_25528 = (cppVar_25528 & cppMask_un_16_);
	BIT_VEC cppVar_25529 = ROM.rd(cppVar_25528);
	bool cppVar_25531 = (cppVar_25529 == 139);
	BIT_VEC cppVar_25532 = PC + 1;
	cppVar_25532 = (cppVar_25532 & cppMask_un_16_);
	BIT_VEC cppVar_25533 = ROM.rd(cppVar_25532);
	bool cppVar_25535 = (cppVar_25533 == 141);
	BIT_VEC cppVar_25536 = PC + 1;
	cppVar_25536 = (cppVar_25536 & cppMask_un_16_);
	BIT_VEC cppVar_25537 = ROM.rd(cppVar_25536);
	bool cppVar_25539 = (cppVar_25537 == 144);
	BIT_VEC cppVar_25540 = PC + 1;
	cppVar_25540 = (cppVar_25540 & cppMask_un_16_);
	BIT_VEC cppVar_25541 = ROM.rd(cppVar_25540);
	bool cppVar_25543 = (cppVar_25541 == 152);
	BIT_VEC cppVar_25544 = PC + 1;
	cppVar_25544 = (cppVar_25544 & cppMask_un_16_);
	BIT_VEC cppVar_25545 = ROM.rd(cppVar_25544);
	bool cppVar_25547 = (cppVar_25545 == 153);
	BIT_VEC cppVar_25548 = PC + 1;
	cppVar_25548 = (cppVar_25548 & cppMask_un_16_);
	BIT_VEC cppVar_25549 = ROM.rd(cppVar_25548);
	bool cppVar_25551 = (cppVar_25549 == 160);
	BIT_VEC cppVar_25552 = PC + 1;
	cppVar_25552 = (cppVar_25552 & cppMask_un_16_);
	BIT_VEC cppVar_25553 = ROM.rd(cppVar_25552);
	bool cppVar_25555 = (cppVar_25553 == 168);
	BIT_VEC cppVar_25556 = PC + 1;
	cppVar_25556 = (cppVar_25556 & cppMask_un_16_);
	BIT_VEC cppVar_25557 = ROM.rd(cppVar_25556);
	bool cppVar_25559 = (cppVar_25557 == 176);
	BIT_VEC cppVar_25560 = PC + 1;
	cppVar_25560 = (cppVar_25560 & cppMask_un_16_);
	BIT_VEC cppVar_25561 = ROM.rd(cppVar_25560);
	bool cppVar_25563 = (cppVar_25561 == 184);
	BIT_VEC cppVar_25564 = PC + 1;
	cppVar_25564 = (cppVar_25564 & cppMask_un_16_);
	BIT_VEC cppVar_25565 = ROM.rd(cppVar_25564);
	bool cppVar_25567 = (cppVar_25565 == 208);
	BIT_VEC cppVar_25568 = PC + 1;
	cppVar_25568 = (cppVar_25568 & cppMask_un_16_);
	BIT_VEC cppVar_25569 = ROM.rd(cppVar_25568);
	bool cppVar_25571 = (cppVar_25569 == 224);
	BIT_VEC cppVar_25572 = PC + 1;
	cppVar_25572 = (cppVar_25572 & cppMask_un_16_);
	BIT_VEC cppVar_25573 = ROM.rd(cppVar_25572);
	bool cppVar_25575 = (cppVar_25573 == 240);
	BIT_VEC cppVar_25577 = (cppVar_25575) ? B : 0;
	BIT_VEC cppVar_25578 = (cppVar_25571) ? ACC : cppVar_25577;
	BIT_VEC cppVar_25579 = (cppVar_25567) ? PSW : cppVar_25578;
	BIT_VEC cppVar_25580 = (cppVar_25563) ? IP : cppVar_25579;
	BIT_VEC cppVar_25581 = (cppVar_25559) ? P3 : cppVar_25580;
	BIT_VEC cppVar_25582 = (cppVar_25555) ? IE : cppVar_25581;
	BIT_VEC cppVar_25583 = (cppVar_25551) ? P2 : cppVar_25582;
	BIT_VEC cppVar_25584 = (cppVar_25547) ? SBUF : cppVar_25583;
	BIT_VEC cppVar_25585 = (cppVar_25543) ? SCON : cppVar_25584;
	BIT_VEC cppVar_25586 = (cppVar_25539) ? P1 : cppVar_25585;
	BIT_VEC cppVar_25587 = (cppVar_25535) ? TH1 : cppVar_25586;
	BIT_VEC cppVar_25588 = (cppVar_25531) ? TL1 : cppVar_25587;
	BIT_VEC cppVar_25589 = (cppVar_25527) ? TH0 : cppVar_25588;
	BIT_VEC cppVar_25590 = (cppVar_25523) ? TL0 : cppVar_25589;
	BIT_VEC cppVar_25591 = (cppVar_25519) ? TMOD : cppVar_25590;
	BIT_VEC cppVar_25592 = (cppVar_25515) ? TCON : cppVar_25591;
	BIT_VEC cppVar_25593 = (cppVar_25511) ? PCON : cppVar_25592;
	BIT_VEC cppVar_25594 = (cppVar_25507) ? DPH : cppVar_25593;
	BIT_VEC cppVar_25595 = (cppVar_25503) ? DPL : cppVar_25594;
	BIT_VEC cppVar_25596 = (cppVar_25499) ? SP : cppVar_25595;
	BIT_VEC cppVar_25597 = (cppVar_25495) ? P0 : cppVar_25596;
	BIT_VEC cppVar_25598 = (cppVar_25488) ? cppVar_25491 : cppVar_25597;
	BIT_VEC cppVar_25599 = (cppVar_25482) ? cppVar_25598 : P0;
	BIT_VEC cppVar_25600 = ROM.rd(PC);
	bool cppVar_25602 = (cppVar_25600 == 117);
	BIT_VEC cppVar_25604 = PC + 1;
	cppVar_25604 = (cppVar_25604 & cppMask_un_16_);
	BIT_VEC cppVar_25605 = ROM.rd(cppVar_25604);
	bool cppVar_25607 = (cppVar_25605 == 128);
	BIT_VEC cppVar_25609 = PC + 2;
	cppVar_25609 = (cppVar_25609 & cppMask_un_16_);
	BIT_VEC cppVar_25610 = ROM.rd(cppVar_25609);
	BIT_VEC cppVar_25611 = (cppVar_25607) ? cppVar_25610 : P0;
	BIT_VEC cppVar_25612 = ROM.rd(PC);
	bool cppVar_25614 = (cppVar_25612 == 99);
	BIT_VEC cppVar_25616 = PC + 1;
	cppVar_25616 = (cppVar_25616 & cppMask_un_16_);
	BIT_VEC cppVar_25617 = ROM.rd(cppVar_25616);
	bool cppVar_25619 = (cppVar_25617 == 128);
	BIT_VEC cppVar_25620 = PC + 1;
	cppVar_25620 = (cppVar_25620 & cppMask_un_16_);
	BIT_VEC cppVar_25621 = ROM.rd(cppVar_25620);
	BIT_VEC cppVar_25622 = (cppVar_25621 >> 7) & cppMask_un_1_;
	bool cppVar_25624 = (cppVar_25622 == 0);
	BIT_VEC cppVar_25625 = PC + 1;
	cppVar_25625 = (cppVar_25625 & cppMask_un_16_);
	BIT_VEC cppVar_25626 = ROM.rd(cppVar_25625);
	BIT_VEC cppVar_25627 = IRAM.rd(cppVar_25626);
	BIT_VEC cppVar_25628 = PC + 1;
	cppVar_25628 = (cppVar_25628 & cppMask_un_16_);
	BIT_VEC cppVar_25629 = ROM.rd(cppVar_25628);
	bool cppVar_25631 = (cppVar_25629 == 128);
	BIT_VEC cppVar_25632 = PC + 1;
	cppVar_25632 = (cppVar_25632 & cppMask_un_16_);
	BIT_VEC cppVar_25633 = ROM.rd(cppVar_25632);
	bool cppVar_25635 = (cppVar_25633 == 129);
	BIT_VEC cppVar_25636 = PC + 1;
	cppVar_25636 = (cppVar_25636 & cppMask_un_16_);
	BIT_VEC cppVar_25637 = ROM.rd(cppVar_25636);
	bool cppVar_25639 = (cppVar_25637 == 130);
	BIT_VEC cppVar_25640 = PC + 1;
	cppVar_25640 = (cppVar_25640 & cppMask_un_16_);
	BIT_VEC cppVar_25641 = ROM.rd(cppVar_25640);
	bool cppVar_25643 = (cppVar_25641 == 131);
	BIT_VEC cppVar_25644 = PC + 1;
	cppVar_25644 = (cppVar_25644 & cppMask_un_16_);
	BIT_VEC cppVar_25645 = ROM.rd(cppVar_25644);
	bool cppVar_25647 = (cppVar_25645 == 135);
	BIT_VEC cppVar_25648 = PC + 1;
	cppVar_25648 = (cppVar_25648 & cppMask_un_16_);
	BIT_VEC cppVar_25649 = ROM.rd(cppVar_25648);
	bool cppVar_25651 = (cppVar_25649 == 136);
	BIT_VEC cppVar_25652 = PC + 1;
	cppVar_25652 = (cppVar_25652 & cppMask_un_16_);
	BIT_VEC cppVar_25653 = ROM.rd(cppVar_25652);
	bool cppVar_25655 = (cppVar_25653 == 137);
	BIT_VEC cppVar_25656 = PC + 1;
	cppVar_25656 = (cppVar_25656 & cppMask_un_16_);
	BIT_VEC cppVar_25657 = ROM.rd(cppVar_25656);
	bool cppVar_25659 = (cppVar_25657 == 138);
	BIT_VEC cppVar_25660 = PC + 1;
	cppVar_25660 = (cppVar_25660 & cppMask_un_16_);
	BIT_VEC cppVar_25661 = ROM.rd(cppVar_25660);
	bool cppVar_25663 = (cppVar_25661 == 140);
	BIT_VEC cppVar_25664 = PC + 1;
	cppVar_25664 = (cppVar_25664 & cppMask_un_16_);
	BIT_VEC cppVar_25665 = ROM.rd(cppVar_25664);
	bool cppVar_25667 = (cppVar_25665 == 139);
	BIT_VEC cppVar_25668 = PC + 1;
	cppVar_25668 = (cppVar_25668 & cppMask_un_16_);
	BIT_VEC cppVar_25669 = ROM.rd(cppVar_25668);
	bool cppVar_25671 = (cppVar_25669 == 141);
	BIT_VEC cppVar_25672 = PC + 1;
	cppVar_25672 = (cppVar_25672 & cppMask_un_16_);
	BIT_VEC cppVar_25673 = ROM.rd(cppVar_25672);
	bool cppVar_25675 = (cppVar_25673 == 144);
	BIT_VEC cppVar_25676 = PC + 1;
	cppVar_25676 = (cppVar_25676 & cppMask_un_16_);
	BIT_VEC cppVar_25677 = ROM.rd(cppVar_25676);
	bool cppVar_25679 = (cppVar_25677 == 152);
	BIT_VEC cppVar_25680 = PC + 1;
	cppVar_25680 = (cppVar_25680 & cppMask_un_16_);
	BIT_VEC cppVar_25681 = ROM.rd(cppVar_25680);
	bool cppVar_25683 = (cppVar_25681 == 153);
	BIT_VEC cppVar_25684 = PC + 1;
	cppVar_25684 = (cppVar_25684 & cppMask_un_16_);
	BIT_VEC cppVar_25685 = ROM.rd(cppVar_25684);
	bool cppVar_25687 = (cppVar_25685 == 160);
	BIT_VEC cppVar_25688 = PC + 1;
	cppVar_25688 = (cppVar_25688 & cppMask_un_16_);
	BIT_VEC cppVar_25689 = ROM.rd(cppVar_25688);
	bool cppVar_25691 = (cppVar_25689 == 168);
	BIT_VEC cppVar_25692 = PC + 1;
	cppVar_25692 = (cppVar_25692 & cppMask_un_16_);
	BIT_VEC cppVar_25693 = ROM.rd(cppVar_25692);
	bool cppVar_25695 = (cppVar_25693 == 176);
	BIT_VEC cppVar_25696 = PC + 1;
	cppVar_25696 = (cppVar_25696 & cppMask_un_16_);
	BIT_VEC cppVar_25697 = ROM.rd(cppVar_25696);
	bool cppVar_25699 = (cppVar_25697 == 184);
	BIT_VEC cppVar_25700 = PC + 1;
	cppVar_25700 = (cppVar_25700 & cppMask_un_16_);
	BIT_VEC cppVar_25701 = ROM.rd(cppVar_25700);
	bool cppVar_25703 = (cppVar_25701 == 208);
	BIT_VEC cppVar_25704 = PC + 1;
	cppVar_25704 = (cppVar_25704 & cppMask_un_16_);
	BIT_VEC cppVar_25705 = ROM.rd(cppVar_25704);
	bool cppVar_25707 = (cppVar_25705 == 224);
	BIT_VEC cppVar_25708 = PC + 1;
	cppVar_25708 = (cppVar_25708 & cppMask_un_16_);
	BIT_VEC cppVar_25709 = ROM.rd(cppVar_25708);
	bool cppVar_25711 = (cppVar_25709 == 240);
	BIT_VEC cppVar_25713 = (cppVar_25711) ? B : 0;
	BIT_VEC cppVar_25714 = (cppVar_25707) ? ACC : cppVar_25713;
	BIT_VEC cppVar_25715 = (cppVar_25703) ? PSW : cppVar_25714;
	BIT_VEC cppVar_25716 = (cppVar_25699) ? IP : cppVar_25715;
	BIT_VEC cppVar_25717 = (cppVar_25695) ? P3 : cppVar_25716;
	BIT_VEC cppVar_25718 = (cppVar_25691) ? IE : cppVar_25717;
	BIT_VEC cppVar_25719 = (cppVar_25687) ? P2 : cppVar_25718;
	BIT_VEC cppVar_25720 = (cppVar_25683) ? SBUF : cppVar_25719;
	BIT_VEC cppVar_25721 = (cppVar_25679) ? SCON : cppVar_25720;
	BIT_VEC cppVar_25722 = (cppVar_25675) ? P1 : cppVar_25721;
	BIT_VEC cppVar_25723 = (cppVar_25671) ? TH1 : cppVar_25722;
	BIT_VEC cppVar_25724 = (cppVar_25667) ? TL1 : cppVar_25723;
	BIT_VEC cppVar_25725 = (cppVar_25663) ? TH0 : cppVar_25724;
	BIT_VEC cppVar_25726 = (cppVar_25659) ? TL0 : cppVar_25725;
	BIT_VEC cppVar_25727 = (cppVar_25655) ? TMOD : cppVar_25726;
	BIT_VEC cppVar_25728 = (cppVar_25651) ? TCON : cppVar_25727;
	BIT_VEC cppVar_25729 = (cppVar_25647) ? PCON : cppVar_25728;
	BIT_VEC cppVar_25730 = (cppVar_25643) ? DPH : cppVar_25729;
	BIT_VEC cppVar_25731 = (cppVar_25639) ? DPL : cppVar_25730;
	BIT_VEC cppVar_25732 = (cppVar_25635) ? SP : cppVar_25731;
	BIT_VEC cppVar_25733 = (cppVar_25631) ? P0 : cppVar_25732;
	BIT_VEC cppVar_25734 = (cppVar_25624) ? cppVar_25627 : cppVar_25733;
	BIT_VEC cppVar_25736 = PC + 2;
	cppVar_25736 = (cppVar_25736 & cppMask_un_16_);
	BIT_VEC cppVar_25737 = ROM.rd(cppVar_25736);
	BIT_VEC cppVar_25738 = cppVar_25734 ^ cppVar_25737;
	BIT_VEC cppVar_25739 = (cppVar_25619) ? cppVar_25738 : P0;
	BIT_VEC cppVar_25740 = ROM.rd(PC);
	bool cppVar_25742 = (cppVar_25740 == 98);
	BIT_VEC cppVar_25744 = PC + 1;
	cppVar_25744 = (cppVar_25744 & cppMask_un_16_);
	BIT_VEC cppVar_25745 = ROM.rd(cppVar_25744);
	bool cppVar_25747 = (cppVar_25745 == 128);
	BIT_VEC cppVar_25748 = PC + 1;
	cppVar_25748 = (cppVar_25748 & cppMask_un_16_);
	BIT_VEC cppVar_25749 = ROM.rd(cppVar_25748);
	BIT_VEC cppVar_25750 = (cppVar_25749 >> 7) & cppMask_un_1_;
	bool cppVar_25752 = (cppVar_25750 == 0);
	BIT_VEC cppVar_25753 = PC + 1;
	cppVar_25753 = (cppVar_25753 & cppMask_un_16_);
	BIT_VEC cppVar_25754 = ROM.rd(cppVar_25753);
	BIT_VEC cppVar_25755 = IRAM.rd(cppVar_25754);
	BIT_VEC cppVar_25756 = PC + 1;
	cppVar_25756 = (cppVar_25756 & cppMask_un_16_);
	BIT_VEC cppVar_25757 = ROM.rd(cppVar_25756);
	bool cppVar_25759 = (cppVar_25757 == 128);
	BIT_VEC cppVar_25760 = PC + 1;
	cppVar_25760 = (cppVar_25760 & cppMask_un_16_);
	BIT_VEC cppVar_25761 = ROM.rd(cppVar_25760);
	bool cppVar_25763 = (cppVar_25761 == 129);
	BIT_VEC cppVar_25764 = PC + 1;
	cppVar_25764 = (cppVar_25764 & cppMask_un_16_);
	BIT_VEC cppVar_25765 = ROM.rd(cppVar_25764);
	bool cppVar_25767 = (cppVar_25765 == 130);
	BIT_VEC cppVar_25768 = PC + 1;
	cppVar_25768 = (cppVar_25768 & cppMask_un_16_);
	BIT_VEC cppVar_25769 = ROM.rd(cppVar_25768);
	bool cppVar_25771 = (cppVar_25769 == 131);
	BIT_VEC cppVar_25772 = PC + 1;
	cppVar_25772 = (cppVar_25772 & cppMask_un_16_);
	BIT_VEC cppVar_25773 = ROM.rd(cppVar_25772);
	bool cppVar_25775 = (cppVar_25773 == 135);
	BIT_VEC cppVar_25776 = PC + 1;
	cppVar_25776 = (cppVar_25776 & cppMask_un_16_);
	BIT_VEC cppVar_25777 = ROM.rd(cppVar_25776);
	bool cppVar_25779 = (cppVar_25777 == 136);
	BIT_VEC cppVar_25780 = PC + 1;
	cppVar_25780 = (cppVar_25780 & cppMask_un_16_);
	BIT_VEC cppVar_25781 = ROM.rd(cppVar_25780);
	bool cppVar_25783 = (cppVar_25781 == 137);
	BIT_VEC cppVar_25784 = PC + 1;
	cppVar_25784 = (cppVar_25784 & cppMask_un_16_);
	BIT_VEC cppVar_25785 = ROM.rd(cppVar_25784);
	bool cppVar_25787 = (cppVar_25785 == 138);
	BIT_VEC cppVar_25788 = PC + 1;
	cppVar_25788 = (cppVar_25788 & cppMask_un_16_);
	BIT_VEC cppVar_25789 = ROM.rd(cppVar_25788);
	bool cppVar_25791 = (cppVar_25789 == 140);
	BIT_VEC cppVar_25792 = PC + 1;
	cppVar_25792 = (cppVar_25792 & cppMask_un_16_);
	BIT_VEC cppVar_25793 = ROM.rd(cppVar_25792);
	bool cppVar_25795 = (cppVar_25793 == 139);
	BIT_VEC cppVar_25796 = PC + 1;
	cppVar_25796 = (cppVar_25796 & cppMask_un_16_);
	BIT_VEC cppVar_25797 = ROM.rd(cppVar_25796);
	bool cppVar_25799 = (cppVar_25797 == 141);
	BIT_VEC cppVar_25800 = PC + 1;
	cppVar_25800 = (cppVar_25800 & cppMask_un_16_);
	BIT_VEC cppVar_25801 = ROM.rd(cppVar_25800);
	bool cppVar_25803 = (cppVar_25801 == 144);
	BIT_VEC cppVar_25804 = PC + 1;
	cppVar_25804 = (cppVar_25804 & cppMask_un_16_);
	BIT_VEC cppVar_25805 = ROM.rd(cppVar_25804);
	bool cppVar_25807 = (cppVar_25805 == 152);
	BIT_VEC cppVar_25808 = PC + 1;
	cppVar_25808 = (cppVar_25808 & cppMask_un_16_);
	BIT_VEC cppVar_25809 = ROM.rd(cppVar_25808);
	bool cppVar_25811 = (cppVar_25809 == 153);
	BIT_VEC cppVar_25812 = PC + 1;
	cppVar_25812 = (cppVar_25812 & cppMask_un_16_);
	BIT_VEC cppVar_25813 = ROM.rd(cppVar_25812);
	bool cppVar_25815 = (cppVar_25813 == 160);
	BIT_VEC cppVar_25816 = PC + 1;
	cppVar_25816 = (cppVar_25816 & cppMask_un_16_);
	BIT_VEC cppVar_25817 = ROM.rd(cppVar_25816);
	bool cppVar_25819 = (cppVar_25817 == 168);
	BIT_VEC cppVar_25820 = PC + 1;
	cppVar_25820 = (cppVar_25820 & cppMask_un_16_);
	BIT_VEC cppVar_25821 = ROM.rd(cppVar_25820);
	bool cppVar_25823 = (cppVar_25821 == 176);
	BIT_VEC cppVar_25824 = PC + 1;
	cppVar_25824 = (cppVar_25824 & cppMask_un_16_);
	BIT_VEC cppVar_25825 = ROM.rd(cppVar_25824);
	bool cppVar_25827 = (cppVar_25825 == 184);
	BIT_VEC cppVar_25828 = PC + 1;
	cppVar_25828 = (cppVar_25828 & cppMask_un_16_);
	BIT_VEC cppVar_25829 = ROM.rd(cppVar_25828);
	bool cppVar_25831 = (cppVar_25829 == 208);
	BIT_VEC cppVar_25832 = PC + 1;
	cppVar_25832 = (cppVar_25832 & cppMask_un_16_);
	BIT_VEC cppVar_25833 = ROM.rd(cppVar_25832);
	bool cppVar_25835 = (cppVar_25833 == 224);
	BIT_VEC cppVar_25836 = PC + 1;
	cppVar_25836 = (cppVar_25836 & cppMask_un_16_);
	BIT_VEC cppVar_25837 = ROM.rd(cppVar_25836);
	bool cppVar_25839 = (cppVar_25837 == 240);
	BIT_VEC cppVar_25841 = (cppVar_25839) ? B : 0;
	BIT_VEC cppVar_25842 = (cppVar_25835) ? ACC : cppVar_25841;
	BIT_VEC cppVar_25843 = (cppVar_25831) ? PSW : cppVar_25842;
	BIT_VEC cppVar_25844 = (cppVar_25827) ? IP : cppVar_25843;
	BIT_VEC cppVar_25845 = (cppVar_25823) ? P3 : cppVar_25844;
	BIT_VEC cppVar_25846 = (cppVar_25819) ? IE : cppVar_25845;
	BIT_VEC cppVar_25847 = (cppVar_25815) ? P2 : cppVar_25846;
	BIT_VEC cppVar_25848 = (cppVar_25811) ? SBUF : cppVar_25847;
	BIT_VEC cppVar_25849 = (cppVar_25807) ? SCON : cppVar_25848;
	BIT_VEC cppVar_25850 = (cppVar_25803) ? P1 : cppVar_25849;
	BIT_VEC cppVar_25851 = (cppVar_25799) ? TH1 : cppVar_25850;
	BIT_VEC cppVar_25852 = (cppVar_25795) ? TL1 : cppVar_25851;
	BIT_VEC cppVar_25853 = (cppVar_25791) ? TH0 : cppVar_25852;
	BIT_VEC cppVar_25854 = (cppVar_25787) ? TL0 : cppVar_25853;
	BIT_VEC cppVar_25855 = (cppVar_25783) ? TMOD : cppVar_25854;
	BIT_VEC cppVar_25856 = (cppVar_25779) ? TCON : cppVar_25855;
	BIT_VEC cppVar_25857 = (cppVar_25775) ? PCON : cppVar_25856;
	BIT_VEC cppVar_25858 = (cppVar_25771) ? DPH : cppVar_25857;
	BIT_VEC cppVar_25859 = (cppVar_25767) ? DPL : cppVar_25858;
	BIT_VEC cppVar_25860 = (cppVar_25763) ? SP : cppVar_25859;
	BIT_VEC cppVar_25861 = (cppVar_25759) ? P0 : cppVar_25860;
	BIT_VEC cppVar_25862 = (cppVar_25752) ? cppVar_25755 : cppVar_25861;
	BIT_VEC cppVar_25863 = cppVar_25862 ^ ACC;
	BIT_VEC cppVar_25864 = (cppVar_25747) ? cppVar_25863 : P0;
	BIT_VEC cppVar_25865 = ROM.rd(PC);
	bool cppVar_25867 = (cppVar_25865 == 83);
	BIT_VEC cppVar_25869 = PC + 1;
	cppVar_25869 = (cppVar_25869 & cppMask_un_16_);
	BIT_VEC cppVar_25870 = ROM.rd(cppVar_25869);
	bool cppVar_25872 = (cppVar_25870 == 128);
	BIT_VEC cppVar_25873 = PC + 1;
	cppVar_25873 = (cppVar_25873 & cppMask_un_16_);
	BIT_VEC cppVar_25874 = ROM.rd(cppVar_25873);
	BIT_VEC cppVar_25875 = (cppVar_25874 >> 7) & cppMask_un_1_;
	bool cppVar_25877 = (cppVar_25875 == 0);
	BIT_VEC cppVar_25878 = PC + 1;
	cppVar_25878 = (cppVar_25878 & cppMask_un_16_);
	BIT_VEC cppVar_25879 = ROM.rd(cppVar_25878);
	BIT_VEC cppVar_25880 = IRAM.rd(cppVar_25879);
	BIT_VEC cppVar_25881 = PC + 1;
	cppVar_25881 = (cppVar_25881 & cppMask_un_16_);
	BIT_VEC cppVar_25882 = ROM.rd(cppVar_25881);
	bool cppVar_25884 = (cppVar_25882 == 128);
	BIT_VEC cppVar_25885 = PC + 1;
	cppVar_25885 = (cppVar_25885 & cppMask_un_16_);
	BIT_VEC cppVar_25886 = ROM.rd(cppVar_25885);
	bool cppVar_25888 = (cppVar_25886 == 129);
	BIT_VEC cppVar_25889 = PC + 1;
	cppVar_25889 = (cppVar_25889 & cppMask_un_16_);
	BIT_VEC cppVar_25890 = ROM.rd(cppVar_25889);
	bool cppVar_25892 = (cppVar_25890 == 130);
	BIT_VEC cppVar_25893 = PC + 1;
	cppVar_25893 = (cppVar_25893 & cppMask_un_16_);
	BIT_VEC cppVar_25894 = ROM.rd(cppVar_25893);
	bool cppVar_25896 = (cppVar_25894 == 131);
	BIT_VEC cppVar_25897 = PC + 1;
	cppVar_25897 = (cppVar_25897 & cppMask_un_16_);
	BIT_VEC cppVar_25898 = ROM.rd(cppVar_25897);
	bool cppVar_25900 = (cppVar_25898 == 135);
	BIT_VEC cppVar_25901 = PC + 1;
	cppVar_25901 = (cppVar_25901 & cppMask_un_16_);
	BIT_VEC cppVar_25902 = ROM.rd(cppVar_25901);
	bool cppVar_25904 = (cppVar_25902 == 136);
	BIT_VEC cppVar_25905 = PC + 1;
	cppVar_25905 = (cppVar_25905 & cppMask_un_16_);
	BIT_VEC cppVar_25906 = ROM.rd(cppVar_25905);
	bool cppVar_25908 = (cppVar_25906 == 137);
	BIT_VEC cppVar_25909 = PC + 1;
	cppVar_25909 = (cppVar_25909 & cppMask_un_16_);
	BIT_VEC cppVar_25910 = ROM.rd(cppVar_25909);
	bool cppVar_25912 = (cppVar_25910 == 138);
	BIT_VEC cppVar_25913 = PC + 1;
	cppVar_25913 = (cppVar_25913 & cppMask_un_16_);
	BIT_VEC cppVar_25914 = ROM.rd(cppVar_25913);
	bool cppVar_25916 = (cppVar_25914 == 140);
	BIT_VEC cppVar_25917 = PC + 1;
	cppVar_25917 = (cppVar_25917 & cppMask_un_16_);
	BIT_VEC cppVar_25918 = ROM.rd(cppVar_25917);
	bool cppVar_25920 = (cppVar_25918 == 139);
	BIT_VEC cppVar_25921 = PC + 1;
	cppVar_25921 = (cppVar_25921 & cppMask_un_16_);
	BIT_VEC cppVar_25922 = ROM.rd(cppVar_25921);
	bool cppVar_25924 = (cppVar_25922 == 141);
	BIT_VEC cppVar_25925 = PC + 1;
	cppVar_25925 = (cppVar_25925 & cppMask_un_16_);
	BIT_VEC cppVar_25926 = ROM.rd(cppVar_25925);
	bool cppVar_25928 = (cppVar_25926 == 144);
	BIT_VEC cppVar_25929 = PC + 1;
	cppVar_25929 = (cppVar_25929 & cppMask_un_16_);
	BIT_VEC cppVar_25930 = ROM.rd(cppVar_25929);
	bool cppVar_25932 = (cppVar_25930 == 152);
	BIT_VEC cppVar_25933 = PC + 1;
	cppVar_25933 = (cppVar_25933 & cppMask_un_16_);
	BIT_VEC cppVar_25934 = ROM.rd(cppVar_25933);
	bool cppVar_25936 = (cppVar_25934 == 153);
	BIT_VEC cppVar_25937 = PC + 1;
	cppVar_25937 = (cppVar_25937 & cppMask_un_16_);
	BIT_VEC cppVar_25938 = ROM.rd(cppVar_25937);
	bool cppVar_25940 = (cppVar_25938 == 160);
	BIT_VEC cppVar_25941 = PC + 1;
	cppVar_25941 = (cppVar_25941 & cppMask_un_16_);
	BIT_VEC cppVar_25942 = ROM.rd(cppVar_25941);
	bool cppVar_25944 = (cppVar_25942 == 168);
	BIT_VEC cppVar_25945 = PC + 1;
	cppVar_25945 = (cppVar_25945 & cppMask_un_16_);
	BIT_VEC cppVar_25946 = ROM.rd(cppVar_25945);
	bool cppVar_25948 = (cppVar_25946 == 176);
	BIT_VEC cppVar_25949 = PC + 1;
	cppVar_25949 = (cppVar_25949 & cppMask_un_16_);
	BIT_VEC cppVar_25950 = ROM.rd(cppVar_25949);
	bool cppVar_25952 = (cppVar_25950 == 184);
	BIT_VEC cppVar_25953 = PC + 1;
	cppVar_25953 = (cppVar_25953 & cppMask_un_16_);
	BIT_VEC cppVar_25954 = ROM.rd(cppVar_25953);
	bool cppVar_25956 = (cppVar_25954 == 208);
	BIT_VEC cppVar_25957 = PC + 1;
	cppVar_25957 = (cppVar_25957 & cppMask_un_16_);
	BIT_VEC cppVar_25958 = ROM.rd(cppVar_25957);
	bool cppVar_25960 = (cppVar_25958 == 224);
	BIT_VEC cppVar_25961 = PC + 1;
	cppVar_25961 = (cppVar_25961 & cppMask_un_16_);
	BIT_VEC cppVar_25962 = ROM.rd(cppVar_25961);
	bool cppVar_25964 = (cppVar_25962 == 240);
	BIT_VEC cppVar_25966 = (cppVar_25964) ? B : 0;
	BIT_VEC cppVar_25967 = (cppVar_25960) ? ACC : cppVar_25966;
	BIT_VEC cppVar_25968 = (cppVar_25956) ? PSW : cppVar_25967;
	BIT_VEC cppVar_25969 = (cppVar_25952) ? IP : cppVar_25968;
	BIT_VEC cppVar_25970 = (cppVar_25948) ? P3 : cppVar_25969;
	BIT_VEC cppVar_25971 = (cppVar_25944) ? IE : cppVar_25970;
	BIT_VEC cppVar_25972 = (cppVar_25940) ? P2 : cppVar_25971;
	BIT_VEC cppVar_25973 = (cppVar_25936) ? SBUF : cppVar_25972;
	BIT_VEC cppVar_25974 = (cppVar_25932) ? SCON : cppVar_25973;
	BIT_VEC cppVar_25975 = (cppVar_25928) ? P1 : cppVar_25974;
	BIT_VEC cppVar_25976 = (cppVar_25924) ? TH1 : cppVar_25975;
	BIT_VEC cppVar_25977 = (cppVar_25920) ? TL1 : cppVar_25976;
	BIT_VEC cppVar_25978 = (cppVar_25916) ? TH0 : cppVar_25977;
	BIT_VEC cppVar_25979 = (cppVar_25912) ? TL0 : cppVar_25978;
	BIT_VEC cppVar_25980 = (cppVar_25908) ? TMOD : cppVar_25979;
	BIT_VEC cppVar_25981 = (cppVar_25904) ? TCON : cppVar_25980;
	BIT_VEC cppVar_25982 = (cppVar_25900) ? PCON : cppVar_25981;
	BIT_VEC cppVar_25983 = (cppVar_25896) ? DPH : cppVar_25982;
	BIT_VEC cppVar_25984 = (cppVar_25892) ? DPL : cppVar_25983;
	BIT_VEC cppVar_25985 = (cppVar_25888) ? SP : cppVar_25984;
	BIT_VEC cppVar_25986 = (cppVar_25884) ? P0 : cppVar_25985;
	BIT_VEC cppVar_25987 = (cppVar_25877) ? cppVar_25880 : cppVar_25986;
	BIT_VEC cppVar_25989 = PC + 2;
	cppVar_25989 = (cppVar_25989 & cppMask_un_16_);
	BIT_VEC cppVar_25990 = ROM.rd(cppVar_25989);
	BIT_VEC cppVar_25991 = cppVar_25987 & cppVar_25990;
	BIT_VEC cppVar_25992 = (cppVar_25872) ? cppVar_25991 : P0;
	BIT_VEC cppVar_25993 = ROM.rd(PC);
	bool cppVar_25995 = (cppVar_25993 == 82);
	BIT_VEC cppVar_25997 = PC + 1;
	cppVar_25997 = (cppVar_25997 & cppMask_un_16_);
	BIT_VEC cppVar_25998 = ROM.rd(cppVar_25997);
	bool cppVar_26000 = (cppVar_25998 == 128);
	BIT_VEC cppVar_26001 = PC + 1;
	cppVar_26001 = (cppVar_26001 & cppMask_un_16_);
	BIT_VEC cppVar_26002 = ROM.rd(cppVar_26001);
	BIT_VEC cppVar_26003 = (cppVar_26002 >> 7) & cppMask_un_1_;
	bool cppVar_26005 = (cppVar_26003 == 0);
	BIT_VEC cppVar_26006 = PC + 1;
	cppVar_26006 = (cppVar_26006 & cppMask_un_16_);
	BIT_VEC cppVar_26007 = ROM.rd(cppVar_26006);
	BIT_VEC cppVar_26008 = IRAM.rd(cppVar_26007);
	BIT_VEC cppVar_26009 = PC + 1;
	cppVar_26009 = (cppVar_26009 & cppMask_un_16_);
	BIT_VEC cppVar_26010 = ROM.rd(cppVar_26009);
	bool cppVar_26012 = (cppVar_26010 == 128);
	BIT_VEC cppVar_26013 = PC + 1;
	cppVar_26013 = (cppVar_26013 & cppMask_un_16_);
	BIT_VEC cppVar_26014 = ROM.rd(cppVar_26013);
	bool cppVar_26016 = (cppVar_26014 == 129);
	BIT_VEC cppVar_26017 = PC + 1;
	cppVar_26017 = (cppVar_26017 & cppMask_un_16_);
	BIT_VEC cppVar_26018 = ROM.rd(cppVar_26017);
	bool cppVar_26020 = (cppVar_26018 == 130);
	BIT_VEC cppVar_26021 = PC + 1;
	cppVar_26021 = (cppVar_26021 & cppMask_un_16_);
	BIT_VEC cppVar_26022 = ROM.rd(cppVar_26021);
	bool cppVar_26024 = (cppVar_26022 == 131);
	BIT_VEC cppVar_26025 = PC + 1;
	cppVar_26025 = (cppVar_26025 & cppMask_un_16_);
	BIT_VEC cppVar_26026 = ROM.rd(cppVar_26025);
	bool cppVar_26028 = (cppVar_26026 == 135);
	BIT_VEC cppVar_26029 = PC + 1;
	cppVar_26029 = (cppVar_26029 & cppMask_un_16_);
	BIT_VEC cppVar_26030 = ROM.rd(cppVar_26029);
	bool cppVar_26032 = (cppVar_26030 == 136);
	BIT_VEC cppVar_26033 = PC + 1;
	cppVar_26033 = (cppVar_26033 & cppMask_un_16_);
	BIT_VEC cppVar_26034 = ROM.rd(cppVar_26033);
	bool cppVar_26036 = (cppVar_26034 == 137);
	BIT_VEC cppVar_26037 = PC + 1;
	cppVar_26037 = (cppVar_26037 & cppMask_un_16_);
	BIT_VEC cppVar_26038 = ROM.rd(cppVar_26037);
	bool cppVar_26040 = (cppVar_26038 == 138);
	BIT_VEC cppVar_26041 = PC + 1;
	cppVar_26041 = (cppVar_26041 & cppMask_un_16_);
	BIT_VEC cppVar_26042 = ROM.rd(cppVar_26041);
	bool cppVar_26044 = (cppVar_26042 == 140);
	BIT_VEC cppVar_26045 = PC + 1;
	cppVar_26045 = (cppVar_26045 & cppMask_un_16_);
	BIT_VEC cppVar_26046 = ROM.rd(cppVar_26045);
	bool cppVar_26048 = (cppVar_26046 == 139);
	BIT_VEC cppVar_26049 = PC + 1;
	cppVar_26049 = (cppVar_26049 & cppMask_un_16_);
	BIT_VEC cppVar_26050 = ROM.rd(cppVar_26049);
	bool cppVar_26052 = (cppVar_26050 == 141);
	BIT_VEC cppVar_26053 = PC + 1;
	cppVar_26053 = (cppVar_26053 & cppMask_un_16_);
	BIT_VEC cppVar_26054 = ROM.rd(cppVar_26053);
	bool cppVar_26056 = (cppVar_26054 == 144);
	BIT_VEC cppVar_26057 = PC + 1;
	cppVar_26057 = (cppVar_26057 & cppMask_un_16_);
	BIT_VEC cppVar_26058 = ROM.rd(cppVar_26057);
	bool cppVar_26060 = (cppVar_26058 == 152);
	BIT_VEC cppVar_26061 = PC + 1;
	cppVar_26061 = (cppVar_26061 & cppMask_un_16_);
	BIT_VEC cppVar_26062 = ROM.rd(cppVar_26061);
	bool cppVar_26064 = (cppVar_26062 == 153);
	BIT_VEC cppVar_26065 = PC + 1;
	cppVar_26065 = (cppVar_26065 & cppMask_un_16_);
	BIT_VEC cppVar_26066 = ROM.rd(cppVar_26065);
	bool cppVar_26068 = (cppVar_26066 == 160);
	BIT_VEC cppVar_26069 = PC + 1;
	cppVar_26069 = (cppVar_26069 & cppMask_un_16_);
	BIT_VEC cppVar_26070 = ROM.rd(cppVar_26069);
	bool cppVar_26072 = (cppVar_26070 == 168);
	BIT_VEC cppVar_26073 = PC + 1;
	cppVar_26073 = (cppVar_26073 & cppMask_un_16_);
	BIT_VEC cppVar_26074 = ROM.rd(cppVar_26073);
	bool cppVar_26076 = (cppVar_26074 == 176);
	BIT_VEC cppVar_26077 = PC + 1;
	cppVar_26077 = (cppVar_26077 & cppMask_un_16_);
	BIT_VEC cppVar_26078 = ROM.rd(cppVar_26077);
	bool cppVar_26080 = (cppVar_26078 == 184);
	BIT_VEC cppVar_26081 = PC + 1;
	cppVar_26081 = (cppVar_26081 & cppMask_un_16_);
	BIT_VEC cppVar_26082 = ROM.rd(cppVar_26081);
	bool cppVar_26084 = (cppVar_26082 == 208);
	BIT_VEC cppVar_26085 = PC + 1;
	cppVar_26085 = (cppVar_26085 & cppMask_un_16_);
	BIT_VEC cppVar_26086 = ROM.rd(cppVar_26085);
	bool cppVar_26088 = (cppVar_26086 == 224);
	BIT_VEC cppVar_26089 = PC + 1;
	cppVar_26089 = (cppVar_26089 & cppMask_un_16_);
	BIT_VEC cppVar_26090 = ROM.rd(cppVar_26089);
	bool cppVar_26092 = (cppVar_26090 == 240);
	BIT_VEC cppVar_26094 = (cppVar_26092) ? B : 0;
	BIT_VEC cppVar_26095 = (cppVar_26088) ? ACC : cppVar_26094;
	BIT_VEC cppVar_26096 = (cppVar_26084) ? PSW : cppVar_26095;
	BIT_VEC cppVar_26097 = (cppVar_26080) ? IP : cppVar_26096;
	BIT_VEC cppVar_26098 = (cppVar_26076) ? P3 : cppVar_26097;
	BIT_VEC cppVar_26099 = (cppVar_26072) ? IE : cppVar_26098;
	BIT_VEC cppVar_26100 = (cppVar_26068) ? P2 : cppVar_26099;
	BIT_VEC cppVar_26101 = (cppVar_26064) ? SBUF : cppVar_26100;
	BIT_VEC cppVar_26102 = (cppVar_26060) ? SCON : cppVar_26101;
	BIT_VEC cppVar_26103 = (cppVar_26056) ? P1 : cppVar_26102;
	BIT_VEC cppVar_26104 = (cppVar_26052) ? TH1 : cppVar_26103;
	BIT_VEC cppVar_26105 = (cppVar_26048) ? TL1 : cppVar_26104;
	BIT_VEC cppVar_26106 = (cppVar_26044) ? TH0 : cppVar_26105;
	BIT_VEC cppVar_26107 = (cppVar_26040) ? TL0 : cppVar_26106;
	BIT_VEC cppVar_26108 = (cppVar_26036) ? TMOD : cppVar_26107;
	BIT_VEC cppVar_26109 = (cppVar_26032) ? TCON : cppVar_26108;
	BIT_VEC cppVar_26110 = (cppVar_26028) ? PCON : cppVar_26109;
	BIT_VEC cppVar_26111 = (cppVar_26024) ? DPH : cppVar_26110;
	BIT_VEC cppVar_26112 = (cppVar_26020) ? DPL : cppVar_26111;
	BIT_VEC cppVar_26113 = (cppVar_26016) ? SP : cppVar_26112;
	BIT_VEC cppVar_26114 = (cppVar_26012) ? P0 : cppVar_26113;
	BIT_VEC cppVar_26115 = (cppVar_26005) ? cppVar_26008 : cppVar_26114;
	BIT_VEC cppVar_26116 = cppVar_26115 & ACC;
	BIT_VEC cppVar_26117 = (cppVar_26000) ? cppVar_26116 : P0;
	BIT_VEC cppVar_26118 = ROM.rd(PC);
	bool cppVar_26120 = (cppVar_26118 == 67);
	BIT_VEC cppVar_26122 = PC + 1;
	cppVar_26122 = (cppVar_26122 & cppMask_un_16_);
	BIT_VEC cppVar_26123 = ROM.rd(cppVar_26122);
	bool cppVar_26125 = (cppVar_26123 == 128);
	BIT_VEC cppVar_26126 = PC + 1;
	cppVar_26126 = (cppVar_26126 & cppMask_un_16_);
	BIT_VEC cppVar_26127 = ROM.rd(cppVar_26126);
	BIT_VEC cppVar_26128 = (cppVar_26127 >> 7) & cppMask_un_1_;
	bool cppVar_26130 = (cppVar_26128 == 0);
	BIT_VEC cppVar_26131 = PC + 1;
	cppVar_26131 = (cppVar_26131 & cppMask_un_16_);
	BIT_VEC cppVar_26132 = ROM.rd(cppVar_26131);
	BIT_VEC cppVar_26133 = IRAM.rd(cppVar_26132);
	BIT_VEC cppVar_26134 = PC + 1;
	cppVar_26134 = (cppVar_26134 & cppMask_un_16_);
	BIT_VEC cppVar_26135 = ROM.rd(cppVar_26134);
	bool cppVar_26137 = (cppVar_26135 == 128);
	BIT_VEC cppVar_26138 = PC + 1;
	cppVar_26138 = (cppVar_26138 & cppMask_un_16_);
	BIT_VEC cppVar_26139 = ROM.rd(cppVar_26138);
	bool cppVar_26141 = (cppVar_26139 == 129);
	BIT_VEC cppVar_26142 = PC + 1;
	cppVar_26142 = (cppVar_26142 & cppMask_un_16_);
	BIT_VEC cppVar_26143 = ROM.rd(cppVar_26142);
	bool cppVar_26145 = (cppVar_26143 == 130);
	BIT_VEC cppVar_26146 = PC + 1;
	cppVar_26146 = (cppVar_26146 & cppMask_un_16_);
	BIT_VEC cppVar_26147 = ROM.rd(cppVar_26146);
	bool cppVar_26149 = (cppVar_26147 == 131);
	BIT_VEC cppVar_26150 = PC + 1;
	cppVar_26150 = (cppVar_26150 & cppMask_un_16_);
	BIT_VEC cppVar_26151 = ROM.rd(cppVar_26150);
	bool cppVar_26153 = (cppVar_26151 == 135);
	BIT_VEC cppVar_26154 = PC + 1;
	cppVar_26154 = (cppVar_26154 & cppMask_un_16_);
	BIT_VEC cppVar_26155 = ROM.rd(cppVar_26154);
	bool cppVar_26157 = (cppVar_26155 == 136);
	BIT_VEC cppVar_26158 = PC + 1;
	cppVar_26158 = (cppVar_26158 & cppMask_un_16_);
	BIT_VEC cppVar_26159 = ROM.rd(cppVar_26158);
	bool cppVar_26161 = (cppVar_26159 == 137);
	BIT_VEC cppVar_26162 = PC + 1;
	cppVar_26162 = (cppVar_26162 & cppMask_un_16_);
	BIT_VEC cppVar_26163 = ROM.rd(cppVar_26162);
	bool cppVar_26165 = (cppVar_26163 == 138);
	BIT_VEC cppVar_26166 = PC + 1;
	cppVar_26166 = (cppVar_26166 & cppMask_un_16_);
	BIT_VEC cppVar_26167 = ROM.rd(cppVar_26166);
	bool cppVar_26169 = (cppVar_26167 == 140);
	BIT_VEC cppVar_26170 = PC + 1;
	cppVar_26170 = (cppVar_26170 & cppMask_un_16_);
	BIT_VEC cppVar_26171 = ROM.rd(cppVar_26170);
	bool cppVar_26173 = (cppVar_26171 == 139);
	BIT_VEC cppVar_26174 = PC + 1;
	cppVar_26174 = (cppVar_26174 & cppMask_un_16_);
	BIT_VEC cppVar_26175 = ROM.rd(cppVar_26174);
	bool cppVar_26177 = (cppVar_26175 == 141);
	BIT_VEC cppVar_26178 = PC + 1;
	cppVar_26178 = (cppVar_26178 & cppMask_un_16_);
	BIT_VEC cppVar_26179 = ROM.rd(cppVar_26178);
	bool cppVar_26181 = (cppVar_26179 == 144);
	BIT_VEC cppVar_26182 = PC + 1;
	cppVar_26182 = (cppVar_26182 & cppMask_un_16_);
	BIT_VEC cppVar_26183 = ROM.rd(cppVar_26182);
	bool cppVar_26185 = (cppVar_26183 == 152);
	BIT_VEC cppVar_26186 = PC + 1;
	cppVar_26186 = (cppVar_26186 & cppMask_un_16_);
	BIT_VEC cppVar_26187 = ROM.rd(cppVar_26186);
	bool cppVar_26189 = (cppVar_26187 == 153);
	BIT_VEC cppVar_26190 = PC + 1;
	cppVar_26190 = (cppVar_26190 & cppMask_un_16_);
	BIT_VEC cppVar_26191 = ROM.rd(cppVar_26190);
	bool cppVar_26193 = (cppVar_26191 == 160);
	BIT_VEC cppVar_26194 = PC + 1;
	cppVar_26194 = (cppVar_26194 & cppMask_un_16_);
	BIT_VEC cppVar_26195 = ROM.rd(cppVar_26194);
	bool cppVar_26197 = (cppVar_26195 == 168);
	BIT_VEC cppVar_26198 = PC + 1;
	cppVar_26198 = (cppVar_26198 & cppMask_un_16_);
	BIT_VEC cppVar_26199 = ROM.rd(cppVar_26198);
	bool cppVar_26201 = (cppVar_26199 == 176);
	BIT_VEC cppVar_26202 = PC + 1;
	cppVar_26202 = (cppVar_26202 & cppMask_un_16_);
	BIT_VEC cppVar_26203 = ROM.rd(cppVar_26202);
	bool cppVar_26205 = (cppVar_26203 == 184);
	BIT_VEC cppVar_26206 = PC + 1;
	cppVar_26206 = (cppVar_26206 & cppMask_un_16_);
	BIT_VEC cppVar_26207 = ROM.rd(cppVar_26206);
	bool cppVar_26209 = (cppVar_26207 == 208);
	BIT_VEC cppVar_26210 = PC + 1;
	cppVar_26210 = (cppVar_26210 & cppMask_un_16_);
	BIT_VEC cppVar_26211 = ROM.rd(cppVar_26210);
	bool cppVar_26213 = (cppVar_26211 == 224);
	BIT_VEC cppVar_26214 = PC + 1;
	cppVar_26214 = (cppVar_26214 & cppMask_un_16_);
	BIT_VEC cppVar_26215 = ROM.rd(cppVar_26214);
	bool cppVar_26217 = (cppVar_26215 == 240);
	BIT_VEC cppVar_26219 = (cppVar_26217) ? B : 0;
	BIT_VEC cppVar_26220 = (cppVar_26213) ? ACC : cppVar_26219;
	BIT_VEC cppVar_26221 = (cppVar_26209) ? PSW : cppVar_26220;
	BIT_VEC cppVar_26222 = (cppVar_26205) ? IP : cppVar_26221;
	BIT_VEC cppVar_26223 = (cppVar_26201) ? P3 : cppVar_26222;
	BIT_VEC cppVar_26224 = (cppVar_26197) ? IE : cppVar_26223;
	BIT_VEC cppVar_26225 = (cppVar_26193) ? P2 : cppVar_26224;
	BIT_VEC cppVar_26226 = (cppVar_26189) ? SBUF : cppVar_26225;
	BIT_VEC cppVar_26227 = (cppVar_26185) ? SCON : cppVar_26226;
	BIT_VEC cppVar_26228 = (cppVar_26181) ? P1 : cppVar_26227;
	BIT_VEC cppVar_26229 = (cppVar_26177) ? TH1 : cppVar_26228;
	BIT_VEC cppVar_26230 = (cppVar_26173) ? TL1 : cppVar_26229;
	BIT_VEC cppVar_26231 = (cppVar_26169) ? TH0 : cppVar_26230;
	BIT_VEC cppVar_26232 = (cppVar_26165) ? TL0 : cppVar_26231;
	BIT_VEC cppVar_26233 = (cppVar_26161) ? TMOD : cppVar_26232;
	BIT_VEC cppVar_26234 = (cppVar_26157) ? TCON : cppVar_26233;
	BIT_VEC cppVar_26235 = (cppVar_26153) ? PCON : cppVar_26234;
	BIT_VEC cppVar_26236 = (cppVar_26149) ? DPH : cppVar_26235;
	BIT_VEC cppVar_26237 = (cppVar_26145) ? DPL : cppVar_26236;
	BIT_VEC cppVar_26238 = (cppVar_26141) ? SP : cppVar_26237;
	BIT_VEC cppVar_26239 = (cppVar_26137) ? P0 : cppVar_26238;
	BIT_VEC cppVar_26240 = (cppVar_26130) ? cppVar_26133 : cppVar_26239;
	BIT_VEC cppVar_26242 = PC + 2;
	cppVar_26242 = (cppVar_26242 & cppMask_un_16_);
	BIT_VEC cppVar_26243 = ROM.rd(cppVar_26242);
	BIT_VEC cppVar_26244 = cppVar_26240 | cppVar_26243;
	BIT_VEC cppVar_26245 = (cppVar_26125) ? cppVar_26244 : P0;
	BIT_VEC cppVar_26246 = ROM.rd(PC);
	bool cppVar_26248 = (cppVar_26246 == 66);
	BIT_VEC cppVar_26250 = PC + 1;
	cppVar_26250 = (cppVar_26250 & cppMask_un_16_);
	BIT_VEC cppVar_26251 = ROM.rd(cppVar_26250);
	bool cppVar_26253 = (cppVar_26251 == 128);
	BIT_VEC cppVar_26254 = PC + 1;
	cppVar_26254 = (cppVar_26254 & cppMask_un_16_);
	BIT_VEC cppVar_26255 = ROM.rd(cppVar_26254);
	BIT_VEC cppVar_26256 = (cppVar_26255 >> 7) & cppMask_un_1_;
	bool cppVar_26258 = (cppVar_26256 == 0);
	BIT_VEC cppVar_26259 = PC + 1;
	cppVar_26259 = (cppVar_26259 & cppMask_un_16_);
	BIT_VEC cppVar_26260 = ROM.rd(cppVar_26259);
	BIT_VEC cppVar_26261 = IRAM.rd(cppVar_26260);
	BIT_VEC cppVar_26262 = PC + 1;
	cppVar_26262 = (cppVar_26262 & cppMask_un_16_);
	BIT_VEC cppVar_26263 = ROM.rd(cppVar_26262);
	bool cppVar_26265 = (cppVar_26263 == 128);
	BIT_VEC cppVar_26266 = PC + 1;
	cppVar_26266 = (cppVar_26266 & cppMask_un_16_);
	BIT_VEC cppVar_26267 = ROM.rd(cppVar_26266);
	bool cppVar_26269 = (cppVar_26267 == 129);
	BIT_VEC cppVar_26270 = PC + 1;
	cppVar_26270 = (cppVar_26270 & cppMask_un_16_);
	BIT_VEC cppVar_26271 = ROM.rd(cppVar_26270);
	bool cppVar_26273 = (cppVar_26271 == 130);
	BIT_VEC cppVar_26274 = PC + 1;
	cppVar_26274 = (cppVar_26274 & cppMask_un_16_);
	BIT_VEC cppVar_26275 = ROM.rd(cppVar_26274);
	bool cppVar_26277 = (cppVar_26275 == 131);
	BIT_VEC cppVar_26278 = PC + 1;
	cppVar_26278 = (cppVar_26278 & cppMask_un_16_);
	BIT_VEC cppVar_26279 = ROM.rd(cppVar_26278);
	bool cppVar_26281 = (cppVar_26279 == 135);
	BIT_VEC cppVar_26282 = PC + 1;
	cppVar_26282 = (cppVar_26282 & cppMask_un_16_);
	BIT_VEC cppVar_26283 = ROM.rd(cppVar_26282);
	bool cppVar_26285 = (cppVar_26283 == 136);
	BIT_VEC cppVar_26286 = PC + 1;
	cppVar_26286 = (cppVar_26286 & cppMask_un_16_);
	BIT_VEC cppVar_26287 = ROM.rd(cppVar_26286);
	bool cppVar_26289 = (cppVar_26287 == 137);
	BIT_VEC cppVar_26290 = PC + 1;
	cppVar_26290 = (cppVar_26290 & cppMask_un_16_);
	BIT_VEC cppVar_26291 = ROM.rd(cppVar_26290);
	bool cppVar_26293 = (cppVar_26291 == 138);
	BIT_VEC cppVar_26294 = PC + 1;
	cppVar_26294 = (cppVar_26294 & cppMask_un_16_);
	BIT_VEC cppVar_26295 = ROM.rd(cppVar_26294);
	bool cppVar_26297 = (cppVar_26295 == 140);
	BIT_VEC cppVar_26298 = PC + 1;
	cppVar_26298 = (cppVar_26298 & cppMask_un_16_);
	BIT_VEC cppVar_26299 = ROM.rd(cppVar_26298);
	bool cppVar_26301 = (cppVar_26299 == 139);
	BIT_VEC cppVar_26302 = PC + 1;
	cppVar_26302 = (cppVar_26302 & cppMask_un_16_);
	BIT_VEC cppVar_26303 = ROM.rd(cppVar_26302);
	bool cppVar_26305 = (cppVar_26303 == 141);
	BIT_VEC cppVar_26306 = PC + 1;
	cppVar_26306 = (cppVar_26306 & cppMask_un_16_);
	BIT_VEC cppVar_26307 = ROM.rd(cppVar_26306);
	bool cppVar_26309 = (cppVar_26307 == 144);
	BIT_VEC cppVar_26310 = PC + 1;
	cppVar_26310 = (cppVar_26310 & cppMask_un_16_);
	BIT_VEC cppVar_26311 = ROM.rd(cppVar_26310);
	bool cppVar_26313 = (cppVar_26311 == 152);
	BIT_VEC cppVar_26314 = PC + 1;
	cppVar_26314 = (cppVar_26314 & cppMask_un_16_);
	BIT_VEC cppVar_26315 = ROM.rd(cppVar_26314);
	bool cppVar_26317 = (cppVar_26315 == 153);
	BIT_VEC cppVar_26318 = PC + 1;
	cppVar_26318 = (cppVar_26318 & cppMask_un_16_);
	BIT_VEC cppVar_26319 = ROM.rd(cppVar_26318);
	bool cppVar_26321 = (cppVar_26319 == 160);
	BIT_VEC cppVar_26322 = PC + 1;
	cppVar_26322 = (cppVar_26322 & cppMask_un_16_);
	BIT_VEC cppVar_26323 = ROM.rd(cppVar_26322);
	bool cppVar_26325 = (cppVar_26323 == 168);
	BIT_VEC cppVar_26326 = PC + 1;
	cppVar_26326 = (cppVar_26326 & cppMask_un_16_);
	BIT_VEC cppVar_26327 = ROM.rd(cppVar_26326);
	bool cppVar_26329 = (cppVar_26327 == 176);
	BIT_VEC cppVar_26330 = PC + 1;
	cppVar_26330 = (cppVar_26330 & cppMask_un_16_);
	BIT_VEC cppVar_26331 = ROM.rd(cppVar_26330);
	bool cppVar_26333 = (cppVar_26331 == 184);
	BIT_VEC cppVar_26334 = PC + 1;
	cppVar_26334 = (cppVar_26334 & cppMask_un_16_);
	BIT_VEC cppVar_26335 = ROM.rd(cppVar_26334);
	bool cppVar_26337 = (cppVar_26335 == 208);
	BIT_VEC cppVar_26338 = PC + 1;
	cppVar_26338 = (cppVar_26338 & cppMask_un_16_);
	BIT_VEC cppVar_26339 = ROM.rd(cppVar_26338);
	bool cppVar_26341 = (cppVar_26339 == 224);
	BIT_VEC cppVar_26342 = PC + 1;
	cppVar_26342 = (cppVar_26342 & cppMask_un_16_);
	BIT_VEC cppVar_26343 = ROM.rd(cppVar_26342);
	bool cppVar_26345 = (cppVar_26343 == 240);
	BIT_VEC cppVar_26347 = (cppVar_26345) ? B : 0;
	BIT_VEC cppVar_26348 = (cppVar_26341) ? ACC : cppVar_26347;
	BIT_VEC cppVar_26349 = (cppVar_26337) ? PSW : cppVar_26348;
	BIT_VEC cppVar_26350 = (cppVar_26333) ? IP : cppVar_26349;
	BIT_VEC cppVar_26351 = (cppVar_26329) ? P3 : cppVar_26350;
	BIT_VEC cppVar_26352 = (cppVar_26325) ? IE : cppVar_26351;
	BIT_VEC cppVar_26353 = (cppVar_26321) ? P2 : cppVar_26352;
	BIT_VEC cppVar_26354 = (cppVar_26317) ? SBUF : cppVar_26353;
	BIT_VEC cppVar_26355 = (cppVar_26313) ? SCON : cppVar_26354;
	BIT_VEC cppVar_26356 = (cppVar_26309) ? P1 : cppVar_26355;
	BIT_VEC cppVar_26357 = (cppVar_26305) ? TH1 : cppVar_26356;
	BIT_VEC cppVar_26358 = (cppVar_26301) ? TL1 : cppVar_26357;
	BIT_VEC cppVar_26359 = (cppVar_26297) ? TH0 : cppVar_26358;
	BIT_VEC cppVar_26360 = (cppVar_26293) ? TL0 : cppVar_26359;
	BIT_VEC cppVar_26361 = (cppVar_26289) ? TMOD : cppVar_26360;
	BIT_VEC cppVar_26362 = (cppVar_26285) ? TCON : cppVar_26361;
	BIT_VEC cppVar_26363 = (cppVar_26281) ? PCON : cppVar_26362;
	BIT_VEC cppVar_26364 = (cppVar_26277) ? DPH : cppVar_26363;
	BIT_VEC cppVar_26365 = (cppVar_26273) ? DPL : cppVar_26364;
	BIT_VEC cppVar_26366 = (cppVar_26269) ? SP : cppVar_26365;
	BIT_VEC cppVar_26367 = (cppVar_26265) ? P0 : cppVar_26366;
	BIT_VEC cppVar_26368 = (cppVar_26258) ? cppVar_26261 : cppVar_26367;
	BIT_VEC cppVar_26369 = cppVar_26368 | ACC;
	BIT_VEC cppVar_26370 = (cppVar_26253) ? cppVar_26369 : P0;
	BIT_VEC cppVar_26371 = ROM.rd(PC);
	bool cppVar_26373 = (cppVar_26371 == 213);
	BIT_VEC cppVar_26374 = ROM.rd(PC);
	bool cppVar_26376 = (cppVar_26374 == 21);
	bool cppVar_26377 = cppVar_26373 || cppVar_26376;
	BIT_VEC cppVar_26379 = PC + 1;
	cppVar_26379 = (cppVar_26379 & cppMask_un_16_);
	BIT_VEC cppVar_26380 = ROM.rd(cppVar_26379);
	bool cppVar_26382 = (cppVar_26380 == 128);
	BIT_VEC cppVar_26383 = PC + 1;
	cppVar_26383 = (cppVar_26383 & cppMask_un_16_);
	BIT_VEC cppVar_26384 = ROM.rd(cppVar_26383);
	BIT_VEC cppVar_26385 = (cppVar_26384 >> 7) & cppMask_un_1_;
	bool cppVar_26387 = (cppVar_26385 == 0);
	BIT_VEC cppVar_26388 = PC + 1;
	cppVar_26388 = (cppVar_26388 & cppMask_un_16_);
	BIT_VEC cppVar_26389 = ROM.rd(cppVar_26388);
	BIT_VEC cppVar_26390 = IRAM.rd(cppVar_26389);
	BIT_VEC cppVar_26391 = PC + 1;
	cppVar_26391 = (cppVar_26391 & cppMask_un_16_);
	BIT_VEC cppVar_26392 = ROM.rd(cppVar_26391);
	bool cppVar_26394 = (cppVar_26392 == 128);
	BIT_VEC cppVar_26395 = PC + 1;
	cppVar_26395 = (cppVar_26395 & cppMask_un_16_);
	BIT_VEC cppVar_26396 = ROM.rd(cppVar_26395);
	bool cppVar_26398 = (cppVar_26396 == 129);
	BIT_VEC cppVar_26399 = PC + 1;
	cppVar_26399 = (cppVar_26399 & cppMask_un_16_);
	BIT_VEC cppVar_26400 = ROM.rd(cppVar_26399);
	bool cppVar_26402 = (cppVar_26400 == 130);
	BIT_VEC cppVar_26403 = PC + 1;
	cppVar_26403 = (cppVar_26403 & cppMask_un_16_);
	BIT_VEC cppVar_26404 = ROM.rd(cppVar_26403);
	bool cppVar_26406 = (cppVar_26404 == 131);
	BIT_VEC cppVar_26407 = PC + 1;
	cppVar_26407 = (cppVar_26407 & cppMask_un_16_);
	BIT_VEC cppVar_26408 = ROM.rd(cppVar_26407);
	bool cppVar_26410 = (cppVar_26408 == 135);
	BIT_VEC cppVar_26411 = PC + 1;
	cppVar_26411 = (cppVar_26411 & cppMask_un_16_);
	BIT_VEC cppVar_26412 = ROM.rd(cppVar_26411);
	bool cppVar_26414 = (cppVar_26412 == 136);
	BIT_VEC cppVar_26415 = PC + 1;
	cppVar_26415 = (cppVar_26415 & cppMask_un_16_);
	BIT_VEC cppVar_26416 = ROM.rd(cppVar_26415);
	bool cppVar_26418 = (cppVar_26416 == 137);
	BIT_VEC cppVar_26419 = PC + 1;
	cppVar_26419 = (cppVar_26419 & cppMask_un_16_);
	BIT_VEC cppVar_26420 = ROM.rd(cppVar_26419);
	bool cppVar_26422 = (cppVar_26420 == 138);
	BIT_VEC cppVar_26423 = PC + 1;
	cppVar_26423 = (cppVar_26423 & cppMask_un_16_);
	BIT_VEC cppVar_26424 = ROM.rd(cppVar_26423);
	bool cppVar_26426 = (cppVar_26424 == 140);
	BIT_VEC cppVar_26427 = PC + 1;
	cppVar_26427 = (cppVar_26427 & cppMask_un_16_);
	BIT_VEC cppVar_26428 = ROM.rd(cppVar_26427);
	bool cppVar_26430 = (cppVar_26428 == 139);
	BIT_VEC cppVar_26431 = PC + 1;
	cppVar_26431 = (cppVar_26431 & cppMask_un_16_);
	BIT_VEC cppVar_26432 = ROM.rd(cppVar_26431);
	bool cppVar_26434 = (cppVar_26432 == 141);
	BIT_VEC cppVar_26435 = PC + 1;
	cppVar_26435 = (cppVar_26435 & cppMask_un_16_);
	BIT_VEC cppVar_26436 = ROM.rd(cppVar_26435);
	bool cppVar_26438 = (cppVar_26436 == 144);
	BIT_VEC cppVar_26439 = PC + 1;
	cppVar_26439 = (cppVar_26439 & cppMask_un_16_);
	BIT_VEC cppVar_26440 = ROM.rd(cppVar_26439);
	bool cppVar_26442 = (cppVar_26440 == 152);
	BIT_VEC cppVar_26443 = PC + 1;
	cppVar_26443 = (cppVar_26443 & cppMask_un_16_);
	BIT_VEC cppVar_26444 = ROM.rd(cppVar_26443);
	bool cppVar_26446 = (cppVar_26444 == 153);
	BIT_VEC cppVar_26447 = PC + 1;
	cppVar_26447 = (cppVar_26447 & cppMask_un_16_);
	BIT_VEC cppVar_26448 = ROM.rd(cppVar_26447);
	bool cppVar_26450 = (cppVar_26448 == 160);
	BIT_VEC cppVar_26451 = PC + 1;
	cppVar_26451 = (cppVar_26451 & cppMask_un_16_);
	BIT_VEC cppVar_26452 = ROM.rd(cppVar_26451);
	bool cppVar_26454 = (cppVar_26452 == 168);
	BIT_VEC cppVar_26455 = PC + 1;
	cppVar_26455 = (cppVar_26455 & cppMask_un_16_);
	BIT_VEC cppVar_26456 = ROM.rd(cppVar_26455);
	bool cppVar_26458 = (cppVar_26456 == 176);
	BIT_VEC cppVar_26459 = PC + 1;
	cppVar_26459 = (cppVar_26459 & cppMask_un_16_);
	BIT_VEC cppVar_26460 = ROM.rd(cppVar_26459);
	bool cppVar_26462 = (cppVar_26460 == 184);
	BIT_VEC cppVar_26463 = PC + 1;
	cppVar_26463 = (cppVar_26463 & cppMask_un_16_);
	BIT_VEC cppVar_26464 = ROM.rd(cppVar_26463);
	bool cppVar_26466 = (cppVar_26464 == 208);
	BIT_VEC cppVar_26467 = PC + 1;
	cppVar_26467 = (cppVar_26467 & cppMask_un_16_);
	BIT_VEC cppVar_26468 = ROM.rd(cppVar_26467);
	bool cppVar_26470 = (cppVar_26468 == 224);
	BIT_VEC cppVar_26471 = PC + 1;
	cppVar_26471 = (cppVar_26471 & cppMask_un_16_);
	BIT_VEC cppVar_26472 = ROM.rd(cppVar_26471);
	bool cppVar_26474 = (cppVar_26472 == 240);
	BIT_VEC cppVar_26476 = (cppVar_26474) ? B : 0;
	BIT_VEC cppVar_26477 = (cppVar_26470) ? ACC : cppVar_26476;
	BIT_VEC cppVar_26478 = (cppVar_26466) ? PSW : cppVar_26477;
	BIT_VEC cppVar_26479 = (cppVar_26462) ? IP : cppVar_26478;
	BIT_VEC cppVar_26480 = (cppVar_26458) ? P3 : cppVar_26479;
	BIT_VEC cppVar_26481 = (cppVar_26454) ? IE : cppVar_26480;
	BIT_VEC cppVar_26482 = (cppVar_26450) ? P2 : cppVar_26481;
	BIT_VEC cppVar_26483 = (cppVar_26446) ? SBUF : cppVar_26482;
	BIT_VEC cppVar_26484 = (cppVar_26442) ? SCON : cppVar_26483;
	BIT_VEC cppVar_26485 = (cppVar_26438) ? P1 : cppVar_26484;
	BIT_VEC cppVar_26486 = (cppVar_26434) ? TH1 : cppVar_26485;
	BIT_VEC cppVar_26487 = (cppVar_26430) ? TL1 : cppVar_26486;
	BIT_VEC cppVar_26488 = (cppVar_26426) ? TH0 : cppVar_26487;
	BIT_VEC cppVar_26489 = (cppVar_26422) ? TL0 : cppVar_26488;
	BIT_VEC cppVar_26490 = (cppVar_26418) ? TMOD : cppVar_26489;
	BIT_VEC cppVar_26491 = (cppVar_26414) ? TCON : cppVar_26490;
	BIT_VEC cppVar_26492 = (cppVar_26410) ? PCON : cppVar_26491;
	BIT_VEC cppVar_26493 = (cppVar_26406) ? DPH : cppVar_26492;
	BIT_VEC cppVar_26494 = (cppVar_26402) ? DPL : cppVar_26493;
	BIT_VEC cppVar_26495 = (cppVar_26398) ? SP : cppVar_26494;
	BIT_VEC cppVar_26496 = (cppVar_26394) ? P0 : cppVar_26495;
	BIT_VEC cppVar_26497 = (cppVar_26387) ? cppVar_26390 : cppVar_26496;
	BIT_VEC cppVar_26499 = cppVar_26497 - 1;
	cppVar_26499 = (cppVar_26499 & cppMask_un_8_);
	BIT_VEC cppVar_26500 = (cppVar_26382) ? cppVar_26499 : P0;
	BIT_VEC cppVar_26501 = ROM.rd(PC);
	bool cppVar_26503 = (cppVar_26501 == 194);
	BIT_VEC cppVar_26504 = ROM.rd(PC);
	bool cppVar_26506 = (cppVar_26504 == 16);
	bool cppVar_26507 = cppVar_26503 || cppVar_26506;
	BIT_VEC cppVar_26509 = PC + 1;
	cppVar_26509 = (cppVar_26509 & cppMask_un_16_);
	BIT_VEC cppVar_26510 = ROM.rd(cppVar_26509);
	BIT_VEC cppVar_26511 = (cppVar_26510 >> 7) & cppMask_un_1_;
	bool cppVar_26513 = (cppVar_26511 == 1);
	BIT_VEC cppVar_26514 = PC + 1;
	cppVar_26514 = (cppVar_26514 & cppMask_un_16_);
	BIT_VEC cppVar_26515 = ROM.rd(cppVar_26514);
	BIT_VEC cppVar_26516 = (cppVar_26515 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26518 = (cppVar_26516 << 3) | 0;
	cppVar_26518 = (cppVar_26518 & cppMask_un_8_);
	BIT_VEC cppVar_26519 = PC + 1;
	cppVar_26519 = (cppVar_26519 & cppMask_un_16_);
	BIT_VEC cppVar_26520 = ROM.rd(cppVar_26519);
	BIT_VEC cppVar_26521 = (cppVar_26520 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26522 = (cppVar_26521 & cppMask_un_5_);
	BIT_VEC cppVar_26524 = cppVar_26522 + 32;
	cppVar_26524 = (cppVar_26524 & cppMask_un_8_);
	BIT_VEC cppVar_26525 = (cppVar_26513) ? cppVar_26518 : cppVar_26524;
	bool cppVar_26527 = (cppVar_26525 == 128);
	BIT_VEC cppVar_26529 = PC + 1;
	cppVar_26529 = (cppVar_26529 & cppMask_un_16_);
	BIT_VEC cppVar_26530 = ROM.rd(cppVar_26529);
	BIT_VEC cppVar_26531 = (cppVar_26530 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_26532 = (cppVar_26531 & cppMask_un_3_);
	BIT_VEC cppVar_26533 = 1 << static_cast<unsigned>(cppVar_26532);
	cppVar_26533 = (cppVar_26533 & cppMask_un_8_);
	BIT_VEC cppVar_26534 = ~cppVar_26533;
	BIT_VEC cppVar_26535 = PC + 1;
	cppVar_26535 = (cppVar_26535 & cppMask_un_16_);
	BIT_VEC cppVar_26536 = ROM.rd(cppVar_26535);
	BIT_VEC cppVar_26537 = (cppVar_26536 >> 7) & cppMask_un_1_;
	bool cppVar_26538 = (cppVar_26537 == 1);
	BIT_VEC cppVar_26539 = PC + 1;
	cppVar_26539 = (cppVar_26539 & cppMask_un_16_);
	BIT_VEC cppVar_26540 = ROM.rd(cppVar_26539);
	BIT_VEC cppVar_26541 = (cppVar_26540 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26542 = (cppVar_26541 << 3) | 0;
	cppVar_26542 = (cppVar_26542 & cppMask_un_8_);
	BIT_VEC cppVar_26543 = PC + 1;
	cppVar_26543 = (cppVar_26543 & cppMask_un_16_);
	BIT_VEC cppVar_26544 = ROM.rd(cppVar_26543);
	BIT_VEC cppVar_26545 = (cppVar_26544 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26546 = (cppVar_26545 & cppMask_un_5_);
	BIT_VEC cppVar_26547 = cppVar_26546 + 32;
	cppVar_26547 = (cppVar_26547 & cppMask_un_8_);
	BIT_VEC cppVar_26548 = (cppVar_26538) ? cppVar_26542 : cppVar_26547;
	BIT_VEC cppVar_26549 = (cppVar_26548 >> 7) & cppMask_un_1_;
	bool cppVar_26551 = (cppVar_26549 == 0);
	BIT_VEC cppVar_26552 = PC + 1;
	cppVar_26552 = (cppVar_26552 & cppMask_un_16_);
	BIT_VEC cppVar_26553 = ROM.rd(cppVar_26552);
	BIT_VEC cppVar_26554 = (cppVar_26553 >> 7) & cppMask_un_1_;
	bool cppVar_26555 = (cppVar_26554 == 1);
	BIT_VEC cppVar_26556 = PC + 1;
	cppVar_26556 = (cppVar_26556 & cppMask_un_16_);
	BIT_VEC cppVar_26557 = ROM.rd(cppVar_26556);
	BIT_VEC cppVar_26558 = (cppVar_26557 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26559 = (cppVar_26558 << 3) | 0;
	cppVar_26559 = (cppVar_26559 & cppMask_un_8_);
	BIT_VEC cppVar_26560 = PC + 1;
	cppVar_26560 = (cppVar_26560 & cppMask_un_16_);
	BIT_VEC cppVar_26561 = ROM.rd(cppVar_26560);
	BIT_VEC cppVar_26562 = (cppVar_26561 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26563 = (cppVar_26562 & cppMask_un_5_);
	BIT_VEC cppVar_26564 = cppVar_26563 + 32;
	cppVar_26564 = (cppVar_26564 & cppMask_un_8_);
	BIT_VEC cppVar_26565 = (cppVar_26555) ? cppVar_26559 : cppVar_26564;
	BIT_VEC cppVar_26566 = IRAM.rd(cppVar_26565);
	BIT_VEC cppVar_26567 = PC + 1;
	cppVar_26567 = (cppVar_26567 & cppMask_un_16_);
	BIT_VEC cppVar_26568 = ROM.rd(cppVar_26567);
	BIT_VEC cppVar_26569 = (cppVar_26568 >> 7) & cppMask_un_1_;
	bool cppVar_26570 = (cppVar_26569 == 1);
	BIT_VEC cppVar_26571 = PC + 1;
	cppVar_26571 = (cppVar_26571 & cppMask_un_16_);
	BIT_VEC cppVar_26572 = ROM.rd(cppVar_26571);
	BIT_VEC cppVar_26573 = (cppVar_26572 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26574 = (cppVar_26573 << 3) | 0;
	cppVar_26574 = (cppVar_26574 & cppMask_un_8_);
	BIT_VEC cppVar_26575 = PC + 1;
	cppVar_26575 = (cppVar_26575 & cppMask_un_16_);
	BIT_VEC cppVar_26576 = ROM.rd(cppVar_26575);
	BIT_VEC cppVar_26577 = (cppVar_26576 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26578 = (cppVar_26577 & cppMask_un_5_);
	BIT_VEC cppVar_26579 = cppVar_26578 + 32;
	cppVar_26579 = (cppVar_26579 & cppMask_un_8_);
	BIT_VEC cppVar_26580 = (cppVar_26570) ? cppVar_26574 : cppVar_26579;
	bool cppVar_26582 = (cppVar_26580 == 128);
	BIT_VEC cppVar_26583 = PC + 1;
	cppVar_26583 = (cppVar_26583 & cppMask_un_16_);
	BIT_VEC cppVar_26584 = ROM.rd(cppVar_26583);
	BIT_VEC cppVar_26585 = (cppVar_26584 >> 7) & cppMask_un_1_;
	bool cppVar_26586 = (cppVar_26585 == 1);
	BIT_VEC cppVar_26587 = PC + 1;
	cppVar_26587 = (cppVar_26587 & cppMask_un_16_);
	BIT_VEC cppVar_26588 = ROM.rd(cppVar_26587);
	BIT_VEC cppVar_26589 = (cppVar_26588 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26590 = (cppVar_26589 << 3) | 0;
	cppVar_26590 = (cppVar_26590 & cppMask_un_8_);
	BIT_VEC cppVar_26591 = PC + 1;
	cppVar_26591 = (cppVar_26591 & cppMask_un_16_);
	BIT_VEC cppVar_26592 = ROM.rd(cppVar_26591);
	BIT_VEC cppVar_26593 = (cppVar_26592 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26594 = (cppVar_26593 & cppMask_un_5_);
	BIT_VEC cppVar_26595 = cppVar_26594 + 32;
	cppVar_26595 = (cppVar_26595 & cppMask_un_8_);
	BIT_VEC cppVar_26596 = (cppVar_26586) ? cppVar_26590 : cppVar_26595;
	bool cppVar_26598 = (cppVar_26596 == 129);
	BIT_VEC cppVar_26599 = PC + 1;
	cppVar_26599 = (cppVar_26599 & cppMask_un_16_);
	BIT_VEC cppVar_26600 = ROM.rd(cppVar_26599);
	BIT_VEC cppVar_26601 = (cppVar_26600 >> 7) & cppMask_un_1_;
	bool cppVar_26602 = (cppVar_26601 == 1);
	BIT_VEC cppVar_26603 = PC + 1;
	cppVar_26603 = (cppVar_26603 & cppMask_un_16_);
	BIT_VEC cppVar_26604 = ROM.rd(cppVar_26603);
	BIT_VEC cppVar_26605 = (cppVar_26604 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26606 = (cppVar_26605 << 3) | 0;
	cppVar_26606 = (cppVar_26606 & cppMask_un_8_);
	BIT_VEC cppVar_26607 = PC + 1;
	cppVar_26607 = (cppVar_26607 & cppMask_un_16_);
	BIT_VEC cppVar_26608 = ROM.rd(cppVar_26607);
	BIT_VEC cppVar_26609 = (cppVar_26608 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26610 = (cppVar_26609 & cppMask_un_5_);
	BIT_VEC cppVar_26611 = cppVar_26610 + 32;
	cppVar_26611 = (cppVar_26611 & cppMask_un_8_);
	BIT_VEC cppVar_26612 = (cppVar_26602) ? cppVar_26606 : cppVar_26611;
	bool cppVar_26614 = (cppVar_26612 == 130);
	BIT_VEC cppVar_26615 = PC + 1;
	cppVar_26615 = (cppVar_26615 & cppMask_un_16_);
	BIT_VEC cppVar_26616 = ROM.rd(cppVar_26615);
	BIT_VEC cppVar_26617 = (cppVar_26616 >> 7) & cppMask_un_1_;
	bool cppVar_26618 = (cppVar_26617 == 1);
	BIT_VEC cppVar_26619 = PC + 1;
	cppVar_26619 = (cppVar_26619 & cppMask_un_16_);
	BIT_VEC cppVar_26620 = ROM.rd(cppVar_26619);
	BIT_VEC cppVar_26621 = (cppVar_26620 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26622 = (cppVar_26621 << 3) | 0;
	cppVar_26622 = (cppVar_26622 & cppMask_un_8_);
	BIT_VEC cppVar_26623 = PC + 1;
	cppVar_26623 = (cppVar_26623 & cppMask_un_16_);
	BIT_VEC cppVar_26624 = ROM.rd(cppVar_26623);
	BIT_VEC cppVar_26625 = (cppVar_26624 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26626 = (cppVar_26625 & cppMask_un_5_);
	BIT_VEC cppVar_26627 = cppVar_26626 + 32;
	cppVar_26627 = (cppVar_26627 & cppMask_un_8_);
	BIT_VEC cppVar_26628 = (cppVar_26618) ? cppVar_26622 : cppVar_26627;
	bool cppVar_26630 = (cppVar_26628 == 131);
	BIT_VEC cppVar_26631 = PC + 1;
	cppVar_26631 = (cppVar_26631 & cppMask_un_16_);
	BIT_VEC cppVar_26632 = ROM.rd(cppVar_26631);
	BIT_VEC cppVar_26633 = (cppVar_26632 >> 7) & cppMask_un_1_;
	bool cppVar_26634 = (cppVar_26633 == 1);
	BIT_VEC cppVar_26635 = PC + 1;
	cppVar_26635 = (cppVar_26635 & cppMask_un_16_);
	BIT_VEC cppVar_26636 = ROM.rd(cppVar_26635);
	BIT_VEC cppVar_26637 = (cppVar_26636 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26638 = (cppVar_26637 << 3) | 0;
	cppVar_26638 = (cppVar_26638 & cppMask_un_8_);
	BIT_VEC cppVar_26639 = PC + 1;
	cppVar_26639 = (cppVar_26639 & cppMask_un_16_);
	BIT_VEC cppVar_26640 = ROM.rd(cppVar_26639);
	BIT_VEC cppVar_26641 = (cppVar_26640 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26642 = (cppVar_26641 & cppMask_un_5_);
	BIT_VEC cppVar_26643 = cppVar_26642 + 32;
	cppVar_26643 = (cppVar_26643 & cppMask_un_8_);
	BIT_VEC cppVar_26644 = (cppVar_26634) ? cppVar_26638 : cppVar_26643;
	bool cppVar_26646 = (cppVar_26644 == 135);
	BIT_VEC cppVar_26647 = PC + 1;
	cppVar_26647 = (cppVar_26647 & cppMask_un_16_);
	BIT_VEC cppVar_26648 = ROM.rd(cppVar_26647);
	BIT_VEC cppVar_26649 = (cppVar_26648 >> 7) & cppMask_un_1_;
	bool cppVar_26650 = (cppVar_26649 == 1);
	BIT_VEC cppVar_26651 = PC + 1;
	cppVar_26651 = (cppVar_26651 & cppMask_un_16_);
	BIT_VEC cppVar_26652 = ROM.rd(cppVar_26651);
	BIT_VEC cppVar_26653 = (cppVar_26652 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26654 = (cppVar_26653 << 3) | 0;
	cppVar_26654 = (cppVar_26654 & cppMask_un_8_);
	BIT_VEC cppVar_26655 = PC + 1;
	cppVar_26655 = (cppVar_26655 & cppMask_un_16_);
	BIT_VEC cppVar_26656 = ROM.rd(cppVar_26655);
	BIT_VEC cppVar_26657 = (cppVar_26656 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26658 = (cppVar_26657 & cppMask_un_5_);
	BIT_VEC cppVar_26659 = cppVar_26658 + 32;
	cppVar_26659 = (cppVar_26659 & cppMask_un_8_);
	BIT_VEC cppVar_26660 = (cppVar_26650) ? cppVar_26654 : cppVar_26659;
	bool cppVar_26662 = (cppVar_26660 == 136);
	BIT_VEC cppVar_26663 = PC + 1;
	cppVar_26663 = (cppVar_26663 & cppMask_un_16_);
	BIT_VEC cppVar_26664 = ROM.rd(cppVar_26663);
	BIT_VEC cppVar_26665 = (cppVar_26664 >> 7) & cppMask_un_1_;
	bool cppVar_26666 = (cppVar_26665 == 1);
	BIT_VEC cppVar_26667 = PC + 1;
	cppVar_26667 = (cppVar_26667 & cppMask_un_16_);
	BIT_VEC cppVar_26668 = ROM.rd(cppVar_26667);
	BIT_VEC cppVar_26669 = (cppVar_26668 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26670 = (cppVar_26669 << 3) | 0;
	cppVar_26670 = (cppVar_26670 & cppMask_un_8_);
	BIT_VEC cppVar_26671 = PC + 1;
	cppVar_26671 = (cppVar_26671 & cppMask_un_16_);
	BIT_VEC cppVar_26672 = ROM.rd(cppVar_26671);
	BIT_VEC cppVar_26673 = (cppVar_26672 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26674 = (cppVar_26673 & cppMask_un_5_);
	BIT_VEC cppVar_26675 = cppVar_26674 + 32;
	cppVar_26675 = (cppVar_26675 & cppMask_un_8_);
	BIT_VEC cppVar_26676 = (cppVar_26666) ? cppVar_26670 : cppVar_26675;
	bool cppVar_26678 = (cppVar_26676 == 137);
	BIT_VEC cppVar_26679 = PC + 1;
	cppVar_26679 = (cppVar_26679 & cppMask_un_16_);
	BIT_VEC cppVar_26680 = ROM.rd(cppVar_26679);
	BIT_VEC cppVar_26681 = (cppVar_26680 >> 7) & cppMask_un_1_;
	bool cppVar_26682 = (cppVar_26681 == 1);
	BIT_VEC cppVar_26683 = PC + 1;
	cppVar_26683 = (cppVar_26683 & cppMask_un_16_);
	BIT_VEC cppVar_26684 = ROM.rd(cppVar_26683);
	BIT_VEC cppVar_26685 = (cppVar_26684 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26686 = (cppVar_26685 << 3) | 0;
	cppVar_26686 = (cppVar_26686 & cppMask_un_8_);
	BIT_VEC cppVar_26687 = PC + 1;
	cppVar_26687 = (cppVar_26687 & cppMask_un_16_);
	BIT_VEC cppVar_26688 = ROM.rd(cppVar_26687);
	BIT_VEC cppVar_26689 = (cppVar_26688 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26690 = (cppVar_26689 & cppMask_un_5_);
	BIT_VEC cppVar_26691 = cppVar_26690 + 32;
	cppVar_26691 = (cppVar_26691 & cppMask_un_8_);
	BIT_VEC cppVar_26692 = (cppVar_26682) ? cppVar_26686 : cppVar_26691;
	bool cppVar_26694 = (cppVar_26692 == 138);
	BIT_VEC cppVar_26695 = PC + 1;
	cppVar_26695 = (cppVar_26695 & cppMask_un_16_);
	BIT_VEC cppVar_26696 = ROM.rd(cppVar_26695);
	BIT_VEC cppVar_26697 = (cppVar_26696 >> 7) & cppMask_un_1_;
	bool cppVar_26698 = (cppVar_26697 == 1);
	BIT_VEC cppVar_26699 = PC + 1;
	cppVar_26699 = (cppVar_26699 & cppMask_un_16_);
	BIT_VEC cppVar_26700 = ROM.rd(cppVar_26699);
	BIT_VEC cppVar_26701 = (cppVar_26700 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26702 = (cppVar_26701 << 3) | 0;
	cppVar_26702 = (cppVar_26702 & cppMask_un_8_);
	BIT_VEC cppVar_26703 = PC + 1;
	cppVar_26703 = (cppVar_26703 & cppMask_un_16_);
	BIT_VEC cppVar_26704 = ROM.rd(cppVar_26703);
	BIT_VEC cppVar_26705 = (cppVar_26704 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26706 = (cppVar_26705 & cppMask_un_5_);
	BIT_VEC cppVar_26707 = cppVar_26706 + 32;
	cppVar_26707 = (cppVar_26707 & cppMask_un_8_);
	BIT_VEC cppVar_26708 = (cppVar_26698) ? cppVar_26702 : cppVar_26707;
	bool cppVar_26710 = (cppVar_26708 == 140);
	BIT_VEC cppVar_26711 = PC + 1;
	cppVar_26711 = (cppVar_26711 & cppMask_un_16_);
	BIT_VEC cppVar_26712 = ROM.rd(cppVar_26711);
	BIT_VEC cppVar_26713 = (cppVar_26712 >> 7) & cppMask_un_1_;
	bool cppVar_26714 = (cppVar_26713 == 1);
	BIT_VEC cppVar_26715 = PC + 1;
	cppVar_26715 = (cppVar_26715 & cppMask_un_16_);
	BIT_VEC cppVar_26716 = ROM.rd(cppVar_26715);
	BIT_VEC cppVar_26717 = (cppVar_26716 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26718 = (cppVar_26717 << 3) | 0;
	cppVar_26718 = (cppVar_26718 & cppMask_un_8_);
	BIT_VEC cppVar_26719 = PC + 1;
	cppVar_26719 = (cppVar_26719 & cppMask_un_16_);
	BIT_VEC cppVar_26720 = ROM.rd(cppVar_26719);
	BIT_VEC cppVar_26721 = (cppVar_26720 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26722 = (cppVar_26721 & cppMask_un_5_);
	BIT_VEC cppVar_26723 = cppVar_26722 + 32;
	cppVar_26723 = (cppVar_26723 & cppMask_un_8_);
	BIT_VEC cppVar_26724 = (cppVar_26714) ? cppVar_26718 : cppVar_26723;
	bool cppVar_26726 = (cppVar_26724 == 139);
	BIT_VEC cppVar_26727 = PC + 1;
	cppVar_26727 = (cppVar_26727 & cppMask_un_16_);
	BIT_VEC cppVar_26728 = ROM.rd(cppVar_26727);
	BIT_VEC cppVar_26729 = (cppVar_26728 >> 7) & cppMask_un_1_;
	bool cppVar_26730 = (cppVar_26729 == 1);
	BIT_VEC cppVar_26731 = PC + 1;
	cppVar_26731 = (cppVar_26731 & cppMask_un_16_);
	BIT_VEC cppVar_26732 = ROM.rd(cppVar_26731);
	BIT_VEC cppVar_26733 = (cppVar_26732 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26734 = (cppVar_26733 << 3) | 0;
	cppVar_26734 = (cppVar_26734 & cppMask_un_8_);
	BIT_VEC cppVar_26735 = PC + 1;
	cppVar_26735 = (cppVar_26735 & cppMask_un_16_);
	BIT_VEC cppVar_26736 = ROM.rd(cppVar_26735);
	BIT_VEC cppVar_26737 = (cppVar_26736 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26738 = (cppVar_26737 & cppMask_un_5_);
	BIT_VEC cppVar_26739 = cppVar_26738 + 32;
	cppVar_26739 = (cppVar_26739 & cppMask_un_8_);
	BIT_VEC cppVar_26740 = (cppVar_26730) ? cppVar_26734 : cppVar_26739;
	bool cppVar_26742 = (cppVar_26740 == 141);
	BIT_VEC cppVar_26743 = PC + 1;
	cppVar_26743 = (cppVar_26743 & cppMask_un_16_);
	BIT_VEC cppVar_26744 = ROM.rd(cppVar_26743);
	BIT_VEC cppVar_26745 = (cppVar_26744 >> 7) & cppMask_un_1_;
	bool cppVar_26746 = (cppVar_26745 == 1);
	BIT_VEC cppVar_26747 = PC + 1;
	cppVar_26747 = (cppVar_26747 & cppMask_un_16_);
	BIT_VEC cppVar_26748 = ROM.rd(cppVar_26747);
	BIT_VEC cppVar_26749 = (cppVar_26748 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26750 = (cppVar_26749 << 3) | 0;
	cppVar_26750 = (cppVar_26750 & cppMask_un_8_);
	BIT_VEC cppVar_26751 = PC + 1;
	cppVar_26751 = (cppVar_26751 & cppMask_un_16_);
	BIT_VEC cppVar_26752 = ROM.rd(cppVar_26751);
	BIT_VEC cppVar_26753 = (cppVar_26752 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26754 = (cppVar_26753 & cppMask_un_5_);
	BIT_VEC cppVar_26755 = cppVar_26754 + 32;
	cppVar_26755 = (cppVar_26755 & cppMask_un_8_);
	BIT_VEC cppVar_26756 = (cppVar_26746) ? cppVar_26750 : cppVar_26755;
	bool cppVar_26758 = (cppVar_26756 == 144);
	BIT_VEC cppVar_26759 = PC + 1;
	cppVar_26759 = (cppVar_26759 & cppMask_un_16_);
	BIT_VEC cppVar_26760 = ROM.rd(cppVar_26759);
	BIT_VEC cppVar_26761 = (cppVar_26760 >> 7) & cppMask_un_1_;
	bool cppVar_26762 = (cppVar_26761 == 1);
	BIT_VEC cppVar_26763 = PC + 1;
	cppVar_26763 = (cppVar_26763 & cppMask_un_16_);
	BIT_VEC cppVar_26764 = ROM.rd(cppVar_26763);
	BIT_VEC cppVar_26765 = (cppVar_26764 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26766 = (cppVar_26765 << 3) | 0;
	cppVar_26766 = (cppVar_26766 & cppMask_un_8_);
	BIT_VEC cppVar_26767 = PC + 1;
	cppVar_26767 = (cppVar_26767 & cppMask_un_16_);
	BIT_VEC cppVar_26768 = ROM.rd(cppVar_26767);
	BIT_VEC cppVar_26769 = (cppVar_26768 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26770 = (cppVar_26769 & cppMask_un_5_);
	BIT_VEC cppVar_26771 = cppVar_26770 + 32;
	cppVar_26771 = (cppVar_26771 & cppMask_un_8_);
	BIT_VEC cppVar_26772 = (cppVar_26762) ? cppVar_26766 : cppVar_26771;
	bool cppVar_26774 = (cppVar_26772 == 152);
	BIT_VEC cppVar_26775 = PC + 1;
	cppVar_26775 = (cppVar_26775 & cppMask_un_16_);
	BIT_VEC cppVar_26776 = ROM.rd(cppVar_26775);
	BIT_VEC cppVar_26777 = (cppVar_26776 >> 7) & cppMask_un_1_;
	bool cppVar_26778 = (cppVar_26777 == 1);
	BIT_VEC cppVar_26779 = PC + 1;
	cppVar_26779 = (cppVar_26779 & cppMask_un_16_);
	BIT_VEC cppVar_26780 = ROM.rd(cppVar_26779);
	BIT_VEC cppVar_26781 = (cppVar_26780 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26782 = (cppVar_26781 << 3) | 0;
	cppVar_26782 = (cppVar_26782 & cppMask_un_8_);
	BIT_VEC cppVar_26783 = PC + 1;
	cppVar_26783 = (cppVar_26783 & cppMask_un_16_);
	BIT_VEC cppVar_26784 = ROM.rd(cppVar_26783);
	BIT_VEC cppVar_26785 = (cppVar_26784 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26786 = (cppVar_26785 & cppMask_un_5_);
	BIT_VEC cppVar_26787 = cppVar_26786 + 32;
	cppVar_26787 = (cppVar_26787 & cppMask_un_8_);
	BIT_VEC cppVar_26788 = (cppVar_26778) ? cppVar_26782 : cppVar_26787;
	bool cppVar_26790 = (cppVar_26788 == 153);
	BIT_VEC cppVar_26791 = PC + 1;
	cppVar_26791 = (cppVar_26791 & cppMask_un_16_);
	BIT_VEC cppVar_26792 = ROM.rd(cppVar_26791);
	BIT_VEC cppVar_26793 = (cppVar_26792 >> 7) & cppMask_un_1_;
	bool cppVar_26794 = (cppVar_26793 == 1);
	BIT_VEC cppVar_26795 = PC + 1;
	cppVar_26795 = (cppVar_26795 & cppMask_un_16_);
	BIT_VEC cppVar_26796 = ROM.rd(cppVar_26795);
	BIT_VEC cppVar_26797 = (cppVar_26796 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26798 = (cppVar_26797 << 3) | 0;
	cppVar_26798 = (cppVar_26798 & cppMask_un_8_);
	BIT_VEC cppVar_26799 = PC + 1;
	cppVar_26799 = (cppVar_26799 & cppMask_un_16_);
	BIT_VEC cppVar_26800 = ROM.rd(cppVar_26799);
	BIT_VEC cppVar_26801 = (cppVar_26800 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26802 = (cppVar_26801 & cppMask_un_5_);
	BIT_VEC cppVar_26803 = cppVar_26802 + 32;
	cppVar_26803 = (cppVar_26803 & cppMask_un_8_);
	BIT_VEC cppVar_26804 = (cppVar_26794) ? cppVar_26798 : cppVar_26803;
	bool cppVar_26806 = (cppVar_26804 == 160);
	BIT_VEC cppVar_26807 = PC + 1;
	cppVar_26807 = (cppVar_26807 & cppMask_un_16_);
	BIT_VEC cppVar_26808 = ROM.rd(cppVar_26807);
	BIT_VEC cppVar_26809 = (cppVar_26808 >> 7) & cppMask_un_1_;
	bool cppVar_26810 = (cppVar_26809 == 1);
	BIT_VEC cppVar_26811 = PC + 1;
	cppVar_26811 = (cppVar_26811 & cppMask_un_16_);
	BIT_VEC cppVar_26812 = ROM.rd(cppVar_26811);
	BIT_VEC cppVar_26813 = (cppVar_26812 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26814 = (cppVar_26813 << 3) | 0;
	cppVar_26814 = (cppVar_26814 & cppMask_un_8_);
	BIT_VEC cppVar_26815 = PC + 1;
	cppVar_26815 = (cppVar_26815 & cppMask_un_16_);
	BIT_VEC cppVar_26816 = ROM.rd(cppVar_26815);
	BIT_VEC cppVar_26817 = (cppVar_26816 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26818 = (cppVar_26817 & cppMask_un_5_);
	BIT_VEC cppVar_26819 = cppVar_26818 + 32;
	cppVar_26819 = (cppVar_26819 & cppMask_un_8_);
	BIT_VEC cppVar_26820 = (cppVar_26810) ? cppVar_26814 : cppVar_26819;
	bool cppVar_26822 = (cppVar_26820 == 168);
	BIT_VEC cppVar_26823 = PC + 1;
	cppVar_26823 = (cppVar_26823 & cppMask_un_16_);
	BIT_VEC cppVar_26824 = ROM.rd(cppVar_26823);
	BIT_VEC cppVar_26825 = (cppVar_26824 >> 7) & cppMask_un_1_;
	bool cppVar_26826 = (cppVar_26825 == 1);
	BIT_VEC cppVar_26827 = PC + 1;
	cppVar_26827 = (cppVar_26827 & cppMask_un_16_);
	BIT_VEC cppVar_26828 = ROM.rd(cppVar_26827);
	BIT_VEC cppVar_26829 = (cppVar_26828 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26830 = (cppVar_26829 << 3) | 0;
	cppVar_26830 = (cppVar_26830 & cppMask_un_8_);
	BIT_VEC cppVar_26831 = PC + 1;
	cppVar_26831 = (cppVar_26831 & cppMask_un_16_);
	BIT_VEC cppVar_26832 = ROM.rd(cppVar_26831);
	BIT_VEC cppVar_26833 = (cppVar_26832 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26834 = (cppVar_26833 & cppMask_un_5_);
	BIT_VEC cppVar_26835 = cppVar_26834 + 32;
	cppVar_26835 = (cppVar_26835 & cppMask_un_8_);
	BIT_VEC cppVar_26836 = (cppVar_26826) ? cppVar_26830 : cppVar_26835;
	bool cppVar_26838 = (cppVar_26836 == 176);
	BIT_VEC cppVar_26839 = PC + 1;
	cppVar_26839 = (cppVar_26839 & cppMask_un_16_);
	BIT_VEC cppVar_26840 = ROM.rd(cppVar_26839);
	BIT_VEC cppVar_26841 = (cppVar_26840 >> 7) & cppMask_un_1_;
	bool cppVar_26842 = (cppVar_26841 == 1);
	BIT_VEC cppVar_26843 = PC + 1;
	cppVar_26843 = (cppVar_26843 & cppMask_un_16_);
	BIT_VEC cppVar_26844 = ROM.rd(cppVar_26843);
	BIT_VEC cppVar_26845 = (cppVar_26844 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26846 = (cppVar_26845 << 3) | 0;
	cppVar_26846 = (cppVar_26846 & cppMask_un_8_);
	BIT_VEC cppVar_26847 = PC + 1;
	cppVar_26847 = (cppVar_26847 & cppMask_un_16_);
	BIT_VEC cppVar_26848 = ROM.rd(cppVar_26847);
	BIT_VEC cppVar_26849 = (cppVar_26848 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26850 = (cppVar_26849 & cppMask_un_5_);
	BIT_VEC cppVar_26851 = cppVar_26850 + 32;
	cppVar_26851 = (cppVar_26851 & cppMask_un_8_);
	BIT_VEC cppVar_26852 = (cppVar_26842) ? cppVar_26846 : cppVar_26851;
	bool cppVar_26854 = (cppVar_26852 == 184);
	BIT_VEC cppVar_26855 = PC + 1;
	cppVar_26855 = (cppVar_26855 & cppMask_un_16_);
	BIT_VEC cppVar_26856 = ROM.rd(cppVar_26855);
	BIT_VEC cppVar_26857 = (cppVar_26856 >> 7) & cppMask_un_1_;
	bool cppVar_26858 = (cppVar_26857 == 1);
	BIT_VEC cppVar_26859 = PC + 1;
	cppVar_26859 = (cppVar_26859 & cppMask_un_16_);
	BIT_VEC cppVar_26860 = ROM.rd(cppVar_26859);
	BIT_VEC cppVar_26861 = (cppVar_26860 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26862 = (cppVar_26861 << 3) | 0;
	cppVar_26862 = (cppVar_26862 & cppMask_un_8_);
	BIT_VEC cppVar_26863 = PC + 1;
	cppVar_26863 = (cppVar_26863 & cppMask_un_16_);
	BIT_VEC cppVar_26864 = ROM.rd(cppVar_26863);
	BIT_VEC cppVar_26865 = (cppVar_26864 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26866 = (cppVar_26865 & cppMask_un_5_);
	BIT_VEC cppVar_26867 = cppVar_26866 + 32;
	cppVar_26867 = (cppVar_26867 & cppMask_un_8_);
	BIT_VEC cppVar_26868 = (cppVar_26858) ? cppVar_26862 : cppVar_26867;
	bool cppVar_26870 = (cppVar_26868 == 208);
	BIT_VEC cppVar_26871 = PC + 1;
	cppVar_26871 = (cppVar_26871 & cppMask_un_16_);
	BIT_VEC cppVar_26872 = ROM.rd(cppVar_26871);
	BIT_VEC cppVar_26873 = (cppVar_26872 >> 7) & cppMask_un_1_;
	bool cppVar_26874 = (cppVar_26873 == 1);
	BIT_VEC cppVar_26875 = PC + 1;
	cppVar_26875 = (cppVar_26875 & cppMask_un_16_);
	BIT_VEC cppVar_26876 = ROM.rd(cppVar_26875);
	BIT_VEC cppVar_26877 = (cppVar_26876 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26878 = (cppVar_26877 << 3) | 0;
	cppVar_26878 = (cppVar_26878 & cppMask_un_8_);
	BIT_VEC cppVar_26879 = PC + 1;
	cppVar_26879 = (cppVar_26879 & cppMask_un_16_);
	BIT_VEC cppVar_26880 = ROM.rd(cppVar_26879);
	BIT_VEC cppVar_26881 = (cppVar_26880 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26882 = (cppVar_26881 & cppMask_un_5_);
	BIT_VEC cppVar_26883 = cppVar_26882 + 32;
	cppVar_26883 = (cppVar_26883 & cppMask_un_8_);
	BIT_VEC cppVar_26884 = (cppVar_26874) ? cppVar_26878 : cppVar_26883;
	bool cppVar_26886 = (cppVar_26884 == 224);
	BIT_VEC cppVar_26887 = PC + 1;
	cppVar_26887 = (cppVar_26887 & cppMask_un_16_);
	BIT_VEC cppVar_26888 = ROM.rd(cppVar_26887);
	BIT_VEC cppVar_26889 = (cppVar_26888 >> 7) & cppMask_un_1_;
	bool cppVar_26890 = (cppVar_26889 == 1);
	BIT_VEC cppVar_26891 = PC + 1;
	cppVar_26891 = (cppVar_26891 & cppMask_un_16_);
	BIT_VEC cppVar_26892 = ROM.rd(cppVar_26891);
	BIT_VEC cppVar_26893 = (cppVar_26892 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26894 = (cppVar_26893 << 3) | 0;
	cppVar_26894 = (cppVar_26894 & cppMask_un_8_);
	BIT_VEC cppVar_26895 = PC + 1;
	cppVar_26895 = (cppVar_26895 & cppMask_un_16_);
	BIT_VEC cppVar_26896 = ROM.rd(cppVar_26895);
	BIT_VEC cppVar_26897 = (cppVar_26896 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_26898 = (cppVar_26897 & cppMask_un_5_);
	BIT_VEC cppVar_26899 = cppVar_26898 + 32;
	cppVar_26899 = (cppVar_26899 & cppMask_un_8_);
	BIT_VEC cppVar_26900 = (cppVar_26890) ? cppVar_26894 : cppVar_26899;
	bool cppVar_26902 = (cppVar_26900 == 240);
	BIT_VEC cppVar_26904 = (cppVar_26902) ? B : 0;
	BIT_VEC cppVar_26905 = (cppVar_26886) ? ACC : cppVar_26904;
	BIT_VEC cppVar_26906 = (cppVar_26870) ? PSW : cppVar_26905;
	BIT_VEC cppVar_26907 = (cppVar_26854) ? IP : cppVar_26906;
	BIT_VEC cppVar_26908 = (cppVar_26838) ? P3 : cppVar_26907;
	BIT_VEC cppVar_26909 = (cppVar_26822) ? IE : cppVar_26908;
	BIT_VEC cppVar_26910 = (cppVar_26806) ? P2 : cppVar_26909;
	BIT_VEC cppVar_26911 = (cppVar_26790) ? SBUF : cppVar_26910;
	BIT_VEC cppVar_26912 = (cppVar_26774) ? SCON : cppVar_26911;
	BIT_VEC cppVar_26913 = (cppVar_26758) ? P1 : cppVar_26912;
	BIT_VEC cppVar_26914 = (cppVar_26742) ? TH1 : cppVar_26913;
	BIT_VEC cppVar_26915 = (cppVar_26726) ? TL1 : cppVar_26914;
	BIT_VEC cppVar_26916 = (cppVar_26710) ? TH0 : cppVar_26915;
	BIT_VEC cppVar_26917 = (cppVar_26694) ? TL0 : cppVar_26916;
	BIT_VEC cppVar_26918 = (cppVar_26678) ? TMOD : cppVar_26917;
	BIT_VEC cppVar_26919 = (cppVar_26662) ? TCON : cppVar_26918;
	BIT_VEC cppVar_26920 = (cppVar_26646) ? PCON : cppVar_26919;
	BIT_VEC cppVar_26921 = (cppVar_26630) ? DPH : cppVar_26920;
	BIT_VEC cppVar_26922 = (cppVar_26614) ? DPL : cppVar_26921;
	BIT_VEC cppVar_26923 = (cppVar_26598) ? SP : cppVar_26922;
	BIT_VEC cppVar_26924 = (cppVar_26582) ? P0 : cppVar_26923;
	BIT_VEC cppVar_26925 = (cppVar_26551) ? cppVar_26566 : cppVar_26924;
	BIT_VEC cppVar_26926 = cppVar_26534 & cppVar_26925;
	BIT_VEC cppVar_26928 = 0;
	BIT_VEC cppVar_26929 = PC + 1;
	cppVar_26929 = (cppVar_26929 & cppMask_un_16_);
	BIT_VEC cppVar_26930 = ROM.rd(cppVar_26929);
	BIT_VEC cppVar_26931 = (cppVar_26930 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_26932 = (cppVar_26931 & cppMask_un_3_);
	BIT_VEC cppVar_26933 = cppVar_26928 << static_cast<unsigned>(cppVar_26932);
	cppVar_26933 = (cppVar_26933 & cppMask_un_8_);
	BIT_VEC cppVar_26934 = cppVar_26926 | cppVar_26933;
	BIT_VEC cppVar_26935 = (cppVar_26527) ? cppVar_26934 : P0;
	BIT_VEC cppVar_26936 = ROM.rd(PC);
	bool cppVar_26938 = (cppVar_26936 == 5);
	BIT_VEC cppVar_26940 = PC + 1;
	cppVar_26940 = (cppVar_26940 & cppMask_un_16_);
	BIT_VEC cppVar_26941 = ROM.rd(cppVar_26940);
	bool cppVar_26943 = (cppVar_26941 == 128);
	BIT_VEC cppVar_26944 = PC + 1;
	cppVar_26944 = (cppVar_26944 & cppMask_un_16_);
	BIT_VEC cppVar_26945 = ROM.rd(cppVar_26944);
	BIT_VEC cppVar_26946 = (cppVar_26945 >> 7) & cppMask_un_1_;
	bool cppVar_26948 = (cppVar_26946 == 0);
	BIT_VEC cppVar_26949 = PC + 1;
	cppVar_26949 = (cppVar_26949 & cppMask_un_16_);
	BIT_VEC cppVar_26950 = ROM.rd(cppVar_26949);
	BIT_VEC cppVar_26951 = IRAM.rd(cppVar_26950);
	BIT_VEC cppVar_26952 = PC + 1;
	cppVar_26952 = (cppVar_26952 & cppMask_un_16_);
	BIT_VEC cppVar_26953 = ROM.rd(cppVar_26952);
	bool cppVar_26955 = (cppVar_26953 == 128);
	BIT_VEC cppVar_26956 = PC + 1;
	cppVar_26956 = (cppVar_26956 & cppMask_un_16_);
	BIT_VEC cppVar_26957 = ROM.rd(cppVar_26956);
	bool cppVar_26959 = (cppVar_26957 == 129);
	BIT_VEC cppVar_26960 = PC + 1;
	cppVar_26960 = (cppVar_26960 & cppMask_un_16_);
	BIT_VEC cppVar_26961 = ROM.rd(cppVar_26960);
	bool cppVar_26963 = (cppVar_26961 == 130);
	BIT_VEC cppVar_26964 = PC + 1;
	cppVar_26964 = (cppVar_26964 & cppMask_un_16_);
	BIT_VEC cppVar_26965 = ROM.rd(cppVar_26964);
	bool cppVar_26967 = (cppVar_26965 == 131);
	BIT_VEC cppVar_26968 = PC + 1;
	cppVar_26968 = (cppVar_26968 & cppMask_un_16_);
	BIT_VEC cppVar_26969 = ROM.rd(cppVar_26968);
	bool cppVar_26971 = (cppVar_26969 == 135);
	BIT_VEC cppVar_26972 = PC + 1;
	cppVar_26972 = (cppVar_26972 & cppMask_un_16_);
	BIT_VEC cppVar_26973 = ROM.rd(cppVar_26972);
	bool cppVar_26975 = (cppVar_26973 == 136);
	BIT_VEC cppVar_26976 = PC + 1;
	cppVar_26976 = (cppVar_26976 & cppMask_un_16_);
	BIT_VEC cppVar_26977 = ROM.rd(cppVar_26976);
	bool cppVar_26979 = (cppVar_26977 == 137);
	BIT_VEC cppVar_26980 = PC + 1;
	cppVar_26980 = (cppVar_26980 & cppMask_un_16_);
	BIT_VEC cppVar_26981 = ROM.rd(cppVar_26980);
	bool cppVar_26983 = (cppVar_26981 == 138);
	BIT_VEC cppVar_26984 = PC + 1;
	cppVar_26984 = (cppVar_26984 & cppMask_un_16_);
	BIT_VEC cppVar_26985 = ROM.rd(cppVar_26984);
	bool cppVar_26987 = (cppVar_26985 == 140);
	BIT_VEC cppVar_26988 = PC + 1;
	cppVar_26988 = (cppVar_26988 & cppMask_un_16_);
	BIT_VEC cppVar_26989 = ROM.rd(cppVar_26988);
	bool cppVar_26991 = (cppVar_26989 == 139);
	BIT_VEC cppVar_26992 = PC + 1;
	cppVar_26992 = (cppVar_26992 & cppMask_un_16_);
	BIT_VEC cppVar_26993 = ROM.rd(cppVar_26992);
	bool cppVar_26995 = (cppVar_26993 == 141);
	BIT_VEC cppVar_26996 = PC + 1;
	cppVar_26996 = (cppVar_26996 & cppMask_un_16_);
	BIT_VEC cppVar_26997 = ROM.rd(cppVar_26996);
	bool cppVar_26999 = (cppVar_26997 == 144);
	BIT_VEC cppVar_27000 = PC + 1;
	cppVar_27000 = (cppVar_27000 & cppMask_un_16_);
	BIT_VEC cppVar_27001 = ROM.rd(cppVar_27000);
	bool cppVar_27003 = (cppVar_27001 == 152);
	BIT_VEC cppVar_27004 = PC + 1;
	cppVar_27004 = (cppVar_27004 & cppMask_un_16_);
	BIT_VEC cppVar_27005 = ROM.rd(cppVar_27004);
	bool cppVar_27007 = (cppVar_27005 == 153);
	BIT_VEC cppVar_27008 = PC + 1;
	cppVar_27008 = (cppVar_27008 & cppMask_un_16_);
	BIT_VEC cppVar_27009 = ROM.rd(cppVar_27008);
	bool cppVar_27011 = (cppVar_27009 == 160);
	BIT_VEC cppVar_27012 = PC + 1;
	cppVar_27012 = (cppVar_27012 & cppMask_un_16_);
	BIT_VEC cppVar_27013 = ROM.rd(cppVar_27012);
	bool cppVar_27015 = (cppVar_27013 == 168);
	BIT_VEC cppVar_27016 = PC + 1;
	cppVar_27016 = (cppVar_27016 & cppMask_un_16_);
	BIT_VEC cppVar_27017 = ROM.rd(cppVar_27016);
	bool cppVar_27019 = (cppVar_27017 == 176);
	BIT_VEC cppVar_27020 = PC + 1;
	cppVar_27020 = (cppVar_27020 & cppMask_un_16_);
	BIT_VEC cppVar_27021 = ROM.rd(cppVar_27020);
	bool cppVar_27023 = (cppVar_27021 == 184);
	BIT_VEC cppVar_27024 = PC + 1;
	cppVar_27024 = (cppVar_27024 & cppMask_un_16_);
	BIT_VEC cppVar_27025 = ROM.rd(cppVar_27024);
	bool cppVar_27027 = (cppVar_27025 == 208);
	BIT_VEC cppVar_27028 = PC + 1;
	cppVar_27028 = (cppVar_27028 & cppMask_un_16_);
	BIT_VEC cppVar_27029 = ROM.rd(cppVar_27028);
	bool cppVar_27031 = (cppVar_27029 == 224);
	BIT_VEC cppVar_27032 = PC + 1;
	cppVar_27032 = (cppVar_27032 & cppMask_un_16_);
	BIT_VEC cppVar_27033 = ROM.rd(cppVar_27032);
	bool cppVar_27035 = (cppVar_27033 == 240);
	BIT_VEC cppVar_27037 = (cppVar_27035) ? B : 0;
	BIT_VEC cppVar_27038 = (cppVar_27031) ? ACC : cppVar_27037;
	BIT_VEC cppVar_27039 = (cppVar_27027) ? PSW : cppVar_27038;
	BIT_VEC cppVar_27040 = (cppVar_27023) ? IP : cppVar_27039;
	BIT_VEC cppVar_27041 = (cppVar_27019) ? P3 : cppVar_27040;
	BIT_VEC cppVar_27042 = (cppVar_27015) ? IE : cppVar_27041;
	BIT_VEC cppVar_27043 = (cppVar_27011) ? P2 : cppVar_27042;
	BIT_VEC cppVar_27044 = (cppVar_27007) ? SBUF : cppVar_27043;
	BIT_VEC cppVar_27045 = (cppVar_27003) ? SCON : cppVar_27044;
	BIT_VEC cppVar_27046 = (cppVar_26999) ? P1 : cppVar_27045;
	BIT_VEC cppVar_27047 = (cppVar_26995) ? TH1 : cppVar_27046;
	BIT_VEC cppVar_27048 = (cppVar_26991) ? TL1 : cppVar_27047;
	BIT_VEC cppVar_27049 = (cppVar_26987) ? TH0 : cppVar_27048;
	BIT_VEC cppVar_27050 = (cppVar_26983) ? TL0 : cppVar_27049;
	BIT_VEC cppVar_27051 = (cppVar_26979) ? TMOD : cppVar_27050;
	BIT_VEC cppVar_27052 = (cppVar_26975) ? TCON : cppVar_27051;
	BIT_VEC cppVar_27053 = (cppVar_26971) ? PCON : cppVar_27052;
	BIT_VEC cppVar_27054 = (cppVar_26967) ? DPH : cppVar_27053;
	BIT_VEC cppVar_27055 = (cppVar_26963) ? DPL : cppVar_27054;
	BIT_VEC cppVar_27056 = (cppVar_26959) ? SP : cppVar_27055;
	BIT_VEC cppVar_27057 = (cppVar_26955) ? P0 : cppVar_27056;
	BIT_VEC cppVar_27058 = (cppVar_26948) ? cppVar_26951 : cppVar_27057;
	BIT_VEC cppVar_27060 = cppVar_27058 + 1;
	cppVar_27060 = (cppVar_27060 & cppMask_un_8_);
	BIT_VEC cppVar_27061 = (cppVar_26943) ? cppVar_27060 : P0;
	BIT_VEC cppVar_27062 = (cppVar_26938) ? cppVar_27061 : P0;
	BIT_VEC cppVar_27063 = (cppVar_26507) ? cppVar_26935 : cppVar_27062;
	BIT_VEC cppVar_27064 = (cppVar_26377) ? cppVar_26500 : cppVar_27063;
	BIT_VEC cppVar_27065 = (cppVar_26248) ? cppVar_26370 : cppVar_27064;
	BIT_VEC cppVar_27066 = (cppVar_26120) ? cppVar_26245 : cppVar_27065;
	BIT_VEC cppVar_27067 = (cppVar_25995) ? cppVar_26117 : cppVar_27066;
	BIT_VEC cppVar_27068 = (cppVar_25867) ? cppVar_25992 : cppVar_27067;
	BIT_VEC cppVar_27069 = (cppVar_25742) ? cppVar_25864 : cppVar_27068;
	BIT_VEC cppVar_27070 = (cppVar_25614) ? cppVar_25739 : cppVar_27069;
	BIT_VEC cppVar_27071 = (cppVar_25602) ? cppVar_25611 : cppVar_27070;
	BIT_VEC cppVar_27072 = (cppVar_25477) ? cppVar_25599 : cppVar_27071;
	BIT_VEC cppVar_27073 = (cppVar_25461) ? cppVar_25474 : cppVar_27072;
	BIT_VEC cppVar_27074 = (cppVar_25445) ? cppVar_25458 : cppVar_27073;
	BIT_VEC cppVar_27075 = (cppVar_25296) ? cppVar_25442 : cppVar_27074;
	BIT_VEC cppVar_27076 = (cppVar_25147) ? cppVar_25293 : cppVar_27075;
	BIT_VEC cppVar_27077 = (cppVar_24998) ? cppVar_25144 : cppVar_27076;
	BIT_VEC cppVar_27078 = (cppVar_24849) ? cppVar_24995 : cppVar_27077;
	BIT_VEC cppVar_27079 = (cppVar_24700) ? cppVar_24846 : cppVar_27078;
	BIT_VEC cppVar_27080 = (cppVar_24551) ? cppVar_24697 : cppVar_27079;
	BIT_VEC cppVar_27081 = (cppVar_24402) ? cppVar_24548 : cppVar_27080;
	BIT_VEC cppVar_27082 = (cppVar_24253) ? cppVar_24399 : cppVar_27081;
	BIT_VEC cppVar_27083 = (cppVar_23822) ? cppVar_24250 : cppVar_27082;
	BIT_VEC cppVar_27084 = (cppVar_22993) ? cppVar_23819 : cppVar_27083;
	BIT_VEC cppVar_27085 = (cppVar_22984) ? cppVar_22990 : cppVar_27084;
	BIT_VEC cppVar_27086 = (cppVar_22970) ? cppVar_22977 : cppVar_27085;
	BIT_VEC cppVar_27087 = (cppVar_22539) ? cppVar_22967 : cppVar_27086;
	return cppVar_27087;
}
