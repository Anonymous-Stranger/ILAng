#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_P2()
{
	BIT_VEC cppVar_31641 = ROM.rd(PC);
	bool cppVar_31643 = (cppVar_31641 == 210);
	BIT_VEC cppVar_31645 = PC + 1;
	cppVar_31645 = (cppVar_31645 & cppMask_un_16_);
	BIT_VEC cppVar_31646 = ROM.rd(cppVar_31645);
	BIT_VEC cppVar_31647 = (cppVar_31646 >> 7) & cppMask_un_1_;
	bool cppVar_31649 = (cppVar_31647 == 1);
	BIT_VEC cppVar_31650 = PC + 1;
	cppVar_31650 = (cppVar_31650 & cppMask_un_16_);
	BIT_VEC cppVar_31651 = ROM.rd(cppVar_31650);
	BIT_VEC cppVar_31652 = (cppVar_31651 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31654 = (cppVar_31652 << 3) | 0;
	cppVar_31654 = (cppVar_31654 & cppMask_un_8_);
	BIT_VEC cppVar_31655 = PC + 1;
	cppVar_31655 = (cppVar_31655 & cppMask_un_16_);
	BIT_VEC cppVar_31656 = ROM.rd(cppVar_31655);
	BIT_VEC cppVar_31657 = (cppVar_31656 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31658 = (cppVar_31657 & cppMask_un_5_);
	BIT_VEC cppVar_31660 = cppVar_31658 + 32;
	cppVar_31660 = (cppVar_31660 & cppMask_un_8_);
	BIT_VEC cppVar_31661 = (cppVar_31649) ? cppVar_31654 : cppVar_31660;
	bool cppVar_31663 = (cppVar_31661 == 160);
	BIT_VEC cppVar_31665 = PC + 1;
	cppVar_31665 = (cppVar_31665 & cppMask_un_16_);
	BIT_VEC cppVar_31666 = ROM.rd(cppVar_31665);
	BIT_VEC cppVar_31667 = (cppVar_31666 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_31668 = (cppVar_31667 & cppMask_un_3_);
	BIT_VEC cppVar_31669 = 1 << static_cast<unsigned>(cppVar_31668);
	cppVar_31669 = (cppVar_31669 & cppMask_un_8_);
	BIT_VEC cppVar_31670 = ~cppVar_31669;
	BIT_VEC cppVar_31671 = PC + 1;
	cppVar_31671 = (cppVar_31671 & cppMask_un_16_);
	BIT_VEC cppVar_31672 = ROM.rd(cppVar_31671);
	BIT_VEC cppVar_31673 = (cppVar_31672 >> 7) & cppMask_un_1_;
	bool cppVar_31674 = (cppVar_31673 == 1);
	BIT_VEC cppVar_31675 = PC + 1;
	cppVar_31675 = (cppVar_31675 & cppMask_un_16_);
	BIT_VEC cppVar_31676 = ROM.rd(cppVar_31675);
	BIT_VEC cppVar_31677 = (cppVar_31676 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31678 = (cppVar_31677 << 3) | 0;
	cppVar_31678 = (cppVar_31678 & cppMask_un_8_);
	BIT_VEC cppVar_31679 = PC + 1;
	cppVar_31679 = (cppVar_31679 & cppMask_un_16_);
	BIT_VEC cppVar_31680 = ROM.rd(cppVar_31679);
	BIT_VEC cppVar_31681 = (cppVar_31680 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31682 = (cppVar_31681 & cppMask_un_5_);
	BIT_VEC cppVar_31683 = cppVar_31682 + 32;
	cppVar_31683 = (cppVar_31683 & cppMask_un_8_);
	BIT_VEC cppVar_31684 = (cppVar_31674) ? cppVar_31678 : cppVar_31683;
	BIT_VEC cppVar_31685 = (cppVar_31684 >> 7) & cppMask_un_1_;
	bool cppVar_31687 = (cppVar_31685 == 0);
	BIT_VEC cppVar_31688 = PC + 1;
	cppVar_31688 = (cppVar_31688 & cppMask_un_16_);
	BIT_VEC cppVar_31689 = ROM.rd(cppVar_31688);
	BIT_VEC cppVar_31690 = (cppVar_31689 >> 7) & cppMask_un_1_;
	bool cppVar_31691 = (cppVar_31690 == 1);
	BIT_VEC cppVar_31692 = PC + 1;
	cppVar_31692 = (cppVar_31692 & cppMask_un_16_);
	BIT_VEC cppVar_31693 = ROM.rd(cppVar_31692);
	BIT_VEC cppVar_31694 = (cppVar_31693 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31695 = (cppVar_31694 << 3) | 0;
	cppVar_31695 = (cppVar_31695 & cppMask_un_8_);
	BIT_VEC cppVar_31696 = PC + 1;
	cppVar_31696 = (cppVar_31696 & cppMask_un_16_);
	BIT_VEC cppVar_31697 = ROM.rd(cppVar_31696);
	BIT_VEC cppVar_31698 = (cppVar_31697 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31699 = (cppVar_31698 & cppMask_un_5_);
	BIT_VEC cppVar_31700 = cppVar_31699 + 32;
	cppVar_31700 = (cppVar_31700 & cppMask_un_8_);
	BIT_VEC cppVar_31701 = (cppVar_31691) ? cppVar_31695 : cppVar_31700;
	BIT_VEC cppVar_31702 = IRAM.rd(cppVar_31701);
	BIT_VEC cppVar_31703 = PC + 1;
	cppVar_31703 = (cppVar_31703 & cppMask_un_16_);
	BIT_VEC cppVar_31704 = ROM.rd(cppVar_31703);
	BIT_VEC cppVar_31705 = (cppVar_31704 >> 7) & cppMask_un_1_;
	bool cppVar_31706 = (cppVar_31705 == 1);
	BIT_VEC cppVar_31707 = PC + 1;
	cppVar_31707 = (cppVar_31707 & cppMask_un_16_);
	BIT_VEC cppVar_31708 = ROM.rd(cppVar_31707);
	BIT_VEC cppVar_31709 = (cppVar_31708 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31710 = (cppVar_31709 << 3) | 0;
	cppVar_31710 = (cppVar_31710 & cppMask_un_8_);
	BIT_VEC cppVar_31711 = PC + 1;
	cppVar_31711 = (cppVar_31711 & cppMask_un_16_);
	BIT_VEC cppVar_31712 = ROM.rd(cppVar_31711);
	BIT_VEC cppVar_31713 = (cppVar_31712 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31714 = (cppVar_31713 & cppMask_un_5_);
	BIT_VEC cppVar_31715 = cppVar_31714 + 32;
	cppVar_31715 = (cppVar_31715 & cppMask_un_8_);
	BIT_VEC cppVar_31716 = (cppVar_31706) ? cppVar_31710 : cppVar_31715;
	bool cppVar_31718 = (cppVar_31716 == 128);
	BIT_VEC cppVar_31719 = PC + 1;
	cppVar_31719 = (cppVar_31719 & cppMask_un_16_);
	BIT_VEC cppVar_31720 = ROM.rd(cppVar_31719);
	BIT_VEC cppVar_31721 = (cppVar_31720 >> 7) & cppMask_un_1_;
	bool cppVar_31722 = (cppVar_31721 == 1);
	BIT_VEC cppVar_31723 = PC + 1;
	cppVar_31723 = (cppVar_31723 & cppMask_un_16_);
	BIT_VEC cppVar_31724 = ROM.rd(cppVar_31723);
	BIT_VEC cppVar_31725 = (cppVar_31724 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31726 = (cppVar_31725 << 3) | 0;
	cppVar_31726 = (cppVar_31726 & cppMask_un_8_);
	BIT_VEC cppVar_31727 = PC + 1;
	cppVar_31727 = (cppVar_31727 & cppMask_un_16_);
	BIT_VEC cppVar_31728 = ROM.rd(cppVar_31727);
	BIT_VEC cppVar_31729 = (cppVar_31728 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31730 = (cppVar_31729 & cppMask_un_5_);
	BIT_VEC cppVar_31731 = cppVar_31730 + 32;
	cppVar_31731 = (cppVar_31731 & cppMask_un_8_);
	BIT_VEC cppVar_31732 = (cppVar_31722) ? cppVar_31726 : cppVar_31731;
	bool cppVar_31734 = (cppVar_31732 == 129);
	BIT_VEC cppVar_31735 = PC + 1;
	cppVar_31735 = (cppVar_31735 & cppMask_un_16_);
	BIT_VEC cppVar_31736 = ROM.rd(cppVar_31735);
	BIT_VEC cppVar_31737 = (cppVar_31736 >> 7) & cppMask_un_1_;
	bool cppVar_31738 = (cppVar_31737 == 1);
	BIT_VEC cppVar_31739 = PC + 1;
	cppVar_31739 = (cppVar_31739 & cppMask_un_16_);
	BIT_VEC cppVar_31740 = ROM.rd(cppVar_31739);
	BIT_VEC cppVar_31741 = (cppVar_31740 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31742 = (cppVar_31741 << 3) | 0;
	cppVar_31742 = (cppVar_31742 & cppMask_un_8_);
	BIT_VEC cppVar_31743 = PC + 1;
	cppVar_31743 = (cppVar_31743 & cppMask_un_16_);
	BIT_VEC cppVar_31744 = ROM.rd(cppVar_31743);
	BIT_VEC cppVar_31745 = (cppVar_31744 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31746 = (cppVar_31745 & cppMask_un_5_);
	BIT_VEC cppVar_31747 = cppVar_31746 + 32;
	cppVar_31747 = (cppVar_31747 & cppMask_un_8_);
	BIT_VEC cppVar_31748 = (cppVar_31738) ? cppVar_31742 : cppVar_31747;
	bool cppVar_31750 = (cppVar_31748 == 130);
	BIT_VEC cppVar_31751 = PC + 1;
	cppVar_31751 = (cppVar_31751 & cppMask_un_16_);
	BIT_VEC cppVar_31752 = ROM.rd(cppVar_31751);
	BIT_VEC cppVar_31753 = (cppVar_31752 >> 7) & cppMask_un_1_;
	bool cppVar_31754 = (cppVar_31753 == 1);
	BIT_VEC cppVar_31755 = PC + 1;
	cppVar_31755 = (cppVar_31755 & cppMask_un_16_);
	BIT_VEC cppVar_31756 = ROM.rd(cppVar_31755);
	BIT_VEC cppVar_31757 = (cppVar_31756 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31758 = (cppVar_31757 << 3) | 0;
	cppVar_31758 = (cppVar_31758 & cppMask_un_8_);
	BIT_VEC cppVar_31759 = PC + 1;
	cppVar_31759 = (cppVar_31759 & cppMask_un_16_);
	BIT_VEC cppVar_31760 = ROM.rd(cppVar_31759);
	BIT_VEC cppVar_31761 = (cppVar_31760 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31762 = (cppVar_31761 & cppMask_un_5_);
	BIT_VEC cppVar_31763 = cppVar_31762 + 32;
	cppVar_31763 = (cppVar_31763 & cppMask_un_8_);
	BIT_VEC cppVar_31764 = (cppVar_31754) ? cppVar_31758 : cppVar_31763;
	bool cppVar_31766 = (cppVar_31764 == 131);
	BIT_VEC cppVar_31767 = PC + 1;
	cppVar_31767 = (cppVar_31767 & cppMask_un_16_);
	BIT_VEC cppVar_31768 = ROM.rd(cppVar_31767);
	BIT_VEC cppVar_31769 = (cppVar_31768 >> 7) & cppMask_un_1_;
	bool cppVar_31770 = (cppVar_31769 == 1);
	BIT_VEC cppVar_31771 = PC + 1;
	cppVar_31771 = (cppVar_31771 & cppMask_un_16_);
	BIT_VEC cppVar_31772 = ROM.rd(cppVar_31771);
	BIT_VEC cppVar_31773 = (cppVar_31772 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31774 = (cppVar_31773 << 3) | 0;
	cppVar_31774 = (cppVar_31774 & cppMask_un_8_);
	BIT_VEC cppVar_31775 = PC + 1;
	cppVar_31775 = (cppVar_31775 & cppMask_un_16_);
	BIT_VEC cppVar_31776 = ROM.rd(cppVar_31775);
	BIT_VEC cppVar_31777 = (cppVar_31776 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31778 = (cppVar_31777 & cppMask_un_5_);
	BIT_VEC cppVar_31779 = cppVar_31778 + 32;
	cppVar_31779 = (cppVar_31779 & cppMask_un_8_);
	BIT_VEC cppVar_31780 = (cppVar_31770) ? cppVar_31774 : cppVar_31779;
	bool cppVar_31782 = (cppVar_31780 == 135);
	BIT_VEC cppVar_31783 = PC + 1;
	cppVar_31783 = (cppVar_31783 & cppMask_un_16_);
	BIT_VEC cppVar_31784 = ROM.rd(cppVar_31783);
	BIT_VEC cppVar_31785 = (cppVar_31784 >> 7) & cppMask_un_1_;
	bool cppVar_31786 = (cppVar_31785 == 1);
	BIT_VEC cppVar_31787 = PC + 1;
	cppVar_31787 = (cppVar_31787 & cppMask_un_16_);
	BIT_VEC cppVar_31788 = ROM.rd(cppVar_31787);
	BIT_VEC cppVar_31789 = (cppVar_31788 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31790 = (cppVar_31789 << 3) | 0;
	cppVar_31790 = (cppVar_31790 & cppMask_un_8_);
	BIT_VEC cppVar_31791 = PC + 1;
	cppVar_31791 = (cppVar_31791 & cppMask_un_16_);
	BIT_VEC cppVar_31792 = ROM.rd(cppVar_31791);
	BIT_VEC cppVar_31793 = (cppVar_31792 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31794 = (cppVar_31793 & cppMask_un_5_);
	BIT_VEC cppVar_31795 = cppVar_31794 + 32;
	cppVar_31795 = (cppVar_31795 & cppMask_un_8_);
	BIT_VEC cppVar_31796 = (cppVar_31786) ? cppVar_31790 : cppVar_31795;
	bool cppVar_31798 = (cppVar_31796 == 136);
	BIT_VEC cppVar_31799 = PC + 1;
	cppVar_31799 = (cppVar_31799 & cppMask_un_16_);
	BIT_VEC cppVar_31800 = ROM.rd(cppVar_31799);
	BIT_VEC cppVar_31801 = (cppVar_31800 >> 7) & cppMask_un_1_;
	bool cppVar_31802 = (cppVar_31801 == 1);
	BIT_VEC cppVar_31803 = PC + 1;
	cppVar_31803 = (cppVar_31803 & cppMask_un_16_);
	BIT_VEC cppVar_31804 = ROM.rd(cppVar_31803);
	BIT_VEC cppVar_31805 = (cppVar_31804 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31806 = (cppVar_31805 << 3) | 0;
	cppVar_31806 = (cppVar_31806 & cppMask_un_8_);
	BIT_VEC cppVar_31807 = PC + 1;
	cppVar_31807 = (cppVar_31807 & cppMask_un_16_);
	BIT_VEC cppVar_31808 = ROM.rd(cppVar_31807);
	BIT_VEC cppVar_31809 = (cppVar_31808 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31810 = (cppVar_31809 & cppMask_un_5_);
	BIT_VEC cppVar_31811 = cppVar_31810 + 32;
	cppVar_31811 = (cppVar_31811 & cppMask_un_8_);
	BIT_VEC cppVar_31812 = (cppVar_31802) ? cppVar_31806 : cppVar_31811;
	bool cppVar_31814 = (cppVar_31812 == 137);
	BIT_VEC cppVar_31815 = PC + 1;
	cppVar_31815 = (cppVar_31815 & cppMask_un_16_);
	BIT_VEC cppVar_31816 = ROM.rd(cppVar_31815);
	BIT_VEC cppVar_31817 = (cppVar_31816 >> 7) & cppMask_un_1_;
	bool cppVar_31818 = (cppVar_31817 == 1);
	BIT_VEC cppVar_31819 = PC + 1;
	cppVar_31819 = (cppVar_31819 & cppMask_un_16_);
	BIT_VEC cppVar_31820 = ROM.rd(cppVar_31819);
	BIT_VEC cppVar_31821 = (cppVar_31820 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31822 = (cppVar_31821 << 3) | 0;
	cppVar_31822 = (cppVar_31822 & cppMask_un_8_);
	BIT_VEC cppVar_31823 = PC + 1;
	cppVar_31823 = (cppVar_31823 & cppMask_un_16_);
	BIT_VEC cppVar_31824 = ROM.rd(cppVar_31823);
	BIT_VEC cppVar_31825 = (cppVar_31824 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31826 = (cppVar_31825 & cppMask_un_5_);
	BIT_VEC cppVar_31827 = cppVar_31826 + 32;
	cppVar_31827 = (cppVar_31827 & cppMask_un_8_);
	BIT_VEC cppVar_31828 = (cppVar_31818) ? cppVar_31822 : cppVar_31827;
	bool cppVar_31830 = (cppVar_31828 == 138);
	BIT_VEC cppVar_31831 = PC + 1;
	cppVar_31831 = (cppVar_31831 & cppMask_un_16_);
	BIT_VEC cppVar_31832 = ROM.rd(cppVar_31831);
	BIT_VEC cppVar_31833 = (cppVar_31832 >> 7) & cppMask_un_1_;
	bool cppVar_31834 = (cppVar_31833 == 1);
	BIT_VEC cppVar_31835 = PC + 1;
	cppVar_31835 = (cppVar_31835 & cppMask_un_16_);
	BIT_VEC cppVar_31836 = ROM.rd(cppVar_31835);
	BIT_VEC cppVar_31837 = (cppVar_31836 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31838 = (cppVar_31837 << 3) | 0;
	cppVar_31838 = (cppVar_31838 & cppMask_un_8_);
	BIT_VEC cppVar_31839 = PC + 1;
	cppVar_31839 = (cppVar_31839 & cppMask_un_16_);
	BIT_VEC cppVar_31840 = ROM.rd(cppVar_31839);
	BIT_VEC cppVar_31841 = (cppVar_31840 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31842 = (cppVar_31841 & cppMask_un_5_);
	BIT_VEC cppVar_31843 = cppVar_31842 + 32;
	cppVar_31843 = (cppVar_31843 & cppMask_un_8_);
	BIT_VEC cppVar_31844 = (cppVar_31834) ? cppVar_31838 : cppVar_31843;
	bool cppVar_31846 = (cppVar_31844 == 140);
	BIT_VEC cppVar_31847 = PC + 1;
	cppVar_31847 = (cppVar_31847 & cppMask_un_16_);
	BIT_VEC cppVar_31848 = ROM.rd(cppVar_31847);
	BIT_VEC cppVar_31849 = (cppVar_31848 >> 7) & cppMask_un_1_;
	bool cppVar_31850 = (cppVar_31849 == 1);
	BIT_VEC cppVar_31851 = PC + 1;
	cppVar_31851 = (cppVar_31851 & cppMask_un_16_);
	BIT_VEC cppVar_31852 = ROM.rd(cppVar_31851);
	BIT_VEC cppVar_31853 = (cppVar_31852 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31854 = (cppVar_31853 << 3) | 0;
	cppVar_31854 = (cppVar_31854 & cppMask_un_8_);
	BIT_VEC cppVar_31855 = PC + 1;
	cppVar_31855 = (cppVar_31855 & cppMask_un_16_);
	BIT_VEC cppVar_31856 = ROM.rd(cppVar_31855);
	BIT_VEC cppVar_31857 = (cppVar_31856 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31858 = (cppVar_31857 & cppMask_un_5_);
	BIT_VEC cppVar_31859 = cppVar_31858 + 32;
	cppVar_31859 = (cppVar_31859 & cppMask_un_8_);
	BIT_VEC cppVar_31860 = (cppVar_31850) ? cppVar_31854 : cppVar_31859;
	bool cppVar_31862 = (cppVar_31860 == 139);
	BIT_VEC cppVar_31863 = PC + 1;
	cppVar_31863 = (cppVar_31863 & cppMask_un_16_);
	BIT_VEC cppVar_31864 = ROM.rd(cppVar_31863);
	BIT_VEC cppVar_31865 = (cppVar_31864 >> 7) & cppMask_un_1_;
	bool cppVar_31866 = (cppVar_31865 == 1);
	BIT_VEC cppVar_31867 = PC + 1;
	cppVar_31867 = (cppVar_31867 & cppMask_un_16_);
	BIT_VEC cppVar_31868 = ROM.rd(cppVar_31867);
	BIT_VEC cppVar_31869 = (cppVar_31868 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31870 = (cppVar_31869 << 3) | 0;
	cppVar_31870 = (cppVar_31870 & cppMask_un_8_);
	BIT_VEC cppVar_31871 = PC + 1;
	cppVar_31871 = (cppVar_31871 & cppMask_un_16_);
	BIT_VEC cppVar_31872 = ROM.rd(cppVar_31871);
	BIT_VEC cppVar_31873 = (cppVar_31872 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31874 = (cppVar_31873 & cppMask_un_5_);
	BIT_VEC cppVar_31875 = cppVar_31874 + 32;
	cppVar_31875 = (cppVar_31875 & cppMask_un_8_);
	BIT_VEC cppVar_31876 = (cppVar_31866) ? cppVar_31870 : cppVar_31875;
	bool cppVar_31878 = (cppVar_31876 == 141);
	BIT_VEC cppVar_31879 = PC + 1;
	cppVar_31879 = (cppVar_31879 & cppMask_un_16_);
	BIT_VEC cppVar_31880 = ROM.rd(cppVar_31879);
	BIT_VEC cppVar_31881 = (cppVar_31880 >> 7) & cppMask_un_1_;
	bool cppVar_31882 = (cppVar_31881 == 1);
	BIT_VEC cppVar_31883 = PC + 1;
	cppVar_31883 = (cppVar_31883 & cppMask_un_16_);
	BIT_VEC cppVar_31884 = ROM.rd(cppVar_31883);
	BIT_VEC cppVar_31885 = (cppVar_31884 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31886 = (cppVar_31885 << 3) | 0;
	cppVar_31886 = (cppVar_31886 & cppMask_un_8_);
	BIT_VEC cppVar_31887 = PC + 1;
	cppVar_31887 = (cppVar_31887 & cppMask_un_16_);
	BIT_VEC cppVar_31888 = ROM.rd(cppVar_31887);
	BIT_VEC cppVar_31889 = (cppVar_31888 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31890 = (cppVar_31889 & cppMask_un_5_);
	BIT_VEC cppVar_31891 = cppVar_31890 + 32;
	cppVar_31891 = (cppVar_31891 & cppMask_un_8_);
	BIT_VEC cppVar_31892 = (cppVar_31882) ? cppVar_31886 : cppVar_31891;
	bool cppVar_31894 = (cppVar_31892 == 144);
	BIT_VEC cppVar_31895 = PC + 1;
	cppVar_31895 = (cppVar_31895 & cppMask_un_16_);
	BIT_VEC cppVar_31896 = ROM.rd(cppVar_31895);
	BIT_VEC cppVar_31897 = (cppVar_31896 >> 7) & cppMask_un_1_;
	bool cppVar_31898 = (cppVar_31897 == 1);
	BIT_VEC cppVar_31899 = PC + 1;
	cppVar_31899 = (cppVar_31899 & cppMask_un_16_);
	BIT_VEC cppVar_31900 = ROM.rd(cppVar_31899);
	BIT_VEC cppVar_31901 = (cppVar_31900 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31902 = (cppVar_31901 << 3) | 0;
	cppVar_31902 = (cppVar_31902 & cppMask_un_8_);
	BIT_VEC cppVar_31903 = PC + 1;
	cppVar_31903 = (cppVar_31903 & cppMask_un_16_);
	BIT_VEC cppVar_31904 = ROM.rd(cppVar_31903);
	BIT_VEC cppVar_31905 = (cppVar_31904 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31906 = (cppVar_31905 & cppMask_un_5_);
	BIT_VEC cppVar_31907 = cppVar_31906 + 32;
	cppVar_31907 = (cppVar_31907 & cppMask_un_8_);
	BIT_VEC cppVar_31908 = (cppVar_31898) ? cppVar_31902 : cppVar_31907;
	bool cppVar_31910 = (cppVar_31908 == 152);
	BIT_VEC cppVar_31911 = PC + 1;
	cppVar_31911 = (cppVar_31911 & cppMask_un_16_);
	BIT_VEC cppVar_31912 = ROM.rd(cppVar_31911);
	BIT_VEC cppVar_31913 = (cppVar_31912 >> 7) & cppMask_un_1_;
	bool cppVar_31914 = (cppVar_31913 == 1);
	BIT_VEC cppVar_31915 = PC + 1;
	cppVar_31915 = (cppVar_31915 & cppMask_un_16_);
	BIT_VEC cppVar_31916 = ROM.rd(cppVar_31915);
	BIT_VEC cppVar_31917 = (cppVar_31916 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31918 = (cppVar_31917 << 3) | 0;
	cppVar_31918 = (cppVar_31918 & cppMask_un_8_);
	BIT_VEC cppVar_31919 = PC + 1;
	cppVar_31919 = (cppVar_31919 & cppMask_un_16_);
	BIT_VEC cppVar_31920 = ROM.rd(cppVar_31919);
	BIT_VEC cppVar_31921 = (cppVar_31920 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31922 = (cppVar_31921 & cppMask_un_5_);
	BIT_VEC cppVar_31923 = cppVar_31922 + 32;
	cppVar_31923 = (cppVar_31923 & cppMask_un_8_);
	BIT_VEC cppVar_31924 = (cppVar_31914) ? cppVar_31918 : cppVar_31923;
	bool cppVar_31926 = (cppVar_31924 == 153);
	BIT_VEC cppVar_31927 = PC + 1;
	cppVar_31927 = (cppVar_31927 & cppMask_un_16_);
	BIT_VEC cppVar_31928 = ROM.rd(cppVar_31927);
	BIT_VEC cppVar_31929 = (cppVar_31928 >> 7) & cppMask_un_1_;
	bool cppVar_31930 = (cppVar_31929 == 1);
	BIT_VEC cppVar_31931 = PC + 1;
	cppVar_31931 = (cppVar_31931 & cppMask_un_16_);
	BIT_VEC cppVar_31932 = ROM.rd(cppVar_31931);
	BIT_VEC cppVar_31933 = (cppVar_31932 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31934 = (cppVar_31933 << 3) | 0;
	cppVar_31934 = (cppVar_31934 & cppMask_un_8_);
	BIT_VEC cppVar_31935 = PC + 1;
	cppVar_31935 = (cppVar_31935 & cppMask_un_16_);
	BIT_VEC cppVar_31936 = ROM.rd(cppVar_31935);
	BIT_VEC cppVar_31937 = (cppVar_31936 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31938 = (cppVar_31937 & cppMask_un_5_);
	BIT_VEC cppVar_31939 = cppVar_31938 + 32;
	cppVar_31939 = (cppVar_31939 & cppMask_un_8_);
	BIT_VEC cppVar_31940 = (cppVar_31930) ? cppVar_31934 : cppVar_31939;
	bool cppVar_31942 = (cppVar_31940 == 160);
	BIT_VEC cppVar_31943 = PC + 1;
	cppVar_31943 = (cppVar_31943 & cppMask_un_16_);
	BIT_VEC cppVar_31944 = ROM.rd(cppVar_31943);
	BIT_VEC cppVar_31945 = (cppVar_31944 >> 7) & cppMask_un_1_;
	bool cppVar_31946 = (cppVar_31945 == 1);
	BIT_VEC cppVar_31947 = PC + 1;
	cppVar_31947 = (cppVar_31947 & cppMask_un_16_);
	BIT_VEC cppVar_31948 = ROM.rd(cppVar_31947);
	BIT_VEC cppVar_31949 = (cppVar_31948 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31950 = (cppVar_31949 << 3) | 0;
	cppVar_31950 = (cppVar_31950 & cppMask_un_8_);
	BIT_VEC cppVar_31951 = PC + 1;
	cppVar_31951 = (cppVar_31951 & cppMask_un_16_);
	BIT_VEC cppVar_31952 = ROM.rd(cppVar_31951);
	BIT_VEC cppVar_31953 = (cppVar_31952 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31954 = (cppVar_31953 & cppMask_un_5_);
	BIT_VEC cppVar_31955 = cppVar_31954 + 32;
	cppVar_31955 = (cppVar_31955 & cppMask_un_8_);
	BIT_VEC cppVar_31956 = (cppVar_31946) ? cppVar_31950 : cppVar_31955;
	bool cppVar_31958 = (cppVar_31956 == 168);
	BIT_VEC cppVar_31959 = PC + 1;
	cppVar_31959 = (cppVar_31959 & cppMask_un_16_);
	BIT_VEC cppVar_31960 = ROM.rd(cppVar_31959);
	BIT_VEC cppVar_31961 = (cppVar_31960 >> 7) & cppMask_un_1_;
	bool cppVar_31962 = (cppVar_31961 == 1);
	BIT_VEC cppVar_31963 = PC + 1;
	cppVar_31963 = (cppVar_31963 & cppMask_un_16_);
	BIT_VEC cppVar_31964 = ROM.rd(cppVar_31963);
	BIT_VEC cppVar_31965 = (cppVar_31964 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31966 = (cppVar_31965 << 3) | 0;
	cppVar_31966 = (cppVar_31966 & cppMask_un_8_);
	BIT_VEC cppVar_31967 = PC + 1;
	cppVar_31967 = (cppVar_31967 & cppMask_un_16_);
	BIT_VEC cppVar_31968 = ROM.rd(cppVar_31967);
	BIT_VEC cppVar_31969 = (cppVar_31968 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31970 = (cppVar_31969 & cppMask_un_5_);
	BIT_VEC cppVar_31971 = cppVar_31970 + 32;
	cppVar_31971 = (cppVar_31971 & cppMask_un_8_);
	BIT_VEC cppVar_31972 = (cppVar_31962) ? cppVar_31966 : cppVar_31971;
	bool cppVar_31974 = (cppVar_31972 == 176);
	BIT_VEC cppVar_31975 = PC + 1;
	cppVar_31975 = (cppVar_31975 & cppMask_un_16_);
	BIT_VEC cppVar_31976 = ROM.rd(cppVar_31975);
	BIT_VEC cppVar_31977 = (cppVar_31976 >> 7) & cppMask_un_1_;
	bool cppVar_31978 = (cppVar_31977 == 1);
	BIT_VEC cppVar_31979 = PC + 1;
	cppVar_31979 = (cppVar_31979 & cppMask_un_16_);
	BIT_VEC cppVar_31980 = ROM.rd(cppVar_31979);
	BIT_VEC cppVar_31981 = (cppVar_31980 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31982 = (cppVar_31981 << 3) | 0;
	cppVar_31982 = (cppVar_31982 & cppMask_un_8_);
	BIT_VEC cppVar_31983 = PC + 1;
	cppVar_31983 = (cppVar_31983 & cppMask_un_16_);
	BIT_VEC cppVar_31984 = ROM.rd(cppVar_31983);
	BIT_VEC cppVar_31985 = (cppVar_31984 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31986 = (cppVar_31985 & cppMask_un_5_);
	BIT_VEC cppVar_31987 = cppVar_31986 + 32;
	cppVar_31987 = (cppVar_31987 & cppMask_un_8_);
	BIT_VEC cppVar_31988 = (cppVar_31978) ? cppVar_31982 : cppVar_31987;
	bool cppVar_31990 = (cppVar_31988 == 184);
	BIT_VEC cppVar_31991 = PC + 1;
	cppVar_31991 = (cppVar_31991 & cppMask_un_16_);
	BIT_VEC cppVar_31992 = ROM.rd(cppVar_31991);
	BIT_VEC cppVar_31993 = (cppVar_31992 >> 7) & cppMask_un_1_;
	bool cppVar_31994 = (cppVar_31993 == 1);
	BIT_VEC cppVar_31995 = PC + 1;
	cppVar_31995 = (cppVar_31995 & cppMask_un_16_);
	BIT_VEC cppVar_31996 = ROM.rd(cppVar_31995);
	BIT_VEC cppVar_31997 = (cppVar_31996 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_31998 = (cppVar_31997 << 3) | 0;
	cppVar_31998 = (cppVar_31998 & cppMask_un_8_);
	BIT_VEC cppVar_31999 = PC + 1;
	cppVar_31999 = (cppVar_31999 & cppMask_un_16_);
	BIT_VEC cppVar_32000 = ROM.rd(cppVar_31999);
	BIT_VEC cppVar_32001 = (cppVar_32000 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32002 = (cppVar_32001 & cppMask_un_5_);
	BIT_VEC cppVar_32003 = cppVar_32002 + 32;
	cppVar_32003 = (cppVar_32003 & cppMask_un_8_);
	BIT_VEC cppVar_32004 = (cppVar_31994) ? cppVar_31998 : cppVar_32003;
	bool cppVar_32006 = (cppVar_32004 == 208);
	BIT_VEC cppVar_32007 = PC + 1;
	cppVar_32007 = (cppVar_32007 & cppMask_un_16_);
	BIT_VEC cppVar_32008 = ROM.rd(cppVar_32007);
	BIT_VEC cppVar_32009 = (cppVar_32008 >> 7) & cppMask_un_1_;
	bool cppVar_32010 = (cppVar_32009 == 1);
	BIT_VEC cppVar_32011 = PC + 1;
	cppVar_32011 = (cppVar_32011 & cppMask_un_16_);
	BIT_VEC cppVar_32012 = ROM.rd(cppVar_32011);
	BIT_VEC cppVar_32013 = (cppVar_32012 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32014 = (cppVar_32013 << 3) | 0;
	cppVar_32014 = (cppVar_32014 & cppMask_un_8_);
	BIT_VEC cppVar_32015 = PC + 1;
	cppVar_32015 = (cppVar_32015 & cppMask_un_16_);
	BIT_VEC cppVar_32016 = ROM.rd(cppVar_32015);
	BIT_VEC cppVar_32017 = (cppVar_32016 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32018 = (cppVar_32017 & cppMask_un_5_);
	BIT_VEC cppVar_32019 = cppVar_32018 + 32;
	cppVar_32019 = (cppVar_32019 & cppMask_un_8_);
	BIT_VEC cppVar_32020 = (cppVar_32010) ? cppVar_32014 : cppVar_32019;
	bool cppVar_32022 = (cppVar_32020 == 224);
	BIT_VEC cppVar_32023 = PC + 1;
	cppVar_32023 = (cppVar_32023 & cppMask_un_16_);
	BIT_VEC cppVar_32024 = ROM.rd(cppVar_32023);
	BIT_VEC cppVar_32025 = (cppVar_32024 >> 7) & cppMask_un_1_;
	bool cppVar_32026 = (cppVar_32025 == 1);
	BIT_VEC cppVar_32027 = PC + 1;
	cppVar_32027 = (cppVar_32027 & cppMask_un_16_);
	BIT_VEC cppVar_32028 = ROM.rd(cppVar_32027);
	BIT_VEC cppVar_32029 = (cppVar_32028 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32030 = (cppVar_32029 << 3) | 0;
	cppVar_32030 = (cppVar_32030 & cppMask_un_8_);
	BIT_VEC cppVar_32031 = PC + 1;
	cppVar_32031 = (cppVar_32031 & cppMask_un_16_);
	BIT_VEC cppVar_32032 = ROM.rd(cppVar_32031);
	BIT_VEC cppVar_32033 = (cppVar_32032 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32034 = (cppVar_32033 & cppMask_un_5_);
	BIT_VEC cppVar_32035 = cppVar_32034 + 32;
	cppVar_32035 = (cppVar_32035 & cppMask_un_8_);
	BIT_VEC cppVar_32036 = (cppVar_32026) ? cppVar_32030 : cppVar_32035;
	bool cppVar_32038 = (cppVar_32036 == 240);
	BIT_VEC cppVar_32040 = (cppVar_32038) ? B : 0;
	BIT_VEC cppVar_32041 = (cppVar_32022) ? ACC : cppVar_32040;
	BIT_VEC cppVar_32042 = (cppVar_32006) ? PSW : cppVar_32041;
	BIT_VEC cppVar_32043 = (cppVar_31990) ? IP : cppVar_32042;
	BIT_VEC cppVar_32044 = (cppVar_31974) ? P3 : cppVar_32043;
	BIT_VEC cppVar_32045 = (cppVar_31958) ? IE : cppVar_32044;
	BIT_VEC cppVar_32046 = (cppVar_31942) ? P2 : cppVar_32045;
	BIT_VEC cppVar_32047 = (cppVar_31926) ? SBUF : cppVar_32046;
	BIT_VEC cppVar_32048 = (cppVar_31910) ? SCON : cppVar_32047;
	BIT_VEC cppVar_32049 = (cppVar_31894) ? P1 : cppVar_32048;
	BIT_VEC cppVar_32050 = (cppVar_31878) ? TH1 : cppVar_32049;
	BIT_VEC cppVar_32051 = (cppVar_31862) ? TL1 : cppVar_32050;
	BIT_VEC cppVar_32052 = (cppVar_31846) ? TH0 : cppVar_32051;
	BIT_VEC cppVar_32053 = (cppVar_31830) ? TL0 : cppVar_32052;
	BIT_VEC cppVar_32054 = (cppVar_31814) ? TMOD : cppVar_32053;
	BIT_VEC cppVar_32055 = (cppVar_31798) ? TCON : cppVar_32054;
	BIT_VEC cppVar_32056 = (cppVar_31782) ? PCON : cppVar_32055;
	BIT_VEC cppVar_32057 = (cppVar_31766) ? DPH : cppVar_32056;
	BIT_VEC cppVar_32058 = (cppVar_31750) ? DPL : cppVar_32057;
	BIT_VEC cppVar_32059 = (cppVar_31734) ? SP : cppVar_32058;
	BIT_VEC cppVar_32060 = (cppVar_31718) ? P0 : cppVar_32059;
	BIT_VEC cppVar_32061 = (cppVar_31687) ? cppVar_31702 : cppVar_32060;
	BIT_VEC cppVar_32062 = cppVar_31670 & cppVar_32061;
	BIT_VEC cppVar_32064 = 1;
	BIT_VEC cppVar_32065 = PC + 1;
	cppVar_32065 = (cppVar_32065 & cppMask_un_16_);
	BIT_VEC cppVar_32066 = ROM.rd(cppVar_32065);
	BIT_VEC cppVar_32067 = (cppVar_32066 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_32068 = (cppVar_32067 & cppMask_un_3_);
	BIT_VEC cppVar_32069 = cppVar_32064 << static_cast<unsigned>(cppVar_32068);
	cppVar_32069 = (cppVar_32069 & cppMask_un_8_);
	BIT_VEC cppVar_32070 = cppVar_32062 | cppVar_32069;
	BIT_VEC cppVar_32071 = (cppVar_31663) ? cppVar_32070 : P2;
	BIT_VEC cppVar_32072 = ROM.rd(PC);
	bool cppVar_32074 = (cppVar_32072 == 208);
	BIT_VEC cppVar_32076 = PC + 1;
	cppVar_32076 = (cppVar_32076 & cppMask_un_16_);
	BIT_VEC cppVar_32077 = ROM.rd(cppVar_32076);
	bool cppVar_32079 = (cppVar_32077 == 160);
	BIT_VEC cppVar_32080 = IRAM.rd(SP);
	BIT_VEC cppVar_32081 = (cppVar_32079) ? cppVar_32080 : P2;
	BIT_VEC cppVar_32082 = ROM.rd(PC);
	bool cppVar_32084 = (cppVar_32082 == 245);
	BIT_VEC cppVar_32085 = ROM.rd(PC);
	bool cppVar_32087 = (cppVar_32085 == 197);
	bool cppVar_32088 = cppVar_32084 || cppVar_32087;
	BIT_VEC cppVar_32090 = PC + 1;
	cppVar_32090 = (cppVar_32090 & cppMask_un_16_);
	BIT_VEC cppVar_32091 = ROM.rd(cppVar_32090);
	bool cppVar_32093 = (cppVar_32091 == 160);
	BIT_VEC cppVar_32094 = (cppVar_32093) ? ACC : P2;
	BIT_VEC cppVar_32095 = ROM.rd(PC);
	bool cppVar_32097 = (cppVar_32095 == 178);
	BIT_VEC cppVar_32099 = PC + 1;
	cppVar_32099 = (cppVar_32099 & cppMask_un_16_);
	BIT_VEC cppVar_32100 = ROM.rd(cppVar_32099);
	BIT_VEC cppVar_32101 = (cppVar_32100 >> 7) & cppMask_un_1_;
	bool cppVar_32103 = (cppVar_32101 == 1);
	BIT_VEC cppVar_32104 = PC + 1;
	cppVar_32104 = (cppVar_32104 & cppMask_un_16_);
	BIT_VEC cppVar_32105 = ROM.rd(cppVar_32104);
	BIT_VEC cppVar_32106 = (cppVar_32105 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32108 = (cppVar_32106 << 3) | 0;
	cppVar_32108 = (cppVar_32108 & cppMask_un_8_);
	BIT_VEC cppVar_32109 = PC + 1;
	cppVar_32109 = (cppVar_32109 & cppMask_un_16_);
	BIT_VEC cppVar_32110 = ROM.rd(cppVar_32109);
	BIT_VEC cppVar_32111 = (cppVar_32110 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32112 = (cppVar_32111 & cppMask_un_5_);
	BIT_VEC cppVar_32114 = cppVar_32112 + 32;
	cppVar_32114 = (cppVar_32114 & cppMask_un_8_);
	BIT_VEC cppVar_32115 = (cppVar_32103) ? cppVar_32108 : cppVar_32114;
	bool cppVar_32117 = (cppVar_32115 == 160);
	BIT_VEC cppVar_32119 = PC + 1;
	cppVar_32119 = (cppVar_32119 & cppMask_un_16_);
	BIT_VEC cppVar_32120 = ROM.rd(cppVar_32119);
	BIT_VEC cppVar_32121 = (cppVar_32120 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_32122 = (cppVar_32121 & cppMask_un_3_);
	BIT_VEC cppVar_32123 = 1 << static_cast<unsigned>(cppVar_32122);
	cppVar_32123 = (cppVar_32123 & cppMask_un_8_);
	BIT_VEC cppVar_32124 = ~cppVar_32123;
	BIT_VEC cppVar_32125 = PC + 1;
	cppVar_32125 = (cppVar_32125 & cppMask_un_16_);
	BIT_VEC cppVar_32126 = ROM.rd(cppVar_32125);
	BIT_VEC cppVar_32127 = (cppVar_32126 >> 7) & cppMask_un_1_;
	bool cppVar_32128 = (cppVar_32127 == 1);
	BIT_VEC cppVar_32129 = PC + 1;
	cppVar_32129 = (cppVar_32129 & cppMask_un_16_);
	BIT_VEC cppVar_32130 = ROM.rd(cppVar_32129);
	BIT_VEC cppVar_32131 = (cppVar_32130 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32132 = (cppVar_32131 << 3) | 0;
	cppVar_32132 = (cppVar_32132 & cppMask_un_8_);
	BIT_VEC cppVar_32133 = PC + 1;
	cppVar_32133 = (cppVar_32133 & cppMask_un_16_);
	BIT_VEC cppVar_32134 = ROM.rd(cppVar_32133);
	BIT_VEC cppVar_32135 = (cppVar_32134 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32136 = (cppVar_32135 & cppMask_un_5_);
	BIT_VEC cppVar_32137 = cppVar_32136 + 32;
	cppVar_32137 = (cppVar_32137 & cppMask_un_8_);
	BIT_VEC cppVar_32138 = (cppVar_32128) ? cppVar_32132 : cppVar_32137;
	BIT_VEC cppVar_32139 = (cppVar_32138 >> 7) & cppMask_un_1_;
	bool cppVar_32141 = (cppVar_32139 == 0);
	BIT_VEC cppVar_32142 = PC + 1;
	cppVar_32142 = (cppVar_32142 & cppMask_un_16_);
	BIT_VEC cppVar_32143 = ROM.rd(cppVar_32142);
	BIT_VEC cppVar_32144 = (cppVar_32143 >> 7) & cppMask_un_1_;
	bool cppVar_32145 = (cppVar_32144 == 1);
	BIT_VEC cppVar_32146 = PC + 1;
	cppVar_32146 = (cppVar_32146 & cppMask_un_16_);
	BIT_VEC cppVar_32147 = ROM.rd(cppVar_32146);
	BIT_VEC cppVar_32148 = (cppVar_32147 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32149 = (cppVar_32148 << 3) | 0;
	cppVar_32149 = (cppVar_32149 & cppMask_un_8_);
	BIT_VEC cppVar_32150 = PC + 1;
	cppVar_32150 = (cppVar_32150 & cppMask_un_16_);
	BIT_VEC cppVar_32151 = ROM.rd(cppVar_32150);
	BIT_VEC cppVar_32152 = (cppVar_32151 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32153 = (cppVar_32152 & cppMask_un_5_);
	BIT_VEC cppVar_32154 = cppVar_32153 + 32;
	cppVar_32154 = (cppVar_32154 & cppMask_un_8_);
	BIT_VEC cppVar_32155 = (cppVar_32145) ? cppVar_32149 : cppVar_32154;
	BIT_VEC cppVar_32156 = IRAM.rd(cppVar_32155);
	BIT_VEC cppVar_32157 = PC + 1;
	cppVar_32157 = (cppVar_32157 & cppMask_un_16_);
	BIT_VEC cppVar_32158 = ROM.rd(cppVar_32157);
	BIT_VEC cppVar_32159 = (cppVar_32158 >> 7) & cppMask_un_1_;
	bool cppVar_32160 = (cppVar_32159 == 1);
	BIT_VEC cppVar_32161 = PC + 1;
	cppVar_32161 = (cppVar_32161 & cppMask_un_16_);
	BIT_VEC cppVar_32162 = ROM.rd(cppVar_32161);
	BIT_VEC cppVar_32163 = (cppVar_32162 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32164 = (cppVar_32163 << 3) | 0;
	cppVar_32164 = (cppVar_32164 & cppMask_un_8_);
	BIT_VEC cppVar_32165 = PC + 1;
	cppVar_32165 = (cppVar_32165 & cppMask_un_16_);
	BIT_VEC cppVar_32166 = ROM.rd(cppVar_32165);
	BIT_VEC cppVar_32167 = (cppVar_32166 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32168 = (cppVar_32167 & cppMask_un_5_);
	BIT_VEC cppVar_32169 = cppVar_32168 + 32;
	cppVar_32169 = (cppVar_32169 & cppMask_un_8_);
	BIT_VEC cppVar_32170 = (cppVar_32160) ? cppVar_32164 : cppVar_32169;
	bool cppVar_32172 = (cppVar_32170 == 128);
	BIT_VEC cppVar_32173 = PC + 1;
	cppVar_32173 = (cppVar_32173 & cppMask_un_16_);
	BIT_VEC cppVar_32174 = ROM.rd(cppVar_32173);
	BIT_VEC cppVar_32175 = (cppVar_32174 >> 7) & cppMask_un_1_;
	bool cppVar_32176 = (cppVar_32175 == 1);
	BIT_VEC cppVar_32177 = PC + 1;
	cppVar_32177 = (cppVar_32177 & cppMask_un_16_);
	BIT_VEC cppVar_32178 = ROM.rd(cppVar_32177);
	BIT_VEC cppVar_32179 = (cppVar_32178 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32180 = (cppVar_32179 << 3) | 0;
	cppVar_32180 = (cppVar_32180 & cppMask_un_8_);
	BIT_VEC cppVar_32181 = PC + 1;
	cppVar_32181 = (cppVar_32181 & cppMask_un_16_);
	BIT_VEC cppVar_32182 = ROM.rd(cppVar_32181);
	BIT_VEC cppVar_32183 = (cppVar_32182 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32184 = (cppVar_32183 & cppMask_un_5_);
	BIT_VEC cppVar_32185 = cppVar_32184 + 32;
	cppVar_32185 = (cppVar_32185 & cppMask_un_8_);
	BIT_VEC cppVar_32186 = (cppVar_32176) ? cppVar_32180 : cppVar_32185;
	bool cppVar_32188 = (cppVar_32186 == 129);
	BIT_VEC cppVar_32189 = PC + 1;
	cppVar_32189 = (cppVar_32189 & cppMask_un_16_);
	BIT_VEC cppVar_32190 = ROM.rd(cppVar_32189);
	BIT_VEC cppVar_32191 = (cppVar_32190 >> 7) & cppMask_un_1_;
	bool cppVar_32192 = (cppVar_32191 == 1);
	BIT_VEC cppVar_32193 = PC + 1;
	cppVar_32193 = (cppVar_32193 & cppMask_un_16_);
	BIT_VEC cppVar_32194 = ROM.rd(cppVar_32193);
	BIT_VEC cppVar_32195 = (cppVar_32194 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32196 = (cppVar_32195 << 3) | 0;
	cppVar_32196 = (cppVar_32196 & cppMask_un_8_);
	BIT_VEC cppVar_32197 = PC + 1;
	cppVar_32197 = (cppVar_32197 & cppMask_un_16_);
	BIT_VEC cppVar_32198 = ROM.rd(cppVar_32197);
	BIT_VEC cppVar_32199 = (cppVar_32198 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32200 = (cppVar_32199 & cppMask_un_5_);
	BIT_VEC cppVar_32201 = cppVar_32200 + 32;
	cppVar_32201 = (cppVar_32201 & cppMask_un_8_);
	BIT_VEC cppVar_32202 = (cppVar_32192) ? cppVar_32196 : cppVar_32201;
	bool cppVar_32204 = (cppVar_32202 == 130);
	BIT_VEC cppVar_32205 = PC + 1;
	cppVar_32205 = (cppVar_32205 & cppMask_un_16_);
	BIT_VEC cppVar_32206 = ROM.rd(cppVar_32205);
	BIT_VEC cppVar_32207 = (cppVar_32206 >> 7) & cppMask_un_1_;
	bool cppVar_32208 = (cppVar_32207 == 1);
	BIT_VEC cppVar_32209 = PC + 1;
	cppVar_32209 = (cppVar_32209 & cppMask_un_16_);
	BIT_VEC cppVar_32210 = ROM.rd(cppVar_32209);
	BIT_VEC cppVar_32211 = (cppVar_32210 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32212 = (cppVar_32211 << 3) | 0;
	cppVar_32212 = (cppVar_32212 & cppMask_un_8_);
	BIT_VEC cppVar_32213 = PC + 1;
	cppVar_32213 = (cppVar_32213 & cppMask_un_16_);
	BIT_VEC cppVar_32214 = ROM.rd(cppVar_32213);
	BIT_VEC cppVar_32215 = (cppVar_32214 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32216 = (cppVar_32215 & cppMask_un_5_);
	BIT_VEC cppVar_32217 = cppVar_32216 + 32;
	cppVar_32217 = (cppVar_32217 & cppMask_un_8_);
	BIT_VEC cppVar_32218 = (cppVar_32208) ? cppVar_32212 : cppVar_32217;
	bool cppVar_32220 = (cppVar_32218 == 131);
	BIT_VEC cppVar_32221 = PC + 1;
	cppVar_32221 = (cppVar_32221 & cppMask_un_16_);
	BIT_VEC cppVar_32222 = ROM.rd(cppVar_32221);
	BIT_VEC cppVar_32223 = (cppVar_32222 >> 7) & cppMask_un_1_;
	bool cppVar_32224 = (cppVar_32223 == 1);
	BIT_VEC cppVar_32225 = PC + 1;
	cppVar_32225 = (cppVar_32225 & cppMask_un_16_);
	BIT_VEC cppVar_32226 = ROM.rd(cppVar_32225);
	BIT_VEC cppVar_32227 = (cppVar_32226 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32228 = (cppVar_32227 << 3) | 0;
	cppVar_32228 = (cppVar_32228 & cppMask_un_8_);
	BIT_VEC cppVar_32229 = PC + 1;
	cppVar_32229 = (cppVar_32229 & cppMask_un_16_);
	BIT_VEC cppVar_32230 = ROM.rd(cppVar_32229);
	BIT_VEC cppVar_32231 = (cppVar_32230 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32232 = (cppVar_32231 & cppMask_un_5_);
	BIT_VEC cppVar_32233 = cppVar_32232 + 32;
	cppVar_32233 = (cppVar_32233 & cppMask_un_8_);
	BIT_VEC cppVar_32234 = (cppVar_32224) ? cppVar_32228 : cppVar_32233;
	bool cppVar_32236 = (cppVar_32234 == 135);
	BIT_VEC cppVar_32237 = PC + 1;
	cppVar_32237 = (cppVar_32237 & cppMask_un_16_);
	BIT_VEC cppVar_32238 = ROM.rd(cppVar_32237);
	BIT_VEC cppVar_32239 = (cppVar_32238 >> 7) & cppMask_un_1_;
	bool cppVar_32240 = (cppVar_32239 == 1);
	BIT_VEC cppVar_32241 = PC + 1;
	cppVar_32241 = (cppVar_32241 & cppMask_un_16_);
	BIT_VEC cppVar_32242 = ROM.rd(cppVar_32241);
	BIT_VEC cppVar_32243 = (cppVar_32242 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32244 = (cppVar_32243 << 3) | 0;
	cppVar_32244 = (cppVar_32244 & cppMask_un_8_);
	BIT_VEC cppVar_32245 = PC + 1;
	cppVar_32245 = (cppVar_32245 & cppMask_un_16_);
	BIT_VEC cppVar_32246 = ROM.rd(cppVar_32245);
	BIT_VEC cppVar_32247 = (cppVar_32246 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32248 = (cppVar_32247 & cppMask_un_5_);
	BIT_VEC cppVar_32249 = cppVar_32248 + 32;
	cppVar_32249 = (cppVar_32249 & cppMask_un_8_);
	BIT_VEC cppVar_32250 = (cppVar_32240) ? cppVar_32244 : cppVar_32249;
	bool cppVar_32252 = (cppVar_32250 == 136);
	BIT_VEC cppVar_32253 = PC + 1;
	cppVar_32253 = (cppVar_32253 & cppMask_un_16_);
	BIT_VEC cppVar_32254 = ROM.rd(cppVar_32253);
	BIT_VEC cppVar_32255 = (cppVar_32254 >> 7) & cppMask_un_1_;
	bool cppVar_32256 = (cppVar_32255 == 1);
	BIT_VEC cppVar_32257 = PC + 1;
	cppVar_32257 = (cppVar_32257 & cppMask_un_16_);
	BIT_VEC cppVar_32258 = ROM.rd(cppVar_32257);
	BIT_VEC cppVar_32259 = (cppVar_32258 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32260 = (cppVar_32259 << 3) | 0;
	cppVar_32260 = (cppVar_32260 & cppMask_un_8_);
	BIT_VEC cppVar_32261 = PC + 1;
	cppVar_32261 = (cppVar_32261 & cppMask_un_16_);
	BIT_VEC cppVar_32262 = ROM.rd(cppVar_32261);
	BIT_VEC cppVar_32263 = (cppVar_32262 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32264 = (cppVar_32263 & cppMask_un_5_);
	BIT_VEC cppVar_32265 = cppVar_32264 + 32;
	cppVar_32265 = (cppVar_32265 & cppMask_un_8_);
	BIT_VEC cppVar_32266 = (cppVar_32256) ? cppVar_32260 : cppVar_32265;
	bool cppVar_32268 = (cppVar_32266 == 137);
	BIT_VEC cppVar_32269 = PC + 1;
	cppVar_32269 = (cppVar_32269 & cppMask_un_16_);
	BIT_VEC cppVar_32270 = ROM.rd(cppVar_32269);
	BIT_VEC cppVar_32271 = (cppVar_32270 >> 7) & cppMask_un_1_;
	bool cppVar_32272 = (cppVar_32271 == 1);
	BIT_VEC cppVar_32273 = PC + 1;
	cppVar_32273 = (cppVar_32273 & cppMask_un_16_);
	BIT_VEC cppVar_32274 = ROM.rd(cppVar_32273);
	BIT_VEC cppVar_32275 = (cppVar_32274 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32276 = (cppVar_32275 << 3) | 0;
	cppVar_32276 = (cppVar_32276 & cppMask_un_8_);
	BIT_VEC cppVar_32277 = PC + 1;
	cppVar_32277 = (cppVar_32277 & cppMask_un_16_);
	BIT_VEC cppVar_32278 = ROM.rd(cppVar_32277);
	BIT_VEC cppVar_32279 = (cppVar_32278 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32280 = (cppVar_32279 & cppMask_un_5_);
	BIT_VEC cppVar_32281 = cppVar_32280 + 32;
	cppVar_32281 = (cppVar_32281 & cppMask_un_8_);
	BIT_VEC cppVar_32282 = (cppVar_32272) ? cppVar_32276 : cppVar_32281;
	bool cppVar_32284 = (cppVar_32282 == 138);
	BIT_VEC cppVar_32285 = PC + 1;
	cppVar_32285 = (cppVar_32285 & cppMask_un_16_);
	BIT_VEC cppVar_32286 = ROM.rd(cppVar_32285);
	BIT_VEC cppVar_32287 = (cppVar_32286 >> 7) & cppMask_un_1_;
	bool cppVar_32288 = (cppVar_32287 == 1);
	BIT_VEC cppVar_32289 = PC + 1;
	cppVar_32289 = (cppVar_32289 & cppMask_un_16_);
	BIT_VEC cppVar_32290 = ROM.rd(cppVar_32289);
	BIT_VEC cppVar_32291 = (cppVar_32290 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32292 = (cppVar_32291 << 3) | 0;
	cppVar_32292 = (cppVar_32292 & cppMask_un_8_);
	BIT_VEC cppVar_32293 = PC + 1;
	cppVar_32293 = (cppVar_32293 & cppMask_un_16_);
	BIT_VEC cppVar_32294 = ROM.rd(cppVar_32293);
	BIT_VEC cppVar_32295 = (cppVar_32294 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32296 = (cppVar_32295 & cppMask_un_5_);
	BIT_VEC cppVar_32297 = cppVar_32296 + 32;
	cppVar_32297 = (cppVar_32297 & cppMask_un_8_);
	BIT_VEC cppVar_32298 = (cppVar_32288) ? cppVar_32292 : cppVar_32297;
	bool cppVar_32300 = (cppVar_32298 == 140);
	BIT_VEC cppVar_32301 = PC + 1;
	cppVar_32301 = (cppVar_32301 & cppMask_un_16_);
	BIT_VEC cppVar_32302 = ROM.rd(cppVar_32301);
	BIT_VEC cppVar_32303 = (cppVar_32302 >> 7) & cppMask_un_1_;
	bool cppVar_32304 = (cppVar_32303 == 1);
	BIT_VEC cppVar_32305 = PC + 1;
	cppVar_32305 = (cppVar_32305 & cppMask_un_16_);
	BIT_VEC cppVar_32306 = ROM.rd(cppVar_32305);
	BIT_VEC cppVar_32307 = (cppVar_32306 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32308 = (cppVar_32307 << 3) | 0;
	cppVar_32308 = (cppVar_32308 & cppMask_un_8_);
	BIT_VEC cppVar_32309 = PC + 1;
	cppVar_32309 = (cppVar_32309 & cppMask_un_16_);
	BIT_VEC cppVar_32310 = ROM.rd(cppVar_32309);
	BIT_VEC cppVar_32311 = (cppVar_32310 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32312 = (cppVar_32311 & cppMask_un_5_);
	BIT_VEC cppVar_32313 = cppVar_32312 + 32;
	cppVar_32313 = (cppVar_32313 & cppMask_un_8_);
	BIT_VEC cppVar_32314 = (cppVar_32304) ? cppVar_32308 : cppVar_32313;
	bool cppVar_32316 = (cppVar_32314 == 139);
	BIT_VEC cppVar_32317 = PC + 1;
	cppVar_32317 = (cppVar_32317 & cppMask_un_16_);
	BIT_VEC cppVar_32318 = ROM.rd(cppVar_32317);
	BIT_VEC cppVar_32319 = (cppVar_32318 >> 7) & cppMask_un_1_;
	bool cppVar_32320 = (cppVar_32319 == 1);
	BIT_VEC cppVar_32321 = PC + 1;
	cppVar_32321 = (cppVar_32321 & cppMask_un_16_);
	BIT_VEC cppVar_32322 = ROM.rd(cppVar_32321);
	BIT_VEC cppVar_32323 = (cppVar_32322 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32324 = (cppVar_32323 << 3) | 0;
	cppVar_32324 = (cppVar_32324 & cppMask_un_8_);
	BIT_VEC cppVar_32325 = PC + 1;
	cppVar_32325 = (cppVar_32325 & cppMask_un_16_);
	BIT_VEC cppVar_32326 = ROM.rd(cppVar_32325);
	BIT_VEC cppVar_32327 = (cppVar_32326 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32328 = (cppVar_32327 & cppMask_un_5_);
	BIT_VEC cppVar_32329 = cppVar_32328 + 32;
	cppVar_32329 = (cppVar_32329 & cppMask_un_8_);
	BIT_VEC cppVar_32330 = (cppVar_32320) ? cppVar_32324 : cppVar_32329;
	bool cppVar_32332 = (cppVar_32330 == 141);
	BIT_VEC cppVar_32333 = PC + 1;
	cppVar_32333 = (cppVar_32333 & cppMask_un_16_);
	BIT_VEC cppVar_32334 = ROM.rd(cppVar_32333);
	BIT_VEC cppVar_32335 = (cppVar_32334 >> 7) & cppMask_un_1_;
	bool cppVar_32336 = (cppVar_32335 == 1);
	BIT_VEC cppVar_32337 = PC + 1;
	cppVar_32337 = (cppVar_32337 & cppMask_un_16_);
	BIT_VEC cppVar_32338 = ROM.rd(cppVar_32337);
	BIT_VEC cppVar_32339 = (cppVar_32338 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32340 = (cppVar_32339 << 3) | 0;
	cppVar_32340 = (cppVar_32340 & cppMask_un_8_);
	BIT_VEC cppVar_32341 = PC + 1;
	cppVar_32341 = (cppVar_32341 & cppMask_un_16_);
	BIT_VEC cppVar_32342 = ROM.rd(cppVar_32341);
	BIT_VEC cppVar_32343 = (cppVar_32342 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32344 = (cppVar_32343 & cppMask_un_5_);
	BIT_VEC cppVar_32345 = cppVar_32344 + 32;
	cppVar_32345 = (cppVar_32345 & cppMask_un_8_);
	BIT_VEC cppVar_32346 = (cppVar_32336) ? cppVar_32340 : cppVar_32345;
	bool cppVar_32348 = (cppVar_32346 == 144);
	BIT_VEC cppVar_32349 = PC + 1;
	cppVar_32349 = (cppVar_32349 & cppMask_un_16_);
	BIT_VEC cppVar_32350 = ROM.rd(cppVar_32349);
	BIT_VEC cppVar_32351 = (cppVar_32350 >> 7) & cppMask_un_1_;
	bool cppVar_32352 = (cppVar_32351 == 1);
	BIT_VEC cppVar_32353 = PC + 1;
	cppVar_32353 = (cppVar_32353 & cppMask_un_16_);
	BIT_VEC cppVar_32354 = ROM.rd(cppVar_32353);
	BIT_VEC cppVar_32355 = (cppVar_32354 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32356 = (cppVar_32355 << 3) | 0;
	cppVar_32356 = (cppVar_32356 & cppMask_un_8_);
	BIT_VEC cppVar_32357 = PC + 1;
	cppVar_32357 = (cppVar_32357 & cppMask_un_16_);
	BIT_VEC cppVar_32358 = ROM.rd(cppVar_32357);
	BIT_VEC cppVar_32359 = (cppVar_32358 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32360 = (cppVar_32359 & cppMask_un_5_);
	BIT_VEC cppVar_32361 = cppVar_32360 + 32;
	cppVar_32361 = (cppVar_32361 & cppMask_un_8_);
	BIT_VEC cppVar_32362 = (cppVar_32352) ? cppVar_32356 : cppVar_32361;
	bool cppVar_32364 = (cppVar_32362 == 152);
	BIT_VEC cppVar_32365 = PC + 1;
	cppVar_32365 = (cppVar_32365 & cppMask_un_16_);
	BIT_VEC cppVar_32366 = ROM.rd(cppVar_32365);
	BIT_VEC cppVar_32367 = (cppVar_32366 >> 7) & cppMask_un_1_;
	bool cppVar_32368 = (cppVar_32367 == 1);
	BIT_VEC cppVar_32369 = PC + 1;
	cppVar_32369 = (cppVar_32369 & cppMask_un_16_);
	BIT_VEC cppVar_32370 = ROM.rd(cppVar_32369);
	BIT_VEC cppVar_32371 = (cppVar_32370 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32372 = (cppVar_32371 << 3) | 0;
	cppVar_32372 = (cppVar_32372 & cppMask_un_8_);
	BIT_VEC cppVar_32373 = PC + 1;
	cppVar_32373 = (cppVar_32373 & cppMask_un_16_);
	BIT_VEC cppVar_32374 = ROM.rd(cppVar_32373);
	BIT_VEC cppVar_32375 = (cppVar_32374 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32376 = (cppVar_32375 & cppMask_un_5_);
	BIT_VEC cppVar_32377 = cppVar_32376 + 32;
	cppVar_32377 = (cppVar_32377 & cppMask_un_8_);
	BIT_VEC cppVar_32378 = (cppVar_32368) ? cppVar_32372 : cppVar_32377;
	bool cppVar_32380 = (cppVar_32378 == 153);
	BIT_VEC cppVar_32381 = PC + 1;
	cppVar_32381 = (cppVar_32381 & cppMask_un_16_);
	BIT_VEC cppVar_32382 = ROM.rd(cppVar_32381);
	BIT_VEC cppVar_32383 = (cppVar_32382 >> 7) & cppMask_un_1_;
	bool cppVar_32384 = (cppVar_32383 == 1);
	BIT_VEC cppVar_32385 = PC + 1;
	cppVar_32385 = (cppVar_32385 & cppMask_un_16_);
	BIT_VEC cppVar_32386 = ROM.rd(cppVar_32385);
	BIT_VEC cppVar_32387 = (cppVar_32386 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32388 = (cppVar_32387 << 3) | 0;
	cppVar_32388 = (cppVar_32388 & cppMask_un_8_);
	BIT_VEC cppVar_32389 = PC + 1;
	cppVar_32389 = (cppVar_32389 & cppMask_un_16_);
	BIT_VEC cppVar_32390 = ROM.rd(cppVar_32389);
	BIT_VEC cppVar_32391 = (cppVar_32390 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32392 = (cppVar_32391 & cppMask_un_5_);
	BIT_VEC cppVar_32393 = cppVar_32392 + 32;
	cppVar_32393 = (cppVar_32393 & cppMask_un_8_);
	BIT_VEC cppVar_32394 = (cppVar_32384) ? cppVar_32388 : cppVar_32393;
	bool cppVar_32396 = (cppVar_32394 == 160);
	BIT_VEC cppVar_32397 = PC + 1;
	cppVar_32397 = (cppVar_32397 & cppMask_un_16_);
	BIT_VEC cppVar_32398 = ROM.rd(cppVar_32397);
	BIT_VEC cppVar_32399 = (cppVar_32398 >> 7) & cppMask_un_1_;
	bool cppVar_32400 = (cppVar_32399 == 1);
	BIT_VEC cppVar_32401 = PC + 1;
	cppVar_32401 = (cppVar_32401 & cppMask_un_16_);
	BIT_VEC cppVar_32402 = ROM.rd(cppVar_32401);
	BIT_VEC cppVar_32403 = (cppVar_32402 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32404 = (cppVar_32403 << 3) | 0;
	cppVar_32404 = (cppVar_32404 & cppMask_un_8_);
	BIT_VEC cppVar_32405 = PC + 1;
	cppVar_32405 = (cppVar_32405 & cppMask_un_16_);
	BIT_VEC cppVar_32406 = ROM.rd(cppVar_32405);
	BIT_VEC cppVar_32407 = (cppVar_32406 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32408 = (cppVar_32407 & cppMask_un_5_);
	BIT_VEC cppVar_32409 = cppVar_32408 + 32;
	cppVar_32409 = (cppVar_32409 & cppMask_un_8_);
	BIT_VEC cppVar_32410 = (cppVar_32400) ? cppVar_32404 : cppVar_32409;
	bool cppVar_32412 = (cppVar_32410 == 168);
	BIT_VEC cppVar_32413 = PC + 1;
	cppVar_32413 = (cppVar_32413 & cppMask_un_16_);
	BIT_VEC cppVar_32414 = ROM.rd(cppVar_32413);
	BIT_VEC cppVar_32415 = (cppVar_32414 >> 7) & cppMask_un_1_;
	bool cppVar_32416 = (cppVar_32415 == 1);
	BIT_VEC cppVar_32417 = PC + 1;
	cppVar_32417 = (cppVar_32417 & cppMask_un_16_);
	BIT_VEC cppVar_32418 = ROM.rd(cppVar_32417);
	BIT_VEC cppVar_32419 = (cppVar_32418 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32420 = (cppVar_32419 << 3) | 0;
	cppVar_32420 = (cppVar_32420 & cppMask_un_8_);
	BIT_VEC cppVar_32421 = PC + 1;
	cppVar_32421 = (cppVar_32421 & cppMask_un_16_);
	BIT_VEC cppVar_32422 = ROM.rd(cppVar_32421);
	BIT_VEC cppVar_32423 = (cppVar_32422 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32424 = (cppVar_32423 & cppMask_un_5_);
	BIT_VEC cppVar_32425 = cppVar_32424 + 32;
	cppVar_32425 = (cppVar_32425 & cppMask_un_8_);
	BIT_VEC cppVar_32426 = (cppVar_32416) ? cppVar_32420 : cppVar_32425;
	bool cppVar_32428 = (cppVar_32426 == 176);
	BIT_VEC cppVar_32429 = PC + 1;
	cppVar_32429 = (cppVar_32429 & cppMask_un_16_);
	BIT_VEC cppVar_32430 = ROM.rd(cppVar_32429);
	BIT_VEC cppVar_32431 = (cppVar_32430 >> 7) & cppMask_un_1_;
	bool cppVar_32432 = (cppVar_32431 == 1);
	BIT_VEC cppVar_32433 = PC + 1;
	cppVar_32433 = (cppVar_32433 & cppMask_un_16_);
	BIT_VEC cppVar_32434 = ROM.rd(cppVar_32433);
	BIT_VEC cppVar_32435 = (cppVar_32434 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32436 = (cppVar_32435 << 3) | 0;
	cppVar_32436 = (cppVar_32436 & cppMask_un_8_);
	BIT_VEC cppVar_32437 = PC + 1;
	cppVar_32437 = (cppVar_32437 & cppMask_un_16_);
	BIT_VEC cppVar_32438 = ROM.rd(cppVar_32437);
	BIT_VEC cppVar_32439 = (cppVar_32438 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32440 = (cppVar_32439 & cppMask_un_5_);
	BIT_VEC cppVar_32441 = cppVar_32440 + 32;
	cppVar_32441 = (cppVar_32441 & cppMask_un_8_);
	BIT_VEC cppVar_32442 = (cppVar_32432) ? cppVar_32436 : cppVar_32441;
	bool cppVar_32444 = (cppVar_32442 == 184);
	BIT_VEC cppVar_32445 = PC + 1;
	cppVar_32445 = (cppVar_32445 & cppMask_un_16_);
	BIT_VEC cppVar_32446 = ROM.rd(cppVar_32445);
	BIT_VEC cppVar_32447 = (cppVar_32446 >> 7) & cppMask_un_1_;
	bool cppVar_32448 = (cppVar_32447 == 1);
	BIT_VEC cppVar_32449 = PC + 1;
	cppVar_32449 = (cppVar_32449 & cppMask_un_16_);
	BIT_VEC cppVar_32450 = ROM.rd(cppVar_32449);
	BIT_VEC cppVar_32451 = (cppVar_32450 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32452 = (cppVar_32451 << 3) | 0;
	cppVar_32452 = (cppVar_32452 & cppMask_un_8_);
	BIT_VEC cppVar_32453 = PC + 1;
	cppVar_32453 = (cppVar_32453 & cppMask_un_16_);
	BIT_VEC cppVar_32454 = ROM.rd(cppVar_32453);
	BIT_VEC cppVar_32455 = (cppVar_32454 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32456 = (cppVar_32455 & cppMask_un_5_);
	BIT_VEC cppVar_32457 = cppVar_32456 + 32;
	cppVar_32457 = (cppVar_32457 & cppMask_un_8_);
	BIT_VEC cppVar_32458 = (cppVar_32448) ? cppVar_32452 : cppVar_32457;
	bool cppVar_32460 = (cppVar_32458 == 208);
	BIT_VEC cppVar_32461 = PC + 1;
	cppVar_32461 = (cppVar_32461 & cppMask_un_16_);
	BIT_VEC cppVar_32462 = ROM.rd(cppVar_32461);
	BIT_VEC cppVar_32463 = (cppVar_32462 >> 7) & cppMask_un_1_;
	bool cppVar_32464 = (cppVar_32463 == 1);
	BIT_VEC cppVar_32465 = PC + 1;
	cppVar_32465 = (cppVar_32465 & cppMask_un_16_);
	BIT_VEC cppVar_32466 = ROM.rd(cppVar_32465);
	BIT_VEC cppVar_32467 = (cppVar_32466 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32468 = (cppVar_32467 << 3) | 0;
	cppVar_32468 = (cppVar_32468 & cppMask_un_8_);
	BIT_VEC cppVar_32469 = PC + 1;
	cppVar_32469 = (cppVar_32469 & cppMask_un_16_);
	BIT_VEC cppVar_32470 = ROM.rd(cppVar_32469);
	BIT_VEC cppVar_32471 = (cppVar_32470 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32472 = (cppVar_32471 & cppMask_un_5_);
	BIT_VEC cppVar_32473 = cppVar_32472 + 32;
	cppVar_32473 = (cppVar_32473 & cppMask_un_8_);
	BIT_VEC cppVar_32474 = (cppVar_32464) ? cppVar_32468 : cppVar_32473;
	bool cppVar_32476 = (cppVar_32474 == 224);
	BIT_VEC cppVar_32477 = PC + 1;
	cppVar_32477 = (cppVar_32477 & cppMask_un_16_);
	BIT_VEC cppVar_32478 = ROM.rd(cppVar_32477);
	BIT_VEC cppVar_32479 = (cppVar_32478 >> 7) & cppMask_un_1_;
	bool cppVar_32480 = (cppVar_32479 == 1);
	BIT_VEC cppVar_32481 = PC + 1;
	cppVar_32481 = (cppVar_32481 & cppMask_un_16_);
	BIT_VEC cppVar_32482 = ROM.rd(cppVar_32481);
	BIT_VEC cppVar_32483 = (cppVar_32482 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32484 = (cppVar_32483 << 3) | 0;
	cppVar_32484 = (cppVar_32484 & cppMask_un_8_);
	BIT_VEC cppVar_32485 = PC + 1;
	cppVar_32485 = (cppVar_32485 & cppMask_un_16_);
	BIT_VEC cppVar_32486 = ROM.rd(cppVar_32485);
	BIT_VEC cppVar_32487 = (cppVar_32486 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32488 = (cppVar_32487 & cppMask_un_5_);
	BIT_VEC cppVar_32489 = cppVar_32488 + 32;
	cppVar_32489 = (cppVar_32489 & cppMask_un_8_);
	BIT_VEC cppVar_32490 = (cppVar_32480) ? cppVar_32484 : cppVar_32489;
	bool cppVar_32492 = (cppVar_32490 == 240);
	BIT_VEC cppVar_32494 = (cppVar_32492) ? B : 0;
	BIT_VEC cppVar_32495 = (cppVar_32476) ? ACC : cppVar_32494;
	BIT_VEC cppVar_32496 = (cppVar_32460) ? PSW : cppVar_32495;
	BIT_VEC cppVar_32497 = (cppVar_32444) ? IP : cppVar_32496;
	BIT_VEC cppVar_32498 = (cppVar_32428) ? P3 : cppVar_32497;
	BIT_VEC cppVar_32499 = (cppVar_32412) ? IE : cppVar_32498;
	BIT_VEC cppVar_32500 = (cppVar_32396) ? P2 : cppVar_32499;
	BIT_VEC cppVar_32501 = (cppVar_32380) ? SBUF : cppVar_32500;
	BIT_VEC cppVar_32502 = (cppVar_32364) ? SCON : cppVar_32501;
	BIT_VEC cppVar_32503 = (cppVar_32348) ? P1 : cppVar_32502;
	BIT_VEC cppVar_32504 = (cppVar_32332) ? TH1 : cppVar_32503;
	BIT_VEC cppVar_32505 = (cppVar_32316) ? TL1 : cppVar_32504;
	BIT_VEC cppVar_32506 = (cppVar_32300) ? TH0 : cppVar_32505;
	BIT_VEC cppVar_32507 = (cppVar_32284) ? TL0 : cppVar_32506;
	BIT_VEC cppVar_32508 = (cppVar_32268) ? TMOD : cppVar_32507;
	BIT_VEC cppVar_32509 = (cppVar_32252) ? TCON : cppVar_32508;
	BIT_VEC cppVar_32510 = (cppVar_32236) ? PCON : cppVar_32509;
	BIT_VEC cppVar_32511 = (cppVar_32220) ? DPH : cppVar_32510;
	BIT_VEC cppVar_32512 = (cppVar_32204) ? DPL : cppVar_32511;
	BIT_VEC cppVar_32513 = (cppVar_32188) ? SP : cppVar_32512;
	BIT_VEC cppVar_32514 = (cppVar_32172) ? P0 : cppVar_32513;
	BIT_VEC cppVar_32515 = (cppVar_32141) ? cppVar_32156 : cppVar_32514;
	BIT_VEC cppVar_32516 = cppVar_32124 & cppVar_32515;
	BIT_VEC cppVar_32517 = PC + 1;
	cppVar_32517 = (cppVar_32517 & cppMask_un_16_);
	BIT_VEC cppVar_32518 = ROM.rd(cppVar_32517);
	BIT_VEC cppVar_32519 = (cppVar_32518 >> 7) & cppMask_un_1_;
	bool cppVar_32521 = (cppVar_32519 == 1);
	BIT_VEC cppVar_32522 = PC + 1;
	cppVar_32522 = (cppVar_32522 & cppMask_un_16_);
	BIT_VEC cppVar_32523 = ROM.rd(cppVar_32522);
	BIT_VEC cppVar_32524 = (cppVar_32523 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32526 = (cppVar_32524 << 3) | 0;
	cppVar_32526 = (cppVar_32526 & cppMask_un_8_);
	BIT_VEC cppVar_32527 = PC + 1;
	cppVar_32527 = (cppVar_32527 & cppMask_un_16_);
	BIT_VEC cppVar_32528 = ROM.rd(cppVar_32527);
	BIT_VEC cppVar_32529 = (cppVar_32528 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32530 = (cppVar_32529 & cppMask_un_5_);
	BIT_VEC cppVar_32532 = cppVar_32530 + 32;
	cppVar_32532 = (cppVar_32532 & cppMask_un_8_);
	BIT_VEC cppVar_32533 = (cppVar_32521) ? cppVar_32526 : cppVar_32532;
	BIT_VEC cppVar_32534 = (cppVar_32533 >> 7) & cppMask_un_1_;
	bool cppVar_32536 = (cppVar_32534 == 0);
	BIT_VEC cppVar_32537 = PC + 1;
	cppVar_32537 = (cppVar_32537 & cppMask_un_16_);
	BIT_VEC cppVar_32538 = ROM.rd(cppVar_32537);
	BIT_VEC cppVar_32539 = (cppVar_32538 >> 7) & cppMask_un_1_;
	bool cppVar_32540 = (cppVar_32539 == 1);
	BIT_VEC cppVar_32541 = PC + 1;
	cppVar_32541 = (cppVar_32541 & cppMask_un_16_);
	BIT_VEC cppVar_32542 = ROM.rd(cppVar_32541);
	BIT_VEC cppVar_32543 = (cppVar_32542 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32544 = (cppVar_32543 << 3) | 0;
	cppVar_32544 = (cppVar_32544 & cppMask_un_8_);
	BIT_VEC cppVar_32545 = PC + 1;
	cppVar_32545 = (cppVar_32545 & cppMask_un_16_);
	BIT_VEC cppVar_32546 = ROM.rd(cppVar_32545);
	BIT_VEC cppVar_32547 = (cppVar_32546 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32548 = (cppVar_32547 & cppMask_un_5_);
	BIT_VEC cppVar_32549 = cppVar_32548 + 32;
	cppVar_32549 = (cppVar_32549 & cppMask_un_8_);
	BIT_VEC cppVar_32550 = (cppVar_32540) ? cppVar_32544 : cppVar_32549;
	BIT_VEC cppVar_32551 = IRAM.rd(cppVar_32550);
	BIT_VEC cppVar_32552 = PC + 1;
	cppVar_32552 = (cppVar_32552 & cppMask_un_16_);
	BIT_VEC cppVar_32553 = ROM.rd(cppVar_32552);
	BIT_VEC cppVar_32554 = (cppVar_32553 >> 7) & cppMask_un_1_;
	bool cppVar_32555 = (cppVar_32554 == 1);
	BIT_VEC cppVar_32556 = PC + 1;
	cppVar_32556 = (cppVar_32556 & cppMask_un_16_);
	BIT_VEC cppVar_32557 = ROM.rd(cppVar_32556);
	BIT_VEC cppVar_32558 = (cppVar_32557 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32559 = (cppVar_32558 << 3) | 0;
	cppVar_32559 = (cppVar_32559 & cppMask_un_8_);
	BIT_VEC cppVar_32560 = PC + 1;
	cppVar_32560 = (cppVar_32560 & cppMask_un_16_);
	BIT_VEC cppVar_32561 = ROM.rd(cppVar_32560);
	BIT_VEC cppVar_32562 = (cppVar_32561 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32563 = (cppVar_32562 & cppMask_un_5_);
	BIT_VEC cppVar_32564 = cppVar_32563 + 32;
	cppVar_32564 = (cppVar_32564 & cppMask_un_8_);
	BIT_VEC cppVar_32565 = (cppVar_32555) ? cppVar_32559 : cppVar_32564;
	bool cppVar_32567 = (cppVar_32565 == 128);
	BIT_VEC cppVar_32568 = PC + 1;
	cppVar_32568 = (cppVar_32568 & cppMask_un_16_);
	BIT_VEC cppVar_32569 = ROM.rd(cppVar_32568);
	BIT_VEC cppVar_32570 = (cppVar_32569 >> 7) & cppMask_un_1_;
	bool cppVar_32571 = (cppVar_32570 == 1);
	BIT_VEC cppVar_32572 = PC + 1;
	cppVar_32572 = (cppVar_32572 & cppMask_un_16_);
	BIT_VEC cppVar_32573 = ROM.rd(cppVar_32572);
	BIT_VEC cppVar_32574 = (cppVar_32573 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32575 = (cppVar_32574 << 3) | 0;
	cppVar_32575 = (cppVar_32575 & cppMask_un_8_);
	BIT_VEC cppVar_32576 = PC + 1;
	cppVar_32576 = (cppVar_32576 & cppMask_un_16_);
	BIT_VEC cppVar_32577 = ROM.rd(cppVar_32576);
	BIT_VEC cppVar_32578 = (cppVar_32577 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32579 = (cppVar_32578 & cppMask_un_5_);
	BIT_VEC cppVar_32580 = cppVar_32579 + 32;
	cppVar_32580 = (cppVar_32580 & cppMask_un_8_);
	BIT_VEC cppVar_32581 = (cppVar_32571) ? cppVar_32575 : cppVar_32580;
	bool cppVar_32583 = (cppVar_32581 == 129);
	BIT_VEC cppVar_32584 = PC + 1;
	cppVar_32584 = (cppVar_32584 & cppMask_un_16_);
	BIT_VEC cppVar_32585 = ROM.rd(cppVar_32584);
	BIT_VEC cppVar_32586 = (cppVar_32585 >> 7) & cppMask_un_1_;
	bool cppVar_32587 = (cppVar_32586 == 1);
	BIT_VEC cppVar_32588 = PC + 1;
	cppVar_32588 = (cppVar_32588 & cppMask_un_16_);
	BIT_VEC cppVar_32589 = ROM.rd(cppVar_32588);
	BIT_VEC cppVar_32590 = (cppVar_32589 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32591 = (cppVar_32590 << 3) | 0;
	cppVar_32591 = (cppVar_32591 & cppMask_un_8_);
	BIT_VEC cppVar_32592 = PC + 1;
	cppVar_32592 = (cppVar_32592 & cppMask_un_16_);
	BIT_VEC cppVar_32593 = ROM.rd(cppVar_32592);
	BIT_VEC cppVar_32594 = (cppVar_32593 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32595 = (cppVar_32594 & cppMask_un_5_);
	BIT_VEC cppVar_32596 = cppVar_32595 + 32;
	cppVar_32596 = (cppVar_32596 & cppMask_un_8_);
	BIT_VEC cppVar_32597 = (cppVar_32587) ? cppVar_32591 : cppVar_32596;
	bool cppVar_32599 = (cppVar_32597 == 130);
	BIT_VEC cppVar_32600 = PC + 1;
	cppVar_32600 = (cppVar_32600 & cppMask_un_16_);
	BIT_VEC cppVar_32601 = ROM.rd(cppVar_32600);
	BIT_VEC cppVar_32602 = (cppVar_32601 >> 7) & cppMask_un_1_;
	bool cppVar_32603 = (cppVar_32602 == 1);
	BIT_VEC cppVar_32604 = PC + 1;
	cppVar_32604 = (cppVar_32604 & cppMask_un_16_);
	BIT_VEC cppVar_32605 = ROM.rd(cppVar_32604);
	BIT_VEC cppVar_32606 = (cppVar_32605 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32607 = (cppVar_32606 << 3) | 0;
	cppVar_32607 = (cppVar_32607 & cppMask_un_8_);
	BIT_VEC cppVar_32608 = PC + 1;
	cppVar_32608 = (cppVar_32608 & cppMask_un_16_);
	BIT_VEC cppVar_32609 = ROM.rd(cppVar_32608);
	BIT_VEC cppVar_32610 = (cppVar_32609 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32611 = (cppVar_32610 & cppMask_un_5_);
	BIT_VEC cppVar_32612 = cppVar_32611 + 32;
	cppVar_32612 = (cppVar_32612 & cppMask_un_8_);
	BIT_VEC cppVar_32613 = (cppVar_32603) ? cppVar_32607 : cppVar_32612;
	bool cppVar_32615 = (cppVar_32613 == 131);
	BIT_VEC cppVar_32616 = PC + 1;
	cppVar_32616 = (cppVar_32616 & cppMask_un_16_);
	BIT_VEC cppVar_32617 = ROM.rd(cppVar_32616);
	BIT_VEC cppVar_32618 = (cppVar_32617 >> 7) & cppMask_un_1_;
	bool cppVar_32619 = (cppVar_32618 == 1);
	BIT_VEC cppVar_32620 = PC + 1;
	cppVar_32620 = (cppVar_32620 & cppMask_un_16_);
	BIT_VEC cppVar_32621 = ROM.rd(cppVar_32620);
	BIT_VEC cppVar_32622 = (cppVar_32621 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32623 = (cppVar_32622 << 3) | 0;
	cppVar_32623 = (cppVar_32623 & cppMask_un_8_);
	BIT_VEC cppVar_32624 = PC + 1;
	cppVar_32624 = (cppVar_32624 & cppMask_un_16_);
	BIT_VEC cppVar_32625 = ROM.rd(cppVar_32624);
	BIT_VEC cppVar_32626 = (cppVar_32625 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32627 = (cppVar_32626 & cppMask_un_5_);
	BIT_VEC cppVar_32628 = cppVar_32627 + 32;
	cppVar_32628 = (cppVar_32628 & cppMask_un_8_);
	BIT_VEC cppVar_32629 = (cppVar_32619) ? cppVar_32623 : cppVar_32628;
	bool cppVar_32631 = (cppVar_32629 == 135);
	BIT_VEC cppVar_32632 = PC + 1;
	cppVar_32632 = (cppVar_32632 & cppMask_un_16_);
	BIT_VEC cppVar_32633 = ROM.rd(cppVar_32632);
	BIT_VEC cppVar_32634 = (cppVar_32633 >> 7) & cppMask_un_1_;
	bool cppVar_32635 = (cppVar_32634 == 1);
	BIT_VEC cppVar_32636 = PC + 1;
	cppVar_32636 = (cppVar_32636 & cppMask_un_16_);
	BIT_VEC cppVar_32637 = ROM.rd(cppVar_32636);
	BIT_VEC cppVar_32638 = (cppVar_32637 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32639 = (cppVar_32638 << 3) | 0;
	cppVar_32639 = (cppVar_32639 & cppMask_un_8_);
	BIT_VEC cppVar_32640 = PC + 1;
	cppVar_32640 = (cppVar_32640 & cppMask_un_16_);
	BIT_VEC cppVar_32641 = ROM.rd(cppVar_32640);
	BIT_VEC cppVar_32642 = (cppVar_32641 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32643 = (cppVar_32642 & cppMask_un_5_);
	BIT_VEC cppVar_32644 = cppVar_32643 + 32;
	cppVar_32644 = (cppVar_32644 & cppMask_un_8_);
	BIT_VEC cppVar_32645 = (cppVar_32635) ? cppVar_32639 : cppVar_32644;
	bool cppVar_32647 = (cppVar_32645 == 136);
	BIT_VEC cppVar_32648 = PC + 1;
	cppVar_32648 = (cppVar_32648 & cppMask_un_16_);
	BIT_VEC cppVar_32649 = ROM.rd(cppVar_32648);
	BIT_VEC cppVar_32650 = (cppVar_32649 >> 7) & cppMask_un_1_;
	bool cppVar_32651 = (cppVar_32650 == 1);
	BIT_VEC cppVar_32652 = PC + 1;
	cppVar_32652 = (cppVar_32652 & cppMask_un_16_);
	BIT_VEC cppVar_32653 = ROM.rd(cppVar_32652);
	BIT_VEC cppVar_32654 = (cppVar_32653 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32655 = (cppVar_32654 << 3) | 0;
	cppVar_32655 = (cppVar_32655 & cppMask_un_8_);
	BIT_VEC cppVar_32656 = PC + 1;
	cppVar_32656 = (cppVar_32656 & cppMask_un_16_);
	BIT_VEC cppVar_32657 = ROM.rd(cppVar_32656);
	BIT_VEC cppVar_32658 = (cppVar_32657 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32659 = (cppVar_32658 & cppMask_un_5_);
	BIT_VEC cppVar_32660 = cppVar_32659 + 32;
	cppVar_32660 = (cppVar_32660 & cppMask_un_8_);
	BIT_VEC cppVar_32661 = (cppVar_32651) ? cppVar_32655 : cppVar_32660;
	bool cppVar_32663 = (cppVar_32661 == 137);
	BIT_VEC cppVar_32664 = PC + 1;
	cppVar_32664 = (cppVar_32664 & cppMask_un_16_);
	BIT_VEC cppVar_32665 = ROM.rd(cppVar_32664);
	BIT_VEC cppVar_32666 = (cppVar_32665 >> 7) & cppMask_un_1_;
	bool cppVar_32667 = (cppVar_32666 == 1);
	BIT_VEC cppVar_32668 = PC + 1;
	cppVar_32668 = (cppVar_32668 & cppMask_un_16_);
	BIT_VEC cppVar_32669 = ROM.rd(cppVar_32668);
	BIT_VEC cppVar_32670 = (cppVar_32669 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32671 = (cppVar_32670 << 3) | 0;
	cppVar_32671 = (cppVar_32671 & cppMask_un_8_);
	BIT_VEC cppVar_32672 = PC + 1;
	cppVar_32672 = (cppVar_32672 & cppMask_un_16_);
	BIT_VEC cppVar_32673 = ROM.rd(cppVar_32672);
	BIT_VEC cppVar_32674 = (cppVar_32673 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32675 = (cppVar_32674 & cppMask_un_5_);
	BIT_VEC cppVar_32676 = cppVar_32675 + 32;
	cppVar_32676 = (cppVar_32676 & cppMask_un_8_);
	BIT_VEC cppVar_32677 = (cppVar_32667) ? cppVar_32671 : cppVar_32676;
	bool cppVar_32679 = (cppVar_32677 == 138);
	BIT_VEC cppVar_32680 = PC + 1;
	cppVar_32680 = (cppVar_32680 & cppMask_un_16_);
	BIT_VEC cppVar_32681 = ROM.rd(cppVar_32680);
	BIT_VEC cppVar_32682 = (cppVar_32681 >> 7) & cppMask_un_1_;
	bool cppVar_32683 = (cppVar_32682 == 1);
	BIT_VEC cppVar_32684 = PC + 1;
	cppVar_32684 = (cppVar_32684 & cppMask_un_16_);
	BIT_VEC cppVar_32685 = ROM.rd(cppVar_32684);
	BIT_VEC cppVar_32686 = (cppVar_32685 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32687 = (cppVar_32686 << 3) | 0;
	cppVar_32687 = (cppVar_32687 & cppMask_un_8_);
	BIT_VEC cppVar_32688 = PC + 1;
	cppVar_32688 = (cppVar_32688 & cppMask_un_16_);
	BIT_VEC cppVar_32689 = ROM.rd(cppVar_32688);
	BIT_VEC cppVar_32690 = (cppVar_32689 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32691 = (cppVar_32690 & cppMask_un_5_);
	BIT_VEC cppVar_32692 = cppVar_32691 + 32;
	cppVar_32692 = (cppVar_32692 & cppMask_un_8_);
	BIT_VEC cppVar_32693 = (cppVar_32683) ? cppVar_32687 : cppVar_32692;
	bool cppVar_32695 = (cppVar_32693 == 140);
	BIT_VEC cppVar_32696 = PC + 1;
	cppVar_32696 = (cppVar_32696 & cppMask_un_16_);
	BIT_VEC cppVar_32697 = ROM.rd(cppVar_32696);
	BIT_VEC cppVar_32698 = (cppVar_32697 >> 7) & cppMask_un_1_;
	bool cppVar_32699 = (cppVar_32698 == 1);
	BIT_VEC cppVar_32700 = PC + 1;
	cppVar_32700 = (cppVar_32700 & cppMask_un_16_);
	BIT_VEC cppVar_32701 = ROM.rd(cppVar_32700);
	BIT_VEC cppVar_32702 = (cppVar_32701 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32703 = (cppVar_32702 << 3) | 0;
	cppVar_32703 = (cppVar_32703 & cppMask_un_8_);
	BIT_VEC cppVar_32704 = PC + 1;
	cppVar_32704 = (cppVar_32704 & cppMask_un_16_);
	BIT_VEC cppVar_32705 = ROM.rd(cppVar_32704);
	BIT_VEC cppVar_32706 = (cppVar_32705 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32707 = (cppVar_32706 & cppMask_un_5_);
	BIT_VEC cppVar_32708 = cppVar_32707 + 32;
	cppVar_32708 = (cppVar_32708 & cppMask_un_8_);
	BIT_VEC cppVar_32709 = (cppVar_32699) ? cppVar_32703 : cppVar_32708;
	bool cppVar_32711 = (cppVar_32709 == 139);
	BIT_VEC cppVar_32712 = PC + 1;
	cppVar_32712 = (cppVar_32712 & cppMask_un_16_);
	BIT_VEC cppVar_32713 = ROM.rd(cppVar_32712);
	BIT_VEC cppVar_32714 = (cppVar_32713 >> 7) & cppMask_un_1_;
	bool cppVar_32715 = (cppVar_32714 == 1);
	BIT_VEC cppVar_32716 = PC + 1;
	cppVar_32716 = (cppVar_32716 & cppMask_un_16_);
	BIT_VEC cppVar_32717 = ROM.rd(cppVar_32716);
	BIT_VEC cppVar_32718 = (cppVar_32717 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32719 = (cppVar_32718 << 3) | 0;
	cppVar_32719 = (cppVar_32719 & cppMask_un_8_);
	BIT_VEC cppVar_32720 = PC + 1;
	cppVar_32720 = (cppVar_32720 & cppMask_un_16_);
	BIT_VEC cppVar_32721 = ROM.rd(cppVar_32720);
	BIT_VEC cppVar_32722 = (cppVar_32721 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32723 = (cppVar_32722 & cppMask_un_5_);
	BIT_VEC cppVar_32724 = cppVar_32723 + 32;
	cppVar_32724 = (cppVar_32724 & cppMask_un_8_);
	BIT_VEC cppVar_32725 = (cppVar_32715) ? cppVar_32719 : cppVar_32724;
	bool cppVar_32727 = (cppVar_32725 == 141);
	BIT_VEC cppVar_32728 = PC + 1;
	cppVar_32728 = (cppVar_32728 & cppMask_un_16_);
	BIT_VEC cppVar_32729 = ROM.rd(cppVar_32728);
	BIT_VEC cppVar_32730 = (cppVar_32729 >> 7) & cppMask_un_1_;
	bool cppVar_32731 = (cppVar_32730 == 1);
	BIT_VEC cppVar_32732 = PC + 1;
	cppVar_32732 = (cppVar_32732 & cppMask_un_16_);
	BIT_VEC cppVar_32733 = ROM.rd(cppVar_32732);
	BIT_VEC cppVar_32734 = (cppVar_32733 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32735 = (cppVar_32734 << 3) | 0;
	cppVar_32735 = (cppVar_32735 & cppMask_un_8_);
	BIT_VEC cppVar_32736 = PC + 1;
	cppVar_32736 = (cppVar_32736 & cppMask_un_16_);
	BIT_VEC cppVar_32737 = ROM.rd(cppVar_32736);
	BIT_VEC cppVar_32738 = (cppVar_32737 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32739 = (cppVar_32738 & cppMask_un_5_);
	BIT_VEC cppVar_32740 = cppVar_32739 + 32;
	cppVar_32740 = (cppVar_32740 & cppMask_un_8_);
	BIT_VEC cppVar_32741 = (cppVar_32731) ? cppVar_32735 : cppVar_32740;
	bool cppVar_32743 = (cppVar_32741 == 144);
	BIT_VEC cppVar_32744 = PC + 1;
	cppVar_32744 = (cppVar_32744 & cppMask_un_16_);
	BIT_VEC cppVar_32745 = ROM.rd(cppVar_32744);
	BIT_VEC cppVar_32746 = (cppVar_32745 >> 7) & cppMask_un_1_;
	bool cppVar_32747 = (cppVar_32746 == 1);
	BIT_VEC cppVar_32748 = PC + 1;
	cppVar_32748 = (cppVar_32748 & cppMask_un_16_);
	BIT_VEC cppVar_32749 = ROM.rd(cppVar_32748);
	BIT_VEC cppVar_32750 = (cppVar_32749 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32751 = (cppVar_32750 << 3) | 0;
	cppVar_32751 = (cppVar_32751 & cppMask_un_8_);
	BIT_VEC cppVar_32752 = PC + 1;
	cppVar_32752 = (cppVar_32752 & cppMask_un_16_);
	BIT_VEC cppVar_32753 = ROM.rd(cppVar_32752);
	BIT_VEC cppVar_32754 = (cppVar_32753 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32755 = (cppVar_32754 & cppMask_un_5_);
	BIT_VEC cppVar_32756 = cppVar_32755 + 32;
	cppVar_32756 = (cppVar_32756 & cppMask_un_8_);
	BIT_VEC cppVar_32757 = (cppVar_32747) ? cppVar_32751 : cppVar_32756;
	bool cppVar_32759 = (cppVar_32757 == 152);
	BIT_VEC cppVar_32760 = PC + 1;
	cppVar_32760 = (cppVar_32760 & cppMask_un_16_);
	BIT_VEC cppVar_32761 = ROM.rd(cppVar_32760);
	BIT_VEC cppVar_32762 = (cppVar_32761 >> 7) & cppMask_un_1_;
	bool cppVar_32763 = (cppVar_32762 == 1);
	BIT_VEC cppVar_32764 = PC + 1;
	cppVar_32764 = (cppVar_32764 & cppMask_un_16_);
	BIT_VEC cppVar_32765 = ROM.rd(cppVar_32764);
	BIT_VEC cppVar_32766 = (cppVar_32765 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32767 = (cppVar_32766 << 3) | 0;
	cppVar_32767 = (cppVar_32767 & cppMask_un_8_);
	BIT_VEC cppVar_32768 = PC + 1;
	cppVar_32768 = (cppVar_32768 & cppMask_un_16_);
	BIT_VEC cppVar_32769 = ROM.rd(cppVar_32768);
	BIT_VEC cppVar_32770 = (cppVar_32769 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32771 = (cppVar_32770 & cppMask_un_5_);
	BIT_VEC cppVar_32772 = cppVar_32771 + 32;
	cppVar_32772 = (cppVar_32772 & cppMask_un_8_);
	BIT_VEC cppVar_32773 = (cppVar_32763) ? cppVar_32767 : cppVar_32772;
	bool cppVar_32775 = (cppVar_32773 == 153);
	BIT_VEC cppVar_32776 = PC + 1;
	cppVar_32776 = (cppVar_32776 & cppMask_un_16_);
	BIT_VEC cppVar_32777 = ROM.rd(cppVar_32776);
	BIT_VEC cppVar_32778 = (cppVar_32777 >> 7) & cppMask_un_1_;
	bool cppVar_32779 = (cppVar_32778 == 1);
	BIT_VEC cppVar_32780 = PC + 1;
	cppVar_32780 = (cppVar_32780 & cppMask_un_16_);
	BIT_VEC cppVar_32781 = ROM.rd(cppVar_32780);
	BIT_VEC cppVar_32782 = (cppVar_32781 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32783 = (cppVar_32782 << 3) | 0;
	cppVar_32783 = (cppVar_32783 & cppMask_un_8_);
	BIT_VEC cppVar_32784 = PC + 1;
	cppVar_32784 = (cppVar_32784 & cppMask_un_16_);
	BIT_VEC cppVar_32785 = ROM.rd(cppVar_32784);
	BIT_VEC cppVar_32786 = (cppVar_32785 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32787 = (cppVar_32786 & cppMask_un_5_);
	BIT_VEC cppVar_32788 = cppVar_32787 + 32;
	cppVar_32788 = (cppVar_32788 & cppMask_un_8_);
	BIT_VEC cppVar_32789 = (cppVar_32779) ? cppVar_32783 : cppVar_32788;
	bool cppVar_32791 = (cppVar_32789 == 160);
	BIT_VEC cppVar_32792 = PC + 1;
	cppVar_32792 = (cppVar_32792 & cppMask_un_16_);
	BIT_VEC cppVar_32793 = ROM.rd(cppVar_32792);
	BIT_VEC cppVar_32794 = (cppVar_32793 >> 7) & cppMask_un_1_;
	bool cppVar_32795 = (cppVar_32794 == 1);
	BIT_VEC cppVar_32796 = PC + 1;
	cppVar_32796 = (cppVar_32796 & cppMask_un_16_);
	BIT_VEC cppVar_32797 = ROM.rd(cppVar_32796);
	BIT_VEC cppVar_32798 = (cppVar_32797 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32799 = (cppVar_32798 << 3) | 0;
	cppVar_32799 = (cppVar_32799 & cppMask_un_8_);
	BIT_VEC cppVar_32800 = PC + 1;
	cppVar_32800 = (cppVar_32800 & cppMask_un_16_);
	BIT_VEC cppVar_32801 = ROM.rd(cppVar_32800);
	BIT_VEC cppVar_32802 = (cppVar_32801 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32803 = (cppVar_32802 & cppMask_un_5_);
	BIT_VEC cppVar_32804 = cppVar_32803 + 32;
	cppVar_32804 = (cppVar_32804 & cppMask_un_8_);
	BIT_VEC cppVar_32805 = (cppVar_32795) ? cppVar_32799 : cppVar_32804;
	bool cppVar_32807 = (cppVar_32805 == 168);
	BIT_VEC cppVar_32808 = PC + 1;
	cppVar_32808 = (cppVar_32808 & cppMask_un_16_);
	BIT_VEC cppVar_32809 = ROM.rd(cppVar_32808);
	BIT_VEC cppVar_32810 = (cppVar_32809 >> 7) & cppMask_un_1_;
	bool cppVar_32811 = (cppVar_32810 == 1);
	BIT_VEC cppVar_32812 = PC + 1;
	cppVar_32812 = (cppVar_32812 & cppMask_un_16_);
	BIT_VEC cppVar_32813 = ROM.rd(cppVar_32812);
	BIT_VEC cppVar_32814 = (cppVar_32813 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32815 = (cppVar_32814 << 3) | 0;
	cppVar_32815 = (cppVar_32815 & cppMask_un_8_);
	BIT_VEC cppVar_32816 = PC + 1;
	cppVar_32816 = (cppVar_32816 & cppMask_un_16_);
	BIT_VEC cppVar_32817 = ROM.rd(cppVar_32816);
	BIT_VEC cppVar_32818 = (cppVar_32817 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32819 = (cppVar_32818 & cppMask_un_5_);
	BIT_VEC cppVar_32820 = cppVar_32819 + 32;
	cppVar_32820 = (cppVar_32820 & cppMask_un_8_);
	BIT_VEC cppVar_32821 = (cppVar_32811) ? cppVar_32815 : cppVar_32820;
	bool cppVar_32823 = (cppVar_32821 == 176);
	BIT_VEC cppVar_32824 = PC + 1;
	cppVar_32824 = (cppVar_32824 & cppMask_un_16_);
	BIT_VEC cppVar_32825 = ROM.rd(cppVar_32824);
	BIT_VEC cppVar_32826 = (cppVar_32825 >> 7) & cppMask_un_1_;
	bool cppVar_32827 = (cppVar_32826 == 1);
	BIT_VEC cppVar_32828 = PC + 1;
	cppVar_32828 = (cppVar_32828 & cppMask_un_16_);
	BIT_VEC cppVar_32829 = ROM.rd(cppVar_32828);
	BIT_VEC cppVar_32830 = (cppVar_32829 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32831 = (cppVar_32830 << 3) | 0;
	cppVar_32831 = (cppVar_32831 & cppMask_un_8_);
	BIT_VEC cppVar_32832 = PC + 1;
	cppVar_32832 = (cppVar_32832 & cppMask_un_16_);
	BIT_VEC cppVar_32833 = ROM.rd(cppVar_32832);
	BIT_VEC cppVar_32834 = (cppVar_32833 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32835 = (cppVar_32834 & cppMask_un_5_);
	BIT_VEC cppVar_32836 = cppVar_32835 + 32;
	cppVar_32836 = (cppVar_32836 & cppMask_un_8_);
	BIT_VEC cppVar_32837 = (cppVar_32827) ? cppVar_32831 : cppVar_32836;
	bool cppVar_32839 = (cppVar_32837 == 184);
	BIT_VEC cppVar_32840 = PC + 1;
	cppVar_32840 = (cppVar_32840 & cppMask_un_16_);
	BIT_VEC cppVar_32841 = ROM.rd(cppVar_32840);
	BIT_VEC cppVar_32842 = (cppVar_32841 >> 7) & cppMask_un_1_;
	bool cppVar_32843 = (cppVar_32842 == 1);
	BIT_VEC cppVar_32844 = PC + 1;
	cppVar_32844 = (cppVar_32844 & cppMask_un_16_);
	BIT_VEC cppVar_32845 = ROM.rd(cppVar_32844);
	BIT_VEC cppVar_32846 = (cppVar_32845 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32847 = (cppVar_32846 << 3) | 0;
	cppVar_32847 = (cppVar_32847 & cppMask_un_8_);
	BIT_VEC cppVar_32848 = PC + 1;
	cppVar_32848 = (cppVar_32848 & cppMask_un_16_);
	BIT_VEC cppVar_32849 = ROM.rd(cppVar_32848);
	BIT_VEC cppVar_32850 = (cppVar_32849 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32851 = (cppVar_32850 & cppMask_un_5_);
	BIT_VEC cppVar_32852 = cppVar_32851 + 32;
	cppVar_32852 = (cppVar_32852 & cppMask_un_8_);
	BIT_VEC cppVar_32853 = (cppVar_32843) ? cppVar_32847 : cppVar_32852;
	bool cppVar_32855 = (cppVar_32853 == 208);
	BIT_VEC cppVar_32856 = PC + 1;
	cppVar_32856 = (cppVar_32856 & cppMask_un_16_);
	BIT_VEC cppVar_32857 = ROM.rd(cppVar_32856);
	BIT_VEC cppVar_32858 = (cppVar_32857 >> 7) & cppMask_un_1_;
	bool cppVar_32859 = (cppVar_32858 == 1);
	BIT_VEC cppVar_32860 = PC + 1;
	cppVar_32860 = (cppVar_32860 & cppMask_un_16_);
	BIT_VEC cppVar_32861 = ROM.rd(cppVar_32860);
	BIT_VEC cppVar_32862 = (cppVar_32861 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32863 = (cppVar_32862 << 3) | 0;
	cppVar_32863 = (cppVar_32863 & cppMask_un_8_);
	BIT_VEC cppVar_32864 = PC + 1;
	cppVar_32864 = (cppVar_32864 & cppMask_un_16_);
	BIT_VEC cppVar_32865 = ROM.rd(cppVar_32864);
	BIT_VEC cppVar_32866 = (cppVar_32865 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32867 = (cppVar_32866 & cppMask_un_5_);
	BIT_VEC cppVar_32868 = cppVar_32867 + 32;
	cppVar_32868 = (cppVar_32868 & cppMask_un_8_);
	BIT_VEC cppVar_32869 = (cppVar_32859) ? cppVar_32863 : cppVar_32868;
	bool cppVar_32871 = (cppVar_32869 == 224);
	BIT_VEC cppVar_32872 = PC + 1;
	cppVar_32872 = (cppVar_32872 & cppMask_un_16_);
	BIT_VEC cppVar_32873 = ROM.rd(cppVar_32872);
	BIT_VEC cppVar_32874 = (cppVar_32873 >> 7) & cppMask_un_1_;
	bool cppVar_32875 = (cppVar_32874 == 1);
	BIT_VEC cppVar_32876 = PC + 1;
	cppVar_32876 = (cppVar_32876 & cppMask_un_16_);
	BIT_VEC cppVar_32877 = ROM.rd(cppVar_32876);
	BIT_VEC cppVar_32878 = (cppVar_32877 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32879 = (cppVar_32878 << 3) | 0;
	cppVar_32879 = (cppVar_32879 & cppMask_un_8_);
	BIT_VEC cppVar_32880 = PC + 1;
	cppVar_32880 = (cppVar_32880 & cppMask_un_16_);
	BIT_VEC cppVar_32881 = ROM.rd(cppVar_32880);
	BIT_VEC cppVar_32882 = (cppVar_32881 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32883 = (cppVar_32882 & cppMask_un_5_);
	BIT_VEC cppVar_32884 = cppVar_32883 + 32;
	cppVar_32884 = (cppVar_32884 & cppMask_un_8_);
	BIT_VEC cppVar_32885 = (cppVar_32875) ? cppVar_32879 : cppVar_32884;
	bool cppVar_32887 = (cppVar_32885 == 240);
	BIT_VEC cppVar_32889 = (cppVar_32887) ? B : 0;
	BIT_VEC cppVar_32890 = (cppVar_32871) ? ACC : cppVar_32889;
	BIT_VEC cppVar_32891 = (cppVar_32855) ? PSW : cppVar_32890;
	BIT_VEC cppVar_32892 = (cppVar_32839) ? IP : cppVar_32891;
	BIT_VEC cppVar_32893 = (cppVar_32823) ? P3 : cppVar_32892;
	BIT_VEC cppVar_32894 = (cppVar_32807) ? IE : cppVar_32893;
	BIT_VEC cppVar_32895 = (cppVar_32791) ? P2 : cppVar_32894;
	BIT_VEC cppVar_32896 = (cppVar_32775) ? SBUF : cppVar_32895;
	BIT_VEC cppVar_32897 = (cppVar_32759) ? SCON : cppVar_32896;
	BIT_VEC cppVar_32898 = (cppVar_32743) ? P1 : cppVar_32897;
	BIT_VEC cppVar_32899 = (cppVar_32727) ? TH1 : cppVar_32898;
	BIT_VEC cppVar_32900 = (cppVar_32711) ? TL1 : cppVar_32899;
	BIT_VEC cppVar_32901 = (cppVar_32695) ? TH0 : cppVar_32900;
	BIT_VEC cppVar_32902 = (cppVar_32679) ? TL0 : cppVar_32901;
	BIT_VEC cppVar_32903 = (cppVar_32663) ? TMOD : cppVar_32902;
	BIT_VEC cppVar_32904 = (cppVar_32647) ? TCON : cppVar_32903;
	BIT_VEC cppVar_32905 = (cppVar_32631) ? PCON : cppVar_32904;
	BIT_VEC cppVar_32906 = (cppVar_32615) ? DPH : cppVar_32905;
	BIT_VEC cppVar_32907 = (cppVar_32599) ? DPL : cppVar_32906;
	BIT_VEC cppVar_32908 = (cppVar_32583) ? SP : cppVar_32907;
	BIT_VEC cppVar_32909 = (cppVar_32567) ? P0 : cppVar_32908;
	BIT_VEC cppVar_32910 = (cppVar_32536) ? cppVar_32551 : cppVar_32909;
	BIT_VEC cppVar_32911 = PC + 1;
	cppVar_32911 = (cppVar_32911 & cppMask_un_16_);
	BIT_VEC cppVar_32912 = ROM.rd(cppVar_32911);
	BIT_VEC cppVar_32913 = (cppVar_32912 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_32914 = (cppVar_32910 >> static_cast<unsigned>(cppVar_32913)) & 0x1;
	BIT_VEC cppVar_32915 = ~cppVar_32914;
	BIT_VEC cppVar_32916 = (cppVar_32915 & cppMask_un_1_);
	BIT_VEC cppVar_32917 = PC + 1;
	cppVar_32917 = (cppVar_32917 & cppMask_un_16_);
	BIT_VEC cppVar_32918 = ROM.rd(cppVar_32917);
	BIT_VEC cppVar_32919 = (cppVar_32918 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_32920 = (cppVar_32919 & cppMask_un_3_);
	BIT_VEC cppVar_32921 = cppVar_32916 << static_cast<unsigned>(cppVar_32920);
	cppVar_32921 = (cppVar_32921 & cppMask_un_8_);
	BIT_VEC cppVar_32922 = cppVar_32516 | cppVar_32921;
	BIT_VEC cppVar_32923 = (cppVar_32117) ? cppVar_32922 : P2;
	BIT_VEC cppVar_32924 = ROM.rd(PC);
	bool cppVar_32926 = (cppVar_32924 == 146);
	BIT_VEC cppVar_32928 = PC + 1;
	cppVar_32928 = (cppVar_32928 & cppMask_un_16_);
	BIT_VEC cppVar_32929 = ROM.rd(cppVar_32928);
	BIT_VEC cppVar_32930 = (cppVar_32929 >> 7) & cppMask_un_1_;
	bool cppVar_32932 = (cppVar_32930 == 1);
	BIT_VEC cppVar_32933 = PC + 1;
	cppVar_32933 = (cppVar_32933 & cppMask_un_16_);
	BIT_VEC cppVar_32934 = ROM.rd(cppVar_32933);
	BIT_VEC cppVar_32935 = (cppVar_32934 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32937 = (cppVar_32935 << 3) | 0;
	cppVar_32937 = (cppVar_32937 & cppMask_un_8_);
	BIT_VEC cppVar_32938 = PC + 1;
	cppVar_32938 = (cppVar_32938 & cppMask_un_16_);
	BIT_VEC cppVar_32939 = ROM.rd(cppVar_32938);
	BIT_VEC cppVar_32940 = (cppVar_32939 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32941 = (cppVar_32940 & cppMask_un_5_);
	BIT_VEC cppVar_32943 = cppVar_32941 + 32;
	cppVar_32943 = (cppVar_32943 & cppMask_un_8_);
	BIT_VEC cppVar_32944 = (cppVar_32932) ? cppVar_32937 : cppVar_32943;
	bool cppVar_32946 = (cppVar_32944 == 160);
	BIT_VEC cppVar_32948 = PC + 1;
	cppVar_32948 = (cppVar_32948 & cppMask_un_16_);
	BIT_VEC cppVar_32949 = ROM.rd(cppVar_32948);
	BIT_VEC cppVar_32950 = (cppVar_32949 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_32951 = (cppVar_32950 & cppMask_un_3_);
	BIT_VEC cppVar_32952 = 1 << static_cast<unsigned>(cppVar_32951);
	cppVar_32952 = (cppVar_32952 & cppMask_un_8_);
	BIT_VEC cppVar_32953 = ~cppVar_32952;
	BIT_VEC cppVar_32954 = PC + 1;
	cppVar_32954 = (cppVar_32954 & cppMask_un_16_);
	BIT_VEC cppVar_32955 = ROM.rd(cppVar_32954);
	BIT_VEC cppVar_32956 = (cppVar_32955 >> 7) & cppMask_un_1_;
	bool cppVar_32957 = (cppVar_32956 == 1);
	BIT_VEC cppVar_32958 = PC + 1;
	cppVar_32958 = (cppVar_32958 & cppMask_un_16_);
	BIT_VEC cppVar_32959 = ROM.rd(cppVar_32958);
	BIT_VEC cppVar_32960 = (cppVar_32959 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32961 = (cppVar_32960 << 3) | 0;
	cppVar_32961 = (cppVar_32961 & cppMask_un_8_);
	BIT_VEC cppVar_32962 = PC + 1;
	cppVar_32962 = (cppVar_32962 & cppMask_un_16_);
	BIT_VEC cppVar_32963 = ROM.rd(cppVar_32962);
	BIT_VEC cppVar_32964 = (cppVar_32963 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32965 = (cppVar_32964 & cppMask_un_5_);
	BIT_VEC cppVar_32966 = cppVar_32965 + 32;
	cppVar_32966 = (cppVar_32966 & cppMask_un_8_);
	BIT_VEC cppVar_32967 = (cppVar_32957) ? cppVar_32961 : cppVar_32966;
	BIT_VEC cppVar_32968 = (cppVar_32967 >> 7) & cppMask_un_1_;
	bool cppVar_32970 = (cppVar_32968 == 0);
	BIT_VEC cppVar_32971 = PC + 1;
	cppVar_32971 = (cppVar_32971 & cppMask_un_16_);
	BIT_VEC cppVar_32972 = ROM.rd(cppVar_32971);
	BIT_VEC cppVar_32973 = (cppVar_32972 >> 7) & cppMask_un_1_;
	bool cppVar_32974 = (cppVar_32973 == 1);
	BIT_VEC cppVar_32975 = PC + 1;
	cppVar_32975 = (cppVar_32975 & cppMask_un_16_);
	BIT_VEC cppVar_32976 = ROM.rd(cppVar_32975);
	BIT_VEC cppVar_32977 = (cppVar_32976 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32978 = (cppVar_32977 << 3) | 0;
	cppVar_32978 = (cppVar_32978 & cppMask_un_8_);
	BIT_VEC cppVar_32979 = PC + 1;
	cppVar_32979 = (cppVar_32979 & cppMask_un_16_);
	BIT_VEC cppVar_32980 = ROM.rd(cppVar_32979);
	BIT_VEC cppVar_32981 = (cppVar_32980 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32982 = (cppVar_32981 & cppMask_un_5_);
	BIT_VEC cppVar_32983 = cppVar_32982 + 32;
	cppVar_32983 = (cppVar_32983 & cppMask_un_8_);
	BIT_VEC cppVar_32984 = (cppVar_32974) ? cppVar_32978 : cppVar_32983;
	BIT_VEC cppVar_32985 = IRAM.rd(cppVar_32984);
	BIT_VEC cppVar_32986 = PC + 1;
	cppVar_32986 = (cppVar_32986 & cppMask_un_16_);
	BIT_VEC cppVar_32987 = ROM.rd(cppVar_32986);
	BIT_VEC cppVar_32988 = (cppVar_32987 >> 7) & cppMask_un_1_;
	bool cppVar_32989 = (cppVar_32988 == 1);
	BIT_VEC cppVar_32990 = PC + 1;
	cppVar_32990 = (cppVar_32990 & cppMask_un_16_);
	BIT_VEC cppVar_32991 = ROM.rd(cppVar_32990);
	BIT_VEC cppVar_32992 = (cppVar_32991 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32993 = (cppVar_32992 << 3) | 0;
	cppVar_32993 = (cppVar_32993 & cppMask_un_8_);
	BIT_VEC cppVar_32994 = PC + 1;
	cppVar_32994 = (cppVar_32994 & cppMask_un_16_);
	BIT_VEC cppVar_32995 = ROM.rd(cppVar_32994);
	BIT_VEC cppVar_32996 = (cppVar_32995 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_32997 = (cppVar_32996 & cppMask_un_5_);
	BIT_VEC cppVar_32998 = cppVar_32997 + 32;
	cppVar_32998 = (cppVar_32998 & cppMask_un_8_);
	BIT_VEC cppVar_32999 = (cppVar_32989) ? cppVar_32993 : cppVar_32998;
	bool cppVar_33001 = (cppVar_32999 == 128);
	BIT_VEC cppVar_33002 = PC + 1;
	cppVar_33002 = (cppVar_33002 & cppMask_un_16_);
	BIT_VEC cppVar_33003 = ROM.rd(cppVar_33002);
	BIT_VEC cppVar_33004 = (cppVar_33003 >> 7) & cppMask_un_1_;
	bool cppVar_33005 = (cppVar_33004 == 1);
	BIT_VEC cppVar_33006 = PC + 1;
	cppVar_33006 = (cppVar_33006 & cppMask_un_16_);
	BIT_VEC cppVar_33007 = ROM.rd(cppVar_33006);
	BIT_VEC cppVar_33008 = (cppVar_33007 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33009 = (cppVar_33008 << 3) | 0;
	cppVar_33009 = (cppVar_33009 & cppMask_un_8_);
	BIT_VEC cppVar_33010 = PC + 1;
	cppVar_33010 = (cppVar_33010 & cppMask_un_16_);
	BIT_VEC cppVar_33011 = ROM.rd(cppVar_33010);
	BIT_VEC cppVar_33012 = (cppVar_33011 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33013 = (cppVar_33012 & cppMask_un_5_);
	BIT_VEC cppVar_33014 = cppVar_33013 + 32;
	cppVar_33014 = (cppVar_33014 & cppMask_un_8_);
	BIT_VEC cppVar_33015 = (cppVar_33005) ? cppVar_33009 : cppVar_33014;
	bool cppVar_33017 = (cppVar_33015 == 129);
	BIT_VEC cppVar_33018 = PC + 1;
	cppVar_33018 = (cppVar_33018 & cppMask_un_16_);
	BIT_VEC cppVar_33019 = ROM.rd(cppVar_33018);
	BIT_VEC cppVar_33020 = (cppVar_33019 >> 7) & cppMask_un_1_;
	bool cppVar_33021 = (cppVar_33020 == 1);
	BIT_VEC cppVar_33022 = PC + 1;
	cppVar_33022 = (cppVar_33022 & cppMask_un_16_);
	BIT_VEC cppVar_33023 = ROM.rd(cppVar_33022);
	BIT_VEC cppVar_33024 = (cppVar_33023 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33025 = (cppVar_33024 << 3) | 0;
	cppVar_33025 = (cppVar_33025 & cppMask_un_8_);
	BIT_VEC cppVar_33026 = PC + 1;
	cppVar_33026 = (cppVar_33026 & cppMask_un_16_);
	BIT_VEC cppVar_33027 = ROM.rd(cppVar_33026);
	BIT_VEC cppVar_33028 = (cppVar_33027 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33029 = (cppVar_33028 & cppMask_un_5_);
	BIT_VEC cppVar_33030 = cppVar_33029 + 32;
	cppVar_33030 = (cppVar_33030 & cppMask_un_8_);
	BIT_VEC cppVar_33031 = (cppVar_33021) ? cppVar_33025 : cppVar_33030;
	bool cppVar_33033 = (cppVar_33031 == 130);
	BIT_VEC cppVar_33034 = PC + 1;
	cppVar_33034 = (cppVar_33034 & cppMask_un_16_);
	BIT_VEC cppVar_33035 = ROM.rd(cppVar_33034);
	BIT_VEC cppVar_33036 = (cppVar_33035 >> 7) & cppMask_un_1_;
	bool cppVar_33037 = (cppVar_33036 == 1);
	BIT_VEC cppVar_33038 = PC + 1;
	cppVar_33038 = (cppVar_33038 & cppMask_un_16_);
	BIT_VEC cppVar_33039 = ROM.rd(cppVar_33038);
	BIT_VEC cppVar_33040 = (cppVar_33039 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33041 = (cppVar_33040 << 3) | 0;
	cppVar_33041 = (cppVar_33041 & cppMask_un_8_);
	BIT_VEC cppVar_33042 = PC + 1;
	cppVar_33042 = (cppVar_33042 & cppMask_un_16_);
	BIT_VEC cppVar_33043 = ROM.rd(cppVar_33042);
	BIT_VEC cppVar_33044 = (cppVar_33043 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33045 = (cppVar_33044 & cppMask_un_5_);
	BIT_VEC cppVar_33046 = cppVar_33045 + 32;
	cppVar_33046 = (cppVar_33046 & cppMask_un_8_);
	BIT_VEC cppVar_33047 = (cppVar_33037) ? cppVar_33041 : cppVar_33046;
	bool cppVar_33049 = (cppVar_33047 == 131);
	BIT_VEC cppVar_33050 = PC + 1;
	cppVar_33050 = (cppVar_33050 & cppMask_un_16_);
	BIT_VEC cppVar_33051 = ROM.rd(cppVar_33050);
	BIT_VEC cppVar_33052 = (cppVar_33051 >> 7) & cppMask_un_1_;
	bool cppVar_33053 = (cppVar_33052 == 1);
	BIT_VEC cppVar_33054 = PC + 1;
	cppVar_33054 = (cppVar_33054 & cppMask_un_16_);
	BIT_VEC cppVar_33055 = ROM.rd(cppVar_33054);
	BIT_VEC cppVar_33056 = (cppVar_33055 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33057 = (cppVar_33056 << 3) | 0;
	cppVar_33057 = (cppVar_33057 & cppMask_un_8_);
	BIT_VEC cppVar_33058 = PC + 1;
	cppVar_33058 = (cppVar_33058 & cppMask_un_16_);
	BIT_VEC cppVar_33059 = ROM.rd(cppVar_33058);
	BIT_VEC cppVar_33060 = (cppVar_33059 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33061 = (cppVar_33060 & cppMask_un_5_);
	BIT_VEC cppVar_33062 = cppVar_33061 + 32;
	cppVar_33062 = (cppVar_33062 & cppMask_un_8_);
	BIT_VEC cppVar_33063 = (cppVar_33053) ? cppVar_33057 : cppVar_33062;
	bool cppVar_33065 = (cppVar_33063 == 135);
	BIT_VEC cppVar_33066 = PC + 1;
	cppVar_33066 = (cppVar_33066 & cppMask_un_16_);
	BIT_VEC cppVar_33067 = ROM.rd(cppVar_33066);
	BIT_VEC cppVar_33068 = (cppVar_33067 >> 7) & cppMask_un_1_;
	bool cppVar_33069 = (cppVar_33068 == 1);
	BIT_VEC cppVar_33070 = PC + 1;
	cppVar_33070 = (cppVar_33070 & cppMask_un_16_);
	BIT_VEC cppVar_33071 = ROM.rd(cppVar_33070);
	BIT_VEC cppVar_33072 = (cppVar_33071 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33073 = (cppVar_33072 << 3) | 0;
	cppVar_33073 = (cppVar_33073 & cppMask_un_8_);
	BIT_VEC cppVar_33074 = PC + 1;
	cppVar_33074 = (cppVar_33074 & cppMask_un_16_);
	BIT_VEC cppVar_33075 = ROM.rd(cppVar_33074);
	BIT_VEC cppVar_33076 = (cppVar_33075 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33077 = (cppVar_33076 & cppMask_un_5_);
	BIT_VEC cppVar_33078 = cppVar_33077 + 32;
	cppVar_33078 = (cppVar_33078 & cppMask_un_8_);
	BIT_VEC cppVar_33079 = (cppVar_33069) ? cppVar_33073 : cppVar_33078;
	bool cppVar_33081 = (cppVar_33079 == 136);
	BIT_VEC cppVar_33082 = PC + 1;
	cppVar_33082 = (cppVar_33082 & cppMask_un_16_);
	BIT_VEC cppVar_33083 = ROM.rd(cppVar_33082);
	BIT_VEC cppVar_33084 = (cppVar_33083 >> 7) & cppMask_un_1_;
	bool cppVar_33085 = (cppVar_33084 == 1);
	BIT_VEC cppVar_33086 = PC + 1;
	cppVar_33086 = (cppVar_33086 & cppMask_un_16_);
	BIT_VEC cppVar_33087 = ROM.rd(cppVar_33086);
	BIT_VEC cppVar_33088 = (cppVar_33087 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33089 = (cppVar_33088 << 3) | 0;
	cppVar_33089 = (cppVar_33089 & cppMask_un_8_);
	BIT_VEC cppVar_33090 = PC + 1;
	cppVar_33090 = (cppVar_33090 & cppMask_un_16_);
	BIT_VEC cppVar_33091 = ROM.rd(cppVar_33090);
	BIT_VEC cppVar_33092 = (cppVar_33091 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33093 = (cppVar_33092 & cppMask_un_5_);
	BIT_VEC cppVar_33094 = cppVar_33093 + 32;
	cppVar_33094 = (cppVar_33094 & cppMask_un_8_);
	BIT_VEC cppVar_33095 = (cppVar_33085) ? cppVar_33089 : cppVar_33094;
	bool cppVar_33097 = (cppVar_33095 == 137);
	BIT_VEC cppVar_33098 = PC + 1;
	cppVar_33098 = (cppVar_33098 & cppMask_un_16_);
	BIT_VEC cppVar_33099 = ROM.rd(cppVar_33098);
	BIT_VEC cppVar_33100 = (cppVar_33099 >> 7) & cppMask_un_1_;
	bool cppVar_33101 = (cppVar_33100 == 1);
	BIT_VEC cppVar_33102 = PC + 1;
	cppVar_33102 = (cppVar_33102 & cppMask_un_16_);
	BIT_VEC cppVar_33103 = ROM.rd(cppVar_33102);
	BIT_VEC cppVar_33104 = (cppVar_33103 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33105 = (cppVar_33104 << 3) | 0;
	cppVar_33105 = (cppVar_33105 & cppMask_un_8_);
	BIT_VEC cppVar_33106 = PC + 1;
	cppVar_33106 = (cppVar_33106 & cppMask_un_16_);
	BIT_VEC cppVar_33107 = ROM.rd(cppVar_33106);
	BIT_VEC cppVar_33108 = (cppVar_33107 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33109 = (cppVar_33108 & cppMask_un_5_);
	BIT_VEC cppVar_33110 = cppVar_33109 + 32;
	cppVar_33110 = (cppVar_33110 & cppMask_un_8_);
	BIT_VEC cppVar_33111 = (cppVar_33101) ? cppVar_33105 : cppVar_33110;
	bool cppVar_33113 = (cppVar_33111 == 138);
	BIT_VEC cppVar_33114 = PC + 1;
	cppVar_33114 = (cppVar_33114 & cppMask_un_16_);
	BIT_VEC cppVar_33115 = ROM.rd(cppVar_33114);
	BIT_VEC cppVar_33116 = (cppVar_33115 >> 7) & cppMask_un_1_;
	bool cppVar_33117 = (cppVar_33116 == 1);
	BIT_VEC cppVar_33118 = PC + 1;
	cppVar_33118 = (cppVar_33118 & cppMask_un_16_);
	BIT_VEC cppVar_33119 = ROM.rd(cppVar_33118);
	BIT_VEC cppVar_33120 = (cppVar_33119 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33121 = (cppVar_33120 << 3) | 0;
	cppVar_33121 = (cppVar_33121 & cppMask_un_8_);
	BIT_VEC cppVar_33122 = PC + 1;
	cppVar_33122 = (cppVar_33122 & cppMask_un_16_);
	BIT_VEC cppVar_33123 = ROM.rd(cppVar_33122);
	BIT_VEC cppVar_33124 = (cppVar_33123 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33125 = (cppVar_33124 & cppMask_un_5_);
	BIT_VEC cppVar_33126 = cppVar_33125 + 32;
	cppVar_33126 = (cppVar_33126 & cppMask_un_8_);
	BIT_VEC cppVar_33127 = (cppVar_33117) ? cppVar_33121 : cppVar_33126;
	bool cppVar_33129 = (cppVar_33127 == 140);
	BIT_VEC cppVar_33130 = PC + 1;
	cppVar_33130 = (cppVar_33130 & cppMask_un_16_);
	BIT_VEC cppVar_33131 = ROM.rd(cppVar_33130);
	BIT_VEC cppVar_33132 = (cppVar_33131 >> 7) & cppMask_un_1_;
	bool cppVar_33133 = (cppVar_33132 == 1);
	BIT_VEC cppVar_33134 = PC + 1;
	cppVar_33134 = (cppVar_33134 & cppMask_un_16_);
	BIT_VEC cppVar_33135 = ROM.rd(cppVar_33134);
	BIT_VEC cppVar_33136 = (cppVar_33135 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33137 = (cppVar_33136 << 3) | 0;
	cppVar_33137 = (cppVar_33137 & cppMask_un_8_);
	BIT_VEC cppVar_33138 = PC + 1;
	cppVar_33138 = (cppVar_33138 & cppMask_un_16_);
	BIT_VEC cppVar_33139 = ROM.rd(cppVar_33138);
	BIT_VEC cppVar_33140 = (cppVar_33139 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33141 = (cppVar_33140 & cppMask_un_5_);
	BIT_VEC cppVar_33142 = cppVar_33141 + 32;
	cppVar_33142 = (cppVar_33142 & cppMask_un_8_);
	BIT_VEC cppVar_33143 = (cppVar_33133) ? cppVar_33137 : cppVar_33142;
	bool cppVar_33145 = (cppVar_33143 == 139);
	BIT_VEC cppVar_33146 = PC + 1;
	cppVar_33146 = (cppVar_33146 & cppMask_un_16_);
	BIT_VEC cppVar_33147 = ROM.rd(cppVar_33146);
	BIT_VEC cppVar_33148 = (cppVar_33147 >> 7) & cppMask_un_1_;
	bool cppVar_33149 = (cppVar_33148 == 1);
	BIT_VEC cppVar_33150 = PC + 1;
	cppVar_33150 = (cppVar_33150 & cppMask_un_16_);
	BIT_VEC cppVar_33151 = ROM.rd(cppVar_33150);
	BIT_VEC cppVar_33152 = (cppVar_33151 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33153 = (cppVar_33152 << 3) | 0;
	cppVar_33153 = (cppVar_33153 & cppMask_un_8_);
	BIT_VEC cppVar_33154 = PC + 1;
	cppVar_33154 = (cppVar_33154 & cppMask_un_16_);
	BIT_VEC cppVar_33155 = ROM.rd(cppVar_33154);
	BIT_VEC cppVar_33156 = (cppVar_33155 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33157 = (cppVar_33156 & cppMask_un_5_);
	BIT_VEC cppVar_33158 = cppVar_33157 + 32;
	cppVar_33158 = (cppVar_33158 & cppMask_un_8_);
	BIT_VEC cppVar_33159 = (cppVar_33149) ? cppVar_33153 : cppVar_33158;
	bool cppVar_33161 = (cppVar_33159 == 141);
	BIT_VEC cppVar_33162 = PC + 1;
	cppVar_33162 = (cppVar_33162 & cppMask_un_16_);
	BIT_VEC cppVar_33163 = ROM.rd(cppVar_33162);
	BIT_VEC cppVar_33164 = (cppVar_33163 >> 7) & cppMask_un_1_;
	bool cppVar_33165 = (cppVar_33164 == 1);
	BIT_VEC cppVar_33166 = PC + 1;
	cppVar_33166 = (cppVar_33166 & cppMask_un_16_);
	BIT_VEC cppVar_33167 = ROM.rd(cppVar_33166);
	BIT_VEC cppVar_33168 = (cppVar_33167 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33169 = (cppVar_33168 << 3) | 0;
	cppVar_33169 = (cppVar_33169 & cppMask_un_8_);
	BIT_VEC cppVar_33170 = PC + 1;
	cppVar_33170 = (cppVar_33170 & cppMask_un_16_);
	BIT_VEC cppVar_33171 = ROM.rd(cppVar_33170);
	BIT_VEC cppVar_33172 = (cppVar_33171 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33173 = (cppVar_33172 & cppMask_un_5_);
	BIT_VEC cppVar_33174 = cppVar_33173 + 32;
	cppVar_33174 = (cppVar_33174 & cppMask_un_8_);
	BIT_VEC cppVar_33175 = (cppVar_33165) ? cppVar_33169 : cppVar_33174;
	bool cppVar_33177 = (cppVar_33175 == 144);
	BIT_VEC cppVar_33178 = PC + 1;
	cppVar_33178 = (cppVar_33178 & cppMask_un_16_);
	BIT_VEC cppVar_33179 = ROM.rd(cppVar_33178);
	BIT_VEC cppVar_33180 = (cppVar_33179 >> 7) & cppMask_un_1_;
	bool cppVar_33181 = (cppVar_33180 == 1);
	BIT_VEC cppVar_33182 = PC + 1;
	cppVar_33182 = (cppVar_33182 & cppMask_un_16_);
	BIT_VEC cppVar_33183 = ROM.rd(cppVar_33182);
	BIT_VEC cppVar_33184 = (cppVar_33183 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33185 = (cppVar_33184 << 3) | 0;
	cppVar_33185 = (cppVar_33185 & cppMask_un_8_);
	BIT_VEC cppVar_33186 = PC + 1;
	cppVar_33186 = (cppVar_33186 & cppMask_un_16_);
	BIT_VEC cppVar_33187 = ROM.rd(cppVar_33186);
	BIT_VEC cppVar_33188 = (cppVar_33187 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33189 = (cppVar_33188 & cppMask_un_5_);
	BIT_VEC cppVar_33190 = cppVar_33189 + 32;
	cppVar_33190 = (cppVar_33190 & cppMask_un_8_);
	BIT_VEC cppVar_33191 = (cppVar_33181) ? cppVar_33185 : cppVar_33190;
	bool cppVar_33193 = (cppVar_33191 == 152);
	BIT_VEC cppVar_33194 = PC + 1;
	cppVar_33194 = (cppVar_33194 & cppMask_un_16_);
	BIT_VEC cppVar_33195 = ROM.rd(cppVar_33194);
	BIT_VEC cppVar_33196 = (cppVar_33195 >> 7) & cppMask_un_1_;
	bool cppVar_33197 = (cppVar_33196 == 1);
	BIT_VEC cppVar_33198 = PC + 1;
	cppVar_33198 = (cppVar_33198 & cppMask_un_16_);
	BIT_VEC cppVar_33199 = ROM.rd(cppVar_33198);
	BIT_VEC cppVar_33200 = (cppVar_33199 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33201 = (cppVar_33200 << 3) | 0;
	cppVar_33201 = (cppVar_33201 & cppMask_un_8_);
	BIT_VEC cppVar_33202 = PC + 1;
	cppVar_33202 = (cppVar_33202 & cppMask_un_16_);
	BIT_VEC cppVar_33203 = ROM.rd(cppVar_33202);
	BIT_VEC cppVar_33204 = (cppVar_33203 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33205 = (cppVar_33204 & cppMask_un_5_);
	BIT_VEC cppVar_33206 = cppVar_33205 + 32;
	cppVar_33206 = (cppVar_33206 & cppMask_un_8_);
	BIT_VEC cppVar_33207 = (cppVar_33197) ? cppVar_33201 : cppVar_33206;
	bool cppVar_33209 = (cppVar_33207 == 153);
	BIT_VEC cppVar_33210 = PC + 1;
	cppVar_33210 = (cppVar_33210 & cppMask_un_16_);
	BIT_VEC cppVar_33211 = ROM.rd(cppVar_33210);
	BIT_VEC cppVar_33212 = (cppVar_33211 >> 7) & cppMask_un_1_;
	bool cppVar_33213 = (cppVar_33212 == 1);
	BIT_VEC cppVar_33214 = PC + 1;
	cppVar_33214 = (cppVar_33214 & cppMask_un_16_);
	BIT_VEC cppVar_33215 = ROM.rd(cppVar_33214);
	BIT_VEC cppVar_33216 = (cppVar_33215 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33217 = (cppVar_33216 << 3) | 0;
	cppVar_33217 = (cppVar_33217 & cppMask_un_8_);
	BIT_VEC cppVar_33218 = PC + 1;
	cppVar_33218 = (cppVar_33218 & cppMask_un_16_);
	BIT_VEC cppVar_33219 = ROM.rd(cppVar_33218);
	BIT_VEC cppVar_33220 = (cppVar_33219 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33221 = (cppVar_33220 & cppMask_un_5_);
	BIT_VEC cppVar_33222 = cppVar_33221 + 32;
	cppVar_33222 = (cppVar_33222 & cppMask_un_8_);
	BIT_VEC cppVar_33223 = (cppVar_33213) ? cppVar_33217 : cppVar_33222;
	bool cppVar_33225 = (cppVar_33223 == 160);
	BIT_VEC cppVar_33226 = PC + 1;
	cppVar_33226 = (cppVar_33226 & cppMask_un_16_);
	BIT_VEC cppVar_33227 = ROM.rd(cppVar_33226);
	BIT_VEC cppVar_33228 = (cppVar_33227 >> 7) & cppMask_un_1_;
	bool cppVar_33229 = (cppVar_33228 == 1);
	BIT_VEC cppVar_33230 = PC + 1;
	cppVar_33230 = (cppVar_33230 & cppMask_un_16_);
	BIT_VEC cppVar_33231 = ROM.rd(cppVar_33230);
	BIT_VEC cppVar_33232 = (cppVar_33231 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33233 = (cppVar_33232 << 3) | 0;
	cppVar_33233 = (cppVar_33233 & cppMask_un_8_);
	BIT_VEC cppVar_33234 = PC + 1;
	cppVar_33234 = (cppVar_33234 & cppMask_un_16_);
	BIT_VEC cppVar_33235 = ROM.rd(cppVar_33234);
	BIT_VEC cppVar_33236 = (cppVar_33235 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33237 = (cppVar_33236 & cppMask_un_5_);
	BIT_VEC cppVar_33238 = cppVar_33237 + 32;
	cppVar_33238 = (cppVar_33238 & cppMask_un_8_);
	BIT_VEC cppVar_33239 = (cppVar_33229) ? cppVar_33233 : cppVar_33238;
	bool cppVar_33241 = (cppVar_33239 == 168);
	BIT_VEC cppVar_33242 = PC + 1;
	cppVar_33242 = (cppVar_33242 & cppMask_un_16_);
	BIT_VEC cppVar_33243 = ROM.rd(cppVar_33242);
	BIT_VEC cppVar_33244 = (cppVar_33243 >> 7) & cppMask_un_1_;
	bool cppVar_33245 = (cppVar_33244 == 1);
	BIT_VEC cppVar_33246 = PC + 1;
	cppVar_33246 = (cppVar_33246 & cppMask_un_16_);
	BIT_VEC cppVar_33247 = ROM.rd(cppVar_33246);
	BIT_VEC cppVar_33248 = (cppVar_33247 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33249 = (cppVar_33248 << 3) | 0;
	cppVar_33249 = (cppVar_33249 & cppMask_un_8_);
	BIT_VEC cppVar_33250 = PC + 1;
	cppVar_33250 = (cppVar_33250 & cppMask_un_16_);
	BIT_VEC cppVar_33251 = ROM.rd(cppVar_33250);
	BIT_VEC cppVar_33252 = (cppVar_33251 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33253 = (cppVar_33252 & cppMask_un_5_);
	BIT_VEC cppVar_33254 = cppVar_33253 + 32;
	cppVar_33254 = (cppVar_33254 & cppMask_un_8_);
	BIT_VEC cppVar_33255 = (cppVar_33245) ? cppVar_33249 : cppVar_33254;
	bool cppVar_33257 = (cppVar_33255 == 176);
	BIT_VEC cppVar_33258 = PC + 1;
	cppVar_33258 = (cppVar_33258 & cppMask_un_16_);
	BIT_VEC cppVar_33259 = ROM.rd(cppVar_33258);
	BIT_VEC cppVar_33260 = (cppVar_33259 >> 7) & cppMask_un_1_;
	bool cppVar_33261 = (cppVar_33260 == 1);
	BIT_VEC cppVar_33262 = PC + 1;
	cppVar_33262 = (cppVar_33262 & cppMask_un_16_);
	BIT_VEC cppVar_33263 = ROM.rd(cppVar_33262);
	BIT_VEC cppVar_33264 = (cppVar_33263 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33265 = (cppVar_33264 << 3) | 0;
	cppVar_33265 = (cppVar_33265 & cppMask_un_8_);
	BIT_VEC cppVar_33266 = PC + 1;
	cppVar_33266 = (cppVar_33266 & cppMask_un_16_);
	BIT_VEC cppVar_33267 = ROM.rd(cppVar_33266);
	BIT_VEC cppVar_33268 = (cppVar_33267 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33269 = (cppVar_33268 & cppMask_un_5_);
	BIT_VEC cppVar_33270 = cppVar_33269 + 32;
	cppVar_33270 = (cppVar_33270 & cppMask_un_8_);
	BIT_VEC cppVar_33271 = (cppVar_33261) ? cppVar_33265 : cppVar_33270;
	bool cppVar_33273 = (cppVar_33271 == 184);
	BIT_VEC cppVar_33274 = PC + 1;
	cppVar_33274 = (cppVar_33274 & cppMask_un_16_);
	BIT_VEC cppVar_33275 = ROM.rd(cppVar_33274);
	BIT_VEC cppVar_33276 = (cppVar_33275 >> 7) & cppMask_un_1_;
	bool cppVar_33277 = (cppVar_33276 == 1);
	BIT_VEC cppVar_33278 = PC + 1;
	cppVar_33278 = (cppVar_33278 & cppMask_un_16_);
	BIT_VEC cppVar_33279 = ROM.rd(cppVar_33278);
	BIT_VEC cppVar_33280 = (cppVar_33279 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33281 = (cppVar_33280 << 3) | 0;
	cppVar_33281 = (cppVar_33281 & cppMask_un_8_);
	BIT_VEC cppVar_33282 = PC + 1;
	cppVar_33282 = (cppVar_33282 & cppMask_un_16_);
	BIT_VEC cppVar_33283 = ROM.rd(cppVar_33282);
	BIT_VEC cppVar_33284 = (cppVar_33283 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33285 = (cppVar_33284 & cppMask_un_5_);
	BIT_VEC cppVar_33286 = cppVar_33285 + 32;
	cppVar_33286 = (cppVar_33286 & cppMask_un_8_);
	BIT_VEC cppVar_33287 = (cppVar_33277) ? cppVar_33281 : cppVar_33286;
	bool cppVar_33289 = (cppVar_33287 == 208);
	BIT_VEC cppVar_33290 = PC + 1;
	cppVar_33290 = (cppVar_33290 & cppMask_un_16_);
	BIT_VEC cppVar_33291 = ROM.rd(cppVar_33290);
	BIT_VEC cppVar_33292 = (cppVar_33291 >> 7) & cppMask_un_1_;
	bool cppVar_33293 = (cppVar_33292 == 1);
	BIT_VEC cppVar_33294 = PC + 1;
	cppVar_33294 = (cppVar_33294 & cppMask_un_16_);
	BIT_VEC cppVar_33295 = ROM.rd(cppVar_33294);
	BIT_VEC cppVar_33296 = (cppVar_33295 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33297 = (cppVar_33296 << 3) | 0;
	cppVar_33297 = (cppVar_33297 & cppMask_un_8_);
	BIT_VEC cppVar_33298 = PC + 1;
	cppVar_33298 = (cppVar_33298 & cppMask_un_16_);
	BIT_VEC cppVar_33299 = ROM.rd(cppVar_33298);
	BIT_VEC cppVar_33300 = (cppVar_33299 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33301 = (cppVar_33300 & cppMask_un_5_);
	BIT_VEC cppVar_33302 = cppVar_33301 + 32;
	cppVar_33302 = (cppVar_33302 & cppMask_un_8_);
	BIT_VEC cppVar_33303 = (cppVar_33293) ? cppVar_33297 : cppVar_33302;
	bool cppVar_33305 = (cppVar_33303 == 224);
	BIT_VEC cppVar_33306 = PC + 1;
	cppVar_33306 = (cppVar_33306 & cppMask_un_16_);
	BIT_VEC cppVar_33307 = ROM.rd(cppVar_33306);
	BIT_VEC cppVar_33308 = (cppVar_33307 >> 7) & cppMask_un_1_;
	bool cppVar_33309 = (cppVar_33308 == 1);
	BIT_VEC cppVar_33310 = PC + 1;
	cppVar_33310 = (cppVar_33310 & cppMask_un_16_);
	BIT_VEC cppVar_33311 = ROM.rd(cppVar_33310);
	BIT_VEC cppVar_33312 = (cppVar_33311 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33313 = (cppVar_33312 << 3) | 0;
	cppVar_33313 = (cppVar_33313 & cppMask_un_8_);
	BIT_VEC cppVar_33314 = PC + 1;
	cppVar_33314 = (cppVar_33314 & cppMask_un_16_);
	BIT_VEC cppVar_33315 = ROM.rd(cppVar_33314);
	BIT_VEC cppVar_33316 = (cppVar_33315 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_33317 = (cppVar_33316 & cppMask_un_5_);
	BIT_VEC cppVar_33318 = cppVar_33317 + 32;
	cppVar_33318 = (cppVar_33318 & cppMask_un_8_);
	BIT_VEC cppVar_33319 = (cppVar_33309) ? cppVar_33313 : cppVar_33318;
	bool cppVar_33321 = (cppVar_33319 == 240);
	BIT_VEC cppVar_33323 = (cppVar_33321) ? B : 0;
	BIT_VEC cppVar_33324 = (cppVar_33305) ? ACC : cppVar_33323;
	BIT_VEC cppVar_33325 = (cppVar_33289) ? PSW : cppVar_33324;
	BIT_VEC cppVar_33326 = (cppVar_33273) ? IP : cppVar_33325;
	BIT_VEC cppVar_33327 = (cppVar_33257) ? P3 : cppVar_33326;
	BIT_VEC cppVar_33328 = (cppVar_33241) ? IE : cppVar_33327;
	BIT_VEC cppVar_33329 = (cppVar_33225) ? P2 : cppVar_33328;
	BIT_VEC cppVar_33330 = (cppVar_33209) ? SBUF : cppVar_33329;
	BIT_VEC cppVar_33331 = (cppVar_33193) ? SCON : cppVar_33330;
	BIT_VEC cppVar_33332 = (cppVar_33177) ? P1 : cppVar_33331;
	BIT_VEC cppVar_33333 = (cppVar_33161) ? TH1 : cppVar_33332;
	BIT_VEC cppVar_33334 = (cppVar_33145) ? TL1 : cppVar_33333;
	BIT_VEC cppVar_33335 = (cppVar_33129) ? TH0 : cppVar_33334;
	BIT_VEC cppVar_33336 = (cppVar_33113) ? TL0 : cppVar_33335;
	BIT_VEC cppVar_33337 = (cppVar_33097) ? TMOD : cppVar_33336;
	BIT_VEC cppVar_33338 = (cppVar_33081) ? TCON : cppVar_33337;
	BIT_VEC cppVar_33339 = (cppVar_33065) ? PCON : cppVar_33338;
	BIT_VEC cppVar_33340 = (cppVar_33049) ? DPH : cppVar_33339;
	BIT_VEC cppVar_33341 = (cppVar_33033) ? DPL : cppVar_33340;
	BIT_VEC cppVar_33342 = (cppVar_33017) ? SP : cppVar_33341;
	BIT_VEC cppVar_33343 = (cppVar_33001) ? P0 : cppVar_33342;
	BIT_VEC cppVar_33344 = (cppVar_32970) ? cppVar_32985 : cppVar_33343;
	BIT_VEC cppVar_33345 = cppVar_32953 & cppVar_33344;
	BIT_VEC cppVar_33346 = (PSW >> 7) & cppMask_un_1_;
	BIT_VEC cppVar_33347 = (cppVar_33346 & cppMask_un_1_);
	BIT_VEC cppVar_33348 = PC + 1;
	cppVar_33348 = (cppVar_33348 & cppMask_un_16_);
	BIT_VEC cppVar_33349 = ROM.rd(cppVar_33348);
	BIT_VEC cppVar_33350 = (cppVar_33349 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_33351 = (cppVar_33350 & cppMask_un_3_);
	BIT_VEC cppVar_33352 = cppVar_33347 << static_cast<unsigned>(cppVar_33351);
	cppVar_33352 = (cppVar_33352 & cppMask_un_8_);
	BIT_VEC cppVar_33353 = cppVar_33345 | cppVar_33352;
	BIT_VEC cppVar_33354 = (cppVar_32946) ? cppVar_33353 : P2;
	BIT_VEC cppVar_33355 = ROM.rd(PC);
	bool cppVar_33357 = (cppVar_33355 == 143);
	BIT_VEC cppVar_33359 = PC + 1;
	cppVar_33359 = (cppVar_33359 & cppMask_un_16_);
	BIT_VEC cppVar_33360 = ROM.rd(cppVar_33359);
	bool cppVar_33362 = (cppVar_33360 == 160);
	BIT_VEC cppVar_33364 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33366 = (cppVar_33364 << 3) | 7;
	cppVar_33366 = (cppVar_33366 & cppMask_un_5_);
	BIT_VEC cppVar_33367 = (0 << 5) | cppVar_33366;
	cppVar_33367 = (cppVar_33367 & cppMask_un_8_);
	BIT_VEC cppVar_33368 = (cppVar_33367 >> 7) & cppMask_un_1_;
	bool cppVar_33370 = (cppVar_33368 == 0);
	BIT_VEC cppVar_33371 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33372 = (cppVar_33371 << 3) | 7;
	cppVar_33372 = (cppVar_33372 & cppMask_un_5_);
	BIT_VEC cppVar_33373 = (0 << 5) | cppVar_33372;
	cppVar_33373 = (cppVar_33373 & cppMask_un_8_);
	BIT_VEC cppVar_33374 = IRAM.rd(cppVar_33373);
	BIT_VEC cppVar_33375 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33376 = (cppVar_33375 << 3) | 7;
	cppVar_33376 = (cppVar_33376 & cppMask_un_5_);
	BIT_VEC cppVar_33377 = (0 << 5) | cppVar_33376;
	cppVar_33377 = (cppVar_33377 & cppMask_un_8_);
	bool cppVar_33379 = (cppVar_33377 == 128);
	BIT_VEC cppVar_33380 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33381 = (cppVar_33380 << 3) | 7;
	cppVar_33381 = (cppVar_33381 & cppMask_un_5_);
	BIT_VEC cppVar_33382 = (0 << 5) | cppVar_33381;
	cppVar_33382 = (cppVar_33382 & cppMask_un_8_);
	bool cppVar_33384 = (cppVar_33382 == 129);
	BIT_VEC cppVar_33385 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33386 = (cppVar_33385 << 3) | 7;
	cppVar_33386 = (cppVar_33386 & cppMask_un_5_);
	BIT_VEC cppVar_33387 = (0 << 5) | cppVar_33386;
	cppVar_33387 = (cppVar_33387 & cppMask_un_8_);
	bool cppVar_33389 = (cppVar_33387 == 130);
	BIT_VEC cppVar_33390 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33391 = (cppVar_33390 << 3) | 7;
	cppVar_33391 = (cppVar_33391 & cppMask_un_5_);
	BIT_VEC cppVar_33392 = (0 << 5) | cppVar_33391;
	cppVar_33392 = (cppVar_33392 & cppMask_un_8_);
	bool cppVar_33394 = (cppVar_33392 == 131);
	BIT_VEC cppVar_33395 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33396 = (cppVar_33395 << 3) | 7;
	cppVar_33396 = (cppVar_33396 & cppMask_un_5_);
	BIT_VEC cppVar_33397 = (0 << 5) | cppVar_33396;
	cppVar_33397 = (cppVar_33397 & cppMask_un_8_);
	bool cppVar_33399 = (cppVar_33397 == 135);
	BIT_VEC cppVar_33400 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33401 = (cppVar_33400 << 3) | 7;
	cppVar_33401 = (cppVar_33401 & cppMask_un_5_);
	BIT_VEC cppVar_33402 = (0 << 5) | cppVar_33401;
	cppVar_33402 = (cppVar_33402 & cppMask_un_8_);
	bool cppVar_33404 = (cppVar_33402 == 136);
	BIT_VEC cppVar_33405 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33406 = (cppVar_33405 << 3) | 7;
	cppVar_33406 = (cppVar_33406 & cppMask_un_5_);
	BIT_VEC cppVar_33407 = (0 << 5) | cppVar_33406;
	cppVar_33407 = (cppVar_33407 & cppMask_un_8_);
	bool cppVar_33409 = (cppVar_33407 == 137);
	BIT_VEC cppVar_33410 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33411 = (cppVar_33410 << 3) | 7;
	cppVar_33411 = (cppVar_33411 & cppMask_un_5_);
	BIT_VEC cppVar_33412 = (0 << 5) | cppVar_33411;
	cppVar_33412 = (cppVar_33412 & cppMask_un_8_);
	bool cppVar_33414 = (cppVar_33412 == 138);
	BIT_VEC cppVar_33415 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33416 = (cppVar_33415 << 3) | 7;
	cppVar_33416 = (cppVar_33416 & cppMask_un_5_);
	BIT_VEC cppVar_33417 = (0 << 5) | cppVar_33416;
	cppVar_33417 = (cppVar_33417 & cppMask_un_8_);
	bool cppVar_33419 = (cppVar_33417 == 140);
	BIT_VEC cppVar_33420 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33421 = (cppVar_33420 << 3) | 7;
	cppVar_33421 = (cppVar_33421 & cppMask_un_5_);
	BIT_VEC cppVar_33422 = (0 << 5) | cppVar_33421;
	cppVar_33422 = (cppVar_33422 & cppMask_un_8_);
	bool cppVar_33424 = (cppVar_33422 == 139);
	BIT_VEC cppVar_33425 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33426 = (cppVar_33425 << 3) | 7;
	cppVar_33426 = (cppVar_33426 & cppMask_un_5_);
	BIT_VEC cppVar_33427 = (0 << 5) | cppVar_33426;
	cppVar_33427 = (cppVar_33427 & cppMask_un_8_);
	bool cppVar_33429 = (cppVar_33427 == 141);
	BIT_VEC cppVar_33430 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33431 = (cppVar_33430 << 3) | 7;
	cppVar_33431 = (cppVar_33431 & cppMask_un_5_);
	BIT_VEC cppVar_33432 = (0 << 5) | cppVar_33431;
	cppVar_33432 = (cppVar_33432 & cppMask_un_8_);
	bool cppVar_33434 = (cppVar_33432 == 144);
	BIT_VEC cppVar_33435 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33436 = (cppVar_33435 << 3) | 7;
	cppVar_33436 = (cppVar_33436 & cppMask_un_5_);
	BIT_VEC cppVar_33437 = (0 << 5) | cppVar_33436;
	cppVar_33437 = (cppVar_33437 & cppMask_un_8_);
	bool cppVar_33439 = (cppVar_33437 == 152);
	BIT_VEC cppVar_33440 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33441 = (cppVar_33440 << 3) | 7;
	cppVar_33441 = (cppVar_33441 & cppMask_un_5_);
	BIT_VEC cppVar_33442 = (0 << 5) | cppVar_33441;
	cppVar_33442 = (cppVar_33442 & cppMask_un_8_);
	bool cppVar_33444 = (cppVar_33442 == 153);
	BIT_VEC cppVar_33445 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33446 = (cppVar_33445 << 3) | 7;
	cppVar_33446 = (cppVar_33446 & cppMask_un_5_);
	BIT_VEC cppVar_33447 = (0 << 5) | cppVar_33446;
	cppVar_33447 = (cppVar_33447 & cppMask_un_8_);
	bool cppVar_33449 = (cppVar_33447 == 160);
	BIT_VEC cppVar_33450 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33451 = (cppVar_33450 << 3) | 7;
	cppVar_33451 = (cppVar_33451 & cppMask_un_5_);
	BIT_VEC cppVar_33452 = (0 << 5) | cppVar_33451;
	cppVar_33452 = (cppVar_33452 & cppMask_un_8_);
	bool cppVar_33454 = (cppVar_33452 == 168);
	BIT_VEC cppVar_33455 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33456 = (cppVar_33455 << 3) | 7;
	cppVar_33456 = (cppVar_33456 & cppMask_un_5_);
	BIT_VEC cppVar_33457 = (0 << 5) | cppVar_33456;
	cppVar_33457 = (cppVar_33457 & cppMask_un_8_);
	bool cppVar_33459 = (cppVar_33457 == 176);
	BIT_VEC cppVar_33460 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33461 = (cppVar_33460 << 3) | 7;
	cppVar_33461 = (cppVar_33461 & cppMask_un_5_);
	BIT_VEC cppVar_33462 = (0 << 5) | cppVar_33461;
	cppVar_33462 = (cppVar_33462 & cppMask_un_8_);
	bool cppVar_33464 = (cppVar_33462 == 184);
	BIT_VEC cppVar_33465 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33466 = (cppVar_33465 << 3) | 7;
	cppVar_33466 = (cppVar_33466 & cppMask_un_5_);
	BIT_VEC cppVar_33467 = (0 << 5) | cppVar_33466;
	cppVar_33467 = (cppVar_33467 & cppMask_un_8_);
	bool cppVar_33469 = (cppVar_33467 == 208);
	BIT_VEC cppVar_33470 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33471 = (cppVar_33470 << 3) | 7;
	cppVar_33471 = (cppVar_33471 & cppMask_un_5_);
	BIT_VEC cppVar_33472 = (0 << 5) | cppVar_33471;
	cppVar_33472 = (cppVar_33472 & cppMask_un_8_);
	bool cppVar_33474 = (cppVar_33472 == 224);
	BIT_VEC cppVar_33475 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33476 = (cppVar_33475 << 3) | 7;
	cppVar_33476 = (cppVar_33476 & cppMask_un_5_);
	BIT_VEC cppVar_33477 = (0 << 5) | cppVar_33476;
	cppVar_33477 = (cppVar_33477 & cppMask_un_8_);
	bool cppVar_33479 = (cppVar_33477 == 240);
	BIT_VEC cppVar_33481 = (cppVar_33479) ? B : 0;
	BIT_VEC cppVar_33482 = (cppVar_33474) ? ACC : cppVar_33481;
	BIT_VEC cppVar_33483 = (cppVar_33469) ? PSW : cppVar_33482;
	BIT_VEC cppVar_33484 = (cppVar_33464) ? IP : cppVar_33483;
	BIT_VEC cppVar_33485 = (cppVar_33459) ? P3 : cppVar_33484;
	BIT_VEC cppVar_33486 = (cppVar_33454) ? IE : cppVar_33485;
	BIT_VEC cppVar_33487 = (cppVar_33449) ? P2 : cppVar_33486;
	BIT_VEC cppVar_33488 = (cppVar_33444) ? SBUF : cppVar_33487;
	BIT_VEC cppVar_33489 = (cppVar_33439) ? SCON : cppVar_33488;
	BIT_VEC cppVar_33490 = (cppVar_33434) ? P1 : cppVar_33489;
	BIT_VEC cppVar_33491 = (cppVar_33429) ? TH1 : cppVar_33490;
	BIT_VEC cppVar_33492 = (cppVar_33424) ? TL1 : cppVar_33491;
	BIT_VEC cppVar_33493 = (cppVar_33419) ? TH0 : cppVar_33492;
	BIT_VEC cppVar_33494 = (cppVar_33414) ? TL0 : cppVar_33493;
	BIT_VEC cppVar_33495 = (cppVar_33409) ? TMOD : cppVar_33494;
	BIT_VEC cppVar_33496 = (cppVar_33404) ? TCON : cppVar_33495;
	BIT_VEC cppVar_33497 = (cppVar_33399) ? PCON : cppVar_33496;
	BIT_VEC cppVar_33498 = (cppVar_33394) ? DPH : cppVar_33497;
	BIT_VEC cppVar_33499 = (cppVar_33389) ? DPL : cppVar_33498;
	BIT_VEC cppVar_33500 = (cppVar_33384) ? SP : cppVar_33499;
	BIT_VEC cppVar_33501 = (cppVar_33379) ? P0 : cppVar_33500;
	BIT_VEC cppVar_33502 = (cppVar_33370) ? cppVar_33374 : cppVar_33501;
	BIT_VEC cppVar_33503 = (cppVar_33362) ? cppVar_33502 : P2;
	BIT_VEC cppVar_33504 = ROM.rd(PC);
	bool cppVar_33506 = (cppVar_33504 == 142);
	BIT_VEC cppVar_33508 = PC + 1;
	cppVar_33508 = (cppVar_33508 & cppMask_un_16_);
	BIT_VEC cppVar_33509 = ROM.rd(cppVar_33508);
	bool cppVar_33511 = (cppVar_33509 == 160);
	BIT_VEC cppVar_33513 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33515 = (cppVar_33513 << 3) | 6;
	cppVar_33515 = (cppVar_33515 & cppMask_un_5_);
	BIT_VEC cppVar_33516 = (0 << 5) | cppVar_33515;
	cppVar_33516 = (cppVar_33516 & cppMask_un_8_);
	BIT_VEC cppVar_33517 = (cppVar_33516 >> 7) & cppMask_un_1_;
	bool cppVar_33519 = (cppVar_33517 == 0);
	BIT_VEC cppVar_33520 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33521 = (cppVar_33520 << 3) | 6;
	cppVar_33521 = (cppVar_33521 & cppMask_un_5_);
	BIT_VEC cppVar_33522 = (0 << 5) | cppVar_33521;
	cppVar_33522 = (cppVar_33522 & cppMask_un_8_);
	BIT_VEC cppVar_33523 = IRAM.rd(cppVar_33522);
	BIT_VEC cppVar_33524 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33525 = (cppVar_33524 << 3) | 6;
	cppVar_33525 = (cppVar_33525 & cppMask_un_5_);
	BIT_VEC cppVar_33526 = (0 << 5) | cppVar_33525;
	cppVar_33526 = (cppVar_33526 & cppMask_un_8_);
	bool cppVar_33528 = (cppVar_33526 == 128);
	BIT_VEC cppVar_33529 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33530 = (cppVar_33529 << 3) | 6;
	cppVar_33530 = (cppVar_33530 & cppMask_un_5_);
	BIT_VEC cppVar_33531 = (0 << 5) | cppVar_33530;
	cppVar_33531 = (cppVar_33531 & cppMask_un_8_);
	bool cppVar_33533 = (cppVar_33531 == 129);
	BIT_VEC cppVar_33534 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33535 = (cppVar_33534 << 3) | 6;
	cppVar_33535 = (cppVar_33535 & cppMask_un_5_);
	BIT_VEC cppVar_33536 = (0 << 5) | cppVar_33535;
	cppVar_33536 = (cppVar_33536 & cppMask_un_8_);
	bool cppVar_33538 = (cppVar_33536 == 130);
	BIT_VEC cppVar_33539 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33540 = (cppVar_33539 << 3) | 6;
	cppVar_33540 = (cppVar_33540 & cppMask_un_5_);
	BIT_VEC cppVar_33541 = (0 << 5) | cppVar_33540;
	cppVar_33541 = (cppVar_33541 & cppMask_un_8_);
	bool cppVar_33543 = (cppVar_33541 == 131);
	BIT_VEC cppVar_33544 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33545 = (cppVar_33544 << 3) | 6;
	cppVar_33545 = (cppVar_33545 & cppMask_un_5_);
	BIT_VEC cppVar_33546 = (0 << 5) | cppVar_33545;
	cppVar_33546 = (cppVar_33546 & cppMask_un_8_);
	bool cppVar_33548 = (cppVar_33546 == 135);
	BIT_VEC cppVar_33549 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33550 = (cppVar_33549 << 3) | 6;
	cppVar_33550 = (cppVar_33550 & cppMask_un_5_);
	BIT_VEC cppVar_33551 = (0 << 5) | cppVar_33550;
	cppVar_33551 = (cppVar_33551 & cppMask_un_8_);
	bool cppVar_33553 = (cppVar_33551 == 136);
	BIT_VEC cppVar_33554 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33555 = (cppVar_33554 << 3) | 6;
	cppVar_33555 = (cppVar_33555 & cppMask_un_5_);
	BIT_VEC cppVar_33556 = (0 << 5) | cppVar_33555;
	cppVar_33556 = (cppVar_33556 & cppMask_un_8_);
	bool cppVar_33558 = (cppVar_33556 == 137);
	BIT_VEC cppVar_33559 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33560 = (cppVar_33559 << 3) | 6;
	cppVar_33560 = (cppVar_33560 & cppMask_un_5_);
	BIT_VEC cppVar_33561 = (0 << 5) | cppVar_33560;
	cppVar_33561 = (cppVar_33561 & cppMask_un_8_);
	bool cppVar_33563 = (cppVar_33561 == 138);
	BIT_VEC cppVar_33564 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33565 = (cppVar_33564 << 3) | 6;
	cppVar_33565 = (cppVar_33565 & cppMask_un_5_);
	BIT_VEC cppVar_33566 = (0 << 5) | cppVar_33565;
	cppVar_33566 = (cppVar_33566 & cppMask_un_8_);
	bool cppVar_33568 = (cppVar_33566 == 140);
	BIT_VEC cppVar_33569 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33570 = (cppVar_33569 << 3) | 6;
	cppVar_33570 = (cppVar_33570 & cppMask_un_5_);
	BIT_VEC cppVar_33571 = (0 << 5) | cppVar_33570;
	cppVar_33571 = (cppVar_33571 & cppMask_un_8_);
	bool cppVar_33573 = (cppVar_33571 == 139);
	BIT_VEC cppVar_33574 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33575 = (cppVar_33574 << 3) | 6;
	cppVar_33575 = (cppVar_33575 & cppMask_un_5_);
	BIT_VEC cppVar_33576 = (0 << 5) | cppVar_33575;
	cppVar_33576 = (cppVar_33576 & cppMask_un_8_);
	bool cppVar_33578 = (cppVar_33576 == 141);
	BIT_VEC cppVar_33579 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33580 = (cppVar_33579 << 3) | 6;
	cppVar_33580 = (cppVar_33580 & cppMask_un_5_);
	BIT_VEC cppVar_33581 = (0 << 5) | cppVar_33580;
	cppVar_33581 = (cppVar_33581 & cppMask_un_8_);
	bool cppVar_33583 = (cppVar_33581 == 144);
	BIT_VEC cppVar_33584 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33585 = (cppVar_33584 << 3) | 6;
	cppVar_33585 = (cppVar_33585 & cppMask_un_5_);
	BIT_VEC cppVar_33586 = (0 << 5) | cppVar_33585;
	cppVar_33586 = (cppVar_33586 & cppMask_un_8_);
	bool cppVar_33588 = (cppVar_33586 == 152);
	BIT_VEC cppVar_33589 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33590 = (cppVar_33589 << 3) | 6;
	cppVar_33590 = (cppVar_33590 & cppMask_un_5_);
	BIT_VEC cppVar_33591 = (0 << 5) | cppVar_33590;
	cppVar_33591 = (cppVar_33591 & cppMask_un_8_);
	bool cppVar_33593 = (cppVar_33591 == 153);
	BIT_VEC cppVar_33594 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33595 = (cppVar_33594 << 3) | 6;
	cppVar_33595 = (cppVar_33595 & cppMask_un_5_);
	BIT_VEC cppVar_33596 = (0 << 5) | cppVar_33595;
	cppVar_33596 = (cppVar_33596 & cppMask_un_8_);
	bool cppVar_33598 = (cppVar_33596 == 160);
	BIT_VEC cppVar_33599 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33600 = (cppVar_33599 << 3) | 6;
	cppVar_33600 = (cppVar_33600 & cppMask_un_5_);
	BIT_VEC cppVar_33601 = (0 << 5) | cppVar_33600;
	cppVar_33601 = (cppVar_33601 & cppMask_un_8_);
	bool cppVar_33603 = (cppVar_33601 == 168);
	BIT_VEC cppVar_33604 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33605 = (cppVar_33604 << 3) | 6;
	cppVar_33605 = (cppVar_33605 & cppMask_un_5_);
	BIT_VEC cppVar_33606 = (0 << 5) | cppVar_33605;
	cppVar_33606 = (cppVar_33606 & cppMask_un_8_);
	bool cppVar_33608 = (cppVar_33606 == 176);
	BIT_VEC cppVar_33609 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33610 = (cppVar_33609 << 3) | 6;
	cppVar_33610 = (cppVar_33610 & cppMask_un_5_);
	BIT_VEC cppVar_33611 = (0 << 5) | cppVar_33610;
	cppVar_33611 = (cppVar_33611 & cppMask_un_8_);
	bool cppVar_33613 = (cppVar_33611 == 184);
	BIT_VEC cppVar_33614 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33615 = (cppVar_33614 << 3) | 6;
	cppVar_33615 = (cppVar_33615 & cppMask_un_5_);
	BIT_VEC cppVar_33616 = (0 << 5) | cppVar_33615;
	cppVar_33616 = (cppVar_33616 & cppMask_un_8_);
	bool cppVar_33618 = (cppVar_33616 == 208);
	BIT_VEC cppVar_33619 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33620 = (cppVar_33619 << 3) | 6;
	cppVar_33620 = (cppVar_33620 & cppMask_un_5_);
	BIT_VEC cppVar_33621 = (0 << 5) | cppVar_33620;
	cppVar_33621 = (cppVar_33621 & cppMask_un_8_);
	bool cppVar_33623 = (cppVar_33621 == 224);
	BIT_VEC cppVar_33624 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33625 = (cppVar_33624 << 3) | 6;
	cppVar_33625 = (cppVar_33625 & cppMask_un_5_);
	BIT_VEC cppVar_33626 = (0 << 5) | cppVar_33625;
	cppVar_33626 = (cppVar_33626 & cppMask_un_8_);
	bool cppVar_33628 = (cppVar_33626 == 240);
	BIT_VEC cppVar_33630 = (cppVar_33628) ? B : 0;
	BIT_VEC cppVar_33631 = (cppVar_33623) ? ACC : cppVar_33630;
	BIT_VEC cppVar_33632 = (cppVar_33618) ? PSW : cppVar_33631;
	BIT_VEC cppVar_33633 = (cppVar_33613) ? IP : cppVar_33632;
	BIT_VEC cppVar_33634 = (cppVar_33608) ? P3 : cppVar_33633;
	BIT_VEC cppVar_33635 = (cppVar_33603) ? IE : cppVar_33634;
	BIT_VEC cppVar_33636 = (cppVar_33598) ? P2 : cppVar_33635;
	BIT_VEC cppVar_33637 = (cppVar_33593) ? SBUF : cppVar_33636;
	BIT_VEC cppVar_33638 = (cppVar_33588) ? SCON : cppVar_33637;
	BIT_VEC cppVar_33639 = (cppVar_33583) ? P1 : cppVar_33638;
	BIT_VEC cppVar_33640 = (cppVar_33578) ? TH1 : cppVar_33639;
	BIT_VEC cppVar_33641 = (cppVar_33573) ? TL1 : cppVar_33640;
	BIT_VEC cppVar_33642 = (cppVar_33568) ? TH0 : cppVar_33641;
	BIT_VEC cppVar_33643 = (cppVar_33563) ? TL0 : cppVar_33642;
	BIT_VEC cppVar_33644 = (cppVar_33558) ? TMOD : cppVar_33643;
	BIT_VEC cppVar_33645 = (cppVar_33553) ? TCON : cppVar_33644;
	BIT_VEC cppVar_33646 = (cppVar_33548) ? PCON : cppVar_33645;
	BIT_VEC cppVar_33647 = (cppVar_33543) ? DPH : cppVar_33646;
	BIT_VEC cppVar_33648 = (cppVar_33538) ? DPL : cppVar_33647;
	BIT_VEC cppVar_33649 = (cppVar_33533) ? SP : cppVar_33648;
	BIT_VEC cppVar_33650 = (cppVar_33528) ? P0 : cppVar_33649;
	BIT_VEC cppVar_33651 = (cppVar_33519) ? cppVar_33523 : cppVar_33650;
	BIT_VEC cppVar_33652 = (cppVar_33511) ? cppVar_33651 : P2;
	BIT_VEC cppVar_33653 = ROM.rd(PC);
	bool cppVar_33655 = (cppVar_33653 == 141);
	BIT_VEC cppVar_33657 = PC + 1;
	cppVar_33657 = (cppVar_33657 & cppMask_un_16_);
	BIT_VEC cppVar_33658 = ROM.rd(cppVar_33657);
	bool cppVar_33660 = (cppVar_33658 == 160);
	BIT_VEC cppVar_33662 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33664 = (cppVar_33662 << 3) | 5;
	cppVar_33664 = (cppVar_33664 & cppMask_un_5_);
	BIT_VEC cppVar_33665 = (0 << 5) | cppVar_33664;
	cppVar_33665 = (cppVar_33665 & cppMask_un_8_);
	BIT_VEC cppVar_33666 = (cppVar_33665 >> 7) & cppMask_un_1_;
	bool cppVar_33668 = (cppVar_33666 == 0);
	BIT_VEC cppVar_33669 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33670 = (cppVar_33669 << 3) | 5;
	cppVar_33670 = (cppVar_33670 & cppMask_un_5_);
	BIT_VEC cppVar_33671 = (0 << 5) | cppVar_33670;
	cppVar_33671 = (cppVar_33671 & cppMask_un_8_);
	BIT_VEC cppVar_33672 = IRAM.rd(cppVar_33671);
	BIT_VEC cppVar_33673 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33674 = (cppVar_33673 << 3) | 5;
	cppVar_33674 = (cppVar_33674 & cppMask_un_5_);
	BIT_VEC cppVar_33675 = (0 << 5) | cppVar_33674;
	cppVar_33675 = (cppVar_33675 & cppMask_un_8_);
	bool cppVar_33677 = (cppVar_33675 == 128);
	BIT_VEC cppVar_33678 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33679 = (cppVar_33678 << 3) | 5;
	cppVar_33679 = (cppVar_33679 & cppMask_un_5_);
	BIT_VEC cppVar_33680 = (0 << 5) | cppVar_33679;
	cppVar_33680 = (cppVar_33680 & cppMask_un_8_);
	bool cppVar_33682 = (cppVar_33680 == 129);
	BIT_VEC cppVar_33683 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33684 = (cppVar_33683 << 3) | 5;
	cppVar_33684 = (cppVar_33684 & cppMask_un_5_);
	BIT_VEC cppVar_33685 = (0 << 5) | cppVar_33684;
	cppVar_33685 = (cppVar_33685 & cppMask_un_8_);
	bool cppVar_33687 = (cppVar_33685 == 130);
	BIT_VEC cppVar_33688 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33689 = (cppVar_33688 << 3) | 5;
	cppVar_33689 = (cppVar_33689 & cppMask_un_5_);
	BIT_VEC cppVar_33690 = (0 << 5) | cppVar_33689;
	cppVar_33690 = (cppVar_33690 & cppMask_un_8_);
	bool cppVar_33692 = (cppVar_33690 == 131);
	BIT_VEC cppVar_33693 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33694 = (cppVar_33693 << 3) | 5;
	cppVar_33694 = (cppVar_33694 & cppMask_un_5_);
	BIT_VEC cppVar_33695 = (0 << 5) | cppVar_33694;
	cppVar_33695 = (cppVar_33695 & cppMask_un_8_);
	bool cppVar_33697 = (cppVar_33695 == 135);
	BIT_VEC cppVar_33698 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33699 = (cppVar_33698 << 3) | 5;
	cppVar_33699 = (cppVar_33699 & cppMask_un_5_);
	BIT_VEC cppVar_33700 = (0 << 5) | cppVar_33699;
	cppVar_33700 = (cppVar_33700 & cppMask_un_8_);
	bool cppVar_33702 = (cppVar_33700 == 136);
	BIT_VEC cppVar_33703 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33704 = (cppVar_33703 << 3) | 5;
	cppVar_33704 = (cppVar_33704 & cppMask_un_5_);
	BIT_VEC cppVar_33705 = (0 << 5) | cppVar_33704;
	cppVar_33705 = (cppVar_33705 & cppMask_un_8_);
	bool cppVar_33707 = (cppVar_33705 == 137);
	BIT_VEC cppVar_33708 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33709 = (cppVar_33708 << 3) | 5;
	cppVar_33709 = (cppVar_33709 & cppMask_un_5_);
	BIT_VEC cppVar_33710 = (0 << 5) | cppVar_33709;
	cppVar_33710 = (cppVar_33710 & cppMask_un_8_);
	bool cppVar_33712 = (cppVar_33710 == 138);
	BIT_VEC cppVar_33713 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33714 = (cppVar_33713 << 3) | 5;
	cppVar_33714 = (cppVar_33714 & cppMask_un_5_);
	BIT_VEC cppVar_33715 = (0 << 5) | cppVar_33714;
	cppVar_33715 = (cppVar_33715 & cppMask_un_8_);
	bool cppVar_33717 = (cppVar_33715 == 140);
	BIT_VEC cppVar_33718 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33719 = (cppVar_33718 << 3) | 5;
	cppVar_33719 = (cppVar_33719 & cppMask_un_5_);
	BIT_VEC cppVar_33720 = (0 << 5) | cppVar_33719;
	cppVar_33720 = (cppVar_33720 & cppMask_un_8_);
	bool cppVar_33722 = (cppVar_33720 == 139);
	BIT_VEC cppVar_33723 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33724 = (cppVar_33723 << 3) | 5;
	cppVar_33724 = (cppVar_33724 & cppMask_un_5_);
	BIT_VEC cppVar_33725 = (0 << 5) | cppVar_33724;
	cppVar_33725 = (cppVar_33725 & cppMask_un_8_);
	bool cppVar_33727 = (cppVar_33725 == 141);
	BIT_VEC cppVar_33728 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33729 = (cppVar_33728 << 3) | 5;
	cppVar_33729 = (cppVar_33729 & cppMask_un_5_);
	BIT_VEC cppVar_33730 = (0 << 5) | cppVar_33729;
	cppVar_33730 = (cppVar_33730 & cppMask_un_8_);
	bool cppVar_33732 = (cppVar_33730 == 144);
	BIT_VEC cppVar_33733 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33734 = (cppVar_33733 << 3) | 5;
	cppVar_33734 = (cppVar_33734 & cppMask_un_5_);
	BIT_VEC cppVar_33735 = (0 << 5) | cppVar_33734;
	cppVar_33735 = (cppVar_33735 & cppMask_un_8_);
	bool cppVar_33737 = (cppVar_33735 == 152);
	BIT_VEC cppVar_33738 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33739 = (cppVar_33738 << 3) | 5;
	cppVar_33739 = (cppVar_33739 & cppMask_un_5_);
	BIT_VEC cppVar_33740 = (0 << 5) | cppVar_33739;
	cppVar_33740 = (cppVar_33740 & cppMask_un_8_);
	bool cppVar_33742 = (cppVar_33740 == 153);
	BIT_VEC cppVar_33743 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33744 = (cppVar_33743 << 3) | 5;
	cppVar_33744 = (cppVar_33744 & cppMask_un_5_);
	BIT_VEC cppVar_33745 = (0 << 5) | cppVar_33744;
	cppVar_33745 = (cppVar_33745 & cppMask_un_8_);
	bool cppVar_33747 = (cppVar_33745 == 160);
	BIT_VEC cppVar_33748 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33749 = (cppVar_33748 << 3) | 5;
	cppVar_33749 = (cppVar_33749 & cppMask_un_5_);
	BIT_VEC cppVar_33750 = (0 << 5) | cppVar_33749;
	cppVar_33750 = (cppVar_33750 & cppMask_un_8_);
	bool cppVar_33752 = (cppVar_33750 == 168);
	BIT_VEC cppVar_33753 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33754 = (cppVar_33753 << 3) | 5;
	cppVar_33754 = (cppVar_33754 & cppMask_un_5_);
	BIT_VEC cppVar_33755 = (0 << 5) | cppVar_33754;
	cppVar_33755 = (cppVar_33755 & cppMask_un_8_);
	bool cppVar_33757 = (cppVar_33755 == 176);
	BIT_VEC cppVar_33758 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33759 = (cppVar_33758 << 3) | 5;
	cppVar_33759 = (cppVar_33759 & cppMask_un_5_);
	BIT_VEC cppVar_33760 = (0 << 5) | cppVar_33759;
	cppVar_33760 = (cppVar_33760 & cppMask_un_8_);
	bool cppVar_33762 = (cppVar_33760 == 184);
	BIT_VEC cppVar_33763 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33764 = (cppVar_33763 << 3) | 5;
	cppVar_33764 = (cppVar_33764 & cppMask_un_5_);
	BIT_VEC cppVar_33765 = (0 << 5) | cppVar_33764;
	cppVar_33765 = (cppVar_33765 & cppMask_un_8_);
	bool cppVar_33767 = (cppVar_33765 == 208);
	BIT_VEC cppVar_33768 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33769 = (cppVar_33768 << 3) | 5;
	cppVar_33769 = (cppVar_33769 & cppMask_un_5_);
	BIT_VEC cppVar_33770 = (0 << 5) | cppVar_33769;
	cppVar_33770 = (cppVar_33770 & cppMask_un_8_);
	bool cppVar_33772 = (cppVar_33770 == 224);
	BIT_VEC cppVar_33773 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33774 = (cppVar_33773 << 3) | 5;
	cppVar_33774 = (cppVar_33774 & cppMask_un_5_);
	BIT_VEC cppVar_33775 = (0 << 5) | cppVar_33774;
	cppVar_33775 = (cppVar_33775 & cppMask_un_8_);
	bool cppVar_33777 = (cppVar_33775 == 240);
	BIT_VEC cppVar_33779 = (cppVar_33777) ? B : 0;
	BIT_VEC cppVar_33780 = (cppVar_33772) ? ACC : cppVar_33779;
	BIT_VEC cppVar_33781 = (cppVar_33767) ? PSW : cppVar_33780;
	BIT_VEC cppVar_33782 = (cppVar_33762) ? IP : cppVar_33781;
	BIT_VEC cppVar_33783 = (cppVar_33757) ? P3 : cppVar_33782;
	BIT_VEC cppVar_33784 = (cppVar_33752) ? IE : cppVar_33783;
	BIT_VEC cppVar_33785 = (cppVar_33747) ? P2 : cppVar_33784;
	BIT_VEC cppVar_33786 = (cppVar_33742) ? SBUF : cppVar_33785;
	BIT_VEC cppVar_33787 = (cppVar_33737) ? SCON : cppVar_33786;
	BIT_VEC cppVar_33788 = (cppVar_33732) ? P1 : cppVar_33787;
	BIT_VEC cppVar_33789 = (cppVar_33727) ? TH1 : cppVar_33788;
	BIT_VEC cppVar_33790 = (cppVar_33722) ? TL1 : cppVar_33789;
	BIT_VEC cppVar_33791 = (cppVar_33717) ? TH0 : cppVar_33790;
	BIT_VEC cppVar_33792 = (cppVar_33712) ? TL0 : cppVar_33791;
	BIT_VEC cppVar_33793 = (cppVar_33707) ? TMOD : cppVar_33792;
	BIT_VEC cppVar_33794 = (cppVar_33702) ? TCON : cppVar_33793;
	BIT_VEC cppVar_33795 = (cppVar_33697) ? PCON : cppVar_33794;
	BIT_VEC cppVar_33796 = (cppVar_33692) ? DPH : cppVar_33795;
	BIT_VEC cppVar_33797 = (cppVar_33687) ? DPL : cppVar_33796;
	BIT_VEC cppVar_33798 = (cppVar_33682) ? SP : cppVar_33797;
	BIT_VEC cppVar_33799 = (cppVar_33677) ? P0 : cppVar_33798;
	BIT_VEC cppVar_33800 = (cppVar_33668) ? cppVar_33672 : cppVar_33799;
	BIT_VEC cppVar_33801 = (cppVar_33660) ? cppVar_33800 : P2;
	BIT_VEC cppVar_33802 = ROM.rd(PC);
	bool cppVar_33804 = (cppVar_33802 == 140);
	BIT_VEC cppVar_33806 = PC + 1;
	cppVar_33806 = (cppVar_33806 & cppMask_un_16_);
	BIT_VEC cppVar_33807 = ROM.rd(cppVar_33806);
	bool cppVar_33809 = (cppVar_33807 == 160);
	BIT_VEC cppVar_33811 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33813 = (cppVar_33811 << 3) | 4;
	cppVar_33813 = (cppVar_33813 & cppMask_un_5_);
	BIT_VEC cppVar_33814 = (0 << 5) | cppVar_33813;
	cppVar_33814 = (cppVar_33814 & cppMask_un_8_);
	BIT_VEC cppVar_33815 = (cppVar_33814 >> 7) & cppMask_un_1_;
	bool cppVar_33817 = (cppVar_33815 == 0);
	BIT_VEC cppVar_33818 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33819 = (cppVar_33818 << 3) | 4;
	cppVar_33819 = (cppVar_33819 & cppMask_un_5_);
	BIT_VEC cppVar_33820 = (0 << 5) | cppVar_33819;
	cppVar_33820 = (cppVar_33820 & cppMask_un_8_);
	BIT_VEC cppVar_33821 = IRAM.rd(cppVar_33820);
	BIT_VEC cppVar_33822 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33823 = (cppVar_33822 << 3) | 4;
	cppVar_33823 = (cppVar_33823 & cppMask_un_5_);
	BIT_VEC cppVar_33824 = (0 << 5) | cppVar_33823;
	cppVar_33824 = (cppVar_33824 & cppMask_un_8_);
	bool cppVar_33826 = (cppVar_33824 == 128);
	BIT_VEC cppVar_33827 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33828 = (cppVar_33827 << 3) | 4;
	cppVar_33828 = (cppVar_33828 & cppMask_un_5_);
	BIT_VEC cppVar_33829 = (0 << 5) | cppVar_33828;
	cppVar_33829 = (cppVar_33829 & cppMask_un_8_);
	bool cppVar_33831 = (cppVar_33829 == 129);
	BIT_VEC cppVar_33832 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33833 = (cppVar_33832 << 3) | 4;
	cppVar_33833 = (cppVar_33833 & cppMask_un_5_);
	BIT_VEC cppVar_33834 = (0 << 5) | cppVar_33833;
	cppVar_33834 = (cppVar_33834 & cppMask_un_8_);
	bool cppVar_33836 = (cppVar_33834 == 130);
	BIT_VEC cppVar_33837 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33838 = (cppVar_33837 << 3) | 4;
	cppVar_33838 = (cppVar_33838 & cppMask_un_5_);
	BIT_VEC cppVar_33839 = (0 << 5) | cppVar_33838;
	cppVar_33839 = (cppVar_33839 & cppMask_un_8_);
	bool cppVar_33841 = (cppVar_33839 == 131);
	BIT_VEC cppVar_33842 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33843 = (cppVar_33842 << 3) | 4;
	cppVar_33843 = (cppVar_33843 & cppMask_un_5_);
	BIT_VEC cppVar_33844 = (0 << 5) | cppVar_33843;
	cppVar_33844 = (cppVar_33844 & cppMask_un_8_);
	bool cppVar_33846 = (cppVar_33844 == 135);
	BIT_VEC cppVar_33847 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33848 = (cppVar_33847 << 3) | 4;
	cppVar_33848 = (cppVar_33848 & cppMask_un_5_);
	BIT_VEC cppVar_33849 = (0 << 5) | cppVar_33848;
	cppVar_33849 = (cppVar_33849 & cppMask_un_8_);
	bool cppVar_33851 = (cppVar_33849 == 136);
	BIT_VEC cppVar_33852 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33853 = (cppVar_33852 << 3) | 4;
	cppVar_33853 = (cppVar_33853 & cppMask_un_5_);
	BIT_VEC cppVar_33854 = (0 << 5) | cppVar_33853;
	cppVar_33854 = (cppVar_33854 & cppMask_un_8_);
	bool cppVar_33856 = (cppVar_33854 == 137);
	BIT_VEC cppVar_33857 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33858 = (cppVar_33857 << 3) | 4;
	cppVar_33858 = (cppVar_33858 & cppMask_un_5_);
	BIT_VEC cppVar_33859 = (0 << 5) | cppVar_33858;
	cppVar_33859 = (cppVar_33859 & cppMask_un_8_);
	bool cppVar_33861 = (cppVar_33859 == 138);
	BIT_VEC cppVar_33862 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33863 = (cppVar_33862 << 3) | 4;
	cppVar_33863 = (cppVar_33863 & cppMask_un_5_);
	BIT_VEC cppVar_33864 = (0 << 5) | cppVar_33863;
	cppVar_33864 = (cppVar_33864 & cppMask_un_8_);
	bool cppVar_33866 = (cppVar_33864 == 140);
	BIT_VEC cppVar_33867 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33868 = (cppVar_33867 << 3) | 4;
	cppVar_33868 = (cppVar_33868 & cppMask_un_5_);
	BIT_VEC cppVar_33869 = (0 << 5) | cppVar_33868;
	cppVar_33869 = (cppVar_33869 & cppMask_un_8_);
	bool cppVar_33871 = (cppVar_33869 == 139);
	BIT_VEC cppVar_33872 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33873 = (cppVar_33872 << 3) | 4;
	cppVar_33873 = (cppVar_33873 & cppMask_un_5_);
	BIT_VEC cppVar_33874 = (0 << 5) | cppVar_33873;
	cppVar_33874 = (cppVar_33874 & cppMask_un_8_);
	bool cppVar_33876 = (cppVar_33874 == 141);
	BIT_VEC cppVar_33877 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33878 = (cppVar_33877 << 3) | 4;
	cppVar_33878 = (cppVar_33878 & cppMask_un_5_);
	BIT_VEC cppVar_33879 = (0 << 5) | cppVar_33878;
	cppVar_33879 = (cppVar_33879 & cppMask_un_8_);
	bool cppVar_33881 = (cppVar_33879 == 144);
	BIT_VEC cppVar_33882 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33883 = (cppVar_33882 << 3) | 4;
	cppVar_33883 = (cppVar_33883 & cppMask_un_5_);
	BIT_VEC cppVar_33884 = (0 << 5) | cppVar_33883;
	cppVar_33884 = (cppVar_33884 & cppMask_un_8_);
	bool cppVar_33886 = (cppVar_33884 == 152);
	BIT_VEC cppVar_33887 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33888 = (cppVar_33887 << 3) | 4;
	cppVar_33888 = (cppVar_33888 & cppMask_un_5_);
	BIT_VEC cppVar_33889 = (0 << 5) | cppVar_33888;
	cppVar_33889 = (cppVar_33889 & cppMask_un_8_);
	bool cppVar_33891 = (cppVar_33889 == 153);
	BIT_VEC cppVar_33892 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33893 = (cppVar_33892 << 3) | 4;
	cppVar_33893 = (cppVar_33893 & cppMask_un_5_);
	BIT_VEC cppVar_33894 = (0 << 5) | cppVar_33893;
	cppVar_33894 = (cppVar_33894 & cppMask_un_8_);
	bool cppVar_33896 = (cppVar_33894 == 160);
	BIT_VEC cppVar_33897 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33898 = (cppVar_33897 << 3) | 4;
	cppVar_33898 = (cppVar_33898 & cppMask_un_5_);
	BIT_VEC cppVar_33899 = (0 << 5) | cppVar_33898;
	cppVar_33899 = (cppVar_33899 & cppMask_un_8_);
	bool cppVar_33901 = (cppVar_33899 == 168);
	BIT_VEC cppVar_33902 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33903 = (cppVar_33902 << 3) | 4;
	cppVar_33903 = (cppVar_33903 & cppMask_un_5_);
	BIT_VEC cppVar_33904 = (0 << 5) | cppVar_33903;
	cppVar_33904 = (cppVar_33904 & cppMask_un_8_);
	bool cppVar_33906 = (cppVar_33904 == 176);
	BIT_VEC cppVar_33907 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33908 = (cppVar_33907 << 3) | 4;
	cppVar_33908 = (cppVar_33908 & cppMask_un_5_);
	BIT_VEC cppVar_33909 = (0 << 5) | cppVar_33908;
	cppVar_33909 = (cppVar_33909 & cppMask_un_8_);
	bool cppVar_33911 = (cppVar_33909 == 184);
	BIT_VEC cppVar_33912 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33913 = (cppVar_33912 << 3) | 4;
	cppVar_33913 = (cppVar_33913 & cppMask_un_5_);
	BIT_VEC cppVar_33914 = (0 << 5) | cppVar_33913;
	cppVar_33914 = (cppVar_33914 & cppMask_un_8_);
	bool cppVar_33916 = (cppVar_33914 == 208);
	BIT_VEC cppVar_33917 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33918 = (cppVar_33917 << 3) | 4;
	cppVar_33918 = (cppVar_33918 & cppMask_un_5_);
	BIT_VEC cppVar_33919 = (0 << 5) | cppVar_33918;
	cppVar_33919 = (cppVar_33919 & cppMask_un_8_);
	bool cppVar_33921 = (cppVar_33919 == 224);
	BIT_VEC cppVar_33922 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33923 = (cppVar_33922 << 3) | 4;
	cppVar_33923 = (cppVar_33923 & cppMask_un_5_);
	BIT_VEC cppVar_33924 = (0 << 5) | cppVar_33923;
	cppVar_33924 = (cppVar_33924 & cppMask_un_8_);
	bool cppVar_33926 = (cppVar_33924 == 240);
	BIT_VEC cppVar_33928 = (cppVar_33926) ? B : 0;
	BIT_VEC cppVar_33929 = (cppVar_33921) ? ACC : cppVar_33928;
	BIT_VEC cppVar_33930 = (cppVar_33916) ? PSW : cppVar_33929;
	BIT_VEC cppVar_33931 = (cppVar_33911) ? IP : cppVar_33930;
	BIT_VEC cppVar_33932 = (cppVar_33906) ? P3 : cppVar_33931;
	BIT_VEC cppVar_33933 = (cppVar_33901) ? IE : cppVar_33932;
	BIT_VEC cppVar_33934 = (cppVar_33896) ? P2 : cppVar_33933;
	BIT_VEC cppVar_33935 = (cppVar_33891) ? SBUF : cppVar_33934;
	BIT_VEC cppVar_33936 = (cppVar_33886) ? SCON : cppVar_33935;
	BIT_VEC cppVar_33937 = (cppVar_33881) ? P1 : cppVar_33936;
	BIT_VEC cppVar_33938 = (cppVar_33876) ? TH1 : cppVar_33937;
	BIT_VEC cppVar_33939 = (cppVar_33871) ? TL1 : cppVar_33938;
	BIT_VEC cppVar_33940 = (cppVar_33866) ? TH0 : cppVar_33939;
	BIT_VEC cppVar_33941 = (cppVar_33861) ? TL0 : cppVar_33940;
	BIT_VEC cppVar_33942 = (cppVar_33856) ? TMOD : cppVar_33941;
	BIT_VEC cppVar_33943 = (cppVar_33851) ? TCON : cppVar_33942;
	BIT_VEC cppVar_33944 = (cppVar_33846) ? PCON : cppVar_33943;
	BIT_VEC cppVar_33945 = (cppVar_33841) ? DPH : cppVar_33944;
	BIT_VEC cppVar_33946 = (cppVar_33836) ? DPL : cppVar_33945;
	BIT_VEC cppVar_33947 = (cppVar_33831) ? SP : cppVar_33946;
	BIT_VEC cppVar_33948 = (cppVar_33826) ? P0 : cppVar_33947;
	BIT_VEC cppVar_33949 = (cppVar_33817) ? cppVar_33821 : cppVar_33948;
	BIT_VEC cppVar_33950 = (cppVar_33809) ? cppVar_33949 : P2;
	BIT_VEC cppVar_33951 = ROM.rd(PC);
	bool cppVar_33953 = (cppVar_33951 == 139);
	BIT_VEC cppVar_33955 = PC + 1;
	cppVar_33955 = (cppVar_33955 & cppMask_un_16_);
	BIT_VEC cppVar_33956 = ROM.rd(cppVar_33955);
	bool cppVar_33958 = (cppVar_33956 == 160);
	BIT_VEC cppVar_33960 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33962 = (cppVar_33960 << 3) | 3;
	cppVar_33962 = (cppVar_33962 & cppMask_un_5_);
	BIT_VEC cppVar_33963 = (0 << 5) | cppVar_33962;
	cppVar_33963 = (cppVar_33963 & cppMask_un_8_);
	BIT_VEC cppVar_33964 = (cppVar_33963 >> 7) & cppMask_un_1_;
	bool cppVar_33966 = (cppVar_33964 == 0);
	BIT_VEC cppVar_33967 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33968 = (cppVar_33967 << 3) | 3;
	cppVar_33968 = (cppVar_33968 & cppMask_un_5_);
	BIT_VEC cppVar_33969 = (0 << 5) | cppVar_33968;
	cppVar_33969 = (cppVar_33969 & cppMask_un_8_);
	BIT_VEC cppVar_33970 = IRAM.rd(cppVar_33969);
	BIT_VEC cppVar_33971 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33972 = (cppVar_33971 << 3) | 3;
	cppVar_33972 = (cppVar_33972 & cppMask_un_5_);
	BIT_VEC cppVar_33973 = (0 << 5) | cppVar_33972;
	cppVar_33973 = (cppVar_33973 & cppMask_un_8_);
	bool cppVar_33975 = (cppVar_33973 == 128);
	BIT_VEC cppVar_33976 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33977 = (cppVar_33976 << 3) | 3;
	cppVar_33977 = (cppVar_33977 & cppMask_un_5_);
	BIT_VEC cppVar_33978 = (0 << 5) | cppVar_33977;
	cppVar_33978 = (cppVar_33978 & cppMask_un_8_);
	bool cppVar_33980 = (cppVar_33978 == 129);
	BIT_VEC cppVar_33981 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33982 = (cppVar_33981 << 3) | 3;
	cppVar_33982 = (cppVar_33982 & cppMask_un_5_);
	BIT_VEC cppVar_33983 = (0 << 5) | cppVar_33982;
	cppVar_33983 = (cppVar_33983 & cppMask_un_8_);
	bool cppVar_33985 = (cppVar_33983 == 130);
	BIT_VEC cppVar_33986 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33987 = (cppVar_33986 << 3) | 3;
	cppVar_33987 = (cppVar_33987 & cppMask_un_5_);
	BIT_VEC cppVar_33988 = (0 << 5) | cppVar_33987;
	cppVar_33988 = (cppVar_33988 & cppMask_un_8_);
	bool cppVar_33990 = (cppVar_33988 == 131);
	BIT_VEC cppVar_33991 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33992 = (cppVar_33991 << 3) | 3;
	cppVar_33992 = (cppVar_33992 & cppMask_un_5_);
	BIT_VEC cppVar_33993 = (0 << 5) | cppVar_33992;
	cppVar_33993 = (cppVar_33993 & cppMask_un_8_);
	bool cppVar_33995 = (cppVar_33993 == 135);
	BIT_VEC cppVar_33996 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_33997 = (cppVar_33996 << 3) | 3;
	cppVar_33997 = (cppVar_33997 & cppMask_un_5_);
	BIT_VEC cppVar_33998 = (0 << 5) | cppVar_33997;
	cppVar_33998 = (cppVar_33998 & cppMask_un_8_);
	bool cppVar_34000 = (cppVar_33998 == 136);
	BIT_VEC cppVar_34001 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34002 = (cppVar_34001 << 3) | 3;
	cppVar_34002 = (cppVar_34002 & cppMask_un_5_);
	BIT_VEC cppVar_34003 = (0 << 5) | cppVar_34002;
	cppVar_34003 = (cppVar_34003 & cppMask_un_8_);
	bool cppVar_34005 = (cppVar_34003 == 137);
	BIT_VEC cppVar_34006 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34007 = (cppVar_34006 << 3) | 3;
	cppVar_34007 = (cppVar_34007 & cppMask_un_5_);
	BIT_VEC cppVar_34008 = (0 << 5) | cppVar_34007;
	cppVar_34008 = (cppVar_34008 & cppMask_un_8_);
	bool cppVar_34010 = (cppVar_34008 == 138);
	BIT_VEC cppVar_34011 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34012 = (cppVar_34011 << 3) | 3;
	cppVar_34012 = (cppVar_34012 & cppMask_un_5_);
	BIT_VEC cppVar_34013 = (0 << 5) | cppVar_34012;
	cppVar_34013 = (cppVar_34013 & cppMask_un_8_);
	bool cppVar_34015 = (cppVar_34013 == 140);
	BIT_VEC cppVar_34016 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34017 = (cppVar_34016 << 3) | 3;
	cppVar_34017 = (cppVar_34017 & cppMask_un_5_);
	BIT_VEC cppVar_34018 = (0 << 5) | cppVar_34017;
	cppVar_34018 = (cppVar_34018 & cppMask_un_8_);
	bool cppVar_34020 = (cppVar_34018 == 139);
	BIT_VEC cppVar_34021 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34022 = (cppVar_34021 << 3) | 3;
	cppVar_34022 = (cppVar_34022 & cppMask_un_5_);
	BIT_VEC cppVar_34023 = (0 << 5) | cppVar_34022;
	cppVar_34023 = (cppVar_34023 & cppMask_un_8_);
	bool cppVar_34025 = (cppVar_34023 == 141);
	BIT_VEC cppVar_34026 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34027 = (cppVar_34026 << 3) | 3;
	cppVar_34027 = (cppVar_34027 & cppMask_un_5_);
	BIT_VEC cppVar_34028 = (0 << 5) | cppVar_34027;
	cppVar_34028 = (cppVar_34028 & cppMask_un_8_);
	bool cppVar_34030 = (cppVar_34028 == 144);
	BIT_VEC cppVar_34031 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34032 = (cppVar_34031 << 3) | 3;
	cppVar_34032 = (cppVar_34032 & cppMask_un_5_);
	BIT_VEC cppVar_34033 = (0 << 5) | cppVar_34032;
	cppVar_34033 = (cppVar_34033 & cppMask_un_8_);
	bool cppVar_34035 = (cppVar_34033 == 152);
	BIT_VEC cppVar_34036 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34037 = (cppVar_34036 << 3) | 3;
	cppVar_34037 = (cppVar_34037 & cppMask_un_5_);
	BIT_VEC cppVar_34038 = (0 << 5) | cppVar_34037;
	cppVar_34038 = (cppVar_34038 & cppMask_un_8_);
	bool cppVar_34040 = (cppVar_34038 == 153);
	BIT_VEC cppVar_34041 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34042 = (cppVar_34041 << 3) | 3;
	cppVar_34042 = (cppVar_34042 & cppMask_un_5_);
	BIT_VEC cppVar_34043 = (0 << 5) | cppVar_34042;
	cppVar_34043 = (cppVar_34043 & cppMask_un_8_);
	bool cppVar_34045 = (cppVar_34043 == 160);
	BIT_VEC cppVar_34046 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34047 = (cppVar_34046 << 3) | 3;
	cppVar_34047 = (cppVar_34047 & cppMask_un_5_);
	BIT_VEC cppVar_34048 = (0 << 5) | cppVar_34047;
	cppVar_34048 = (cppVar_34048 & cppMask_un_8_);
	bool cppVar_34050 = (cppVar_34048 == 168);
	BIT_VEC cppVar_34051 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34052 = (cppVar_34051 << 3) | 3;
	cppVar_34052 = (cppVar_34052 & cppMask_un_5_);
	BIT_VEC cppVar_34053 = (0 << 5) | cppVar_34052;
	cppVar_34053 = (cppVar_34053 & cppMask_un_8_);
	bool cppVar_34055 = (cppVar_34053 == 176);
	BIT_VEC cppVar_34056 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34057 = (cppVar_34056 << 3) | 3;
	cppVar_34057 = (cppVar_34057 & cppMask_un_5_);
	BIT_VEC cppVar_34058 = (0 << 5) | cppVar_34057;
	cppVar_34058 = (cppVar_34058 & cppMask_un_8_);
	bool cppVar_34060 = (cppVar_34058 == 184);
	BIT_VEC cppVar_34061 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34062 = (cppVar_34061 << 3) | 3;
	cppVar_34062 = (cppVar_34062 & cppMask_un_5_);
	BIT_VEC cppVar_34063 = (0 << 5) | cppVar_34062;
	cppVar_34063 = (cppVar_34063 & cppMask_un_8_);
	bool cppVar_34065 = (cppVar_34063 == 208);
	BIT_VEC cppVar_34066 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34067 = (cppVar_34066 << 3) | 3;
	cppVar_34067 = (cppVar_34067 & cppMask_un_5_);
	BIT_VEC cppVar_34068 = (0 << 5) | cppVar_34067;
	cppVar_34068 = (cppVar_34068 & cppMask_un_8_);
	bool cppVar_34070 = (cppVar_34068 == 224);
	BIT_VEC cppVar_34071 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34072 = (cppVar_34071 << 3) | 3;
	cppVar_34072 = (cppVar_34072 & cppMask_un_5_);
	BIT_VEC cppVar_34073 = (0 << 5) | cppVar_34072;
	cppVar_34073 = (cppVar_34073 & cppMask_un_8_);
	bool cppVar_34075 = (cppVar_34073 == 240);
	BIT_VEC cppVar_34077 = (cppVar_34075) ? B : 0;
	BIT_VEC cppVar_34078 = (cppVar_34070) ? ACC : cppVar_34077;
	BIT_VEC cppVar_34079 = (cppVar_34065) ? PSW : cppVar_34078;
	BIT_VEC cppVar_34080 = (cppVar_34060) ? IP : cppVar_34079;
	BIT_VEC cppVar_34081 = (cppVar_34055) ? P3 : cppVar_34080;
	BIT_VEC cppVar_34082 = (cppVar_34050) ? IE : cppVar_34081;
	BIT_VEC cppVar_34083 = (cppVar_34045) ? P2 : cppVar_34082;
	BIT_VEC cppVar_34084 = (cppVar_34040) ? SBUF : cppVar_34083;
	BIT_VEC cppVar_34085 = (cppVar_34035) ? SCON : cppVar_34084;
	BIT_VEC cppVar_34086 = (cppVar_34030) ? P1 : cppVar_34085;
	BIT_VEC cppVar_34087 = (cppVar_34025) ? TH1 : cppVar_34086;
	BIT_VEC cppVar_34088 = (cppVar_34020) ? TL1 : cppVar_34087;
	BIT_VEC cppVar_34089 = (cppVar_34015) ? TH0 : cppVar_34088;
	BIT_VEC cppVar_34090 = (cppVar_34010) ? TL0 : cppVar_34089;
	BIT_VEC cppVar_34091 = (cppVar_34005) ? TMOD : cppVar_34090;
	BIT_VEC cppVar_34092 = (cppVar_34000) ? TCON : cppVar_34091;
	BIT_VEC cppVar_34093 = (cppVar_33995) ? PCON : cppVar_34092;
	BIT_VEC cppVar_34094 = (cppVar_33990) ? DPH : cppVar_34093;
	BIT_VEC cppVar_34095 = (cppVar_33985) ? DPL : cppVar_34094;
	BIT_VEC cppVar_34096 = (cppVar_33980) ? SP : cppVar_34095;
	BIT_VEC cppVar_34097 = (cppVar_33975) ? P0 : cppVar_34096;
	BIT_VEC cppVar_34098 = (cppVar_33966) ? cppVar_33970 : cppVar_34097;
	BIT_VEC cppVar_34099 = (cppVar_33958) ? cppVar_34098 : P2;
	BIT_VEC cppVar_34100 = ROM.rd(PC);
	bool cppVar_34102 = (cppVar_34100 == 138);
	BIT_VEC cppVar_34104 = PC + 1;
	cppVar_34104 = (cppVar_34104 & cppMask_un_16_);
	BIT_VEC cppVar_34105 = ROM.rd(cppVar_34104);
	bool cppVar_34107 = (cppVar_34105 == 160);
	BIT_VEC cppVar_34109 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34111 = (cppVar_34109 << 3) | 2;
	cppVar_34111 = (cppVar_34111 & cppMask_un_5_);
	BIT_VEC cppVar_34112 = (0 << 5) | cppVar_34111;
	cppVar_34112 = (cppVar_34112 & cppMask_un_8_);
	BIT_VEC cppVar_34113 = (cppVar_34112 >> 7) & cppMask_un_1_;
	bool cppVar_34115 = (cppVar_34113 == 0);
	BIT_VEC cppVar_34116 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34117 = (cppVar_34116 << 3) | 2;
	cppVar_34117 = (cppVar_34117 & cppMask_un_5_);
	BIT_VEC cppVar_34118 = (0 << 5) | cppVar_34117;
	cppVar_34118 = (cppVar_34118 & cppMask_un_8_);
	BIT_VEC cppVar_34119 = IRAM.rd(cppVar_34118);
	BIT_VEC cppVar_34120 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34121 = (cppVar_34120 << 3) | 2;
	cppVar_34121 = (cppVar_34121 & cppMask_un_5_);
	BIT_VEC cppVar_34122 = (0 << 5) | cppVar_34121;
	cppVar_34122 = (cppVar_34122 & cppMask_un_8_);
	bool cppVar_34124 = (cppVar_34122 == 128);
	BIT_VEC cppVar_34125 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34126 = (cppVar_34125 << 3) | 2;
	cppVar_34126 = (cppVar_34126 & cppMask_un_5_);
	BIT_VEC cppVar_34127 = (0 << 5) | cppVar_34126;
	cppVar_34127 = (cppVar_34127 & cppMask_un_8_);
	bool cppVar_34129 = (cppVar_34127 == 129);
	BIT_VEC cppVar_34130 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34131 = (cppVar_34130 << 3) | 2;
	cppVar_34131 = (cppVar_34131 & cppMask_un_5_);
	BIT_VEC cppVar_34132 = (0 << 5) | cppVar_34131;
	cppVar_34132 = (cppVar_34132 & cppMask_un_8_);
	bool cppVar_34134 = (cppVar_34132 == 130);
	BIT_VEC cppVar_34135 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34136 = (cppVar_34135 << 3) | 2;
	cppVar_34136 = (cppVar_34136 & cppMask_un_5_);
	BIT_VEC cppVar_34137 = (0 << 5) | cppVar_34136;
	cppVar_34137 = (cppVar_34137 & cppMask_un_8_);
	bool cppVar_34139 = (cppVar_34137 == 131);
	BIT_VEC cppVar_34140 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34141 = (cppVar_34140 << 3) | 2;
	cppVar_34141 = (cppVar_34141 & cppMask_un_5_);
	BIT_VEC cppVar_34142 = (0 << 5) | cppVar_34141;
	cppVar_34142 = (cppVar_34142 & cppMask_un_8_);
	bool cppVar_34144 = (cppVar_34142 == 135);
	BIT_VEC cppVar_34145 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34146 = (cppVar_34145 << 3) | 2;
	cppVar_34146 = (cppVar_34146 & cppMask_un_5_);
	BIT_VEC cppVar_34147 = (0 << 5) | cppVar_34146;
	cppVar_34147 = (cppVar_34147 & cppMask_un_8_);
	bool cppVar_34149 = (cppVar_34147 == 136);
	BIT_VEC cppVar_34150 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34151 = (cppVar_34150 << 3) | 2;
	cppVar_34151 = (cppVar_34151 & cppMask_un_5_);
	BIT_VEC cppVar_34152 = (0 << 5) | cppVar_34151;
	cppVar_34152 = (cppVar_34152 & cppMask_un_8_);
	bool cppVar_34154 = (cppVar_34152 == 137);
	BIT_VEC cppVar_34155 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34156 = (cppVar_34155 << 3) | 2;
	cppVar_34156 = (cppVar_34156 & cppMask_un_5_);
	BIT_VEC cppVar_34157 = (0 << 5) | cppVar_34156;
	cppVar_34157 = (cppVar_34157 & cppMask_un_8_);
	bool cppVar_34159 = (cppVar_34157 == 138);
	BIT_VEC cppVar_34160 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34161 = (cppVar_34160 << 3) | 2;
	cppVar_34161 = (cppVar_34161 & cppMask_un_5_);
	BIT_VEC cppVar_34162 = (0 << 5) | cppVar_34161;
	cppVar_34162 = (cppVar_34162 & cppMask_un_8_);
	bool cppVar_34164 = (cppVar_34162 == 140);
	BIT_VEC cppVar_34165 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34166 = (cppVar_34165 << 3) | 2;
	cppVar_34166 = (cppVar_34166 & cppMask_un_5_);
	BIT_VEC cppVar_34167 = (0 << 5) | cppVar_34166;
	cppVar_34167 = (cppVar_34167 & cppMask_un_8_);
	bool cppVar_34169 = (cppVar_34167 == 139);
	BIT_VEC cppVar_34170 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34171 = (cppVar_34170 << 3) | 2;
	cppVar_34171 = (cppVar_34171 & cppMask_un_5_);
	BIT_VEC cppVar_34172 = (0 << 5) | cppVar_34171;
	cppVar_34172 = (cppVar_34172 & cppMask_un_8_);
	bool cppVar_34174 = (cppVar_34172 == 141);
	BIT_VEC cppVar_34175 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34176 = (cppVar_34175 << 3) | 2;
	cppVar_34176 = (cppVar_34176 & cppMask_un_5_);
	BIT_VEC cppVar_34177 = (0 << 5) | cppVar_34176;
	cppVar_34177 = (cppVar_34177 & cppMask_un_8_);
	bool cppVar_34179 = (cppVar_34177 == 144);
	BIT_VEC cppVar_34180 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34181 = (cppVar_34180 << 3) | 2;
	cppVar_34181 = (cppVar_34181 & cppMask_un_5_);
	BIT_VEC cppVar_34182 = (0 << 5) | cppVar_34181;
	cppVar_34182 = (cppVar_34182 & cppMask_un_8_);
	bool cppVar_34184 = (cppVar_34182 == 152);
	BIT_VEC cppVar_34185 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34186 = (cppVar_34185 << 3) | 2;
	cppVar_34186 = (cppVar_34186 & cppMask_un_5_);
	BIT_VEC cppVar_34187 = (0 << 5) | cppVar_34186;
	cppVar_34187 = (cppVar_34187 & cppMask_un_8_);
	bool cppVar_34189 = (cppVar_34187 == 153);
	BIT_VEC cppVar_34190 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34191 = (cppVar_34190 << 3) | 2;
	cppVar_34191 = (cppVar_34191 & cppMask_un_5_);
	BIT_VEC cppVar_34192 = (0 << 5) | cppVar_34191;
	cppVar_34192 = (cppVar_34192 & cppMask_un_8_);
	bool cppVar_34194 = (cppVar_34192 == 160);
	BIT_VEC cppVar_34195 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34196 = (cppVar_34195 << 3) | 2;
	cppVar_34196 = (cppVar_34196 & cppMask_un_5_);
	BIT_VEC cppVar_34197 = (0 << 5) | cppVar_34196;
	cppVar_34197 = (cppVar_34197 & cppMask_un_8_);
	bool cppVar_34199 = (cppVar_34197 == 168);
	BIT_VEC cppVar_34200 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34201 = (cppVar_34200 << 3) | 2;
	cppVar_34201 = (cppVar_34201 & cppMask_un_5_);
	BIT_VEC cppVar_34202 = (0 << 5) | cppVar_34201;
	cppVar_34202 = (cppVar_34202 & cppMask_un_8_);
	bool cppVar_34204 = (cppVar_34202 == 176);
	BIT_VEC cppVar_34205 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34206 = (cppVar_34205 << 3) | 2;
	cppVar_34206 = (cppVar_34206 & cppMask_un_5_);
	BIT_VEC cppVar_34207 = (0 << 5) | cppVar_34206;
	cppVar_34207 = (cppVar_34207 & cppMask_un_8_);
	bool cppVar_34209 = (cppVar_34207 == 184);
	BIT_VEC cppVar_34210 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34211 = (cppVar_34210 << 3) | 2;
	cppVar_34211 = (cppVar_34211 & cppMask_un_5_);
	BIT_VEC cppVar_34212 = (0 << 5) | cppVar_34211;
	cppVar_34212 = (cppVar_34212 & cppMask_un_8_);
	bool cppVar_34214 = (cppVar_34212 == 208);
	BIT_VEC cppVar_34215 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34216 = (cppVar_34215 << 3) | 2;
	cppVar_34216 = (cppVar_34216 & cppMask_un_5_);
	BIT_VEC cppVar_34217 = (0 << 5) | cppVar_34216;
	cppVar_34217 = (cppVar_34217 & cppMask_un_8_);
	bool cppVar_34219 = (cppVar_34217 == 224);
	BIT_VEC cppVar_34220 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34221 = (cppVar_34220 << 3) | 2;
	cppVar_34221 = (cppVar_34221 & cppMask_un_5_);
	BIT_VEC cppVar_34222 = (0 << 5) | cppVar_34221;
	cppVar_34222 = (cppVar_34222 & cppMask_un_8_);
	bool cppVar_34224 = (cppVar_34222 == 240);
	BIT_VEC cppVar_34226 = (cppVar_34224) ? B : 0;
	BIT_VEC cppVar_34227 = (cppVar_34219) ? ACC : cppVar_34226;
	BIT_VEC cppVar_34228 = (cppVar_34214) ? PSW : cppVar_34227;
	BIT_VEC cppVar_34229 = (cppVar_34209) ? IP : cppVar_34228;
	BIT_VEC cppVar_34230 = (cppVar_34204) ? P3 : cppVar_34229;
	BIT_VEC cppVar_34231 = (cppVar_34199) ? IE : cppVar_34230;
	BIT_VEC cppVar_34232 = (cppVar_34194) ? P2 : cppVar_34231;
	BIT_VEC cppVar_34233 = (cppVar_34189) ? SBUF : cppVar_34232;
	BIT_VEC cppVar_34234 = (cppVar_34184) ? SCON : cppVar_34233;
	BIT_VEC cppVar_34235 = (cppVar_34179) ? P1 : cppVar_34234;
	BIT_VEC cppVar_34236 = (cppVar_34174) ? TH1 : cppVar_34235;
	BIT_VEC cppVar_34237 = (cppVar_34169) ? TL1 : cppVar_34236;
	BIT_VEC cppVar_34238 = (cppVar_34164) ? TH0 : cppVar_34237;
	BIT_VEC cppVar_34239 = (cppVar_34159) ? TL0 : cppVar_34238;
	BIT_VEC cppVar_34240 = (cppVar_34154) ? TMOD : cppVar_34239;
	BIT_VEC cppVar_34241 = (cppVar_34149) ? TCON : cppVar_34240;
	BIT_VEC cppVar_34242 = (cppVar_34144) ? PCON : cppVar_34241;
	BIT_VEC cppVar_34243 = (cppVar_34139) ? DPH : cppVar_34242;
	BIT_VEC cppVar_34244 = (cppVar_34134) ? DPL : cppVar_34243;
	BIT_VEC cppVar_34245 = (cppVar_34129) ? SP : cppVar_34244;
	BIT_VEC cppVar_34246 = (cppVar_34124) ? P0 : cppVar_34245;
	BIT_VEC cppVar_34247 = (cppVar_34115) ? cppVar_34119 : cppVar_34246;
	BIT_VEC cppVar_34248 = (cppVar_34107) ? cppVar_34247 : P2;
	BIT_VEC cppVar_34249 = ROM.rd(PC);
	bool cppVar_34251 = (cppVar_34249 == 137);
	BIT_VEC cppVar_34253 = PC + 1;
	cppVar_34253 = (cppVar_34253 & cppMask_un_16_);
	BIT_VEC cppVar_34254 = ROM.rd(cppVar_34253);
	bool cppVar_34256 = (cppVar_34254 == 160);
	BIT_VEC cppVar_34258 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34260 = (cppVar_34258 << 3) | 1;
	cppVar_34260 = (cppVar_34260 & cppMask_un_5_);
	BIT_VEC cppVar_34261 = (0 << 5) | cppVar_34260;
	cppVar_34261 = (cppVar_34261 & cppMask_un_8_);
	BIT_VEC cppVar_34262 = (cppVar_34261 >> 7) & cppMask_un_1_;
	bool cppVar_34264 = (cppVar_34262 == 0);
	BIT_VEC cppVar_34265 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34266 = (cppVar_34265 << 3) | 1;
	cppVar_34266 = (cppVar_34266 & cppMask_un_5_);
	BIT_VEC cppVar_34267 = (0 << 5) | cppVar_34266;
	cppVar_34267 = (cppVar_34267 & cppMask_un_8_);
	BIT_VEC cppVar_34268 = IRAM.rd(cppVar_34267);
	BIT_VEC cppVar_34269 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34270 = (cppVar_34269 << 3) | 1;
	cppVar_34270 = (cppVar_34270 & cppMask_un_5_);
	BIT_VEC cppVar_34271 = (0 << 5) | cppVar_34270;
	cppVar_34271 = (cppVar_34271 & cppMask_un_8_);
	bool cppVar_34273 = (cppVar_34271 == 128);
	BIT_VEC cppVar_34274 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34275 = (cppVar_34274 << 3) | 1;
	cppVar_34275 = (cppVar_34275 & cppMask_un_5_);
	BIT_VEC cppVar_34276 = (0 << 5) | cppVar_34275;
	cppVar_34276 = (cppVar_34276 & cppMask_un_8_);
	bool cppVar_34278 = (cppVar_34276 == 129);
	BIT_VEC cppVar_34279 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34280 = (cppVar_34279 << 3) | 1;
	cppVar_34280 = (cppVar_34280 & cppMask_un_5_);
	BIT_VEC cppVar_34281 = (0 << 5) | cppVar_34280;
	cppVar_34281 = (cppVar_34281 & cppMask_un_8_);
	bool cppVar_34283 = (cppVar_34281 == 130);
	BIT_VEC cppVar_34284 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34285 = (cppVar_34284 << 3) | 1;
	cppVar_34285 = (cppVar_34285 & cppMask_un_5_);
	BIT_VEC cppVar_34286 = (0 << 5) | cppVar_34285;
	cppVar_34286 = (cppVar_34286 & cppMask_un_8_);
	bool cppVar_34288 = (cppVar_34286 == 131);
	BIT_VEC cppVar_34289 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34290 = (cppVar_34289 << 3) | 1;
	cppVar_34290 = (cppVar_34290 & cppMask_un_5_);
	BIT_VEC cppVar_34291 = (0 << 5) | cppVar_34290;
	cppVar_34291 = (cppVar_34291 & cppMask_un_8_);
	bool cppVar_34293 = (cppVar_34291 == 135);
	BIT_VEC cppVar_34294 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34295 = (cppVar_34294 << 3) | 1;
	cppVar_34295 = (cppVar_34295 & cppMask_un_5_);
	BIT_VEC cppVar_34296 = (0 << 5) | cppVar_34295;
	cppVar_34296 = (cppVar_34296 & cppMask_un_8_);
	bool cppVar_34298 = (cppVar_34296 == 136);
	BIT_VEC cppVar_34299 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34300 = (cppVar_34299 << 3) | 1;
	cppVar_34300 = (cppVar_34300 & cppMask_un_5_);
	BIT_VEC cppVar_34301 = (0 << 5) | cppVar_34300;
	cppVar_34301 = (cppVar_34301 & cppMask_un_8_);
	bool cppVar_34303 = (cppVar_34301 == 137);
	BIT_VEC cppVar_34304 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34305 = (cppVar_34304 << 3) | 1;
	cppVar_34305 = (cppVar_34305 & cppMask_un_5_);
	BIT_VEC cppVar_34306 = (0 << 5) | cppVar_34305;
	cppVar_34306 = (cppVar_34306 & cppMask_un_8_);
	bool cppVar_34308 = (cppVar_34306 == 138);
	BIT_VEC cppVar_34309 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34310 = (cppVar_34309 << 3) | 1;
	cppVar_34310 = (cppVar_34310 & cppMask_un_5_);
	BIT_VEC cppVar_34311 = (0 << 5) | cppVar_34310;
	cppVar_34311 = (cppVar_34311 & cppMask_un_8_);
	bool cppVar_34313 = (cppVar_34311 == 140);
	BIT_VEC cppVar_34314 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34315 = (cppVar_34314 << 3) | 1;
	cppVar_34315 = (cppVar_34315 & cppMask_un_5_);
	BIT_VEC cppVar_34316 = (0 << 5) | cppVar_34315;
	cppVar_34316 = (cppVar_34316 & cppMask_un_8_);
	bool cppVar_34318 = (cppVar_34316 == 139);
	BIT_VEC cppVar_34319 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34320 = (cppVar_34319 << 3) | 1;
	cppVar_34320 = (cppVar_34320 & cppMask_un_5_);
	BIT_VEC cppVar_34321 = (0 << 5) | cppVar_34320;
	cppVar_34321 = (cppVar_34321 & cppMask_un_8_);
	bool cppVar_34323 = (cppVar_34321 == 141);
	BIT_VEC cppVar_34324 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34325 = (cppVar_34324 << 3) | 1;
	cppVar_34325 = (cppVar_34325 & cppMask_un_5_);
	BIT_VEC cppVar_34326 = (0 << 5) | cppVar_34325;
	cppVar_34326 = (cppVar_34326 & cppMask_un_8_);
	bool cppVar_34328 = (cppVar_34326 == 144);
	BIT_VEC cppVar_34329 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34330 = (cppVar_34329 << 3) | 1;
	cppVar_34330 = (cppVar_34330 & cppMask_un_5_);
	BIT_VEC cppVar_34331 = (0 << 5) | cppVar_34330;
	cppVar_34331 = (cppVar_34331 & cppMask_un_8_);
	bool cppVar_34333 = (cppVar_34331 == 152);
	BIT_VEC cppVar_34334 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34335 = (cppVar_34334 << 3) | 1;
	cppVar_34335 = (cppVar_34335 & cppMask_un_5_);
	BIT_VEC cppVar_34336 = (0 << 5) | cppVar_34335;
	cppVar_34336 = (cppVar_34336 & cppMask_un_8_);
	bool cppVar_34338 = (cppVar_34336 == 153);
	BIT_VEC cppVar_34339 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34340 = (cppVar_34339 << 3) | 1;
	cppVar_34340 = (cppVar_34340 & cppMask_un_5_);
	BIT_VEC cppVar_34341 = (0 << 5) | cppVar_34340;
	cppVar_34341 = (cppVar_34341 & cppMask_un_8_);
	bool cppVar_34343 = (cppVar_34341 == 160);
	BIT_VEC cppVar_34344 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34345 = (cppVar_34344 << 3) | 1;
	cppVar_34345 = (cppVar_34345 & cppMask_un_5_);
	BIT_VEC cppVar_34346 = (0 << 5) | cppVar_34345;
	cppVar_34346 = (cppVar_34346 & cppMask_un_8_);
	bool cppVar_34348 = (cppVar_34346 == 168);
	BIT_VEC cppVar_34349 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34350 = (cppVar_34349 << 3) | 1;
	cppVar_34350 = (cppVar_34350 & cppMask_un_5_);
	BIT_VEC cppVar_34351 = (0 << 5) | cppVar_34350;
	cppVar_34351 = (cppVar_34351 & cppMask_un_8_);
	bool cppVar_34353 = (cppVar_34351 == 176);
	BIT_VEC cppVar_34354 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34355 = (cppVar_34354 << 3) | 1;
	cppVar_34355 = (cppVar_34355 & cppMask_un_5_);
	BIT_VEC cppVar_34356 = (0 << 5) | cppVar_34355;
	cppVar_34356 = (cppVar_34356 & cppMask_un_8_);
	bool cppVar_34358 = (cppVar_34356 == 184);
	BIT_VEC cppVar_34359 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34360 = (cppVar_34359 << 3) | 1;
	cppVar_34360 = (cppVar_34360 & cppMask_un_5_);
	BIT_VEC cppVar_34361 = (0 << 5) | cppVar_34360;
	cppVar_34361 = (cppVar_34361 & cppMask_un_8_);
	bool cppVar_34363 = (cppVar_34361 == 208);
	BIT_VEC cppVar_34364 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34365 = (cppVar_34364 << 3) | 1;
	cppVar_34365 = (cppVar_34365 & cppMask_un_5_);
	BIT_VEC cppVar_34366 = (0 << 5) | cppVar_34365;
	cppVar_34366 = (cppVar_34366 & cppMask_un_8_);
	bool cppVar_34368 = (cppVar_34366 == 224);
	BIT_VEC cppVar_34369 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34370 = (cppVar_34369 << 3) | 1;
	cppVar_34370 = (cppVar_34370 & cppMask_un_5_);
	BIT_VEC cppVar_34371 = (0 << 5) | cppVar_34370;
	cppVar_34371 = (cppVar_34371 & cppMask_un_8_);
	bool cppVar_34373 = (cppVar_34371 == 240);
	BIT_VEC cppVar_34375 = (cppVar_34373) ? B : 0;
	BIT_VEC cppVar_34376 = (cppVar_34368) ? ACC : cppVar_34375;
	BIT_VEC cppVar_34377 = (cppVar_34363) ? PSW : cppVar_34376;
	BIT_VEC cppVar_34378 = (cppVar_34358) ? IP : cppVar_34377;
	BIT_VEC cppVar_34379 = (cppVar_34353) ? P3 : cppVar_34378;
	BIT_VEC cppVar_34380 = (cppVar_34348) ? IE : cppVar_34379;
	BIT_VEC cppVar_34381 = (cppVar_34343) ? P2 : cppVar_34380;
	BIT_VEC cppVar_34382 = (cppVar_34338) ? SBUF : cppVar_34381;
	BIT_VEC cppVar_34383 = (cppVar_34333) ? SCON : cppVar_34382;
	BIT_VEC cppVar_34384 = (cppVar_34328) ? P1 : cppVar_34383;
	BIT_VEC cppVar_34385 = (cppVar_34323) ? TH1 : cppVar_34384;
	BIT_VEC cppVar_34386 = (cppVar_34318) ? TL1 : cppVar_34385;
	BIT_VEC cppVar_34387 = (cppVar_34313) ? TH0 : cppVar_34386;
	BIT_VEC cppVar_34388 = (cppVar_34308) ? TL0 : cppVar_34387;
	BIT_VEC cppVar_34389 = (cppVar_34303) ? TMOD : cppVar_34388;
	BIT_VEC cppVar_34390 = (cppVar_34298) ? TCON : cppVar_34389;
	BIT_VEC cppVar_34391 = (cppVar_34293) ? PCON : cppVar_34390;
	BIT_VEC cppVar_34392 = (cppVar_34288) ? DPH : cppVar_34391;
	BIT_VEC cppVar_34393 = (cppVar_34283) ? DPL : cppVar_34392;
	BIT_VEC cppVar_34394 = (cppVar_34278) ? SP : cppVar_34393;
	BIT_VEC cppVar_34395 = (cppVar_34273) ? P0 : cppVar_34394;
	BIT_VEC cppVar_34396 = (cppVar_34264) ? cppVar_34268 : cppVar_34395;
	BIT_VEC cppVar_34397 = (cppVar_34256) ? cppVar_34396 : P2;
	BIT_VEC cppVar_34398 = ROM.rd(PC);
	bool cppVar_34400 = (cppVar_34398 == 136);
	BIT_VEC cppVar_34402 = PC + 1;
	cppVar_34402 = (cppVar_34402 & cppMask_un_16_);
	BIT_VEC cppVar_34403 = ROM.rd(cppVar_34402);
	bool cppVar_34405 = (cppVar_34403 == 160);
	BIT_VEC cppVar_34407 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34409 = (cppVar_34407 << 3) | 0;
	cppVar_34409 = (cppVar_34409 & cppMask_un_5_);
	BIT_VEC cppVar_34410 = (0 << 5) | cppVar_34409;
	cppVar_34410 = (cppVar_34410 & cppMask_un_8_);
	BIT_VEC cppVar_34411 = (cppVar_34410 >> 7) & cppMask_un_1_;
	bool cppVar_34413 = (cppVar_34411 == 0);
	BIT_VEC cppVar_34414 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34415 = (cppVar_34414 << 3) | 0;
	cppVar_34415 = (cppVar_34415 & cppMask_un_5_);
	BIT_VEC cppVar_34416 = (0 << 5) | cppVar_34415;
	cppVar_34416 = (cppVar_34416 & cppMask_un_8_);
	BIT_VEC cppVar_34417 = IRAM.rd(cppVar_34416);
	BIT_VEC cppVar_34418 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34419 = (cppVar_34418 << 3) | 0;
	cppVar_34419 = (cppVar_34419 & cppMask_un_5_);
	BIT_VEC cppVar_34420 = (0 << 5) | cppVar_34419;
	cppVar_34420 = (cppVar_34420 & cppMask_un_8_);
	bool cppVar_34422 = (cppVar_34420 == 128);
	BIT_VEC cppVar_34423 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34424 = (cppVar_34423 << 3) | 0;
	cppVar_34424 = (cppVar_34424 & cppMask_un_5_);
	BIT_VEC cppVar_34425 = (0 << 5) | cppVar_34424;
	cppVar_34425 = (cppVar_34425 & cppMask_un_8_);
	bool cppVar_34427 = (cppVar_34425 == 129);
	BIT_VEC cppVar_34428 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34429 = (cppVar_34428 << 3) | 0;
	cppVar_34429 = (cppVar_34429 & cppMask_un_5_);
	BIT_VEC cppVar_34430 = (0 << 5) | cppVar_34429;
	cppVar_34430 = (cppVar_34430 & cppMask_un_8_);
	bool cppVar_34432 = (cppVar_34430 == 130);
	BIT_VEC cppVar_34433 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34434 = (cppVar_34433 << 3) | 0;
	cppVar_34434 = (cppVar_34434 & cppMask_un_5_);
	BIT_VEC cppVar_34435 = (0 << 5) | cppVar_34434;
	cppVar_34435 = (cppVar_34435 & cppMask_un_8_);
	bool cppVar_34437 = (cppVar_34435 == 131);
	BIT_VEC cppVar_34438 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34439 = (cppVar_34438 << 3) | 0;
	cppVar_34439 = (cppVar_34439 & cppMask_un_5_);
	BIT_VEC cppVar_34440 = (0 << 5) | cppVar_34439;
	cppVar_34440 = (cppVar_34440 & cppMask_un_8_);
	bool cppVar_34442 = (cppVar_34440 == 135);
	BIT_VEC cppVar_34443 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34444 = (cppVar_34443 << 3) | 0;
	cppVar_34444 = (cppVar_34444 & cppMask_un_5_);
	BIT_VEC cppVar_34445 = (0 << 5) | cppVar_34444;
	cppVar_34445 = (cppVar_34445 & cppMask_un_8_);
	bool cppVar_34447 = (cppVar_34445 == 136);
	BIT_VEC cppVar_34448 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34449 = (cppVar_34448 << 3) | 0;
	cppVar_34449 = (cppVar_34449 & cppMask_un_5_);
	BIT_VEC cppVar_34450 = (0 << 5) | cppVar_34449;
	cppVar_34450 = (cppVar_34450 & cppMask_un_8_);
	bool cppVar_34452 = (cppVar_34450 == 137);
	BIT_VEC cppVar_34453 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34454 = (cppVar_34453 << 3) | 0;
	cppVar_34454 = (cppVar_34454 & cppMask_un_5_);
	BIT_VEC cppVar_34455 = (0 << 5) | cppVar_34454;
	cppVar_34455 = (cppVar_34455 & cppMask_un_8_);
	bool cppVar_34457 = (cppVar_34455 == 138);
	BIT_VEC cppVar_34458 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34459 = (cppVar_34458 << 3) | 0;
	cppVar_34459 = (cppVar_34459 & cppMask_un_5_);
	BIT_VEC cppVar_34460 = (0 << 5) | cppVar_34459;
	cppVar_34460 = (cppVar_34460 & cppMask_un_8_);
	bool cppVar_34462 = (cppVar_34460 == 140);
	BIT_VEC cppVar_34463 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34464 = (cppVar_34463 << 3) | 0;
	cppVar_34464 = (cppVar_34464 & cppMask_un_5_);
	BIT_VEC cppVar_34465 = (0 << 5) | cppVar_34464;
	cppVar_34465 = (cppVar_34465 & cppMask_un_8_);
	bool cppVar_34467 = (cppVar_34465 == 139);
	BIT_VEC cppVar_34468 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34469 = (cppVar_34468 << 3) | 0;
	cppVar_34469 = (cppVar_34469 & cppMask_un_5_);
	BIT_VEC cppVar_34470 = (0 << 5) | cppVar_34469;
	cppVar_34470 = (cppVar_34470 & cppMask_un_8_);
	bool cppVar_34472 = (cppVar_34470 == 141);
	BIT_VEC cppVar_34473 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34474 = (cppVar_34473 << 3) | 0;
	cppVar_34474 = (cppVar_34474 & cppMask_un_5_);
	BIT_VEC cppVar_34475 = (0 << 5) | cppVar_34474;
	cppVar_34475 = (cppVar_34475 & cppMask_un_8_);
	bool cppVar_34477 = (cppVar_34475 == 144);
	BIT_VEC cppVar_34478 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34479 = (cppVar_34478 << 3) | 0;
	cppVar_34479 = (cppVar_34479 & cppMask_un_5_);
	BIT_VEC cppVar_34480 = (0 << 5) | cppVar_34479;
	cppVar_34480 = (cppVar_34480 & cppMask_un_8_);
	bool cppVar_34482 = (cppVar_34480 == 152);
	BIT_VEC cppVar_34483 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34484 = (cppVar_34483 << 3) | 0;
	cppVar_34484 = (cppVar_34484 & cppMask_un_5_);
	BIT_VEC cppVar_34485 = (0 << 5) | cppVar_34484;
	cppVar_34485 = (cppVar_34485 & cppMask_un_8_);
	bool cppVar_34487 = (cppVar_34485 == 153);
	BIT_VEC cppVar_34488 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34489 = (cppVar_34488 << 3) | 0;
	cppVar_34489 = (cppVar_34489 & cppMask_un_5_);
	BIT_VEC cppVar_34490 = (0 << 5) | cppVar_34489;
	cppVar_34490 = (cppVar_34490 & cppMask_un_8_);
	bool cppVar_34492 = (cppVar_34490 == 160);
	BIT_VEC cppVar_34493 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34494 = (cppVar_34493 << 3) | 0;
	cppVar_34494 = (cppVar_34494 & cppMask_un_5_);
	BIT_VEC cppVar_34495 = (0 << 5) | cppVar_34494;
	cppVar_34495 = (cppVar_34495 & cppMask_un_8_);
	bool cppVar_34497 = (cppVar_34495 == 168);
	BIT_VEC cppVar_34498 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34499 = (cppVar_34498 << 3) | 0;
	cppVar_34499 = (cppVar_34499 & cppMask_un_5_);
	BIT_VEC cppVar_34500 = (0 << 5) | cppVar_34499;
	cppVar_34500 = (cppVar_34500 & cppMask_un_8_);
	bool cppVar_34502 = (cppVar_34500 == 176);
	BIT_VEC cppVar_34503 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34504 = (cppVar_34503 << 3) | 0;
	cppVar_34504 = (cppVar_34504 & cppMask_un_5_);
	BIT_VEC cppVar_34505 = (0 << 5) | cppVar_34504;
	cppVar_34505 = (cppVar_34505 & cppMask_un_8_);
	bool cppVar_34507 = (cppVar_34505 == 184);
	BIT_VEC cppVar_34508 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34509 = (cppVar_34508 << 3) | 0;
	cppVar_34509 = (cppVar_34509 & cppMask_un_5_);
	BIT_VEC cppVar_34510 = (0 << 5) | cppVar_34509;
	cppVar_34510 = (cppVar_34510 & cppMask_un_8_);
	bool cppVar_34512 = (cppVar_34510 == 208);
	BIT_VEC cppVar_34513 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34514 = (cppVar_34513 << 3) | 0;
	cppVar_34514 = (cppVar_34514 & cppMask_un_5_);
	BIT_VEC cppVar_34515 = (0 << 5) | cppVar_34514;
	cppVar_34515 = (cppVar_34515 & cppMask_un_8_);
	bool cppVar_34517 = (cppVar_34515 == 224);
	BIT_VEC cppVar_34518 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34519 = (cppVar_34518 << 3) | 0;
	cppVar_34519 = (cppVar_34519 & cppMask_un_5_);
	BIT_VEC cppVar_34520 = (0 << 5) | cppVar_34519;
	cppVar_34520 = (cppVar_34520 & cppMask_un_8_);
	bool cppVar_34522 = (cppVar_34520 == 240);
	BIT_VEC cppVar_34524 = (cppVar_34522) ? B : 0;
	BIT_VEC cppVar_34525 = (cppVar_34517) ? ACC : cppVar_34524;
	BIT_VEC cppVar_34526 = (cppVar_34512) ? PSW : cppVar_34525;
	BIT_VEC cppVar_34527 = (cppVar_34507) ? IP : cppVar_34526;
	BIT_VEC cppVar_34528 = (cppVar_34502) ? P3 : cppVar_34527;
	BIT_VEC cppVar_34529 = (cppVar_34497) ? IE : cppVar_34528;
	BIT_VEC cppVar_34530 = (cppVar_34492) ? P2 : cppVar_34529;
	BIT_VEC cppVar_34531 = (cppVar_34487) ? SBUF : cppVar_34530;
	BIT_VEC cppVar_34532 = (cppVar_34482) ? SCON : cppVar_34531;
	BIT_VEC cppVar_34533 = (cppVar_34477) ? P1 : cppVar_34532;
	BIT_VEC cppVar_34534 = (cppVar_34472) ? TH1 : cppVar_34533;
	BIT_VEC cppVar_34535 = (cppVar_34467) ? TL1 : cppVar_34534;
	BIT_VEC cppVar_34536 = (cppVar_34462) ? TH0 : cppVar_34535;
	BIT_VEC cppVar_34537 = (cppVar_34457) ? TL0 : cppVar_34536;
	BIT_VEC cppVar_34538 = (cppVar_34452) ? TMOD : cppVar_34537;
	BIT_VEC cppVar_34539 = (cppVar_34447) ? TCON : cppVar_34538;
	BIT_VEC cppVar_34540 = (cppVar_34442) ? PCON : cppVar_34539;
	BIT_VEC cppVar_34541 = (cppVar_34437) ? DPH : cppVar_34540;
	BIT_VEC cppVar_34542 = (cppVar_34432) ? DPL : cppVar_34541;
	BIT_VEC cppVar_34543 = (cppVar_34427) ? SP : cppVar_34542;
	BIT_VEC cppVar_34544 = (cppVar_34422) ? P0 : cppVar_34543;
	BIT_VEC cppVar_34545 = (cppVar_34413) ? cppVar_34417 : cppVar_34544;
	BIT_VEC cppVar_34546 = (cppVar_34405) ? cppVar_34545 : P2;
	BIT_VEC cppVar_34547 = ROM.rd(PC);
	bool cppVar_34549 = (cppVar_34547 == 135);
	BIT_VEC cppVar_34551 = PC + 1;
	cppVar_34551 = (cppVar_34551 & cppMask_un_16_);
	BIT_VEC cppVar_34552 = ROM.rd(cppVar_34551);
	bool cppVar_34554 = (cppVar_34552 == 160);
	BIT_VEC cppVar_34556 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34558 = (cppVar_34556 << 3) | 1;
	cppVar_34558 = (cppVar_34558 & cppMask_un_5_);
	BIT_VEC cppVar_34559 = (0 << 5) | cppVar_34558;
	cppVar_34559 = (cppVar_34559 & cppMask_un_8_);
	BIT_VEC cppVar_34560 = IRAM.rd(cppVar_34559);
	BIT_VEC cppVar_34561 = IRAM.rd(cppVar_34560);
	BIT_VEC cppVar_34562 = (cppVar_34554) ? cppVar_34561 : P2;
	BIT_VEC cppVar_34563 = ROM.rd(PC);
	bool cppVar_34565 = (cppVar_34563 == 134);
	BIT_VEC cppVar_34567 = PC + 1;
	cppVar_34567 = (cppVar_34567 & cppMask_un_16_);
	BIT_VEC cppVar_34568 = ROM.rd(cppVar_34567);
	bool cppVar_34570 = (cppVar_34568 == 160);
	BIT_VEC cppVar_34572 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_34574 = (cppVar_34572 << 3) | 0;
	cppVar_34574 = (cppVar_34574 & cppMask_un_5_);
	BIT_VEC cppVar_34575 = (0 << 5) | cppVar_34574;
	cppVar_34575 = (cppVar_34575 & cppMask_un_8_);
	BIT_VEC cppVar_34576 = IRAM.rd(cppVar_34575);
	BIT_VEC cppVar_34577 = IRAM.rd(cppVar_34576);
	BIT_VEC cppVar_34578 = (cppVar_34570) ? cppVar_34577 : P2;
	BIT_VEC cppVar_34579 = ROM.rd(PC);
	bool cppVar_34581 = (cppVar_34579 == 133);
	BIT_VEC cppVar_34583 = PC + 2;
	cppVar_34583 = (cppVar_34583 & cppMask_un_16_);
	BIT_VEC cppVar_34584 = ROM.rd(cppVar_34583);
	bool cppVar_34586 = (cppVar_34584 == 160);
	BIT_VEC cppVar_34588 = PC + 1;
	cppVar_34588 = (cppVar_34588 & cppMask_un_16_);
	BIT_VEC cppVar_34589 = ROM.rd(cppVar_34588);
	BIT_VEC cppVar_34590 = (cppVar_34589 >> 7) & cppMask_un_1_;
	bool cppVar_34592 = (cppVar_34590 == 0);
	BIT_VEC cppVar_34593 = PC + 1;
	cppVar_34593 = (cppVar_34593 & cppMask_un_16_);
	BIT_VEC cppVar_34594 = ROM.rd(cppVar_34593);
	BIT_VEC cppVar_34595 = IRAM.rd(cppVar_34594);
	BIT_VEC cppVar_34596 = PC + 1;
	cppVar_34596 = (cppVar_34596 & cppMask_un_16_);
	BIT_VEC cppVar_34597 = ROM.rd(cppVar_34596);
	bool cppVar_34599 = (cppVar_34597 == 128);
	BIT_VEC cppVar_34600 = PC + 1;
	cppVar_34600 = (cppVar_34600 & cppMask_un_16_);
	BIT_VEC cppVar_34601 = ROM.rd(cppVar_34600);
	bool cppVar_34603 = (cppVar_34601 == 129);
	BIT_VEC cppVar_34604 = PC + 1;
	cppVar_34604 = (cppVar_34604 & cppMask_un_16_);
	BIT_VEC cppVar_34605 = ROM.rd(cppVar_34604);
	bool cppVar_34607 = (cppVar_34605 == 130);
	BIT_VEC cppVar_34608 = PC + 1;
	cppVar_34608 = (cppVar_34608 & cppMask_un_16_);
	BIT_VEC cppVar_34609 = ROM.rd(cppVar_34608);
	bool cppVar_34611 = (cppVar_34609 == 131);
	BIT_VEC cppVar_34612 = PC + 1;
	cppVar_34612 = (cppVar_34612 & cppMask_un_16_);
	BIT_VEC cppVar_34613 = ROM.rd(cppVar_34612);
	bool cppVar_34615 = (cppVar_34613 == 135);
	BIT_VEC cppVar_34616 = PC + 1;
	cppVar_34616 = (cppVar_34616 & cppMask_un_16_);
	BIT_VEC cppVar_34617 = ROM.rd(cppVar_34616);
	bool cppVar_34619 = (cppVar_34617 == 136);
	BIT_VEC cppVar_34620 = PC + 1;
	cppVar_34620 = (cppVar_34620 & cppMask_un_16_);
	BIT_VEC cppVar_34621 = ROM.rd(cppVar_34620);
	bool cppVar_34623 = (cppVar_34621 == 137);
	BIT_VEC cppVar_34624 = PC + 1;
	cppVar_34624 = (cppVar_34624 & cppMask_un_16_);
	BIT_VEC cppVar_34625 = ROM.rd(cppVar_34624);
	bool cppVar_34627 = (cppVar_34625 == 138);
	BIT_VEC cppVar_34628 = PC + 1;
	cppVar_34628 = (cppVar_34628 & cppMask_un_16_);
	BIT_VEC cppVar_34629 = ROM.rd(cppVar_34628);
	bool cppVar_34631 = (cppVar_34629 == 140);
	BIT_VEC cppVar_34632 = PC + 1;
	cppVar_34632 = (cppVar_34632 & cppMask_un_16_);
	BIT_VEC cppVar_34633 = ROM.rd(cppVar_34632);
	bool cppVar_34635 = (cppVar_34633 == 139);
	BIT_VEC cppVar_34636 = PC + 1;
	cppVar_34636 = (cppVar_34636 & cppMask_un_16_);
	BIT_VEC cppVar_34637 = ROM.rd(cppVar_34636);
	bool cppVar_34639 = (cppVar_34637 == 141);
	BIT_VEC cppVar_34640 = PC + 1;
	cppVar_34640 = (cppVar_34640 & cppMask_un_16_);
	BIT_VEC cppVar_34641 = ROM.rd(cppVar_34640);
	bool cppVar_34643 = (cppVar_34641 == 144);
	BIT_VEC cppVar_34644 = PC + 1;
	cppVar_34644 = (cppVar_34644 & cppMask_un_16_);
	BIT_VEC cppVar_34645 = ROM.rd(cppVar_34644);
	bool cppVar_34647 = (cppVar_34645 == 152);
	BIT_VEC cppVar_34648 = PC + 1;
	cppVar_34648 = (cppVar_34648 & cppMask_un_16_);
	BIT_VEC cppVar_34649 = ROM.rd(cppVar_34648);
	bool cppVar_34651 = (cppVar_34649 == 153);
	BIT_VEC cppVar_34652 = PC + 1;
	cppVar_34652 = (cppVar_34652 & cppMask_un_16_);
	BIT_VEC cppVar_34653 = ROM.rd(cppVar_34652);
	bool cppVar_34655 = (cppVar_34653 == 160);
	BIT_VEC cppVar_34656 = PC + 1;
	cppVar_34656 = (cppVar_34656 & cppMask_un_16_);
	BIT_VEC cppVar_34657 = ROM.rd(cppVar_34656);
	bool cppVar_34659 = (cppVar_34657 == 168);
	BIT_VEC cppVar_34660 = PC + 1;
	cppVar_34660 = (cppVar_34660 & cppMask_un_16_);
	BIT_VEC cppVar_34661 = ROM.rd(cppVar_34660);
	bool cppVar_34663 = (cppVar_34661 == 176);
	BIT_VEC cppVar_34664 = PC + 1;
	cppVar_34664 = (cppVar_34664 & cppMask_un_16_);
	BIT_VEC cppVar_34665 = ROM.rd(cppVar_34664);
	bool cppVar_34667 = (cppVar_34665 == 184);
	BIT_VEC cppVar_34668 = PC + 1;
	cppVar_34668 = (cppVar_34668 & cppMask_un_16_);
	BIT_VEC cppVar_34669 = ROM.rd(cppVar_34668);
	bool cppVar_34671 = (cppVar_34669 == 208);
	BIT_VEC cppVar_34672 = PC + 1;
	cppVar_34672 = (cppVar_34672 & cppMask_un_16_);
	BIT_VEC cppVar_34673 = ROM.rd(cppVar_34672);
	bool cppVar_34675 = (cppVar_34673 == 224);
	BIT_VEC cppVar_34676 = PC + 1;
	cppVar_34676 = (cppVar_34676 & cppMask_un_16_);
	BIT_VEC cppVar_34677 = ROM.rd(cppVar_34676);
	bool cppVar_34679 = (cppVar_34677 == 240);
	BIT_VEC cppVar_34681 = (cppVar_34679) ? B : 0;
	BIT_VEC cppVar_34682 = (cppVar_34675) ? ACC : cppVar_34681;
	BIT_VEC cppVar_34683 = (cppVar_34671) ? PSW : cppVar_34682;
	BIT_VEC cppVar_34684 = (cppVar_34667) ? IP : cppVar_34683;
	BIT_VEC cppVar_34685 = (cppVar_34663) ? P3 : cppVar_34684;
	BIT_VEC cppVar_34686 = (cppVar_34659) ? IE : cppVar_34685;
	BIT_VEC cppVar_34687 = (cppVar_34655) ? P2 : cppVar_34686;
	BIT_VEC cppVar_34688 = (cppVar_34651) ? SBUF : cppVar_34687;
	BIT_VEC cppVar_34689 = (cppVar_34647) ? SCON : cppVar_34688;
	BIT_VEC cppVar_34690 = (cppVar_34643) ? P1 : cppVar_34689;
	BIT_VEC cppVar_34691 = (cppVar_34639) ? TH1 : cppVar_34690;
	BIT_VEC cppVar_34692 = (cppVar_34635) ? TL1 : cppVar_34691;
	BIT_VEC cppVar_34693 = (cppVar_34631) ? TH0 : cppVar_34692;
	BIT_VEC cppVar_34694 = (cppVar_34627) ? TL0 : cppVar_34693;
	BIT_VEC cppVar_34695 = (cppVar_34623) ? TMOD : cppVar_34694;
	BIT_VEC cppVar_34696 = (cppVar_34619) ? TCON : cppVar_34695;
	BIT_VEC cppVar_34697 = (cppVar_34615) ? PCON : cppVar_34696;
	BIT_VEC cppVar_34698 = (cppVar_34611) ? DPH : cppVar_34697;
	BIT_VEC cppVar_34699 = (cppVar_34607) ? DPL : cppVar_34698;
	BIT_VEC cppVar_34700 = (cppVar_34603) ? SP : cppVar_34699;
	BIT_VEC cppVar_34701 = (cppVar_34599) ? P0 : cppVar_34700;
	BIT_VEC cppVar_34702 = (cppVar_34592) ? cppVar_34595 : cppVar_34701;
	BIT_VEC cppVar_34703 = (cppVar_34586) ? cppVar_34702 : P2;
	BIT_VEC cppVar_34704 = ROM.rd(PC);
	bool cppVar_34706 = (cppVar_34704 == 117);
	BIT_VEC cppVar_34708 = PC + 1;
	cppVar_34708 = (cppVar_34708 & cppMask_un_16_);
	BIT_VEC cppVar_34709 = ROM.rd(cppVar_34708);
	bool cppVar_34711 = (cppVar_34709 == 160);
	BIT_VEC cppVar_34713 = PC + 2;
	cppVar_34713 = (cppVar_34713 & cppMask_un_16_);
	BIT_VEC cppVar_34714 = ROM.rd(cppVar_34713);
	BIT_VEC cppVar_34715 = (cppVar_34711) ? cppVar_34714 : P2;
	BIT_VEC cppVar_34716 = ROM.rd(PC);
	bool cppVar_34718 = (cppVar_34716 == 99);
	BIT_VEC cppVar_34720 = PC + 1;
	cppVar_34720 = (cppVar_34720 & cppMask_un_16_);
	BIT_VEC cppVar_34721 = ROM.rd(cppVar_34720);
	bool cppVar_34723 = (cppVar_34721 == 160);
	BIT_VEC cppVar_34724 = PC + 1;
	cppVar_34724 = (cppVar_34724 & cppMask_un_16_);
	BIT_VEC cppVar_34725 = ROM.rd(cppVar_34724);
	BIT_VEC cppVar_34726 = (cppVar_34725 >> 7) & cppMask_un_1_;
	bool cppVar_34728 = (cppVar_34726 == 0);
	BIT_VEC cppVar_34729 = PC + 1;
	cppVar_34729 = (cppVar_34729 & cppMask_un_16_);
	BIT_VEC cppVar_34730 = ROM.rd(cppVar_34729);
	BIT_VEC cppVar_34731 = IRAM.rd(cppVar_34730);
	BIT_VEC cppVar_34732 = PC + 1;
	cppVar_34732 = (cppVar_34732 & cppMask_un_16_);
	BIT_VEC cppVar_34733 = ROM.rd(cppVar_34732);
	bool cppVar_34735 = (cppVar_34733 == 128);
	BIT_VEC cppVar_34736 = PC + 1;
	cppVar_34736 = (cppVar_34736 & cppMask_un_16_);
	BIT_VEC cppVar_34737 = ROM.rd(cppVar_34736);
	bool cppVar_34739 = (cppVar_34737 == 129);
	BIT_VEC cppVar_34740 = PC + 1;
	cppVar_34740 = (cppVar_34740 & cppMask_un_16_);
	BIT_VEC cppVar_34741 = ROM.rd(cppVar_34740);
	bool cppVar_34743 = (cppVar_34741 == 130);
	BIT_VEC cppVar_34744 = PC + 1;
	cppVar_34744 = (cppVar_34744 & cppMask_un_16_);
	BIT_VEC cppVar_34745 = ROM.rd(cppVar_34744);
	bool cppVar_34747 = (cppVar_34745 == 131);
	BIT_VEC cppVar_34748 = PC + 1;
	cppVar_34748 = (cppVar_34748 & cppMask_un_16_);
	BIT_VEC cppVar_34749 = ROM.rd(cppVar_34748);
	bool cppVar_34751 = (cppVar_34749 == 135);
	BIT_VEC cppVar_34752 = PC + 1;
	cppVar_34752 = (cppVar_34752 & cppMask_un_16_);
	BIT_VEC cppVar_34753 = ROM.rd(cppVar_34752);
	bool cppVar_34755 = (cppVar_34753 == 136);
	BIT_VEC cppVar_34756 = PC + 1;
	cppVar_34756 = (cppVar_34756 & cppMask_un_16_);
	BIT_VEC cppVar_34757 = ROM.rd(cppVar_34756);
	bool cppVar_34759 = (cppVar_34757 == 137);
	BIT_VEC cppVar_34760 = PC + 1;
	cppVar_34760 = (cppVar_34760 & cppMask_un_16_);
	BIT_VEC cppVar_34761 = ROM.rd(cppVar_34760);
	bool cppVar_34763 = (cppVar_34761 == 138);
	BIT_VEC cppVar_34764 = PC + 1;
	cppVar_34764 = (cppVar_34764 & cppMask_un_16_);
	BIT_VEC cppVar_34765 = ROM.rd(cppVar_34764);
	bool cppVar_34767 = (cppVar_34765 == 140);
	BIT_VEC cppVar_34768 = PC + 1;
	cppVar_34768 = (cppVar_34768 & cppMask_un_16_);
	BIT_VEC cppVar_34769 = ROM.rd(cppVar_34768);
	bool cppVar_34771 = (cppVar_34769 == 139);
	BIT_VEC cppVar_34772 = PC + 1;
	cppVar_34772 = (cppVar_34772 & cppMask_un_16_);
	BIT_VEC cppVar_34773 = ROM.rd(cppVar_34772);
	bool cppVar_34775 = (cppVar_34773 == 141);
	BIT_VEC cppVar_34776 = PC + 1;
	cppVar_34776 = (cppVar_34776 & cppMask_un_16_);
	BIT_VEC cppVar_34777 = ROM.rd(cppVar_34776);
	bool cppVar_34779 = (cppVar_34777 == 144);
	BIT_VEC cppVar_34780 = PC + 1;
	cppVar_34780 = (cppVar_34780 & cppMask_un_16_);
	BIT_VEC cppVar_34781 = ROM.rd(cppVar_34780);
	bool cppVar_34783 = (cppVar_34781 == 152);
	BIT_VEC cppVar_34784 = PC + 1;
	cppVar_34784 = (cppVar_34784 & cppMask_un_16_);
	BIT_VEC cppVar_34785 = ROM.rd(cppVar_34784);
	bool cppVar_34787 = (cppVar_34785 == 153);
	BIT_VEC cppVar_34788 = PC + 1;
	cppVar_34788 = (cppVar_34788 & cppMask_un_16_);
	BIT_VEC cppVar_34789 = ROM.rd(cppVar_34788);
	bool cppVar_34791 = (cppVar_34789 == 160);
	BIT_VEC cppVar_34792 = PC + 1;
	cppVar_34792 = (cppVar_34792 & cppMask_un_16_);
	BIT_VEC cppVar_34793 = ROM.rd(cppVar_34792);
	bool cppVar_34795 = (cppVar_34793 == 168);
	BIT_VEC cppVar_34796 = PC + 1;
	cppVar_34796 = (cppVar_34796 & cppMask_un_16_);
	BIT_VEC cppVar_34797 = ROM.rd(cppVar_34796);
	bool cppVar_34799 = (cppVar_34797 == 176);
	BIT_VEC cppVar_34800 = PC + 1;
	cppVar_34800 = (cppVar_34800 & cppMask_un_16_);
	BIT_VEC cppVar_34801 = ROM.rd(cppVar_34800);
	bool cppVar_34803 = (cppVar_34801 == 184);
	BIT_VEC cppVar_34804 = PC + 1;
	cppVar_34804 = (cppVar_34804 & cppMask_un_16_);
	BIT_VEC cppVar_34805 = ROM.rd(cppVar_34804);
	bool cppVar_34807 = (cppVar_34805 == 208);
	BIT_VEC cppVar_34808 = PC + 1;
	cppVar_34808 = (cppVar_34808 & cppMask_un_16_);
	BIT_VEC cppVar_34809 = ROM.rd(cppVar_34808);
	bool cppVar_34811 = (cppVar_34809 == 224);
	BIT_VEC cppVar_34812 = PC + 1;
	cppVar_34812 = (cppVar_34812 & cppMask_un_16_);
	BIT_VEC cppVar_34813 = ROM.rd(cppVar_34812);
	bool cppVar_34815 = (cppVar_34813 == 240);
	BIT_VEC cppVar_34817 = (cppVar_34815) ? B : 0;
	BIT_VEC cppVar_34818 = (cppVar_34811) ? ACC : cppVar_34817;
	BIT_VEC cppVar_34819 = (cppVar_34807) ? PSW : cppVar_34818;
	BIT_VEC cppVar_34820 = (cppVar_34803) ? IP : cppVar_34819;
	BIT_VEC cppVar_34821 = (cppVar_34799) ? P3 : cppVar_34820;
	BIT_VEC cppVar_34822 = (cppVar_34795) ? IE : cppVar_34821;
	BIT_VEC cppVar_34823 = (cppVar_34791) ? P2 : cppVar_34822;
	BIT_VEC cppVar_34824 = (cppVar_34787) ? SBUF : cppVar_34823;
	BIT_VEC cppVar_34825 = (cppVar_34783) ? SCON : cppVar_34824;
	BIT_VEC cppVar_34826 = (cppVar_34779) ? P1 : cppVar_34825;
	BIT_VEC cppVar_34827 = (cppVar_34775) ? TH1 : cppVar_34826;
	BIT_VEC cppVar_34828 = (cppVar_34771) ? TL1 : cppVar_34827;
	BIT_VEC cppVar_34829 = (cppVar_34767) ? TH0 : cppVar_34828;
	BIT_VEC cppVar_34830 = (cppVar_34763) ? TL0 : cppVar_34829;
	BIT_VEC cppVar_34831 = (cppVar_34759) ? TMOD : cppVar_34830;
	BIT_VEC cppVar_34832 = (cppVar_34755) ? TCON : cppVar_34831;
	BIT_VEC cppVar_34833 = (cppVar_34751) ? PCON : cppVar_34832;
	BIT_VEC cppVar_34834 = (cppVar_34747) ? DPH : cppVar_34833;
	BIT_VEC cppVar_34835 = (cppVar_34743) ? DPL : cppVar_34834;
	BIT_VEC cppVar_34836 = (cppVar_34739) ? SP : cppVar_34835;
	BIT_VEC cppVar_34837 = (cppVar_34735) ? P0 : cppVar_34836;
	BIT_VEC cppVar_34838 = (cppVar_34728) ? cppVar_34731 : cppVar_34837;
	BIT_VEC cppVar_34840 = PC + 2;
	cppVar_34840 = (cppVar_34840 & cppMask_un_16_);
	BIT_VEC cppVar_34841 = ROM.rd(cppVar_34840);
	BIT_VEC cppVar_34842 = cppVar_34838 ^ cppVar_34841;
	BIT_VEC cppVar_34843 = (cppVar_34723) ? cppVar_34842 : P2;
	BIT_VEC cppVar_34844 = ROM.rd(PC);
	bool cppVar_34846 = (cppVar_34844 == 98);
	BIT_VEC cppVar_34848 = PC + 1;
	cppVar_34848 = (cppVar_34848 & cppMask_un_16_);
	BIT_VEC cppVar_34849 = ROM.rd(cppVar_34848);
	bool cppVar_34851 = (cppVar_34849 == 160);
	BIT_VEC cppVar_34852 = PC + 1;
	cppVar_34852 = (cppVar_34852 & cppMask_un_16_);
	BIT_VEC cppVar_34853 = ROM.rd(cppVar_34852);
	BIT_VEC cppVar_34854 = (cppVar_34853 >> 7) & cppMask_un_1_;
	bool cppVar_34856 = (cppVar_34854 == 0);
	BIT_VEC cppVar_34857 = PC + 1;
	cppVar_34857 = (cppVar_34857 & cppMask_un_16_);
	BIT_VEC cppVar_34858 = ROM.rd(cppVar_34857);
	BIT_VEC cppVar_34859 = IRAM.rd(cppVar_34858);
	BIT_VEC cppVar_34860 = PC + 1;
	cppVar_34860 = (cppVar_34860 & cppMask_un_16_);
	BIT_VEC cppVar_34861 = ROM.rd(cppVar_34860);
	bool cppVar_34863 = (cppVar_34861 == 128);
	BIT_VEC cppVar_34864 = PC + 1;
	cppVar_34864 = (cppVar_34864 & cppMask_un_16_);
	BIT_VEC cppVar_34865 = ROM.rd(cppVar_34864);
	bool cppVar_34867 = (cppVar_34865 == 129);
	BIT_VEC cppVar_34868 = PC + 1;
	cppVar_34868 = (cppVar_34868 & cppMask_un_16_);
	BIT_VEC cppVar_34869 = ROM.rd(cppVar_34868);
	bool cppVar_34871 = (cppVar_34869 == 130);
	BIT_VEC cppVar_34872 = PC + 1;
	cppVar_34872 = (cppVar_34872 & cppMask_un_16_);
	BIT_VEC cppVar_34873 = ROM.rd(cppVar_34872);
	bool cppVar_34875 = (cppVar_34873 == 131);
	BIT_VEC cppVar_34876 = PC + 1;
	cppVar_34876 = (cppVar_34876 & cppMask_un_16_);
	BIT_VEC cppVar_34877 = ROM.rd(cppVar_34876);
	bool cppVar_34879 = (cppVar_34877 == 135);
	BIT_VEC cppVar_34880 = PC + 1;
	cppVar_34880 = (cppVar_34880 & cppMask_un_16_);
	BIT_VEC cppVar_34881 = ROM.rd(cppVar_34880);
	bool cppVar_34883 = (cppVar_34881 == 136);
	BIT_VEC cppVar_34884 = PC + 1;
	cppVar_34884 = (cppVar_34884 & cppMask_un_16_);
	BIT_VEC cppVar_34885 = ROM.rd(cppVar_34884);
	bool cppVar_34887 = (cppVar_34885 == 137);
	BIT_VEC cppVar_34888 = PC + 1;
	cppVar_34888 = (cppVar_34888 & cppMask_un_16_);
	BIT_VEC cppVar_34889 = ROM.rd(cppVar_34888);
	bool cppVar_34891 = (cppVar_34889 == 138);
	BIT_VEC cppVar_34892 = PC + 1;
	cppVar_34892 = (cppVar_34892 & cppMask_un_16_);
	BIT_VEC cppVar_34893 = ROM.rd(cppVar_34892);
	bool cppVar_34895 = (cppVar_34893 == 140);
	BIT_VEC cppVar_34896 = PC + 1;
	cppVar_34896 = (cppVar_34896 & cppMask_un_16_);
	BIT_VEC cppVar_34897 = ROM.rd(cppVar_34896);
	bool cppVar_34899 = (cppVar_34897 == 139);
	BIT_VEC cppVar_34900 = PC + 1;
	cppVar_34900 = (cppVar_34900 & cppMask_un_16_);
	BIT_VEC cppVar_34901 = ROM.rd(cppVar_34900);
	bool cppVar_34903 = (cppVar_34901 == 141);
	BIT_VEC cppVar_34904 = PC + 1;
	cppVar_34904 = (cppVar_34904 & cppMask_un_16_);
	BIT_VEC cppVar_34905 = ROM.rd(cppVar_34904);
	bool cppVar_34907 = (cppVar_34905 == 144);
	BIT_VEC cppVar_34908 = PC + 1;
	cppVar_34908 = (cppVar_34908 & cppMask_un_16_);
	BIT_VEC cppVar_34909 = ROM.rd(cppVar_34908);
	bool cppVar_34911 = (cppVar_34909 == 152);
	BIT_VEC cppVar_34912 = PC + 1;
	cppVar_34912 = (cppVar_34912 & cppMask_un_16_);
	BIT_VEC cppVar_34913 = ROM.rd(cppVar_34912);
	bool cppVar_34915 = (cppVar_34913 == 153);
	BIT_VEC cppVar_34916 = PC + 1;
	cppVar_34916 = (cppVar_34916 & cppMask_un_16_);
	BIT_VEC cppVar_34917 = ROM.rd(cppVar_34916);
	bool cppVar_34919 = (cppVar_34917 == 160);
	BIT_VEC cppVar_34920 = PC + 1;
	cppVar_34920 = (cppVar_34920 & cppMask_un_16_);
	BIT_VEC cppVar_34921 = ROM.rd(cppVar_34920);
	bool cppVar_34923 = (cppVar_34921 == 168);
	BIT_VEC cppVar_34924 = PC + 1;
	cppVar_34924 = (cppVar_34924 & cppMask_un_16_);
	BIT_VEC cppVar_34925 = ROM.rd(cppVar_34924);
	bool cppVar_34927 = (cppVar_34925 == 176);
	BIT_VEC cppVar_34928 = PC + 1;
	cppVar_34928 = (cppVar_34928 & cppMask_un_16_);
	BIT_VEC cppVar_34929 = ROM.rd(cppVar_34928);
	bool cppVar_34931 = (cppVar_34929 == 184);
	BIT_VEC cppVar_34932 = PC + 1;
	cppVar_34932 = (cppVar_34932 & cppMask_un_16_);
	BIT_VEC cppVar_34933 = ROM.rd(cppVar_34932);
	bool cppVar_34935 = (cppVar_34933 == 208);
	BIT_VEC cppVar_34936 = PC + 1;
	cppVar_34936 = (cppVar_34936 & cppMask_un_16_);
	BIT_VEC cppVar_34937 = ROM.rd(cppVar_34936);
	bool cppVar_34939 = (cppVar_34937 == 224);
	BIT_VEC cppVar_34940 = PC + 1;
	cppVar_34940 = (cppVar_34940 & cppMask_un_16_);
	BIT_VEC cppVar_34941 = ROM.rd(cppVar_34940);
	bool cppVar_34943 = (cppVar_34941 == 240);
	BIT_VEC cppVar_34945 = (cppVar_34943) ? B : 0;
	BIT_VEC cppVar_34946 = (cppVar_34939) ? ACC : cppVar_34945;
	BIT_VEC cppVar_34947 = (cppVar_34935) ? PSW : cppVar_34946;
	BIT_VEC cppVar_34948 = (cppVar_34931) ? IP : cppVar_34947;
	BIT_VEC cppVar_34949 = (cppVar_34927) ? P3 : cppVar_34948;
	BIT_VEC cppVar_34950 = (cppVar_34923) ? IE : cppVar_34949;
	BIT_VEC cppVar_34951 = (cppVar_34919) ? P2 : cppVar_34950;
	BIT_VEC cppVar_34952 = (cppVar_34915) ? SBUF : cppVar_34951;
	BIT_VEC cppVar_34953 = (cppVar_34911) ? SCON : cppVar_34952;
	BIT_VEC cppVar_34954 = (cppVar_34907) ? P1 : cppVar_34953;
	BIT_VEC cppVar_34955 = (cppVar_34903) ? TH1 : cppVar_34954;
	BIT_VEC cppVar_34956 = (cppVar_34899) ? TL1 : cppVar_34955;
	BIT_VEC cppVar_34957 = (cppVar_34895) ? TH0 : cppVar_34956;
	BIT_VEC cppVar_34958 = (cppVar_34891) ? TL0 : cppVar_34957;
	BIT_VEC cppVar_34959 = (cppVar_34887) ? TMOD : cppVar_34958;
	BIT_VEC cppVar_34960 = (cppVar_34883) ? TCON : cppVar_34959;
	BIT_VEC cppVar_34961 = (cppVar_34879) ? PCON : cppVar_34960;
	BIT_VEC cppVar_34962 = (cppVar_34875) ? DPH : cppVar_34961;
	BIT_VEC cppVar_34963 = (cppVar_34871) ? DPL : cppVar_34962;
	BIT_VEC cppVar_34964 = (cppVar_34867) ? SP : cppVar_34963;
	BIT_VEC cppVar_34965 = (cppVar_34863) ? P0 : cppVar_34964;
	BIT_VEC cppVar_34966 = (cppVar_34856) ? cppVar_34859 : cppVar_34965;
	BIT_VEC cppVar_34967 = cppVar_34966 ^ ACC;
	BIT_VEC cppVar_34968 = (cppVar_34851) ? cppVar_34967 : P2;
	BIT_VEC cppVar_34969 = ROM.rd(PC);
	bool cppVar_34971 = (cppVar_34969 == 83);
	BIT_VEC cppVar_34973 = PC + 1;
	cppVar_34973 = (cppVar_34973 & cppMask_un_16_);
	BIT_VEC cppVar_34974 = ROM.rd(cppVar_34973);
	bool cppVar_34976 = (cppVar_34974 == 160);
	BIT_VEC cppVar_34977 = PC + 1;
	cppVar_34977 = (cppVar_34977 & cppMask_un_16_);
	BIT_VEC cppVar_34978 = ROM.rd(cppVar_34977);
	BIT_VEC cppVar_34979 = (cppVar_34978 >> 7) & cppMask_un_1_;
	bool cppVar_34981 = (cppVar_34979 == 0);
	BIT_VEC cppVar_34982 = PC + 1;
	cppVar_34982 = (cppVar_34982 & cppMask_un_16_);
	BIT_VEC cppVar_34983 = ROM.rd(cppVar_34982);
	BIT_VEC cppVar_34984 = IRAM.rd(cppVar_34983);
	BIT_VEC cppVar_34985 = PC + 1;
	cppVar_34985 = (cppVar_34985 & cppMask_un_16_);
	BIT_VEC cppVar_34986 = ROM.rd(cppVar_34985);
	bool cppVar_34988 = (cppVar_34986 == 128);
	BIT_VEC cppVar_34989 = PC + 1;
	cppVar_34989 = (cppVar_34989 & cppMask_un_16_);
	BIT_VEC cppVar_34990 = ROM.rd(cppVar_34989);
	bool cppVar_34992 = (cppVar_34990 == 129);
	BIT_VEC cppVar_34993 = PC + 1;
	cppVar_34993 = (cppVar_34993 & cppMask_un_16_);
	BIT_VEC cppVar_34994 = ROM.rd(cppVar_34993);
	bool cppVar_34996 = (cppVar_34994 == 130);
	BIT_VEC cppVar_34997 = PC + 1;
	cppVar_34997 = (cppVar_34997 & cppMask_un_16_);
	BIT_VEC cppVar_34998 = ROM.rd(cppVar_34997);
	bool cppVar_35000 = (cppVar_34998 == 131);
	BIT_VEC cppVar_35001 = PC + 1;
	cppVar_35001 = (cppVar_35001 & cppMask_un_16_);
	BIT_VEC cppVar_35002 = ROM.rd(cppVar_35001);
	bool cppVar_35004 = (cppVar_35002 == 135);
	BIT_VEC cppVar_35005 = PC + 1;
	cppVar_35005 = (cppVar_35005 & cppMask_un_16_);
	BIT_VEC cppVar_35006 = ROM.rd(cppVar_35005);
	bool cppVar_35008 = (cppVar_35006 == 136);
	BIT_VEC cppVar_35009 = PC + 1;
	cppVar_35009 = (cppVar_35009 & cppMask_un_16_);
	BIT_VEC cppVar_35010 = ROM.rd(cppVar_35009);
	bool cppVar_35012 = (cppVar_35010 == 137);
	BIT_VEC cppVar_35013 = PC + 1;
	cppVar_35013 = (cppVar_35013 & cppMask_un_16_);
	BIT_VEC cppVar_35014 = ROM.rd(cppVar_35013);
	bool cppVar_35016 = (cppVar_35014 == 138);
	BIT_VEC cppVar_35017 = PC + 1;
	cppVar_35017 = (cppVar_35017 & cppMask_un_16_);
	BIT_VEC cppVar_35018 = ROM.rd(cppVar_35017);
	bool cppVar_35020 = (cppVar_35018 == 140);
	BIT_VEC cppVar_35021 = PC + 1;
	cppVar_35021 = (cppVar_35021 & cppMask_un_16_);
	BIT_VEC cppVar_35022 = ROM.rd(cppVar_35021);
	bool cppVar_35024 = (cppVar_35022 == 139);
	BIT_VEC cppVar_35025 = PC + 1;
	cppVar_35025 = (cppVar_35025 & cppMask_un_16_);
	BIT_VEC cppVar_35026 = ROM.rd(cppVar_35025);
	bool cppVar_35028 = (cppVar_35026 == 141);
	BIT_VEC cppVar_35029 = PC + 1;
	cppVar_35029 = (cppVar_35029 & cppMask_un_16_);
	BIT_VEC cppVar_35030 = ROM.rd(cppVar_35029);
	bool cppVar_35032 = (cppVar_35030 == 144);
	BIT_VEC cppVar_35033 = PC + 1;
	cppVar_35033 = (cppVar_35033 & cppMask_un_16_);
	BIT_VEC cppVar_35034 = ROM.rd(cppVar_35033);
	bool cppVar_35036 = (cppVar_35034 == 152);
	BIT_VEC cppVar_35037 = PC + 1;
	cppVar_35037 = (cppVar_35037 & cppMask_un_16_);
	BIT_VEC cppVar_35038 = ROM.rd(cppVar_35037);
	bool cppVar_35040 = (cppVar_35038 == 153);
	BIT_VEC cppVar_35041 = PC + 1;
	cppVar_35041 = (cppVar_35041 & cppMask_un_16_);
	BIT_VEC cppVar_35042 = ROM.rd(cppVar_35041);
	bool cppVar_35044 = (cppVar_35042 == 160);
	BIT_VEC cppVar_35045 = PC + 1;
	cppVar_35045 = (cppVar_35045 & cppMask_un_16_);
	BIT_VEC cppVar_35046 = ROM.rd(cppVar_35045);
	bool cppVar_35048 = (cppVar_35046 == 168);
	BIT_VEC cppVar_35049 = PC + 1;
	cppVar_35049 = (cppVar_35049 & cppMask_un_16_);
	BIT_VEC cppVar_35050 = ROM.rd(cppVar_35049);
	bool cppVar_35052 = (cppVar_35050 == 176);
	BIT_VEC cppVar_35053 = PC + 1;
	cppVar_35053 = (cppVar_35053 & cppMask_un_16_);
	BIT_VEC cppVar_35054 = ROM.rd(cppVar_35053);
	bool cppVar_35056 = (cppVar_35054 == 184);
	BIT_VEC cppVar_35057 = PC + 1;
	cppVar_35057 = (cppVar_35057 & cppMask_un_16_);
	BIT_VEC cppVar_35058 = ROM.rd(cppVar_35057);
	bool cppVar_35060 = (cppVar_35058 == 208);
	BIT_VEC cppVar_35061 = PC + 1;
	cppVar_35061 = (cppVar_35061 & cppMask_un_16_);
	BIT_VEC cppVar_35062 = ROM.rd(cppVar_35061);
	bool cppVar_35064 = (cppVar_35062 == 224);
	BIT_VEC cppVar_35065 = PC + 1;
	cppVar_35065 = (cppVar_35065 & cppMask_un_16_);
	BIT_VEC cppVar_35066 = ROM.rd(cppVar_35065);
	bool cppVar_35068 = (cppVar_35066 == 240);
	BIT_VEC cppVar_35070 = (cppVar_35068) ? B : 0;
	BIT_VEC cppVar_35071 = (cppVar_35064) ? ACC : cppVar_35070;
	BIT_VEC cppVar_35072 = (cppVar_35060) ? PSW : cppVar_35071;
	BIT_VEC cppVar_35073 = (cppVar_35056) ? IP : cppVar_35072;
	BIT_VEC cppVar_35074 = (cppVar_35052) ? P3 : cppVar_35073;
	BIT_VEC cppVar_35075 = (cppVar_35048) ? IE : cppVar_35074;
	BIT_VEC cppVar_35076 = (cppVar_35044) ? P2 : cppVar_35075;
	BIT_VEC cppVar_35077 = (cppVar_35040) ? SBUF : cppVar_35076;
	BIT_VEC cppVar_35078 = (cppVar_35036) ? SCON : cppVar_35077;
	BIT_VEC cppVar_35079 = (cppVar_35032) ? P1 : cppVar_35078;
	BIT_VEC cppVar_35080 = (cppVar_35028) ? TH1 : cppVar_35079;
	BIT_VEC cppVar_35081 = (cppVar_35024) ? TL1 : cppVar_35080;
	BIT_VEC cppVar_35082 = (cppVar_35020) ? TH0 : cppVar_35081;
	BIT_VEC cppVar_35083 = (cppVar_35016) ? TL0 : cppVar_35082;
	BIT_VEC cppVar_35084 = (cppVar_35012) ? TMOD : cppVar_35083;
	BIT_VEC cppVar_35085 = (cppVar_35008) ? TCON : cppVar_35084;
	BIT_VEC cppVar_35086 = (cppVar_35004) ? PCON : cppVar_35085;
	BIT_VEC cppVar_35087 = (cppVar_35000) ? DPH : cppVar_35086;
	BIT_VEC cppVar_35088 = (cppVar_34996) ? DPL : cppVar_35087;
	BIT_VEC cppVar_35089 = (cppVar_34992) ? SP : cppVar_35088;
	BIT_VEC cppVar_35090 = (cppVar_34988) ? P0 : cppVar_35089;
	BIT_VEC cppVar_35091 = (cppVar_34981) ? cppVar_34984 : cppVar_35090;
	BIT_VEC cppVar_35093 = PC + 2;
	cppVar_35093 = (cppVar_35093 & cppMask_un_16_);
	BIT_VEC cppVar_35094 = ROM.rd(cppVar_35093);
	BIT_VEC cppVar_35095 = cppVar_35091 & cppVar_35094;
	BIT_VEC cppVar_35096 = (cppVar_34976) ? cppVar_35095 : P2;
	BIT_VEC cppVar_35097 = ROM.rd(PC);
	bool cppVar_35099 = (cppVar_35097 == 82);
	BIT_VEC cppVar_35101 = PC + 1;
	cppVar_35101 = (cppVar_35101 & cppMask_un_16_);
	BIT_VEC cppVar_35102 = ROM.rd(cppVar_35101);
	bool cppVar_35104 = (cppVar_35102 == 160);
	BIT_VEC cppVar_35105 = PC + 1;
	cppVar_35105 = (cppVar_35105 & cppMask_un_16_);
	BIT_VEC cppVar_35106 = ROM.rd(cppVar_35105);
	BIT_VEC cppVar_35107 = (cppVar_35106 >> 7) & cppMask_un_1_;
	bool cppVar_35109 = (cppVar_35107 == 0);
	BIT_VEC cppVar_35110 = PC + 1;
	cppVar_35110 = (cppVar_35110 & cppMask_un_16_);
	BIT_VEC cppVar_35111 = ROM.rd(cppVar_35110);
	BIT_VEC cppVar_35112 = IRAM.rd(cppVar_35111);
	BIT_VEC cppVar_35113 = PC + 1;
	cppVar_35113 = (cppVar_35113 & cppMask_un_16_);
	BIT_VEC cppVar_35114 = ROM.rd(cppVar_35113);
	bool cppVar_35116 = (cppVar_35114 == 128);
	BIT_VEC cppVar_35117 = PC + 1;
	cppVar_35117 = (cppVar_35117 & cppMask_un_16_);
	BIT_VEC cppVar_35118 = ROM.rd(cppVar_35117);
	bool cppVar_35120 = (cppVar_35118 == 129);
	BIT_VEC cppVar_35121 = PC + 1;
	cppVar_35121 = (cppVar_35121 & cppMask_un_16_);
	BIT_VEC cppVar_35122 = ROM.rd(cppVar_35121);
	bool cppVar_35124 = (cppVar_35122 == 130);
	BIT_VEC cppVar_35125 = PC + 1;
	cppVar_35125 = (cppVar_35125 & cppMask_un_16_);
	BIT_VEC cppVar_35126 = ROM.rd(cppVar_35125);
	bool cppVar_35128 = (cppVar_35126 == 131);
	BIT_VEC cppVar_35129 = PC + 1;
	cppVar_35129 = (cppVar_35129 & cppMask_un_16_);
	BIT_VEC cppVar_35130 = ROM.rd(cppVar_35129);
	bool cppVar_35132 = (cppVar_35130 == 135);
	BIT_VEC cppVar_35133 = PC + 1;
	cppVar_35133 = (cppVar_35133 & cppMask_un_16_);
	BIT_VEC cppVar_35134 = ROM.rd(cppVar_35133);
	bool cppVar_35136 = (cppVar_35134 == 136);
	BIT_VEC cppVar_35137 = PC + 1;
	cppVar_35137 = (cppVar_35137 & cppMask_un_16_);
	BIT_VEC cppVar_35138 = ROM.rd(cppVar_35137);
	bool cppVar_35140 = (cppVar_35138 == 137);
	BIT_VEC cppVar_35141 = PC + 1;
	cppVar_35141 = (cppVar_35141 & cppMask_un_16_);
	BIT_VEC cppVar_35142 = ROM.rd(cppVar_35141);
	bool cppVar_35144 = (cppVar_35142 == 138);
	BIT_VEC cppVar_35145 = PC + 1;
	cppVar_35145 = (cppVar_35145 & cppMask_un_16_);
	BIT_VEC cppVar_35146 = ROM.rd(cppVar_35145);
	bool cppVar_35148 = (cppVar_35146 == 140);
	BIT_VEC cppVar_35149 = PC + 1;
	cppVar_35149 = (cppVar_35149 & cppMask_un_16_);
	BIT_VEC cppVar_35150 = ROM.rd(cppVar_35149);
	bool cppVar_35152 = (cppVar_35150 == 139);
	BIT_VEC cppVar_35153 = PC + 1;
	cppVar_35153 = (cppVar_35153 & cppMask_un_16_);
	BIT_VEC cppVar_35154 = ROM.rd(cppVar_35153);
	bool cppVar_35156 = (cppVar_35154 == 141);
	BIT_VEC cppVar_35157 = PC + 1;
	cppVar_35157 = (cppVar_35157 & cppMask_un_16_);
	BIT_VEC cppVar_35158 = ROM.rd(cppVar_35157);
	bool cppVar_35160 = (cppVar_35158 == 144);
	BIT_VEC cppVar_35161 = PC + 1;
	cppVar_35161 = (cppVar_35161 & cppMask_un_16_);
	BIT_VEC cppVar_35162 = ROM.rd(cppVar_35161);
	bool cppVar_35164 = (cppVar_35162 == 152);
	BIT_VEC cppVar_35165 = PC + 1;
	cppVar_35165 = (cppVar_35165 & cppMask_un_16_);
	BIT_VEC cppVar_35166 = ROM.rd(cppVar_35165);
	bool cppVar_35168 = (cppVar_35166 == 153);
	BIT_VEC cppVar_35169 = PC + 1;
	cppVar_35169 = (cppVar_35169 & cppMask_un_16_);
	BIT_VEC cppVar_35170 = ROM.rd(cppVar_35169);
	bool cppVar_35172 = (cppVar_35170 == 160);
	BIT_VEC cppVar_35173 = PC + 1;
	cppVar_35173 = (cppVar_35173 & cppMask_un_16_);
	BIT_VEC cppVar_35174 = ROM.rd(cppVar_35173);
	bool cppVar_35176 = (cppVar_35174 == 168);
	BIT_VEC cppVar_35177 = PC + 1;
	cppVar_35177 = (cppVar_35177 & cppMask_un_16_);
	BIT_VEC cppVar_35178 = ROM.rd(cppVar_35177);
	bool cppVar_35180 = (cppVar_35178 == 176);
	BIT_VEC cppVar_35181 = PC + 1;
	cppVar_35181 = (cppVar_35181 & cppMask_un_16_);
	BIT_VEC cppVar_35182 = ROM.rd(cppVar_35181);
	bool cppVar_35184 = (cppVar_35182 == 184);
	BIT_VEC cppVar_35185 = PC + 1;
	cppVar_35185 = (cppVar_35185 & cppMask_un_16_);
	BIT_VEC cppVar_35186 = ROM.rd(cppVar_35185);
	bool cppVar_35188 = (cppVar_35186 == 208);
	BIT_VEC cppVar_35189 = PC + 1;
	cppVar_35189 = (cppVar_35189 & cppMask_un_16_);
	BIT_VEC cppVar_35190 = ROM.rd(cppVar_35189);
	bool cppVar_35192 = (cppVar_35190 == 224);
	BIT_VEC cppVar_35193 = PC + 1;
	cppVar_35193 = (cppVar_35193 & cppMask_un_16_);
	BIT_VEC cppVar_35194 = ROM.rd(cppVar_35193);
	bool cppVar_35196 = (cppVar_35194 == 240);
	BIT_VEC cppVar_35198 = (cppVar_35196) ? B : 0;
	BIT_VEC cppVar_35199 = (cppVar_35192) ? ACC : cppVar_35198;
	BIT_VEC cppVar_35200 = (cppVar_35188) ? PSW : cppVar_35199;
	BIT_VEC cppVar_35201 = (cppVar_35184) ? IP : cppVar_35200;
	BIT_VEC cppVar_35202 = (cppVar_35180) ? P3 : cppVar_35201;
	BIT_VEC cppVar_35203 = (cppVar_35176) ? IE : cppVar_35202;
	BIT_VEC cppVar_35204 = (cppVar_35172) ? P2 : cppVar_35203;
	BIT_VEC cppVar_35205 = (cppVar_35168) ? SBUF : cppVar_35204;
	BIT_VEC cppVar_35206 = (cppVar_35164) ? SCON : cppVar_35205;
	BIT_VEC cppVar_35207 = (cppVar_35160) ? P1 : cppVar_35206;
	BIT_VEC cppVar_35208 = (cppVar_35156) ? TH1 : cppVar_35207;
	BIT_VEC cppVar_35209 = (cppVar_35152) ? TL1 : cppVar_35208;
	BIT_VEC cppVar_35210 = (cppVar_35148) ? TH0 : cppVar_35209;
	BIT_VEC cppVar_35211 = (cppVar_35144) ? TL0 : cppVar_35210;
	BIT_VEC cppVar_35212 = (cppVar_35140) ? TMOD : cppVar_35211;
	BIT_VEC cppVar_35213 = (cppVar_35136) ? TCON : cppVar_35212;
	BIT_VEC cppVar_35214 = (cppVar_35132) ? PCON : cppVar_35213;
	BIT_VEC cppVar_35215 = (cppVar_35128) ? DPH : cppVar_35214;
	BIT_VEC cppVar_35216 = (cppVar_35124) ? DPL : cppVar_35215;
	BIT_VEC cppVar_35217 = (cppVar_35120) ? SP : cppVar_35216;
	BIT_VEC cppVar_35218 = (cppVar_35116) ? P0 : cppVar_35217;
	BIT_VEC cppVar_35219 = (cppVar_35109) ? cppVar_35112 : cppVar_35218;
	BIT_VEC cppVar_35220 = cppVar_35219 & ACC;
	BIT_VEC cppVar_35221 = (cppVar_35104) ? cppVar_35220 : P2;
	BIT_VEC cppVar_35222 = ROM.rd(PC);
	bool cppVar_35224 = (cppVar_35222 == 67);
	BIT_VEC cppVar_35226 = PC + 1;
	cppVar_35226 = (cppVar_35226 & cppMask_un_16_);
	BIT_VEC cppVar_35227 = ROM.rd(cppVar_35226);
	bool cppVar_35229 = (cppVar_35227 == 160);
	BIT_VEC cppVar_35230 = PC + 1;
	cppVar_35230 = (cppVar_35230 & cppMask_un_16_);
	BIT_VEC cppVar_35231 = ROM.rd(cppVar_35230);
	BIT_VEC cppVar_35232 = (cppVar_35231 >> 7) & cppMask_un_1_;
	bool cppVar_35234 = (cppVar_35232 == 0);
	BIT_VEC cppVar_35235 = PC + 1;
	cppVar_35235 = (cppVar_35235 & cppMask_un_16_);
	BIT_VEC cppVar_35236 = ROM.rd(cppVar_35235);
	BIT_VEC cppVar_35237 = IRAM.rd(cppVar_35236);
	BIT_VEC cppVar_35238 = PC + 1;
	cppVar_35238 = (cppVar_35238 & cppMask_un_16_);
	BIT_VEC cppVar_35239 = ROM.rd(cppVar_35238);
	bool cppVar_35241 = (cppVar_35239 == 128);
	BIT_VEC cppVar_35242 = PC + 1;
	cppVar_35242 = (cppVar_35242 & cppMask_un_16_);
	BIT_VEC cppVar_35243 = ROM.rd(cppVar_35242);
	bool cppVar_35245 = (cppVar_35243 == 129);
	BIT_VEC cppVar_35246 = PC + 1;
	cppVar_35246 = (cppVar_35246 & cppMask_un_16_);
	BIT_VEC cppVar_35247 = ROM.rd(cppVar_35246);
	bool cppVar_35249 = (cppVar_35247 == 130);
	BIT_VEC cppVar_35250 = PC + 1;
	cppVar_35250 = (cppVar_35250 & cppMask_un_16_);
	BIT_VEC cppVar_35251 = ROM.rd(cppVar_35250);
	bool cppVar_35253 = (cppVar_35251 == 131);
	BIT_VEC cppVar_35254 = PC + 1;
	cppVar_35254 = (cppVar_35254 & cppMask_un_16_);
	BIT_VEC cppVar_35255 = ROM.rd(cppVar_35254);
	bool cppVar_35257 = (cppVar_35255 == 135);
	BIT_VEC cppVar_35258 = PC + 1;
	cppVar_35258 = (cppVar_35258 & cppMask_un_16_);
	BIT_VEC cppVar_35259 = ROM.rd(cppVar_35258);
	bool cppVar_35261 = (cppVar_35259 == 136);
	BIT_VEC cppVar_35262 = PC + 1;
	cppVar_35262 = (cppVar_35262 & cppMask_un_16_);
	BIT_VEC cppVar_35263 = ROM.rd(cppVar_35262);
	bool cppVar_35265 = (cppVar_35263 == 137);
	BIT_VEC cppVar_35266 = PC + 1;
	cppVar_35266 = (cppVar_35266 & cppMask_un_16_);
	BIT_VEC cppVar_35267 = ROM.rd(cppVar_35266);
	bool cppVar_35269 = (cppVar_35267 == 138);
	BIT_VEC cppVar_35270 = PC + 1;
	cppVar_35270 = (cppVar_35270 & cppMask_un_16_);
	BIT_VEC cppVar_35271 = ROM.rd(cppVar_35270);
	bool cppVar_35273 = (cppVar_35271 == 140);
	BIT_VEC cppVar_35274 = PC + 1;
	cppVar_35274 = (cppVar_35274 & cppMask_un_16_);
	BIT_VEC cppVar_35275 = ROM.rd(cppVar_35274);
	bool cppVar_35277 = (cppVar_35275 == 139);
	BIT_VEC cppVar_35278 = PC + 1;
	cppVar_35278 = (cppVar_35278 & cppMask_un_16_);
	BIT_VEC cppVar_35279 = ROM.rd(cppVar_35278);
	bool cppVar_35281 = (cppVar_35279 == 141);
	BIT_VEC cppVar_35282 = PC + 1;
	cppVar_35282 = (cppVar_35282 & cppMask_un_16_);
	BIT_VEC cppVar_35283 = ROM.rd(cppVar_35282);
	bool cppVar_35285 = (cppVar_35283 == 144);
	BIT_VEC cppVar_35286 = PC + 1;
	cppVar_35286 = (cppVar_35286 & cppMask_un_16_);
	BIT_VEC cppVar_35287 = ROM.rd(cppVar_35286);
	bool cppVar_35289 = (cppVar_35287 == 152);
	BIT_VEC cppVar_35290 = PC + 1;
	cppVar_35290 = (cppVar_35290 & cppMask_un_16_);
	BIT_VEC cppVar_35291 = ROM.rd(cppVar_35290);
	bool cppVar_35293 = (cppVar_35291 == 153);
	BIT_VEC cppVar_35294 = PC + 1;
	cppVar_35294 = (cppVar_35294 & cppMask_un_16_);
	BIT_VEC cppVar_35295 = ROM.rd(cppVar_35294);
	bool cppVar_35297 = (cppVar_35295 == 160);
	BIT_VEC cppVar_35298 = PC + 1;
	cppVar_35298 = (cppVar_35298 & cppMask_un_16_);
	BIT_VEC cppVar_35299 = ROM.rd(cppVar_35298);
	bool cppVar_35301 = (cppVar_35299 == 168);
	BIT_VEC cppVar_35302 = PC + 1;
	cppVar_35302 = (cppVar_35302 & cppMask_un_16_);
	BIT_VEC cppVar_35303 = ROM.rd(cppVar_35302);
	bool cppVar_35305 = (cppVar_35303 == 176);
	BIT_VEC cppVar_35306 = PC + 1;
	cppVar_35306 = (cppVar_35306 & cppMask_un_16_);
	BIT_VEC cppVar_35307 = ROM.rd(cppVar_35306);
	bool cppVar_35309 = (cppVar_35307 == 184);
	BIT_VEC cppVar_35310 = PC + 1;
	cppVar_35310 = (cppVar_35310 & cppMask_un_16_);
	BIT_VEC cppVar_35311 = ROM.rd(cppVar_35310);
	bool cppVar_35313 = (cppVar_35311 == 208);
	BIT_VEC cppVar_35314 = PC + 1;
	cppVar_35314 = (cppVar_35314 & cppMask_un_16_);
	BIT_VEC cppVar_35315 = ROM.rd(cppVar_35314);
	bool cppVar_35317 = (cppVar_35315 == 224);
	BIT_VEC cppVar_35318 = PC + 1;
	cppVar_35318 = (cppVar_35318 & cppMask_un_16_);
	BIT_VEC cppVar_35319 = ROM.rd(cppVar_35318);
	bool cppVar_35321 = (cppVar_35319 == 240);
	BIT_VEC cppVar_35323 = (cppVar_35321) ? B : 0;
	BIT_VEC cppVar_35324 = (cppVar_35317) ? ACC : cppVar_35323;
	BIT_VEC cppVar_35325 = (cppVar_35313) ? PSW : cppVar_35324;
	BIT_VEC cppVar_35326 = (cppVar_35309) ? IP : cppVar_35325;
	BIT_VEC cppVar_35327 = (cppVar_35305) ? P3 : cppVar_35326;
	BIT_VEC cppVar_35328 = (cppVar_35301) ? IE : cppVar_35327;
	BIT_VEC cppVar_35329 = (cppVar_35297) ? P2 : cppVar_35328;
	BIT_VEC cppVar_35330 = (cppVar_35293) ? SBUF : cppVar_35329;
	BIT_VEC cppVar_35331 = (cppVar_35289) ? SCON : cppVar_35330;
	BIT_VEC cppVar_35332 = (cppVar_35285) ? P1 : cppVar_35331;
	BIT_VEC cppVar_35333 = (cppVar_35281) ? TH1 : cppVar_35332;
	BIT_VEC cppVar_35334 = (cppVar_35277) ? TL1 : cppVar_35333;
	BIT_VEC cppVar_35335 = (cppVar_35273) ? TH0 : cppVar_35334;
	BIT_VEC cppVar_35336 = (cppVar_35269) ? TL0 : cppVar_35335;
	BIT_VEC cppVar_35337 = (cppVar_35265) ? TMOD : cppVar_35336;
	BIT_VEC cppVar_35338 = (cppVar_35261) ? TCON : cppVar_35337;
	BIT_VEC cppVar_35339 = (cppVar_35257) ? PCON : cppVar_35338;
	BIT_VEC cppVar_35340 = (cppVar_35253) ? DPH : cppVar_35339;
	BIT_VEC cppVar_35341 = (cppVar_35249) ? DPL : cppVar_35340;
	BIT_VEC cppVar_35342 = (cppVar_35245) ? SP : cppVar_35341;
	BIT_VEC cppVar_35343 = (cppVar_35241) ? P0 : cppVar_35342;
	BIT_VEC cppVar_35344 = (cppVar_35234) ? cppVar_35237 : cppVar_35343;
	BIT_VEC cppVar_35346 = PC + 2;
	cppVar_35346 = (cppVar_35346 & cppMask_un_16_);
	BIT_VEC cppVar_35347 = ROM.rd(cppVar_35346);
	BIT_VEC cppVar_35348 = cppVar_35344 | cppVar_35347;
	BIT_VEC cppVar_35349 = (cppVar_35229) ? cppVar_35348 : P2;
	BIT_VEC cppVar_35350 = ROM.rd(PC);
	bool cppVar_35352 = (cppVar_35350 == 66);
	BIT_VEC cppVar_35354 = PC + 1;
	cppVar_35354 = (cppVar_35354 & cppMask_un_16_);
	BIT_VEC cppVar_35355 = ROM.rd(cppVar_35354);
	bool cppVar_35357 = (cppVar_35355 == 160);
	BIT_VEC cppVar_35358 = PC + 1;
	cppVar_35358 = (cppVar_35358 & cppMask_un_16_);
	BIT_VEC cppVar_35359 = ROM.rd(cppVar_35358);
	BIT_VEC cppVar_35360 = (cppVar_35359 >> 7) & cppMask_un_1_;
	bool cppVar_35362 = (cppVar_35360 == 0);
	BIT_VEC cppVar_35363 = PC + 1;
	cppVar_35363 = (cppVar_35363 & cppMask_un_16_);
	BIT_VEC cppVar_35364 = ROM.rd(cppVar_35363);
	BIT_VEC cppVar_35365 = IRAM.rd(cppVar_35364);
	BIT_VEC cppVar_35366 = PC + 1;
	cppVar_35366 = (cppVar_35366 & cppMask_un_16_);
	BIT_VEC cppVar_35367 = ROM.rd(cppVar_35366);
	bool cppVar_35369 = (cppVar_35367 == 128);
	BIT_VEC cppVar_35370 = PC + 1;
	cppVar_35370 = (cppVar_35370 & cppMask_un_16_);
	BIT_VEC cppVar_35371 = ROM.rd(cppVar_35370);
	bool cppVar_35373 = (cppVar_35371 == 129);
	BIT_VEC cppVar_35374 = PC + 1;
	cppVar_35374 = (cppVar_35374 & cppMask_un_16_);
	BIT_VEC cppVar_35375 = ROM.rd(cppVar_35374);
	bool cppVar_35377 = (cppVar_35375 == 130);
	BIT_VEC cppVar_35378 = PC + 1;
	cppVar_35378 = (cppVar_35378 & cppMask_un_16_);
	BIT_VEC cppVar_35379 = ROM.rd(cppVar_35378);
	bool cppVar_35381 = (cppVar_35379 == 131);
	BIT_VEC cppVar_35382 = PC + 1;
	cppVar_35382 = (cppVar_35382 & cppMask_un_16_);
	BIT_VEC cppVar_35383 = ROM.rd(cppVar_35382);
	bool cppVar_35385 = (cppVar_35383 == 135);
	BIT_VEC cppVar_35386 = PC + 1;
	cppVar_35386 = (cppVar_35386 & cppMask_un_16_);
	BIT_VEC cppVar_35387 = ROM.rd(cppVar_35386);
	bool cppVar_35389 = (cppVar_35387 == 136);
	BIT_VEC cppVar_35390 = PC + 1;
	cppVar_35390 = (cppVar_35390 & cppMask_un_16_);
	BIT_VEC cppVar_35391 = ROM.rd(cppVar_35390);
	bool cppVar_35393 = (cppVar_35391 == 137);
	BIT_VEC cppVar_35394 = PC + 1;
	cppVar_35394 = (cppVar_35394 & cppMask_un_16_);
	BIT_VEC cppVar_35395 = ROM.rd(cppVar_35394);
	bool cppVar_35397 = (cppVar_35395 == 138);
	BIT_VEC cppVar_35398 = PC + 1;
	cppVar_35398 = (cppVar_35398 & cppMask_un_16_);
	BIT_VEC cppVar_35399 = ROM.rd(cppVar_35398);
	bool cppVar_35401 = (cppVar_35399 == 140);
	BIT_VEC cppVar_35402 = PC + 1;
	cppVar_35402 = (cppVar_35402 & cppMask_un_16_);
	BIT_VEC cppVar_35403 = ROM.rd(cppVar_35402);
	bool cppVar_35405 = (cppVar_35403 == 139);
	BIT_VEC cppVar_35406 = PC + 1;
	cppVar_35406 = (cppVar_35406 & cppMask_un_16_);
	BIT_VEC cppVar_35407 = ROM.rd(cppVar_35406);
	bool cppVar_35409 = (cppVar_35407 == 141);
	BIT_VEC cppVar_35410 = PC + 1;
	cppVar_35410 = (cppVar_35410 & cppMask_un_16_);
	BIT_VEC cppVar_35411 = ROM.rd(cppVar_35410);
	bool cppVar_35413 = (cppVar_35411 == 144);
	BIT_VEC cppVar_35414 = PC + 1;
	cppVar_35414 = (cppVar_35414 & cppMask_un_16_);
	BIT_VEC cppVar_35415 = ROM.rd(cppVar_35414);
	bool cppVar_35417 = (cppVar_35415 == 152);
	BIT_VEC cppVar_35418 = PC + 1;
	cppVar_35418 = (cppVar_35418 & cppMask_un_16_);
	BIT_VEC cppVar_35419 = ROM.rd(cppVar_35418);
	bool cppVar_35421 = (cppVar_35419 == 153);
	BIT_VEC cppVar_35422 = PC + 1;
	cppVar_35422 = (cppVar_35422 & cppMask_un_16_);
	BIT_VEC cppVar_35423 = ROM.rd(cppVar_35422);
	bool cppVar_35425 = (cppVar_35423 == 160);
	BIT_VEC cppVar_35426 = PC + 1;
	cppVar_35426 = (cppVar_35426 & cppMask_un_16_);
	BIT_VEC cppVar_35427 = ROM.rd(cppVar_35426);
	bool cppVar_35429 = (cppVar_35427 == 168);
	BIT_VEC cppVar_35430 = PC + 1;
	cppVar_35430 = (cppVar_35430 & cppMask_un_16_);
	BIT_VEC cppVar_35431 = ROM.rd(cppVar_35430);
	bool cppVar_35433 = (cppVar_35431 == 176);
	BIT_VEC cppVar_35434 = PC + 1;
	cppVar_35434 = (cppVar_35434 & cppMask_un_16_);
	BIT_VEC cppVar_35435 = ROM.rd(cppVar_35434);
	bool cppVar_35437 = (cppVar_35435 == 184);
	BIT_VEC cppVar_35438 = PC + 1;
	cppVar_35438 = (cppVar_35438 & cppMask_un_16_);
	BIT_VEC cppVar_35439 = ROM.rd(cppVar_35438);
	bool cppVar_35441 = (cppVar_35439 == 208);
	BIT_VEC cppVar_35442 = PC + 1;
	cppVar_35442 = (cppVar_35442 & cppMask_un_16_);
	BIT_VEC cppVar_35443 = ROM.rd(cppVar_35442);
	bool cppVar_35445 = (cppVar_35443 == 224);
	BIT_VEC cppVar_35446 = PC + 1;
	cppVar_35446 = (cppVar_35446 & cppMask_un_16_);
	BIT_VEC cppVar_35447 = ROM.rd(cppVar_35446);
	bool cppVar_35449 = (cppVar_35447 == 240);
	BIT_VEC cppVar_35451 = (cppVar_35449) ? B : 0;
	BIT_VEC cppVar_35452 = (cppVar_35445) ? ACC : cppVar_35451;
	BIT_VEC cppVar_35453 = (cppVar_35441) ? PSW : cppVar_35452;
	BIT_VEC cppVar_35454 = (cppVar_35437) ? IP : cppVar_35453;
	BIT_VEC cppVar_35455 = (cppVar_35433) ? P3 : cppVar_35454;
	BIT_VEC cppVar_35456 = (cppVar_35429) ? IE : cppVar_35455;
	BIT_VEC cppVar_35457 = (cppVar_35425) ? P2 : cppVar_35456;
	BIT_VEC cppVar_35458 = (cppVar_35421) ? SBUF : cppVar_35457;
	BIT_VEC cppVar_35459 = (cppVar_35417) ? SCON : cppVar_35458;
	BIT_VEC cppVar_35460 = (cppVar_35413) ? P1 : cppVar_35459;
	BIT_VEC cppVar_35461 = (cppVar_35409) ? TH1 : cppVar_35460;
	BIT_VEC cppVar_35462 = (cppVar_35405) ? TL1 : cppVar_35461;
	BIT_VEC cppVar_35463 = (cppVar_35401) ? TH0 : cppVar_35462;
	BIT_VEC cppVar_35464 = (cppVar_35397) ? TL0 : cppVar_35463;
	BIT_VEC cppVar_35465 = (cppVar_35393) ? TMOD : cppVar_35464;
	BIT_VEC cppVar_35466 = (cppVar_35389) ? TCON : cppVar_35465;
	BIT_VEC cppVar_35467 = (cppVar_35385) ? PCON : cppVar_35466;
	BIT_VEC cppVar_35468 = (cppVar_35381) ? DPH : cppVar_35467;
	BIT_VEC cppVar_35469 = (cppVar_35377) ? DPL : cppVar_35468;
	BIT_VEC cppVar_35470 = (cppVar_35373) ? SP : cppVar_35469;
	BIT_VEC cppVar_35471 = (cppVar_35369) ? P0 : cppVar_35470;
	BIT_VEC cppVar_35472 = (cppVar_35362) ? cppVar_35365 : cppVar_35471;
	BIT_VEC cppVar_35473 = cppVar_35472 | ACC;
	BIT_VEC cppVar_35474 = (cppVar_35357) ? cppVar_35473 : P2;
	BIT_VEC cppVar_35475 = ROM.rd(PC);
	bool cppVar_35477 = (cppVar_35475 == 213);
	BIT_VEC cppVar_35478 = ROM.rd(PC);
	bool cppVar_35480 = (cppVar_35478 == 21);
	bool cppVar_35481 = cppVar_35477 || cppVar_35480;
	BIT_VEC cppVar_35483 = PC + 1;
	cppVar_35483 = (cppVar_35483 & cppMask_un_16_);
	BIT_VEC cppVar_35484 = ROM.rd(cppVar_35483);
	bool cppVar_35486 = (cppVar_35484 == 160);
	BIT_VEC cppVar_35487 = PC + 1;
	cppVar_35487 = (cppVar_35487 & cppMask_un_16_);
	BIT_VEC cppVar_35488 = ROM.rd(cppVar_35487);
	BIT_VEC cppVar_35489 = (cppVar_35488 >> 7) & cppMask_un_1_;
	bool cppVar_35491 = (cppVar_35489 == 0);
	BIT_VEC cppVar_35492 = PC + 1;
	cppVar_35492 = (cppVar_35492 & cppMask_un_16_);
	BIT_VEC cppVar_35493 = ROM.rd(cppVar_35492);
	BIT_VEC cppVar_35494 = IRAM.rd(cppVar_35493);
	BIT_VEC cppVar_35495 = PC + 1;
	cppVar_35495 = (cppVar_35495 & cppMask_un_16_);
	BIT_VEC cppVar_35496 = ROM.rd(cppVar_35495);
	bool cppVar_35498 = (cppVar_35496 == 128);
	BIT_VEC cppVar_35499 = PC + 1;
	cppVar_35499 = (cppVar_35499 & cppMask_un_16_);
	BIT_VEC cppVar_35500 = ROM.rd(cppVar_35499);
	bool cppVar_35502 = (cppVar_35500 == 129);
	BIT_VEC cppVar_35503 = PC + 1;
	cppVar_35503 = (cppVar_35503 & cppMask_un_16_);
	BIT_VEC cppVar_35504 = ROM.rd(cppVar_35503);
	bool cppVar_35506 = (cppVar_35504 == 130);
	BIT_VEC cppVar_35507 = PC + 1;
	cppVar_35507 = (cppVar_35507 & cppMask_un_16_);
	BIT_VEC cppVar_35508 = ROM.rd(cppVar_35507);
	bool cppVar_35510 = (cppVar_35508 == 131);
	BIT_VEC cppVar_35511 = PC + 1;
	cppVar_35511 = (cppVar_35511 & cppMask_un_16_);
	BIT_VEC cppVar_35512 = ROM.rd(cppVar_35511);
	bool cppVar_35514 = (cppVar_35512 == 135);
	BIT_VEC cppVar_35515 = PC + 1;
	cppVar_35515 = (cppVar_35515 & cppMask_un_16_);
	BIT_VEC cppVar_35516 = ROM.rd(cppVar_35515);
	bool cppVar_35518 = (cppVar_35516 == 136);
	BIT_VEC cppVar_35519 = PC + 1;
	cppVar_35519 = (cppVar_35519 & cppMask_un_16_);
	BIT_VEC cppVar_35520 = ROM.rd(cppVar_35519);
	bool cppVar_35522 = (cppVar_35520 == 137);
	BIT_VEC cppVar_35523 = PC + 1;
	cppVar_35523 = (cppVar_35523 & cppMask_un_16_);
	BIT_VEC cppVar_35524 = ROM.rd(cppVar_35523);
	bool cppVar_35526 = (cppVar_35524 == 138);
	BIT_VEC cppVar_35527 = PC + 1;
	cppVar_35527 = (cppVar_35527 & cppMask_un_16_);
	BIT_VEC cppVar_35528 = ROM.rd(cppVar_35527);
	bool cppVar_35530 = (cppVar_35528 == 140);
	BIT_VEC cppVar_35531 = PC + 1;
	cppVar_35531 = (cppVar_35531 & cppMask_un_16_);
	BIT_VEC cppVar_35532 = ROM.rd(cppVar_35531);
	bool cppVar_35534 = (cppVar_35532 == 139);
	BIT_VEC cppVar_35535 = PC + 1;
	cppVar_35535 = (cppVar_35535 & cppMask_un_16_);
	BIT_VEC cppVar_35536 = ROM.rd(cppVar_35535);
	bool cppVar_35538 = (cppVar_35536 == 141);
	BIT_VEC cppVar_35539 = PC + 1;
	cppVar_35539 = (cppVar_35539 & cppMask_un_16_);
	BIT_VEC cppVar_35540 = ROM.rd(cppVar_35539);
	bool cppVar_35542 = (cppVar_35540 == 144);
	BIT_VEC cppVar_35543 = PC + 1;
	cppVar_35543 = (cppVar_35543 & cppMask_un_16_);
	BIT_VEC cppVar_35544 = ROM.rd(cppVar_35543);
	bool cppVar_35546 = (cppVar_35544 == 152);
	BIT_VEC cppVar_35547 = PC + 1;
	cppVar_35547 = (cppVar_35547 & cppMask_un_16_);
	BIT_VEC cppVar_35548 = ROM.rd(cppVar_35547);
	bool cppVar_35550 = (cppVar_35548 == 153);
	BIT_VEC cppVar_35551 = PC + 1;
	cppVar_35551 = (cppVar_35551 & cppMask_un_16_);
	BIT_VEC cppVar_35552 = ROM.rd(cppVar_35551);
	bool cppVar_35554 = (cppVar_35552 == 160);
	BIT_VEC cppVar_35555 = PC + 1;
	cppVar_35555 = (cppVar_35555 & cppMask_un_16_);
	BIT_VEC cppVar_35556 = ROM.rd(cppVar_35555);
	bool cppVar_35558 = (cppVar_35556 == 168);
	BIT_VEC cppVar_35559 = PC + 1;
	cppVar_35559 = (cppVar_35559 & cppMask_un_16_);
	BIT_VEC cppVar_35560 = ROM.rd(cppVar_35559);
	bool cppVar_35562 = (cppVar_35560 == 176);
	BIT_VEC cppVar_35563 = PC + 1;
	cppVar_35563 = (cppVar_35563 & cppMask_un_16_);
	BIT_VEC cppVar_35564 = ROM.rd(cppVar_35563);
	bool cppVar_35566 = (cppVar_35564 == 184);
	BIT_VEC cppVar_35567 = PC + 1;
	cppVar_35567 = (cppVar_35567 & cppMask_un_16_);
	BIT_VEC cppVar_35568 = ROM.rd(cppVar_35567);
	bool cppVar_35570 = (cppVar_35568 == 208);
	BIT_VEC cppVar_35571 = PC + 1;
	cppVar_35571 = (cppVar_35571 & cppMask_un_16_);
	BIT_VEC cppVar_35572 = ROM.rd(cppVar_35571);
	bool cppVar_35574 = (cppVar_35572 == 224);
	BIT_VEC cppVar_35575 = PC + 1;
	cppVar_35575 = (cppVar_35575 & cppMask_un_16_);
	BIT_VEC cppVar_35576 = ROM.rd(cppVar_35575);
	bool cppVar_35578 = (cppVar_35576 == 240);
	BIT_VEC cppVar_35580 = (cppVar_35578) ? B : 0;
	BIT_VEC cppVar_35581 = (cppVar_35574) ? ACC : cppVar_35580;
	BIT_VEC cppVar_35582 = (cppVar_35570) ? PSW : cppVar_35581;
	BIT_VEC cppVar_35583 = (cppVar_35566) ? IP : cppVar_35582;
	BIT_VEC cppVar_35584 = (cppVar_35562) ? P3 : cppVar_35583;
	BIT_VEC cppVar_35585 = (cppVar_35558) ? IE : cppVar_35584;
	BIT_VEC cppVar_35586 = (cppVar_35554) ? P2 : cppVar_35585;
	BIT_VEC cppVar_35587 = (cppVar_35550) ? SBUF : cppVar_35586;
	BIT_VEC cppVar_35588 = (cppVar_35546) ? SCON : cppVar_35587;
	BIT_VEC cppVar_35589 = (cppVar_35542) ? P1 : cppVar_35588;
	BIT_VEC cppVar_35590 = (cppVar_35538) ? TH1 : cppVar_35589;
	BIT_VEC cppVar_35591 = (cppVar_35534) ? TL1 : cppVar_35590;
	BIT_VEC cppVar_35592 = (cppVar_35530) ? TH0 : cppVar_35591;
	BIT_VEC cppVar_35593 = (cppVar_35526) ? TL0 : cppVar_35592;
	BIT_VEC cppVar_35594 = (cppVar_35522) ? TMOD : cppVar_35593;
	BIT_VEC cppVar_35595 = (cppVar_35518) ? TCON : cppVar_35594;
	BIT_VEC cppVar_35596 = (cppVar_35514) ? PCON : cppVar_35595;
	BIT_VEC cppVar_35597 = (cppVar_35510) ? DPH : cppVar_35596;
	BIT_VEC cppVar_35598 = (cppVar_35506) ? DPL : cppVar_35597;
	BIT_VEC cppVar_35599 = (cppVar_35502) ? SP : cppVar_35598;
	BIT_VEC cppVar_35600 = (cppVar_35498) ? P0 : cppVar_35599;
	BIT_VEC cppVar_35601 = (cppVar_35491) ? cppVar_35494 : cppVar_35600;
	BIT_VEC cppVar_35603 = cppVar_35601 - 1;
	cppVar_35603 = (cppVar_35603 & cppMask_un_8_);
	BIT_VEC cppVar_35604 = (cppVar_35486) ? cppVar_35603 : P2;
	BIT_VEC cppVar_35605 = ROM.rd(PC);
	bool cppVar_35607 = (cppVar_35605 == 194);
	BIT_VEC cppVar_35608 = ROM.rd(PC);
	bool cppVar_35610 = (cppVar_35608 == 16);
	bool cppVar_35611 = cppVar_35607 || cppVar_35610;
	BIT_VEC cppVar_35613 = PC + 1;
	cppVar_35613 = (cppVar_35613 & cppMask_un_16_);
	BIT_VEC cppVar_35614 = ROM.rd(cppVar_35613);
	BIT_VEC cppVar_35615 = (cppVar_35614 >> 7) & cppMask_un_1_;
	bool cppVar_35617 = (cppVar_35615 == 1);
	BIT_VEC cppVar_35618 = PC + 1;
	cppVar_35618 = (cppVar_35618 & cppMask_un_16_);
	BIT_VEC cppVar_35619 = ROM.rd(cppVar_35618);
	BIT_VEC cppVar_35620 = (cppVar_35619 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35622 = (cppVar_35620 << 3) | 0;
	cppVar_35622 = (cppVar_35622 & cppMask_un_8_);
	BIT_VEC cppVar_35623 = PC + 1;
	cppVar_35623 = (cppVar_35623 & cppMask_un_16_);
	BIT_VEC cppVar_35624 = ROM.rd(cppVar_35623);
	BIT_VEC cppVar_35625 = (cppVar_35624 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35626 = (cppVar_35625 & cppMask_un_5_);
	BIT_VEC cppVar_35628 = cppVar_35626 + 32;
	cppVar_35628 = (cppVar_35628 & cppMask_un_8_);
	BIT_VEC cppVar_35629 = (cppVar_35617) ? cppVar_35622 : cppVar_35628;
	bool cppVar_35631 = (cppVar_35629 == 160);
	BIT_VEC cppVar_35633 = PC + 1;
	cppVar_35633 = (cppVar_35633 & cppMask_un_16_);
	BIT_VEC cppVar_35634 = ROM.rd(cppVar_35633);
	BIT_VEC cppVar_35635 = (cppVar_35634 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_35636 = (cppVar_35635 & cppMask_un_3_);
	BIT_VEC cppVar_35637 = 1 << static_cast<unsigned>(cppVar_35636);
	cppVar_35637 = (cppVar_35637 & cppMask_un_8_);
	BIT_VEC cppVar_35638 = ~cppVar_35637;
	BIT_VEC cppVar_35639 = PC + 1;
	cppVar_35639 = (cppVar_35639 & cppMask_un_16_);
	BIT_VEC cppVar_35640 = ROM.rd(cppVar_35639);
	BIT_VEC cppVar_35641 = (cppVar_35640 >> 7) & cppMask_un_1_;
	bool cppVar_35642 = (cppVar_35641 == 1);
	BIT_VEC cppVar_35643 = PC + 1;
	cppVar_35643 = (cppVar_35643 & cppMask_un_16_);
	BIT_VEC cppVar_35644 = ROM.rd(cppVar_35643);
	BIT_VEC cppVar_35645 = (cppVar_35644 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35646 = (cppVar_35645 << 3) | 0;
	cppVar_35646 = (cppVar_35646 & cppMask_un_8_);
	BIT_VEC cppVar_35647 = PC + 1;
	cppVar_35647 = (cppVar_35647 & cppMask_un_16_);
	BIT_VEC cppVar_35648 = ROM.rd(cppVar_35647);
	BIT_VEC cppVar_35649 = (cppVar_35648 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35650 = (cppVar_35649 & cppMask_un_5_);
	BIT_VEC cppVar_35651 = cppVar_35650 + 32;
	cppVar_35651 = (cppVar_35651 & cppMask_un_8_);
	BIT_VEC cppVar_35652 = (cppVar_35642) ? cppVar_35646 : cppVar_35651;
	BIT_VEC cppVar_35653 = (cppVar_35652 >> 7) & cppMask_un_1_;
	bool cppVar_35655 = (cppVar_35653 == 0);
	BIT_VEC cppVar_35656 = PC + 1;
	cppVar_35656 = (cppVar_35656 & cppMask_un_16_);
	BIT_VEC cppVar_35657 = ROM.rd(cppVar_35656);
	BIT_VEC cppVar_35658 = (cppVar_35657 >> 7) & cppMask_un_1_;
	bool cppVar_35659 = (cppVar_35658 == 1);
	BIT_VEC cppVar_35660 = PC + 1;
	cppVar_35660 = (cppVar_35660 & cppMask_un_16_);
	BIT_VEC cppVar_35661 = ROM.rd(cppVar_35660);
	BIT_VEC cppVar_35662 = (cppVar_35661 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35663 = (cppVar_35662 << 3) | 0;
	cppVar_35663 = (cppVar_35663 & cppMask_un_8_);
	BIT_VEC cppVar_35664 = PC + 1;
	cppVar_35664 = (cppVar_35664 & cppMask_un_16_);
	BIT_VEC cppVar_35665 = ROM.rd(cppVar_35664);
	BIT_VEC cppVar_35666 = (cppVar_35665 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35667 = (cppVar_35666 & cppMask_un_5_);
	BIT_VEC cppVar_35668 = cppVar_35667 + 32;
	cppVar_35668 = (cppVar_35668 & cppMask_un_8_);
	BIT_VEC cppVar_35669 = (cppVar_35659) ? cppVar_35663 : cppVar_35668;
	BIT_VEC cppVar_35670 = IRAM.rd(cppVar_35669);
	BIT_VEC cppVar_35671 = PC + 1;
	cppVar_35671 = (cppVar_35671 & cppMask_un_16_);
	BIT_VEC cppVar_35672 = ROM.rd(cppVar_35671);
	BIT_VEC cppVar_35673 = (cppVar_35672 >> 7) & cppMask_un_1_;
	bool cppVar_35674 = (cppVar_35673 == 1);
	BIT_VEC cppVar_35675 = PC + 1;
	cppVar_35675 = (cppVar_35675 & cppMask_un_16_);
	BIT_VEC cppVar_35676 = ROM.rd(cppVar_35675);
	BIT_VEC cppVar_35677 = (cppVar_35676 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35678 = (cppVar_35677 << 3) | 0;
	cppVar_35678 = (cppVar_35678 & cppMask_un_8_);
	BIT_VEC cppVar_35679 = PC + 1;
	cppVar_35679 = (cppVar_35679 & cppMask_un_16_);
	BIT_VEC cppVar_35680 = ROM.rd(cppVar_35679);
	BIT_VEC cppVar_35681 = (cppVar_35680 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35682 = (cppVar_35681 & cppMask_un_5_);
	BIT_VEC cppVar_35683 = cppVar_35682 + 32;
	cppVar_35683 = (cppVar_35683 & cppMask_un_8_);
	BIT_VEC cppVar_35684 = (cppVar_35674) ? cppVar_35678 : cppVar_35683;
	bool cppVar_35686 = (cppVar_35684 == 128);
	BIT_VEC cppVar_35687 = PC + 1;
	cppVar_35687 = (cppVar_35687 & cppMask_un_16_);
	BIT_VEC cppVar_35688 = ROM.rd(cppVar_35687);
	BIT_VEC cppVar_35689 = (cppVar_35688 >> 7) & cppMask_un_1_;
	bool cppVar_35690 = (cppVar_35689 == 1);
	BIT_VEC cppVar_35691 = PC + 1;
	cppVar_35691 = (cppVar_35691 & cppMask_un_16_);
	BIT_VEC cppVar_35692 = ROM.rd(cppVar_35691);
	BIT_VEC cppVar_35693 = (cppVar_35692 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35694 = (cppVar_35693 << 3) | 0;
	cppVar_35694 = (cppVar_35694 & cppMask_un_8_);
	BIT_VEC cppVar_35695 = PC + 1;
	cppVar_35695 = (cppVar_35695 & cppMask_un_16_);
	BIT_VEC cppVar_35696 = ROM.rd(cppVar_35695);
	BIT_VEC cppVar_35697 = (cppVar_35696 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35698 = (cppVar_35697 & cppMask_un_5_);
	BIT_VEC cppVar_35699 = cppVar_35698 + 32;
	cppVar_35699 = (cppVar_35699 & cppMask_un_8_);
	BIT_VEC cppVar_35700 = (cppVar_35690) ? cppVar_35694 : cppVar_35699;
	bool cppVar_35702 = (cppVar_35700 == 129);
	BIT_VEC cppVar_35703 = PC + 1;
	cppVar_35703 = (cppVar_35703 & cppMask_un_16_);
	BIT_VEC cppVar_35704 = ROM.rd(cppVar_35703);
	BIT_VEC cppVar_35705 = (cppVar_35704 >> 7) & cppMask_un_1_;
	bool cppVar_35706 = (cppVar_35705 == 1);
	BIT_VEC cppVar_35707 = PC + 1;
	cppVar_35707 = (cppVar_35707 & cppMask_un_16_);
	BIT_VEC cppVar_35708 = ROM.rd(cppVar_35707);
	BIT_VEC cppVar_35709 = (cppVar_35708 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35710 = (cppVar_35709 << 3) | 0;
	cppVar_35710 = (cppVar_35710 & cppMask_un_8_);
	BIT_VEC cppVar_35711 = PC + 1;
	cppVar_35711 = (cppVar_35711 & cppMask_un_16_);
	BIT_VEC cppVar_35712 = ROM.rd(cppVar_35711);
	BIT_VEC cppVar_35713 = (cppVar_35712 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35714 = (cppVar_35713 & cppMask_un_5_);
	BIT_VEC cppVar_35715 = cppVar_35714 + 32;
	cppVar_35715 = (cppVar_35715 & cppMask_un_8_);
	BIT_VEC cppVar_35716 = (cppVar_35706) ? cppVar_35710 : cppVar_35715;
	bool cppVar_35718 = (cppVar_35716 == 130);
	BIT_VEC cppVar_35719 = PC + 1;
	cppVar_35719 = (cppVar_35719 & cppMask_un_16_);
	BIT_VEC cppVar_35720 = ROM.rd(cppVar_35719);
	BIT_VEC cppVar_35721 = (cppVar_35720 >> 7) & cppMask_un_1_;
	bool cppVar_35722 = (cppVar_35721 == 1);
	BIT_VEC cppVar_35723 = PC + 1;
	cppVar_35723 = (cppVar_35723 & cppMask_un_16_);
	BIT_VEC cppVar_35724 = ROM.rd(cppVar_35723);
	BIT_VEC cppVar_35725 = (cppVar_35724 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35726 = (cppVar_35725 << 3) | 0;
	cppVar_35726 = (cppVar_35726 & cppMask_un_8_);
	BIT_VEC cppVar_35727 = PC + 1;
	cppVar_35727 = (cppVar_35727 & cppMask_un_16_);
	BIT_VEC cppVar_35728 = ROM.rd(cppVar_35727);
	BIT_VEC cppVar_35729 = (cppVar_35728 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35730 = (cppVar_35729 & cppMask_un_5_);
	BIT_VEC cppVar_35731 = cppVar_35730 + 32;
	cppVar_35731 = (cppVar_35731 & cppMask_un_8_);
	BIT_VEC cppVar_35732 = (cppVar_35722) ? cppVar_35726 : cppVar_35731;
	bool cppVar_35734 = (cppVar_35732 == 131);
	BIT_VEC cppVar_35735 = PC + 1;
	cppVar_35735 = (cppVar_35735 & cppMask_un_16_);
	BIT_VEC cppVar_35736 = ROM.rd(cppVar_35735);
	BIT_VEC cppVar_35737 = (cppVar_35736 >> 7) & cppMask_un_1_;
	bool cppVar_35738 = (cppVar_35737 == 1);
	BIT_VEC cppVar_35739 = PC + 1;
	cppVar_35739 = (cppVar_35739 & cppMask_un_16_);
	BIT_VEC cppVar_35740 = ROM.rd(cppVar_35739);
	BIT_VEC cppVar_35741 = (cppVar_35740 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35742 = (cppVar_35741 << 3) | 0;
	cppVar_35742 = (cppVar_35742 & cppMask_un_8_);
	BIT_VEC cppVar_35743 = PC + 1;
	cppVar_35743 = (cppVar_35743 & cppMask_un_16_);
	BIT_VEC cppVar_35744 = ROM.rd(cppVar_35743);
	BIT_VEC cppVar_35745 = (cppVar_35744 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35746 = (cppVar_35745 & cppMask_un_5_);
	BIT_VEC cppVar_35747 = cppVar_35746 + 32;
	cppVar_35747 = (cppVar_35747 & cppMask_un_8_);
	BIT_VEC cppVar_35748 = (cppVar_35738) ? cppVar_35742 : cppVar_35747;
	bool cppVar_35750 = (cppVar_35748 == 135);
	BIT_VEC cppVar_35751 = PC + 1;
	cppVar_35751 = (cppVar_35751 & cppMask_un_16_);
	BIT_VEC cppVar_35752 = ROM.rd(cppVar_35751);
	BIT_VEC cppVar_35753 = (cppVar_35752 >> 7) & cppMask_un_1_;
	bool cppVar_35754 = (cppVar_35753 == 1);
	BIT_VEC cppVar_35755 = PC + 1;
	cppVar_35755 = (cppVar_35755 & cppMask_un_16_);
	BIT_VEC cppVar_35756 = ROM.rd(cppVar_35755);
	BIT_VEC cppVar_35757 = (cppVar_35756 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35758 = (cppVar_35757 << 3) | 0;
	cppVar_35758 = (cppVar_35758 & cppMask_un_8_);
	BIT_VEC cppVar_35759 = PC + 1;
	cppVar_35759 = (cppVar_35759 & cppMask_un_16_);
	BIT_VEC cppVar_35760 = ROM.rd(cppVar_35759);
	BIT_VEC cppVar_35761 = (cppVar_35760 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35762 = (cppVar_35761 & cppMask_un_5_);
	BIT_VEC cppVar_35763 = cppVar_35762 + 32;
	cppVar_35763 = (cppVar_35763 & cppMask_un_8_);
	BIT_VEC cppVar_35764 = (cppVar_35754) ? cppVar_35758 : cppVar_35763;
	bool cppVar_35766 = (cppVar_35764 == 136);
	BIT_VEC cppVar_35767 = PC + 1;
	cppVar_35767 = (cppVar_35767 & cppMask_un_16_);
	BIT_VEC cppVar_35768 = ROM.rd(cppVar_35767);
	BIT_VEC cppVar_35769 = (cppVar_35768 >> 7) & cppMask_un_1_;
	bool cppVar_35770 = (cppVar_35769 == 1);
	BIT_VEC cppVar_35771 = PC + 1;
	cppVar_35771 = (cppVar_35771 & cppMask_un_16_);
	BIT_VEC cppVar_35772 = ROM.rd(cppVar_35771);
	BIT_VEC cppVar_35773 = (cppVar_35772 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35774 = (cppVar_35773 << 3) | 0;
	cppVar_35774 = (cppVar_35774 & cppMask_un_8_);
	BIT_VEC cppVar_35775 = PC + 1;
	cppVar_35775 = (cppVar_35775 & cppMask_un_16_);
	BIT_VEC cppVar_35776 = ROM.rd(cppVar_35775);
	BIT_VEC cppVar_35777 = (cppVar_35776 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35778 = (cppVar_35777 & cppMask_un_5_);
	BIT_VEC cppVar_35779 = cppVar_35778 + 32;
	cppVar_35779 = (cppVar_35779 & cppMask_un_8_);
	BIT_VEC cppVar_35780 = (cppVar_35770) ? cppVar_35774 : cppVar_35779;
	bool cppVar_35782 = (cppVar_35780 == 137);
	BIT_VEC cppVar_35783 = PC + 1;
	cppVar_35783 = (cppVar_35783 & cppMask_un_16_);
	BIT_VEC cppVar_35784 = ROM.rd(cppVar_35783);
	BIT_VEC cppVar_35785 = (cppVar_35784 >> 7) & cppMask_un_1_;
	bool cppVar_35786 = (cppVar_35785 == 1);
	BIT_VEC cppVar_35787 = PC + 1;
	cppVar_35787 = (cppVar_35787 & cppMask_un_16_);
	BIT_VEC cppVar_35788 = ROM.rd(cppVar_35787);
	BIT_VEC cppVar_35789 = (cppVar_35788 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35790 = (cppVar_35789 << 3) | 0;
	cppVar_35790 = (cppVar_35790 & cppMask_un_8_);
	BIT_VEC cppVar_35791 = PC + 1;
	cppVar_35791 = (cppVar_35791 & cppMask_un_16_);
	BIT_VEC cppVar_35792 = ROM.rd(cppVar_35791);
	BIT_VEC cppVar_35793 = (cppVar_35792 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35794 = (cppVar_35793 & cppMask_un_5_);
	BIT_VEC cppVar_35795 = cppVar_35794 + 32;
	cppVar_35795 = (cppVar_35795 & cppMask_un_8_);
	BIT_VEC cppVar_35796 = (cppVar_35786) ? cppVar_35790 : cppVar_35795;
	bool cppVar_35798 = (cppVar_35796 == 138);
	BIT_VEC cppVar_35799 = PC + 1;
	cppVar_35799 = (cppVar_35799 & cppMask_un_16_);
	BIT_VEC cppVar_35800 = ROM.rd(cppVar_35799);
	BIT_VEC cppVar_35801 = (cppVar_35800 >> 7) & cppMask_un_1_;
	bool cppVar_35802 = (cppVar_35801 == 1);
	BIT_VEC cppVar_35803 = PC + 1;
	cppVar_35803 = (cppVar_35803 & cppMask_un_16_);
	BIT_VEC cppVar_35804 = ROM.rd(cppVar_35803);
	BIT_VEC cppVar_35805 = (cppVar_35804 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35806 = (cppVar_35805 << 3) | 0;
	cppVar_35806 = (cppVar_35806 & cppMask_un_8_);
	BIT_VEC cppVar_35807 = PC + 1;
	cppVar_35807 = (cppVar_35807 & cppMask_un_16_);
	BIT_VEC cppVar_35808 = ROM.rd(cppVar_35807);
	BIT_VEC cppVar_35809 = (cppVar_35808 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35810 = (cppVar_35809 & cppMask_un_5_);
	BIT_VEC cppVar_35811 = cppVar_35810 + 32;
	cppVar_35811 = (cppVar_35811 & cppMask_un_8_);
	BIT_VEC cppVar_35812 = (cppVar_35802) ? cppVar_35806 : cppVar_35811;
	bool cppVar_35814 = (cppVar_35812 == 140);
	BIT_VEC cppVar_35815 = PC + 1;
	cppVar_35815 = (cppVar_35815 & cppMask_un_16_);
	BIT_VEC cppVar_35816 = ROM.rd(cppVar_35815);
	BIT_VEC cppVar_35817 = (cppVar_35816 >> 7) & cppMask_un_1_;
	bool cppVar_35818 = (cppVar_35817 == 1);
	BIT_VEC cppVar_35819 = PC + 1;
	cppVar_35819 = (cppVar_35819 & cppMask_un_16_);
	BIT_VEC cppVar_35820 = ROM.rd(cppVar_35819);
	BIT_VEC cppVar_35821 = (cppVar_35820 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35822 = (cppVar_35821 << 3) | 0;
	cppVar_35822 = (cppVar_35822 & cppMask_un_8_);
	BIT_VEC cppVar_35823 = PC + 1;
	cppVar_35823 = (cppVar_35823 & cppMask_un_16_);
	BIT_VEC cppVar_35824 = ROM.rd(cppVar_35823);
	BIT_VEC cppVar_35825 = (cppVar_35824 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35826 = (cppVar_35825 & cppMask_un_5_);
	BIT_VEC cppVar_35827 = cppVar_35826 + 32;
	cppVar_35827 = (cppVar_35827 & cppMask_un_8_);
	BIT_VEC cppVar_35828 = (cppVar_35818) ? cppVar_35822 : cppVar_35827;
	bool cppVar_35830 = (cppVar_35828 == 139);
	BIT_VEC cppVar_35831 = PC + 1;
	cppVar_35831 = (cppVar_35831 & cppMask_un_16_);
	BIT_VEC cppVar_35832 = ROM.rd(cppVar_35831);
	BIT_VEC cppVar_35833 = (cppVar_35832 >> 7) & cppMask_un_1_;
	bool cppVar_35834 = (cppVar_35833 == 1);
	BIT_VEC cppVar_35835 = PC + 1;
	cppVar_35835 = (cppVar_35835 & cppMask_un_16_);
	BIT_VEC cppVar_35836 = ROM.rd(cppVar_35835);
	BIT_VEC cppVar_35837 = (cppVar_35836 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35838 = (cppVar_35837 << 3) | 0;
	cppVar_35838 = (cppVar_35838 & cppMask_un_8_);
	BIT_VEC cppVar_35839 = PC + 1;
	cppVar_35839 = (cppVar_35839 & cppMask_un_16_);
	BIT_VEC cppVar_35840 = ROM.rd(cppVar_35839);
	BIT_VEC cppVar_35841 = (cppVar_35840 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35842 = (cppVar_35841 & cppMask_un_5_);
	BIT_VEC cppVar_35843 = cppVar_35842 + 32;
	cppVar_35843 = (cppVar_35843 & cppMask_un_8_);
	BIT_VEC cppVar_35844 = (cppVar_35834) ? cppVar_35838 : cppVar_35843;
	bool cppVar_35846 = (cppVar_35844 == 141);
	BIT_VEC cppVar_35847 = PC + 1;
	cppVar_35847 = (cppVar_35847 & cppMask_un_16_);
	BIT_VEC cppVar_35848 = ROM.rd(cppVar_35847);
	BIT_VEC cppVar_35849 = (cppVar_35848 >> 7) & cppMask_un_1_;
	bool cppVar_35850 = (cppVar_35849 == 1);
	BIT_VEC cppVar_35851 = PC + 1;
	cppVar_35851 = (cppVar_35851 & cppMask_un_16_);
	BIT_VEC cppVar_35852 = ROM.rd(cppVar_35851);
	BIT_VEC cppVar_35853 = (cppVar_35852 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35854 = (cppVar_35853 << 3) | 0;
	cppVar_35854 = (cppVar_35854 & cppMask_un_8_);
	BIT_VEC cppVar_35855 = PC + 1;
	cppVar_35855 = (cppVar_35855 & cppMask_un_16_);
	BIT_VEC cppVar_35856 = ROM.rd(cppVar_35855);
	BIT_VEC cppVar_35857 = (cppVar_35856 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35858 = (cppVar_35857 & cppMask_un_5_);
	BIT_VEC cppVar_35859 = cppVar_35858 + 32;
	cppVar_35859 = (cppVar_35859 & cppMask_un_8_);
	BIT_VEC cppVar_35860 = (cppVar_35850) ? cppVar_35854 : cppVar_35859;
	bool cppVar_35862 = (cppVar_35860 == 144);
	BIT_VEC cppVar_35863 = PC + 1;
	cppVar_35863 = (cppVar_35863 & cppMask_un_16_);
	BIT_VEC cppVar_35864 = ROM.rd(cppVar_35863);
	BIT_VEC cppVar_35865 = (cppVar_35864 >> 7) & cppMask_un_1_;
	bool cppVar_35866 = (cppVar_35865 == 1);
	BIT_VEC cppVar_35867 = PC + 1;
	cppVar_35867 = (cppVar_35867 & cppMask_un_16_);
	BIT_VEC cppVar_35868 = ROM.rd(cppVar_35867);
	BIT_VEC cppVar_35869 = (cppVar_35868 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35870 = (cppVar_35869 << 3) | 0;
	cppVar_35870 = (cppVar_35870 & cppMask_un_8_);
	BIT_VEC cppVar_35871 = PC + 1;
	cppVar_35871 = (cppVar_35871 & cppMask_un_16_);
	BIT_VEC cppVar_35872 = ROM.rd(cppVar_35871);
	BIT_VEC cppVar_35873 = (cppVar_35872 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35874 = (cppVar_35873 & cppMask_un_5_);
	BIT_VEC cppVar_35875 = cppVar_35874 + 32;
	cppVar_35875 = (cppVar_35875 & cppMask_un_8_);
	BIT_VEC cppVar_35876 = (cppVar_35866) ? cppVar_35870 : cppVar_35875;
	bool cppVar_35878 = (cppVar_35876 == 152);
	BIT_VEC cppVar_35879 = PC + 1;
	cppVar_35879 = (cppVar_35879 & cppMask_un_16_);
	BIT_VEC cppVar_35880 = ROM.rd(cppVar_35879);
	BIT_VEC cppVar_35881 = (cppVar_35880 >> 7) & cppMask_un_1_;
	bool cppVar_35882 = (cppVar_35881 == 1);
	BIT_VEC cppVar_35883 = PC + 1;
	cppVar_35883 = (cppVar_35883 & cppMask_un_16_);
	BIT_VEC cppVar_35884 = ROM.rd(cppVar_35883);
	BIT_VEC cppVar_35885 = (cppVar_35884 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35886 = (cppVar_35885 << 3) | 0;
	cppVar_35886 = (cppVar_35886 & cppMask_un_8_);
	BIT_VEC cppVar_35887 = PC + 1;
	cppVar_35887 = (cppVar_35887 & cppMask_un_16_);
	BIT_VEC cppVar_35888 = ROM.rd(cppVar_35887);
	BIT_VEC cppVar_35889 = (cppVar_35888 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35890 = (cppVar_35889 & cppMask_un_5_);
	BIT_VEC cppVar_35891 = cppVar_35890 + 32;
	cppVar_35891 = (cppVar_35891 & cppMask_un_8_);
	BIT_VEC cppVar_35892 = (cppVar_35882) ? cppVar_35886 : cppVar_35891;
	bool cppVar_35894 = (cppVar_35892 == 153);
	BIT_VEC cppVar_35895 = PC + 1;
	cppVar_35895 = (cppVar_35895 & cppMask_un_16_);
	BIT_VEC cppVar_35896 = ROM.rd(cppVar_35895);
	BIT_VEC cppVar_35897 = (cppVar_35896 >> 7) & cppMask_un_1_;
	bool cppVar_35898 = (cppVar_35897 == 1);
	BIT_VEC cppVar_35899 = PC + 1;
	cppVar_35899 = (cppVar_35899 & cppMask_un_16_);
	BIT_VEC cppVar_35900 = ROM.rd(cppVar_35899);
	BIT_VEC cppVar_35901 = (cppVar_35900 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35902 = (cppVar_35901 << 3) | 0;
	cppVar_35902 = (cppVar_35902 & cppMask_un_8_);
	BIT_VEC cppVar_35903 = PC + 1;
	cppVar_35903 = (cppVar_35903 & cppMask_un_16_);
	BIT_VEC cppVar_35904 = ROM.rd(cppVar_35903);
	BIT_VEC cppVar_35905 = (cppVar_35904 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35906 = (cppVar_35905 & cppMask_un_5_);
	BIT_VEC cppVar_35907 = cppVar_35906 + 32;
	cppVar_35907 = (cppVar_35907 & cppMask_un_8_);
	BIT_VEC cppVar_35908 = (cppVar_35898) ? cppVar_35902 : cppVar_35907;
	bool cppVar_35910 = (cppVar_35908 == 160);
	BIT_VEC cppVar_35911 = PC + 1;
	cppVar_35911 = (cppVar_35911 & cppMask_un_16_);
	BIT_VEC cppVar_35912 = ROM.rd(cppVar_35911);
	BIT_VEC cppVar_35913 = (cppVar_35912 >> 7) & cppMask_un_1_;
	bool cppVar_35914 = (cppVar_35913 == 1);
	BIT_VEC cppVar_35915 = PC + 1;
	cppVar_35915 = (cppVar_35915 & cppMask_un_16_);
	BIT_VEC cppVar_35916 = ROM.rd(cppVar_35915);
	BIT_VEC cppVar_35917 = (cppVar_35916 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35918 = (cppVar_35917 << 3) | 0;
	cppVar_35918 = (cppVar_35918 & cppMask_un_8_);
	BIT_VEC cppVar_35919 = PC + 1;
	cppVar_35919 = (cppVar_35919 & cppMask_un_16_);
	BIT_VEC cppVar_35920 = ROM.rd(cppVar_35919);
	BIT_VEC cppVar_35921 = (cppVar_35920 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35922 = (cppVar_35921 & cppMask_un_5_);
	BIT_VEC cppVar_35923 = cppVar_35922 + 32;
	cppVar_35923 = (cppVar_35923 & cppMask_un_8_);
	BIT_VEC cppVar_35924 = (cppVar_35914) ? cppVar_35918 : cppVar_35923;
	bool cppVar_35926 = (cppVar_35924 == 168);
	BIT_VEC cppVar_35927 = PC + 1;
	cppVar_35927 = (cppVar_35927 & cppMask_un_16_);
	BIT_VEC cppVar_35928 = ROM.rd(cppVar_35927);
	BIT_VEC cppVar_35929 = (cppVar_35928 >> 7) & cppMask_un_1_;
	bool cppVar_35930 = (cppVar_35929 == 1);
	BIT_VEC cppVar_35931 = PC + 1;
	cppVar_35931 = (cppVar_35931 & cppMask_un_16_);
	BIT_VEC cppVar_35932 = ROM.rd(cppVar_35931);
	BIT_VEC cppVar_35933 = (cppVar_35932 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35934 = (cppVar_35933 << 3) | 0;
	cppVar_35934 = (cppVar_35934 & cppMask_un_8_);
	BIT_VEC cppVar_35935 = PC + 1;
	cppVar_35935 = (cppVar_35935 & cppMask_un_16_);
	BIT_VEC cppVar_35936 = ROM.rd(cppVar_35935);
	BIT_VEC cppVar_35937 = (cppVar_35936 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35938 = (cppVar_35937 & cppMask_un_5_);
	BIT_VEC cppVar_35939 = cppVar_35938 + 32;
	cppVar_35939 = (cppVar_35939 & cppMask_un_8_);
	BIT_VEC cppVar_35940 = (cppVar_35930) ? cppVar_35934 : cppVar_35939;
	bool cppVar_35942 = (cppVar_35940 == 176);
	BIT_VEC cppVar_35943 = PC + 1;
	cppVar_35943 = (cppVar_35943 & cppMask_un_16_);
	BIT_VEC cppVar_35944 = ROM.rd(cppVar_35943);
	BIT_VEC cppVar_35945 = (cppVar_35944 >> 7) & cppMask_un_1_;
	bool cppVar_35946 = (cppVar_35945 == 1);
	BIT_VEC cppVar_35947 = PC + 1;
	cppVar_35947 = (cppVar_35947 & cppMask_un_16_);
	BIT_VEC cppVar_35948 = ROM.rd(cppVar_35947);
	BIT_VEC cppVar_35949 = (cppVar_35948 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35950 = (cppVar_35949 << 3) | 0;
	cppVar_35950 = (cppVar_35950 & cppMask_un_8_);
	BIT_VEC cppVar_35951 = PC + 1;
	cppVar_35951 = (cppVar_35951 & cppMask_un_16_);
	BIT_VEC cppVar_35952 = ROM.rd(cppVar_35951);
	BIT_VEC cppVar_35953 = (cppVar_35952 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35954 = (cppVar_35953 & cppMask_un_5_);
	BIT_VEC cppVar_35955 = cppVar_35954 + 32;
	cppVar_35955 = (cppVar_35955 & cppMask_un_8_);
	BIT_VEC cppVar_35956 = (cppVar_35946) ? cppVar_35950 : cppVar_35955;
	bool cppVar_35958 = (cppVar_35956 == 184);
	BIT_VEC cppVar_35959 = PC + 1;
	cppVar_35959 = (cppVar_35959 & cppMask_un_16_);
	BIT_VEC cppVar_35960 = ROM.rd(cppVar_35959);
	BIT_VEC cppVar_35961 = (cppVar_35960 >> 7) & cppMask_un_1_;
	bool cppVar_35962 = (cppVar_35961 == 1);
	BIT_VEC cppVar_35963 = PC + 1;
	cppVar_35963 = (cppVar_35963 & cppMask_un_16_);
	BIT_VEC cppVar_35964 = ROM.rd(cppVar_35963);
	BIT_VEC cppVar_35965 = (cppVar_35964 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35966 = (cppVar_35965 << 3) | 0;
	cppVar_35966 = (cppVar_35966 & cppMask_un_8_);
	BIT_VEC cppVar_35967 = PC + 1;
	cppVar_35967 = (cppVar_35967 & cppMask_un_16_);
	BIT_VEC cppVar_35968 = ROM.rd(cppVar_35967);
	BIT_VEC cppVar_35969 = (cppVar_35968 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35970 = (cppVar_35969 & cppMask_un_5_);
	BIT_VEC cppVar_35971 = cppVar_35970 + 32;
	cppVar_35971 = (cppVar_35971 & cppMask_un_8_);
	BIT_VEC cppVar_35972 = (cppVar_35962) ? cppVar_35966 : cppVar_35971;
	bool cppVar_35974 = (cppVar_35972 == 208);
	BIT_VEC cppVar_35975 = PC + 1;
	cppVar_35975 = (cppVar_35975 & cppMask_un_16_);
	BIT_VEC cppVar_35976 = ROM.rd(cppVar_35975);
	BIT_VEC cppVar_35977 = (cppVar_35976 >> 7) & cppMask_un_1_;
	bool cppVar_35978 = (cppVar_35977 == 1);
	BIT_VEC cppVar_35979 = PC + 1;
	cppVar_35979 = (cppVar_35979 & cppMask_un_16_);
	BIT_VEC cppVar_35980 = ROM.rd(cppVar_35979);
	BIT_VEC cppVar_35981 = (cppVar_35980 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35982 = (cppVar_35981 << 3) | 0;
	cppVar_35982 = (cppVar_35982 & cppMask_un_8_);
	BIT_VEC cppVar_35983 = PC + 1;
	cppVar_35983 = (cppVar_35983 & cppMask_un_16_);
	BIT_VEC cppVar_35984 = ROM.rd(cppVar_35983);
	BIT_VEC cppVar_35985 = (cppVar_35984 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35986 = (cppVar_35985 & cppMask_un_5_);
	BIT_VEC cppVar_35987 = cppVar_35986 + 32;
	cppVar_35987 = (cppVar_35987 & cppMask_un_8_);
	BIT_VEC cppVar_35988 = (cppVar_35978) ? cppVar_35982 : cppVar_35987;
	bool cppVar_35990 = (cppVar_35988 == 224);
	BIT_VEC cppVar_35991 = PC + 1;
	cppVar_35991 = (cppVar_35991 & cppMask_un_16_);
	BIT_VEC cppVar_35992 = ROM.rd(cppVar_35991);
	BIT_VEC cppVar_35993 = (cppVar_35992 >> 7) & cppMask_un_1_;
	bool cppVar_35994 = (cppVar_35993 == 1);
	BIT_VEC cppVar_35995 = PC + 1;
	cppVar_35995 = (cppVar_35995 & cppMask_un_16_);
	BIT_VEC cppVar_35996 = ROM.rd(cppVar_35995);
	BIT_VEC cppVar_35997 = (cppVar_35996 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_35998 = (cppVar_35997 << 3) | 0;
	cppVar_35998 = (cppVar_35998 & cppMask_un_8_);
	BIT_VEC cppVar_35999 = PC + 1;
	cppVar_35999 = (cppVar_35999 & cppMask_un_16_);
	BIT_VEC cppVar_36000 = ROM.rd(cppVar_35999);
	BIT_VEC cppVar_36001 = (cppVar_36000 >> 3) & cppMask_un_5_;
	BIT_VEC cppVar_36002 = (cppVar_36001 & cppMask_un_5_);
	BIT_VEC cppVar_36003 = cppVar_36002 + 32;
	cppVar_36003 = (cppVar_36003 & cppMask_un_8_);
	BIT_VEC cppVar_36004 = (cppVar_35994) ? cppVar_35998 : cppVar_36003;
	bool cppVar_36006 = (cppVar_36004 == 240);
	BIT_VEC cppVar_36008 = (cppVar_36006) ? B : 0;
	BIT_VEC cppVar_36009 = (cppVar_35990) ? ACC : cppVar_36008;
	BIT_VEC cppVar_36010 = (cppVar_35974) ? PSW : cppVar_36009;
	BIT_VEC cppVar_36011 = (cppVar_35958) ? IP : cppVar_36010;
	BIT_VEC cppVar_36012 = (cppVar_35942) ? P3 : cppVar_36011;
	BIT_VEC cppVar_36013 = (cppVar_35926) ? IE : cppVar_36012;
	BIT_VEC cppVar_36014 = (cppVar_35910) ? P2 : cppVar_36013;
	BIT_VEC cppVar_36015 = (cppVar_35894) ? SBUF : cppVar_36014;
	BIT_VEC cppVar_36016 = (cppVar_35878) ? SCON : cppVar_36015;
	BIT_VEC cppVar_36017 = (cppVar_35862) ? P1 : cppVar_36016;
	BIT_VEC cppVar_36018 = (cppVar_35846) ? TH1 : cppVar_36017;
	BIT_VEC cppVar_36019 = (cppVar_35830) ? TL1 : cppVar_36018;
	BIT_VEC cppVar_36020 = (cppVar_35814) ? TH0 : cppVar_36019;
	BIT_VEC cppVar_36021 = (cppVar_35798) ? TL0 : cppVar_36020;
	BIT_VEC cppVar_36022 = (cppVar_35782) ? TMOD : cppVar_36021;
	BIT_VEC cppVar_36023 = (cppVar_35766) ? TCON : cppVar_36022;
	BIT_VEC cppVar_36024 = (cppVar_35750) ? PCON : cppVar_36023;
	BIT_VEC cppVar_36025 = (cppVar_35734) ? DPH : cppVar_36024;
	BIT_VEC cppVar_36026 = (cppVar_35718) ? DPL : cppVar_36025;
	BIT_VEC cppVar_36027 = (cppVar_35702) ? SP : cppVar_36026;
	BIT_VEC cppVar_36028 = (cppVar_35686) ? P0 : cppVar_36027;
	BIT_VEC cppVar_36029 = (cppVar_35655) ? cppVar_35670 : cppVar_36028;
	BIT_VEC cppVar_36030 = cppVar_35638 & cppVar_36029;
	BIT_VEC cppVar_36032 = 0;
	BIT_VEC cppVar_36033 = PC + 1;
	cppVar_36033 = (cppVar_36033 & cppMask_un_16_);
	BIT_VEC cppVar_36034 = ROM.rd(cppVar_36033);
	BIT_VEC cppVar_36035 = (cppVar_36034 >> 0) & cppMask_un_3_;
	BIT_VEC cppVar_36036 = (cppVar_36035 & cppMask_un_3_);
	BIT_VEC cppVar_36037 = cppVar_36032 << static_cast<unsigned>(cppVar_36036);
	cppVar_36037 = (cppVar_36037 & cppMask_un_8_);
	BIT_VEC cppVar_36038 = cppVar_36030 | cppVar_36037;
	BIT_VEC cppVar_36039 = (cppVar_35631) ? cppVar_36038 : P2;
	BIT_VEC cppVar_36040 = ROM.rd(PC);
	bool cppVar_36042 = (cppVar_36040 == 5);
	BIT_VEC cppVar_36044 = PC + 1;
	cppVar_36044 = (cppVar_36044 & cppMask_un_16_);
	BIT_VEC cppVar_36045 = ROM.rd(cppVar_36044);
	bool cppVar_36047 = (cppVar_36045 == 160);
	BIT_VEC cppVar_36048 = PC + 1;
	cppVar_36048 = (cppVar_36048 & cppMask_un_16_);
	BIT_VEC cppVar_36049 = ROM.rd(cppVar_36048);
	BIT_VEC cppVar_36050 = (cppVar_36049 >> 7) & cppMask_un_1_;
	bool cppVar_36052 = (cppVar_36050 == 0);
	BIT_VEC cppVar_36053 = PC + 1;
	cppVar_36053 = (cppVar_36053 & cppMask_un_16_);
	BIT_VEC cppVar_36054 = ROM.rd(cppVar_36053);
	BIT_VEC cppVar_36055 = IRAM.rd(cppVar_36054);
	BIT_VEC cppVar_36056 = PC + 1;
	cppVar_36056 = (cppVar_36056 & cppMask_un_16_);
	BIT_VEC cppVar_36057 = ROM.rd(cppVar_36056);
	bool cppVar_36059 = (cppVar_36057 == 128);
	BIT_VEC cppVar_36060 = PC + 1;
	cppVar_36060 = (cppVar_36060 & cppMask_un_16_);
	BIT_VEC cppVar_36061 = ROM.rd(cppVar_36060);
	bool cppVar_36063 = (cppVar_36061 == 129);
	BIT_VEC cppVar_36064 = PC + 1;
	cppVar_36064 = (cppVar_36064 & cppMask_un_16_);
	BIT_VEC cppVar_36065 = ROM.rd(cppVar_36064);
	bool cppVar_36067 = (cppVar_36065 == 130);
	BIT_VEC cppVar_36068 = PC + 1;
	cppVar_36068 = (cppVar_36068 & cppMask_un_16_);
	BIT_VEC cppVar_36069 = ROM.rd(cppVar_36068);
	bool cppVar_36071 = (cppVar_36069 == 131);
	BIT_VEC cppVar_36072 = PC + 1;
	cppVar_36072 = (cppVar_36072 & cppMask_un_16_);
	BIT_VEC cppVar_36073 = ROM.rd(cppVar_36072);
	bool cppVar_36075 = (cppVar_36073 == 135);
	BIT_VEC cppVar_36076 = PC + 1;
	cppVar_36076 = (cppVar_36076 & cppMask_un_16_);
	BIT_VEC cppVar_36077 = ROM.rd(cppVar_36076);
	bool cppVar_36079 = (cppVar_36077 == 136);
	BIT_VEC cppVar_36080 = PC + 1;
	cppVar_36080 = (cppVar_36080 & cppMask_un_16_);
	BIT_VEC cppVar_36081 = ROM.rd(cppVar_36080);
	bool cppVar_36083 = (cppVar_36081 == 137);
	BIT_VEC cppVar_36084 = PC + 1;
	cppVar_36084 = (cppVar_36084 & cppMask_un_16_);
	BIT_VEC cppVar_36085 = ROM.rd(cppVar_36084);
	bool cppVar_36087 = (cppVar_36085 == 138);
	BIT_VEC cppVar_36088 = PC + 1;
	cppVar_36088 = (cppVar_36088 & cppMask_un_16_);
	BIT_VEC cppVar_36089 = ROM.rd(cppVar_36088);
	bool cppVar_36091 = (cppVar_36089 == 140);
	BIT_VEC cppVar_36092 = PC + 1;
	cppVar_36092 = (cppVar_36092 & cppMask_un_16_);
	BIT_VEC cppVar_36093 = ROM.rd(cppVar_36092);
	bool cppVar_36095 = (cppVar_36093 == 139);
	BIT_VEC cppVar_36096 = PC + 1;
	cppVar_36096 = (cppVar_36096 & cppMask_un_16_);
	BIT_VEC cppVar_36097 = ROM.rd(cppVar_36096);
	bool cppVar_36099 = (cppVar_36097 == 141);
	BIT_VEC cppVar_36100 = PC + 1;
	cppVar_36100 = (cppVar_36100 & cppMask_un_16_);
	BIT_VEC cppVar_36101 = ROM.rd(cppVar_36100);
	bool cppVar_36103 = (cppVar_36101 == 144);
	BIT_VEC cppVar_36104 = PC + 1;
	cppVar_36104 = (cppVar_36104 & cppMask_un_16_);
	BIT_VEC cppVar_36105 = ROM.rd(cppVar_36104);
	bool cppVar_36107 = (cppVar_36105 == 152);
	BIT_VEC cppVar_36108 = PC + 1;
	cppVar_36108 = (cppVar_36108 & cppMask_un_16_);
	BIT_VEC cppVar_36109 = ROM.rd(cppVar_36108);
	bool cppVar_36111 = (cppVar_36109 == 153);
	BIT_VEC cppVar_36112 = PC + 1;
	cppVar_36112 = (cppVar_36112 & cppMask_un_16_);
	BIT_VEC cppVar_36113 = ROM.rd(cppVar_36112);
	bool cppVar_36115 = (cppVar_36113 == 160);
	BIT_VEC cppVar_36116 = PC + 1;
	cppVar_36116 = (cppVar_36116 & cppMask_un_16_);
	BIT_VEC cppVar_36117 = ROM.rd(cppVar_36116);
	bool cppVar_36119 = (cppVar_36117 == 168);
	BIT_VEC cppVar_36120 = PC + 1;
	cppVar_36120 = (cppVar_36120 & cppMask_un_16_);
	BIT_VEC cppVar_36121 = ROM.rd(cppVar_36120);
	bool cppVar_36123 = (cppVar_36121 == 176);
	BIT_VEC cppVar_36124 = PC + 1;
	cppVar_36124 = (cppVar_36124 & cppMask_un_16_);
	BIT_VEC cppVar_36125 = ROM.rd(cppVar_36124);
	bool cppVar_36127 = (cppVar_36125 == 184);
	BIT_VEC cppVar_36128 = PC + 1;
	cppVar_36128 = (cppVar_36128 & cppMask_un_16_);
	BIT_VEC cppVar_36129 = ROM.rd(cppVar_36128);
	bool cppVar_36131 = (cppVar_36129 == 208);
	BIT_VEC cppVar_36132 = PC + 1;
	cppVar_36132 = (cppVar_36132 & cppMask_un_16_);
	BIT_VEC cppVar_36133 = ROM.rd(cppVar_36132);
	bool cppVar_36135 = (cppVar_36133 == 224);
	BIT_VEC cppVar_36136 = PC + 1;
	cppVar_36136 = (cppVar_36136 & cppMask_un_16_);
	BIT_VEC cppVar_36137 = ROM.rd(cppVar_36136);
	bool cppVar_36139 = (cppVar_36137 == 240);
	BIT_VEC cppVar_36141 = (cppVar_36139) ? B : 0;
	BIT_VEC cppVar_36142 = (cppVar_36135) ? ACC : cppVar_36141;
	BIT_VEC cppVar_36143 = (cppVar_36131) ? PSW : cppVar_36142;
	BIT_VEC cppVar_36144 = (cppVar_36127) ? IP : cppVar_36143;
	BIT_VEC cppVar_36145 = (cppVar_36123) ? P3 : cppVar_36144;
	BIT_VEC cppVar_36146 = (cppVar_36119) ? IE : cppVar_36145;
	BIT_VEC cppVar_36147 = (cppVar_36115) ? P2 : cppVar_36146;
	BIT_VEC cppVar_36148 = (cppVar_36111) ? SBUF : cppVar_36147;
	BIT_VEC cppVar_36149 = (cppVar_36107) ? SCON : cppVar_36148;
	BIT_VEC cppVar_36150 = (cppVar_36103) ? P1 : cppVar_36149;
	BIT_VEC cppVar_36151 = (cppVar_36099) ? TH1 : cppVar_36150;
	BIT_VEC cppVar_36152 = (cppVar_36095) ? TL1 : cppVar_36151;
	BIT_VEC cppVar_36153 = (cppVar_36091) ? TH0 : cppVar_36152;
	BIT_VEC cppVar_36154 = (cppVar_36087) ? TL0 : cppVar_36153;
	BIT_VEC cppVar_36155 = (cppVar_36083) ? TMOD : cppVar_36154;
	BIT_VEC cppVar_36156 = (cppVar_36079) ? TCON : cppVar_36155;
	BIT_VEC cppVar_36157 = (cppVar_36075) ? PCON : cppVar_36156;
	BIT_VEC cppVar_36158 = (cppVar_36071) ? DPH : cppVar_36157;
	BIT_VEC cppVar_36159 = (cppVar_36067) ? DPL : cppVar_36158;
	BIT_VEC cppVar_36160 = (cppVar_36063) ? SP : cppVar_36159;
	BIT_VEC cppVar_36161 = (cppVar_36059) ? P0 : cppVar_36160;
	BIT_VEC cppVar_36162 = (cppVar_36052) ? cppVar_36055 : cppVar_36161;
	BIT_VEC cppVar_36164 = cppVar_36162 + 1;
	cppVar_36164 = (cppVar_36164 & cppMask_un_8_);
	BIT_VEC cppVar_36165 = (cppVar_36047) ? cppVar_36164 : P2;
	BIT_VEC cppVar_36166 = (cppVar_36042) ? cppVar_36165 : P2;
	BIT_VEC cppVar_36167 = (cppVar_35611) ? cppVar_36039 : cppVar_36166;
	BIT_VEC cppVar_36168 = (cppVar_35481) ? cppVar_35604 : cppVar_36167;
	BIT_VEC cppVar_36169 = (cppVar_35352) ? cppVar_35474 : cppVar_36168;
	BIT_VEC cppVar_36170 = (cppVar_35224) ? cppVar_35349 : cppVar_36169;
	BIT_VEC cppVar_36171 = (cppVar_35099) ? cppVar_35221 : cppVar_36170;
	BIT_VEC cppVar_36172 = (cppVar_34971) ? cppVar_35096 : cppVar_36171;
	BIT_VEC cppVar_36173 = (cppVar_34846) ? cppVar_34968 : cppVar_36172;
	BIT_VEC cppVar_36174 = (cppVar_34718) ? cppVar_34843 : cppVar_36173;
	BIT_VEC cppVar_36175 = (cppVar_34706) ? cppVar_34715 : cppVar_36174;
	BIT_VEC cppVar_36176 = (cppVar_34581) ? cppVar_34703 : cppVar_36175;
	BIT_VEC cppVar_36177 = (cppVar_34565) ? cppVar_34578 : cppVar_36176;
	BIT_VEC cppVar_36178 = (cppVar_34549) ? cppVar_34562 : cppVar_36177;
	BIT_VEC cppVar_36179 = (cppVar_34400) ? cppVar_34546 : cppVar_36178;
	BIT_VEC cppVar_36180 = (cppVar_34251) ? cppVar_34397 : cppVar_36179;
	BIT_VEC cppVar_36181 = (cppVar_34102) ? cppVar_34248 : cppVar_36180;
	BIT_VEC cppVar_36182 = (cppVar_33953) ? cppVar_34099 : cppVar_36181;
	BIT_VEC cppVar_36183 = (cppVar_33804) ? cppVar_33950 : cppVar_36182;
	BIT_VEC cppVar_36184 = (cppVar_33655) ? cppVar_33801 : cppVar_36183;
	BIT_VEC cppVar_36185 = (cppVar_33506) ? cppVar_33652 : cppVar_36184;
	BIT_VEC cppVar_36186 = (cppVar_33357) ? cppVar_33503 : cppVar_36185;
	BIT_VEC cppVar_36187 = (cppVar_32926) ? cppVar_33354 : cppVar_36186;
	BIT_VEC cppVar_36188 = (cppVar_32097) ? cppVar_32923 : cppVar_36187;
	BIT_VEC cppVar_36189 = (cppVar_32088) ? cppVar_32094 : cppVar_36188;
	BIT_VEC cppVar_36190 = (cppVar_32074) ? cppVar_32081 : cppVar_36189;
	BIT_VEC cppVar_36191 = (cppVar_31643) ? cppVar_32071 : cppVar_36190;
	return cppVar_36191;
}
