#include "common.hpp"
#include "model_oc8051_class.hpp"

BIT_VEC model_oc8051::cppUpdateFun_SBUF()
{
	BIT_VEC cppVar_57109 = ROM.rd(PC);
	bool cppVar_57111 = (cppVar_57109 == 208);
	BIT_VEC cppVar_57113 = PC + 1;
	cppVar_57113 = (cppVar_57113 & cppMask_un_16_);
	BIT_VEC cppVar_57114 = ROM.rd(cppVar_57113);
	bool cppVar_57116 = (cppVar_57114 == 153);
	BIT_VEC cppVar_57117 = IRAM.rd(SP);
	BIT_VEC cppVar_57118 = (cppVar_57116) ? cppVar_57117 : SBUF;
	BIT_VEC cppVar_57119 = ROM.rd(PC);
	bool cppVar_57121 = (cppVar_57119 == 245);
	BIT_VEC cppVar_57122 = ROM.rd(PC);
	bool cppVar_57124 = (cppVar_57122 == 197);
	bool cppVar_57125 = cppVar_57121 || cppVar_57124;
	BIT_VEC cppVar_57127 = PC + 1;
	cppVar_57127 = (cppVar_57127 & cppMask_un_16_);
	BIT_VEC cppVar_57128 = ROM.rd(cppVar_57127);
	bool cppVar_57130 = (cppVar_57128 == 153);
	BIT_VEC cppVar_57131 = (cppVar_57130) ? ACC : SBUF;
	BIT_VEC cppVar_57132 = ROM.rd(PC);
	bool cppVar_57134 = (cppVar_57132 == 143);
	BIT_VEC cppVar_57136 = PC + 1;
	cppVar_57136 = (cppVar_57136 & cppMask_un_16_);
	BIT_VEC cppVar_57137 = ROM.rd(cppVar_57136);
	bool cppVar_57139 = (cppVar_57137 == 153);
	BIT_VEC cppVar_57141 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57143 = (cppVar_57141 << 3) | 7;
	cppVar_57143 = (cppVar_57143 & cppMask_un_5_);
	BIT_VEC cppVar_57144 = (0 << 5) | cppVar_57143;
	cppVar_57144 = (cppVar_57144 & cppMask_un_8_);
	BIT_VEC cppVar_57145 = (cppVar_57144 >> 7) & cppMask_un_1_;
	bool cppVar_57147 = (cppVar_57145 == 0);
	BIT_VEC cppVar_57148 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57149 = (cppVar_57148 << 3) | 7;
	cppVar_57149 = (cppVar_57149 & cppMask_un_5_);
	BIT_VEC cppVar_57150 = (0 << 5) | cppVar_57149;
	cppVar_57150 = (cppVar_57150 & cppMask_un_8_);
	BIT_VEC cppVar_57151 = IRAM.rd(cppVar_57150);
	BIT_VEC cppVar_57152 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57153 = (cppVar_57152 << 3) | 7;
	cppVar_57153 = (cppVar_57153 & cppMask_un_5_);
	BIT_VEC cppVar_57154 = (0 << 5) | cppVar_57153;
	cppVar_57154 = (cppVar_57154 & cppMask_un_8_);
	bool cppVar_57156 = (cppVar_57154 == 128);
	BIT_VEC cppVar_57157 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57158 = (cppVar_57157 << 3) | 7;
	cppVar_57158 = (cppVar_57158 & cppMask_un_5_);
	BIT_VEC cppVar_57159 = (0 << 5) | cppVar_57158;
	cppVar_57159 = (cppVar_57159 & cppMask_un_8_);
	bool cppVar_57161 = (cppVar_57159 == 129);
	BIT_VEC cppVar_57162 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57163 = (cppVar_57162 << 3) | 7;
	cppVar_57163 = (cppVar_57163 & cppMask_un_5_);
	BIT_VEC cppVar_57164 = (0 << 5) | cppVar_57163;
	cppVar_57164 = (cppVar_57164 & cppMask_un_8_);
	bool cppVar_57166 = (cppVar_57164 == 130);
	BIT_VEC cppVar_57167 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57168 = (cppVar_57167 << 3) | 7;
	cppVar_57168 = (cppVar_57168 & cppMask_un_5_);
	BIT_VEC cppVar_57169 = (0 << 5) | cppVar_57168;
	cppVar_57169 = (cppVar_57169 & cppMask_un_8_);
	bool cppVar_57171 = (cppVar_57169 == 131);
	BIT_VEC cppVar_57172 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57173 = (cppVar_57172 << 3) | 7;
	cppVar_57173 = (cppVar_57173 & cppMask_un_5_);
	BIT_VEC cppVar_57174 = (0 << 5) | cppVar_57173;
	cppVar_57174 = (cppVar_57174 & cppMask_un_8_);
	bool cppVar_57176 = (cppVar_57174 == 135);
	BIT_VEC cppVar_57177 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57178 = (cppVar_57177 << 3) | 7;
	cppVar_57178 = (cppVar_57178 & cppMask_un_5_);
	BIT_VEC cppVar_57179 = (0 << 5) | cppVar_57178;
	cppVar_57179 = (cppVar_57179 & cppMask_un_8_);
	bool cppVar_57181 = (cppVar_57179 == 136);
	BIT_VEC cppVar_57182 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57183 = (cppVar_57182 << 3) | 7;
	cppVar_57183 = (cppVar_57183 & cppMask_un_5_);
	BIT_VEC cppVar_57184 = (0 << 5) | cppVar_57183;
	cppVar_57184 = (cppVar_57184 & cppMask_un_8_);
	bool cppVar_57186 = (cppVar_57184 == 137);
	BIT_VEC cppVar_57187 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57188 = (cppVar_57187 << 3) | 7;
	cppVar_57188 = (cppVar_57188 & cppMask_un_5_);
	BIT_VEC cppVar_57189 = (0 << 5) | cppVar_57188;
	cppVar_57189 = (cppVar_57189 & cppMask_un_8_);
	bool cppVar_57191 = (cppVar_57189 == 138);
	BIT_VEC cppVar_57192 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57193 = (cppVar_57192 << 3) | 7;
	cppVar_57193 = (cppVar_57193 & cppMask_un_5_);
	BIT_VEC cppVar_57194 = (0 << 5) | cppVar_57193;
	cppVar_57194 = (cppVar_57194 & cppMask_un_8_);
	bool cppVar_57196 = (cppVar_57194 == 140);
	BIT_VEC cppVar_57197 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57198 = (cppVar_57197 << 3) | 7;
	cppVar_57198 = (cppVar_57198 & cppMask_un_5_);
	BIT_VEC cppVar_57199 = (0 << 5) | cppVar_57198;
	cppVar_57199 = (cppVar_57199 & cppMask_un_8_);
	bool cppVar_57201 = (cppVar_57199 == 139);
	BIT_VEC cppVar_57202 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57203 = (cppVar_57202 << 3) | 7;
	cppVar_57203 = (cppVar_57203 & cppMask_un_5_);
	BIT_VEC cppVar_57204 = (0 << 5) | cppVar_57203;
	cppVar_57204 = (cppVar_57204 & cppMask_un_8_);
	bool cppVar_57206 = (cppVar_57204 == 141);
	BIT_VEC cppVar_57207 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57208 = (cppVar_57207 << 3) | 7;
	cppVar_57208 = (cppVar_57208 & cppMask_un_5_);
	BIT_VEC cppVar_57209 = (0 << 5) | cppVar_57208;
	cppVar_57209 = (cppVar_57209 & cppMask_un_8_);
	bool cppVar_57211 = (cppVar_57209 == 144);
	BIT_VEC cppVar_57212 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57213 = (cppVar_57212 << 3) | 7;
	cppVar_57213 = (cppVar_57213 & cppMask_un_5_);
	BIT_VEC cppVar_57214 = (0 << 5) | cppVar_57213;
	cppVar_57214 = (cppVar_57214 & cppMask_un_8_);
	bool cppVar_57216 = (cppVar_57214 == 152);
	BIT_VEC cppVar_57217 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57218 = (cppVar_57217 << 3) | 7;
	cppVar_57218 = (cppVar_57218 & cppMask_un_5_);
	BIT_VEC cppVar_57219 = (0 << 5) | cppVar_57218;
	cppVar_57219 = (cppVar_57219 & cppMask_un_8_);
	bool cppVar_57221 = (cppVar_57219 == 153);
	BIT_VEC cppVar_57222 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57223 = (cppVar_57222 << 3) | 7;
	cppVar_57223 = (cppVar_57223 & cppMask_un_5_);
	BIT_VEC cppVar_57224 = (0 << 5) | cppVar_57223;
	cppVar_57224 = (cppVar_57224 & cppMask_un_8_);
	bool cppVar_57226 = (cppVar_57224 == 160);
	BIT_VEC cppVar_57227 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57228 = (cppVar_57227 << 3) | 7;
	cppVar_57228 = (cppVar_57228 & cppMask_un_5_);
	BIT_VEC cppVar_57229 = (0 << 5) | cppVar_57228;
	cppVar_57229 = (cppVar_57229 & cppMask_un_8_);
	bool cppVar_57231 = (cppVar_57229 == 168);
	BIT_VEC cppVar_57232 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57233 = (cppVar_57232 << 3) | 7;
	cppVar_57233 = (cppVar_57233 & cppMask_un_5_);
	BIT_VEC cppVar_57234 = (0 << 5) | cppVar_57233;
	cppVar_57234 = (cppVar_57234 & cppMask_un_8_);
	bool cppVar_57236 = (cppVar_57234 == 176);
	BIT_VEC cppVar_57237 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57238 = (cppVar_57237 << 3) | 7;
	cppVar_57238 = (cppVar_57238 & cppMask_un_5_);
	BIT_VEC cppVar_57239 = (0 << 5) | cppVar_57238;
	cppVar_57239 = (cppVar_57239 & cppMask_un_8_);
	bool cppVar_57241 = (cppVar_57239 == 184);
	BIT_VEC cppVar_57242 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57243 = (cppVar_57242 << 3) | 7;
	cppVar_57243 = (cppVar_57243 & cppMask_un_5_);
	BIT_VEC cppVar_57244 = (0 << 5) | cppVar_57243;
	cppVar_57244 = (cppVar_57244 & cppMask_un_8_);
	bool cppVar_57246 = (cppVar_57244 == 208);
	BIT_VEC cppVar_57247 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57248 = (cppVar_57247 << 3) | 7;
	cppVar_57248 = (cppVar_57248 & cppMask_un_5_);
	BIT_VEC cppVar_57249 = (0 << 5) | cppVar_57248;
	cppVar_57249 = (cppVar_57249 & cppMask_un_8_);
	bool cppVar_57251 = (cppVar_57249 == 224);
	BIT_VEC cppVar_57252 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57253 = (cppVar_57252 << 3) | 7;
	cppVar_57253 = (cppVar_57253 & cppMask_un_5_);
	BIT_VEC cppVar_57254 = (0 << 5) | cppVar_57253;
	cppVar_57254 = (cppVar_57254 & cppMask_un_8_);
	bool cppVar_57256 = (cppVar_57254 == 240);
	BIT_VEC cppVar_57258 = (cppVar_57256) ? B : 0;
	BIT_VEC cppVar_57259 = (cppVar_57251) ? ACC : cppVar_57258;
	BIT_VEC cppVar_57260 = (cppVar_57246) ? PSW : cppVar_57259;
	BIT_VEC cppVar_57261 = (cppVar_57241) ? IP : cppVar_57260;
	BIT_VEC cppVar_57262 = (cppVar_57236) ? P3 : cppVar_57261;
	BIT_VEC cppVar_57263 = (cppVar_57231) ? IE : cppVar_57262;
	BIT_VEC cppVar_57264 = (cppVar_57226) ? P2 : cppVar_57263;
	BIT_VEC cppVar_57265 = (cppVar_57221) ? SBUF : cppVar_57264;
	BIT_VEC cppVar_57266 = (cppVar_57216) ? SCON : cppVar_57265;
	BIT_VEC cppVar_57267 = (cppVar_57211) ? P1 : cppVar_57266;
	BIT_VEC cppVar_57268 = (cppVar_57206) ? TH1 : cppVar_57267;
	BIT_VEC cppVar_57269 = (cppVar_57201) ? TL1 : cppVar_57268;
	BIT_VEC cppVar_57270 = (cppVar_57196) ? TH0 : cppVar_57269;
	BIT_VEC cppVar_57271 = (cppVar_57191) ? TL0 : cppVar_57270;
	BIT_VEC cppVar_57272 = (cppVar_57186) ? TMOD : cppVar_57271;
	BIT_VEC cppVar_57273 = (cppVar_57181) ? TCON : cppVar_57272;
	BIT_VEC cppVar_57274 = (cppVar_57176) ? PCON : cppVar_57273;
	BIT_VEC cppVar_57275 = (cppVar_57171) ? DPH : cppVar_57274;
	BIT_VEC cppVar_57276 = (cppVar_57166) ? DPL : cppVar_57275;
	BIT_VEC cppVar_57277 = (cppVar_57161) ? SP : cppVar_57276;
	BIT_VEC cppVar_57278 = (cppVar_57156) ? P0 : cppVar_57277;
	BIT_VEC cppVar_57279 = (cppVar_57147) ? cppVar_57151 : cppVar_57278;
	BIT_VEC cppVar_57280 = (cppVar_57139) ? cppVar_57279 : SBUF;
	BIT_VEC cppVar_57281 = ROM.rd(PC);
	bool cppVar_57283 = (cppVar_57281 == 142);
	BIT_VEC cppVar_57285 = PC + 1;
	cppVar_57285 = (cppVar_57285 & cppMask_un_16_);
	BIT_VEC cppVar_57286 = ROM.rd(cppVar_57285);
	bool cppVar_57288 = (cppVar_57286 == 153);
	BIT_VEC cppVar_57290 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57292 = (cppVar_57290 << 3) | 6;
	cppVar_57292 = (cppVar_57292 & cppMask_un_5_);
	BIT_VEC cppVar_57293 = (0 << 5) | cppVar_57292;
	cppVar_57293 = (cppVar_57293 & cppMask_un_8_);
	BIT_VEC cppVar_57294 = (cppVar_57293 >> 7) & cppMask_un_1_;
	bool cppVar_57296 = (cppVar_57294 == 0);
	BIT_VEC cppVar_57297 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57298 = (cppVar_57297 << 3) | 6;
	cppVar_57298 = (cppVar_57298 & cppMask_un_5_);
	BIT_VEC cppVar_57299 = (0 << 5) | cppVar_57298;
	cppVar_57299 = (cppVar_57299 & cppMask_un_8_);
	BIT_VEC cppVar_57300 = IRAM.rd(cppVar_57299);
	BIT_VEC cppVar_57301 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57302 = (cppVar_57301 << 3) | 6;
	cppVar_57302 = (cppVar_57302 & cppMask_un_5_);
	BIT_VEC cppVar_57303 = (0 << 5) | cppVar_57302;
	cppVar_57303 = (cppVar_57303 & cppMask_un_8_);
	bool cppVar_57305 = (cppVar_57303 == 128);
	BIT_VEC cppVar_57306 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57307 = (cppVar_57306 << 3) | 6;
	cppVar_57307 = (cppVar_57307 & cppMask_un_5_);
	BIT_VEC cppVar_57308 = (0 << 5) | cppVar_57307;
	cppVar_57308 = (cppVar_57308 & cppMask_un_8_);
	bool cppVar_57310 = (cppVar_57308 == 129);
	BIT_VEC cppVar_57311 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57312 = (cppVar_57311 << 3) | 6;
	cppVar_57312 = (cppVar_57312 & cppMask_un_5_);
	BIT_VEC cppVar_57313 = (0 << 5) | cppVar_57312;
	cppVar_57313 = (cppVar_57313 & cppMask_un_8_);
	bool cppVar_57315 = (cppVar_57313 == 130);
	BIT_VEC cppVar_57316 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57317 = (cppVar_57316 << 3) | 6;
	cppVar_57317 = (cppVar_57317 & cppMask_un_5_);
	BIT_VEC cppVar_57318 = (0 << 5) | cppVar_57317;
	cppVar_57318 = (cppVar_57318 & cppMask_un_8_);
	bool cppVar_57320 = (cppVar_57318 == 131);
	BIT_VEC cppVar_57321 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57322 = (cppVar_57321 << 3) | 6;
	cppVar_57322 = (cppVar_57322 & cppMask_un_5_);
	BIT_VEC cppVar_57323 = (0 << 5) | cppVar_57322;
	cppVar_57323 = (cppVar_57323 & cppMask_un_8_);
	bool cppVar_57325 = (cppVar_57323 == 135);
	BIT_VEC cppVar_57326 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57327 = (cppVar_57326 << 3) | 6;
	cppVar_57327 = (cppVar_57327 & cppMask_un_5_);
	BIT_VEC cppVar_57328 = (0 << 5) | cppVar_57327;
	cppVar_57328 = (cppVar_57328 & cppMask_un_8_);
	bool cppVar_57330 = (cppVar_57328 == 136);
	BIT_VEC cppVar_57331 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57332 = (cppVar_57331 << 3) | 6;
	cppVar_57332 = (cppVar_57332 & cppMask_un_5_);
	BIT_VEC cppVar_57333 = (0 << 5) | cppVar_57332;
	cppVar_57333 = (cppVar_57333 & cppMask_un_8_);
	bool cppVar_57335 = (cppVar_57333 == 137);
	BIT_VEC cppVar_57336 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57337 = (cppVar_57336 << 3) | 6;
	cppVar_57337 = (cppVar_57337 & cppMask_un_5_);
	BIT_VEC cppVar_57338 = (0 << 5) | cppVar_57337;
	cppVar_57338 = (cppVar_57338 & cppMask_un_8_);
	bool cppVar_57340 = (cppVar_57338 == 138);
	BIT_VEC cppVar_57341 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57342 = (cppVar_57341 << 3) | 6;
	cppVar_57342 = (cppVar_57342 & cppMask_un_5_);
	BIT_VEC cppVar_57343 = (0 << 5) | cppVar_57342;
	cppVar_57343 = (cppVar_57343 & cppMask_un_8_);
	bool cppVar_57345 = (cppVar_57343 == 140);
	BIT_VEC cppVar_57346 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57347 = (cppVar_57346 << 3) | 6;
	cppVar_57347 = (cppVar_57347 & cppMask_un_5_);
	BIT_VEC cppVar_57348 = (0 << 5) | cppVar_57347;
	cppVar_57348 = (cppVar_57348 & cppMask_un_8_);
	bool cppVar_57350 = (cppVar_57348 == 139);
	BIT_VEC cppVar_57351 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57352 = (cppVar_57351 << 3) | 6;
	cppVar_57352 = (cppVar_57352 & cppMask_un_5_);
	BIT_VEC cppVar_57353 = (0 << 5) | cppVar_57352;
	cppVar_57353 = (cppVar_57353 & cppMask_un_8_);
	bool cppVar_57355 = (cppVar_57353 == 141);
	BIT_VEC cppVar_57356 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57357 = (cppVar_57356 << 3) | 6;
	cppVar_57357 = (cppVar_57357 & cppMask_un_5_);
	BIT_VEC cppVar_57358 = (0 << 5) | cppVar_57357;
	cppVar_57358 = (cppVar_57358 & cppMask_un_8_);
	bool cppVar_57360 = (cppVar_57358 == 144);
	BIT_VEC cppVar_57361 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57362 = (cppVar_57361 << 3) | 6;
	cppVar_57362 = (cppVar_57362 & cppMask_un_5_);
	BIT_VEC cppVar_57363 = (0 << 5) | cppVar_57362;
	cppVar_57363 = (cppVar_57363 & cppMask_un_8_);
	bool cppVar_57365 = (cppVar_57363 == 152);
	BIT_VEC cppVar_57366 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57367 = (cppVar_57366 << 3) | 6;
	cppVar_57367 = (cppVar_57367 & cppMask_un_5_);
	BIT_VEC cppVar_57368 = (0 << 5) | cppVar_57367;
	cppVar_57368 = (cppVar_57368 & cppMask_un_8_);
	bool cppVar_57370 = (cppVar_57368 == 153);
	BIT_VEC cppVar_57371 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57372 = (cppVar_57371 << 3) | 6;
	cppVar_57372 = (cppVar_57372 & cppMask_un_5_);
	BIT_VEC cppVar_57373 = (0 << 5) | cppVar_57372;
	cppVar_57373 = (cppVar_57373 & cppMask_un_8_);
	bool cppVar_57375 = (cppVar_57373 == 160);
	BIT_VEC cppVar_57376 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57377 = (cppVar_57376 << 3) | 6;
	cppVar_57377 = (cppVar_57377 & cppMask_un_5_);
	BIT_VEC cppVar_57378 = (0 << 5) | cppVar_57377;
	cppVar_57378 = (cppVar_57378 & cppMask_un_8_);
	bool cppVar_57380 = (cppVar_57378 == 168);
	BIT_VEC cppVar_57381 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57382 = (cppVar_57381 << 3) | 6;
	cppVar_57382 = (cppVar_57382 & cppMask_un_5_);
	BIT_VEC cppVar_57383 = (0 << 5) | cppVar_57382;
	cppVar_57383 = (cppVar_57383 & cppMask_un_8_);
	bool cppVar_57385 = (cppVar_57383 == 176);
	BIT_VEC cppVar_57386 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57387 = (cppVar_57386 << 3) | 6;
	cppVar_57387 = (cppVar_57387 & cppMask_un_5_);
	BIT_VEC cppVar_57388 = (0 << 5) | cppVar_57387;
	cppVar_57388 = (cppVar_57388 & cppMask_un_8_);
	bool cppVar_57390 = (cppVar_57388 == 184);
	BIT_VEC cppVar_57391 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57392 = (cppVar_57391 << 3) | 6;
	cppVar_57392 = (cppVar_57392 & cppMask_un_5_);
	BIT_VEC cppVar_57393 = (0 << 5) | cppVar_57392;
	cppVar_57393 = (cppVar_57393 & cppMask_un_8_);
	bool cppVar_57395 = (cppVar_57393 == 208);
	BIT_VEC cppVar_57396 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57397 = (cppVar_57396 << 3) | 6;
	cppVar_57397 = (cppVar_57397 & cppMask_un_5_);
	BIT_VEC cppVar_57398 = (0 << 5) | cppVar_57397;
	cppVar_57398 = (cppVar_57398 & cppMask_un_8_);
	bool cppVar_57400 = (cppVar_57398 == 224);
	BIT_VEC cppVar_57401 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57402 = (cppVar_57401 << 3) | 6;
	cppVar_57402 = (cppVar_57402 & cppMask_un_5_);
	BIT_VEC cppVar_57403 = (0 << 5) | cppVar_57402;
	cppVar_57403 = (cppVar_57403 & cppMask_un_8_);
	bool cppVar_57405 = (cppVar_57403 == 240);
	BIT_VEC cppVar_57407 = (cppVar_57405) ? B : 0;
	BIT_VEC cppVar_57408 = (cppVar_57400) ? ACC : cppVar_57407;
	BIT_VEC cppVar_57409 = (cppVar_57395) ? PSW : cppVar_57408;
	BIT_VEC cppVar_57410 = (cppVar_57390) ? IP : cppVar_57409;
	BIT_VEC cppVar_57411 = (cppVar_57385) ? P3 : cppVar_57410;
	BIT_VEC cppVar_57412 = (cppVar_57380) ? IE : cppVar_57411;
	BIT_VEC cppVar_57413 = (cppVar_57375) ? P2 : cppVar_57412;
	BIT_VEC cppVar_57414 = (cppVar_57370) ? SBUF : cppVar_57413;
	BIT_VEC cppVar_57415 = (cppVar_57365) ? SCON : cppVar_57414;
	BIT_VEC cppVar_57416 = (cppVar_57360) ? P1 : cppVar_57415;
	BIT_VEC cppVar_57417 = (cppVar_57355) ? TH1 : cppVar_57416;
	BIT_VEC cppVar_57418 = (cppVar_57350) ? TL1 : cppVar_57417;
	BIT_VEC cppVar_57419 = (cppVar_57345) ? TH0 : cppVar_57418;
	BIT_VEC cppVar_57420 = (cppVar_57340) ? TL0 : cppVar_57419;
	BIT_VEC cppVar_57421 = (cppVar_57335) ? TMOD : cppVar_57420;
	BIT_VEC cppVar_57422 = (cppVar_57330) ? TCON : cppVar_57421;
	BIT_VEC cppVar_57423 = (cppVar_57325) ? PCON : cppVar_57422;
	BIT_VEC cppVar_57424 = (cppVar_57320) ? DPH : cppVar_57423;
	BIT_VEC cppVar_57425 = (cppVar_57315) ? DPL : cppVar_57424;
	BIT_VEC cppVar_57426 = (cppVar_57310) ? SP : cppVar_57425;
	BIT_VEC cppVar_57427 = (cppVar_57305) ? P0 : cppVar_57426;
	BIT_VEC cppVar_57428 = (cppVar_57296) ? cppVar_57300 : cppVar_57427;
	BIT_VEC cppVar_57429 = (cppVar_57288) ? cppVar_57428 : SBUF;
	BIT_VEC cppVar_57430 = ROM.rd(PC);
	bool cppVar_57432 = (cppVar_57430 == 141);
	BIT_VEC cppVar_57434 = PC + 1;
	cppVar_57434 = (cppVar_57434 & cppMask_un_16_);
	BIT_VEC cppVar_57435 = ROM.rd(cppVar_57434);
	bool cppVar_57437 = (cppVar_57435 == 153);
	BIT_VEC cppVar_57439 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57441 = (cppVar_57439 << 3) | 5;
	cppVar_57441 = (cppVar_57441 & cppMask_un_5_);
	BIT_VEC cppVar_57442 = (0 << 5) | cppVar_57441;
	cppVar_57442 = (cppVar_57442 & cppMask_un_8_);
	BIT_VEC cppVar_57443 = (cppVar_57442 >> 7) & cppMask_un_1_;
	bool cppVar_57445 = (cppVar_57443 == 0);
	BIT_VEC cppVar_57446 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57447 = (cppVar_57446 << 3) | 5;
	cppVar_57447 = (cppVar_57447 & cppMask_un_5_);
	BIT_VEC cppVar_57448 = (0 << 5) | cppVar_57447;
	cppVar_57448 = (cppVar_57448 & cppMask_un_8_);
	BIT_VEC cppVar_57449 = IRAM.rd(cppVar_57448);
	BIT_VEC cppVar_57450 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57451 = (cppVar_57450 << 3) | 5;
	cppVar_57451 = (cppVar_57451 & cppMask_un_5_);
	BIT_VEC cppVar_57452 = (0 << 5) | cppVar_57451;
	cppVar_57452 = (cppVar_57452 & cppMask_un_8_);
	bool cppVar_57454 = (cppVar_57452 == 128);
	BIT_VEC cppVar_57455 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57456 = (cppVar_57455 << 3) | 5;
	cppVar_57456 = (cppVar_57456 & cppMask_un_5_);
	BIT_VEC cppVar_57457 = (0 << 5) | cppVar_57456;
	cppVar_57457 = (cppVar_57457 & cppMask_un_8_);
	bool cppVar_57459 = (cppVar_57457 == 129);
	BIT_VEC cppVar_57460 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57461 = (cppVar_57460 << 3) | 5;
	cppVar_57461 = (cppVar_57461 & cppMask_un_5_);
	BIT_VEC cppVar_57462 = (0 << 5) | cppVar_57461;
	cppVar_57462 = (cppVar_57462 & cppMask_un_8_);
	bool cppVar_57464 = (cppVar_57462 == 130);
	BIT_VEC cppVar_57465 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57466 = (cppVar_57465 << 3) | 5;
	cppVar_57466 = (cppVar_57466 & cppMask_un_5_);
	BIT_VEC cppVar_57467 = (0 << 5) | cppVar_57466;
	cppVar_57467 = (cppVar_57467 & cppMask_un_8_);
	bool cppVar_57469 = (cppVar_57467 == 131);
	BIT_VEC cppVar_57470 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57471 = (cppVar_57470 << 3) | 5;
	cppVar_57471 = (cppVar_57471 & cppMask_un_5_);
	BIT_VEC cppVar_57472 = (0 << 5) | cppVar_57471;
	cppVar_57472 = (cppVar_57472 & cppMask_un_8_);
	bool cppVar_57474 = (cppVar_57472 == 135);
	BIT_VEC cppVar_57475 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57476 = (cppVar_57475 << 3) | 5;
	cppVar_57476 = (cppVar_57476 & cppMask_un_5_);
	BIT_VEC cppVar_57477 = (0 << 5) | cppVar_57476;
	cppVar_57477 = (cppVar_57477 & cppMask_un_8_);
	bool cppVar_57479 = (cppVar_57477 == 136);
	BIT_VEC cppVar_57480 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57481 = (cppVar_57480 << 3) | 5;
	cppVar_57481 = (cppVar_57481 & cppMask_un_5_);
	BIT_VEC cppVar_57482 = (0 << 5) | cppVar_57481;
	cppVar_57482 = (cppVar_57482 & cppMask_un_8_);
	bool cppVar_57484 = (cppVar_57482 == 137);
	BIT_VEC cppVar_57485 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57486 = (cppVar_57485 << 3) | 5;
	cppVar_57486 = (cppVar_57486 & cppMask_un_5_);
	BIT_VEC cppVar_57487 = (0 << 5) | cppVar_57486;
	cppVar_57487 = (cppVar_57487 & cppMask_un_8_);
	bool cppVar_57489 = (cppVar_57487 == 138);
	BIT_VEC cppVar_57490 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57491 = (cppVar_57490 << 3) | 5;
	cppVar_57491 = (cppVar_57491 & cppMask_un_5_);
	BIT_VEC cppVar_57492 = (0 << 5) | cppVar_57491;
	cppVar_57492 = (cppVar_57492 & cppMask_un_8_);
	bool cppVar_57494 = (cppVar_57492 == 140);
	BIT_VEC cppVar_57495 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57496 = (cppVar_57495 << 3) | 5;
	cppVar_57496 = (cppVar_57496 & cppMask_un_5_);
	BIT_VEC cppVar_57497 = (0 << 5) | cppVar_57496;
	cppVar_57497 = (cppVar_57497 & cppMask_un_8_);
	bool cppVar_57499 = (cppVar_57497 == 139);
	BIT_VEC cppVar_57500 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57501 = (cppVar_57500 << 3) | 5;
	cppVar_57501 = (cppVar_57501 & cppMask_un_5_);
	BIT_VEC cppVar_57502 = (0 << 5) | cppVar_57501;
	cppVar_57502 = (cppVar_57502 & cppMask_un_8_);
	bool cppVar_57504 = (cppVar_57502 == 141);
	BIT_VEC cppVar_57505 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57506 = (cppVar_57505 << 3) | 5;
	cppVar_57506 = (cppVar_57506 & cppMask_un_5_);
	BIT_VEC cppVar_57507 = (0 << 5) | cppVar_57506;
	cppVar_57507 = (cppVar_57507 & cppMask_un_8_);
	bool cppVar_57509 = (cppVar_57507 == 144);
	BIT_VEC cppVar_57510 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57511 = (cppVar_57510 << 3) | 5;
	cppVar_57511 = (cppVar_57511 & cppMask_un_5_);
	BIT_VEC cppVar_57512 = (0 << 5) | cppVar_57511;
	cppVar_57512 = (cppVar_57512 & cppMask_un_8_);
	bool cppVar_57514 = (cppVar_57512 == 152);
	BIT_VEC cppVar_57515 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57516 = (cppVar_57515 << 3) | 5;
	cppVar_57516 = (cppVar_57516 & cppMask_un_5_);
	BIT_VEC cppVar_57517 = (0 << 5) | cppVar_57516;
	cppVar_57517 = (cppVar_57517 & cppMask_un_8_);
	bool cppVar_57519 = (cppVar_57517 == 153);
	BIT_VEC cppVar_57520 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57521 = (cppVar_57520 << 3) | 5;
	cppVar_57521 = (cppVar_57521 & cppMask_un_5_);
	BIT_VEC cppVar_57522 = (0 << 5) | cppVar_57521;
	cppVar_57522 = (cppVar_57522 & cppMask_un_8_);
	bool cppVar_57524 = (cppVar_57522 == 160);
	BIT_VEC cppVar_57525 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57526 = (cppVar_57525 << 3) | 5;
	cppVar_57526 = (cppVar_57526 & cppMask_un_5_);
	BIT_VEC cppVar_57527 = (0 << 5) | cppVar_57526;
	cppVar_57527 = (cppVar_57527 & cppMask_un_8_);
	bool cppVar_57529 = (cppVar_57527 == 168);
	BIT_VEC cppVar_57530 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57531 = (cppVar_57530 << 3) | 5;
	cppVar_57531 = (cppVar_57531 & cppMask_un_5_);
	BIT_VEC cppVar_57532 = (0 << 5) | cppVar_57531;
	cppVar_57532 = (cppVar_57532 & cppMask_un_8_);
	bool cppVar_57534 = (cppVar_57532 == 176);
	BIT_VEC cppVar_57535 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57536 = (cppVar_57535 << 3) | 5;
	cppVar_57536 = (cppVar_57536 & cppMask_un_5_);
	BIT_VEC cppVar_57537 = (0 << 5) | cppVar_57536;
	cppVar_57537 = (cppVar_57537 & cppMask_un_8_);
	bool cppVar_57539 = (cppVar_57537 == 184);
	BIT_VEC cppVar_57540 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57541 = (cppVar_57540 << 3) | 5;
	cppVar_57541 = (cppVar_57541 & cppMask_un_5_);
	BIT_VEC cppVar_57542 = (0 << 5) | cppVar_57541;
	cppVar_57542 = (cppVar_57542 & cppMask_un_8_);
	bool cppVar_57544 = (cppVar_57542 == 208);
	BIT_VEC cppVar_57545 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57546 = (cppVar_57545 << 3) | 5;
	cppVar_57546 = (cppVar_57546 & cppMask_un_5_);
	BIT_VEC cppVar_57547 = (0 << 5) | cppVar_57546;
	cppVar_57547 = (cppVar_57547 & cppMask_un_8_);
	bool cppVar_57549 = (cppVar_57547 == 224);
	BIT_VEC cppVar_57550 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57551 = (cppVar_57550 << 3) | 5;
	cppVar_57551 = (cppVar_57551 & cppMask_un_5_);
	BIT_VEC cppVar_57552 = (0 << 5) | cppVar_57551;
	cppVar_57552 = (cppVar_57552 & cppMask_un_8_);
	bool cppVar_57554 = (cppVar_57552 == 240);
	BIT_VEC cppVar_57556 = (cppVar_57554) ? B : 0;
	BIT_VEC cppVar_57557 = (cppVar_57549) ? ACC : cppVar_57556;
	BIT_VEC cppVar_57558 = (cppVar_57544) ? PSW : cppVar_57557;
	BIT_VEC cppVar_57559 = (cppVar_57539) ? IP : cppVar_57558;
	BIT_VEC cppVar_57560 = (cppVar_57534) ? P3 : cppVar_57559;
	BIT_VEC cppVar_57561 = (cppVar_57529) ? IE : cppVar_57560;
	BIT_VEC cppVar_57562 = (cppVar_57524) ? P2 : cppVar_57561;
	BIT_VEC cppVar_57563 = (cppVar_57519) ? SBUF : cppVar_57562;
	BIT_VEC cppVar_57564 = (cppVar_57514) ? SCON : cppVar_57563;
	BIT_VEC cppVar_57565 = (cppVar_57509) ? P1 : cppVar_57564;
	BIT_VEC cppVar_57566 = (cppVar_57504) ? TH1 : cppVar_57565;
	BIT_VEC cppVar_57567 = (cppVar_57499) ? TL1 : cppVar_57566;
	BIT_VEC cppVar_57568 = (cppVar_57494) ? TH0 : cppVar_57567;
	BIT_VEC cppVar_57569 = (cppVar_57489) ? TL0 : cppVar_57568;
	BIT_VEC cppVar_57570 = (cppVar_57484) ? TMOD : cppVar_57569;
	BIT_VEC cppVar_57571 = (cppVar_57479) ? TCON : cppVar_57570;
	BIT_VEC cppVar_57572 = (cppVar_57474) ? PCON : cppVar_57571;
	BIT_VEC cppVar_57573 = (cppVar_57469) ? DPH : cppVar_57572;
	BIT_VEC cppVar_57574 = (cppVar_57464) ? DPL : cppVar_57573;
	BIT_VEC cppVar_57575 = (cppVar_57459) ? SP : cppVar_57574;
	BIT_VEC cppVar_57576 = (cppVar_57454) ? P0 : cppVar_57575;
	BIT_VEC cppVar_57577 = (cppVar_57445) ? cppVar_57449 : cppVar_57576;
	BIT_VEC cppVar_57578 = (cppVar_57437) ? cppVar_57577 : SBUF;
	BIT_VEC cppVar_57579 = ROM.rd(PC);
	bool cppVar_57581 = (cppVar_57579 == 140);
	BIT_VEC cppVar_57583 = PC + 1;
	cppVar_57583 = (cppVar_57583 & cppMask_un_16_);
	BIT_VEC cppVar_57584 = ROM.rd(cppVar_57583);
	bool cppVar_57586 = (cppVar_57584 == 153);
	BIT_VEC cppVar_57588 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57590 = (cppVar_57588 << 3) | 4;
	cppVar_57590 = (cppVar_57590 & cppMask_un_5_);
	BIT_VEC cppVar_57591 = (0 << 5) | cppVar_57590;
	cppVar_57591 = (cppVar_57591 & cppMask_un_8_);
	BIT_VEC cppVar_57592 = (cppVar_57591 >> 7) & cppMask_un_1_;
	bool cppVar_57594 = (cppVar_57592 == 0);
	BIT_VEC cppVar_57595 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57596 = (cppVar_57595 << 3) | 4;
	cppVar_57596 = (cppVar_57596 & cppMask_un_5_);
	BIT_VEC cppVar_57597 = (0 << 5) | cppVar_57596;
	cppVar_57597 = (cppVar_57597 & cppMask_un_8_);
	BIT_VEC cppVar_57598 = IRAM.rd(cppVar_57597);
	BIT_VEC cppVar_57599 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57600 = (cppVar_57599 << 3) | 4;
	cppVar_57600 = (cppVar_57600 & cppMask_un_5_);
	BIT_VEC cppVar_57601 = (0 << 5) | cppVar_57600;
	cppVar_57601 = (cppVar_57601 & cppMask_un_8_);
	bool cppVar_57603 = (cppVar_57601 == 128);
	BIT_VEC cppVar_57604 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57605 = (cppVar_57604 << 3) | 4;
	cppVar_57605 = (cppVar_57605 & cppMask_un_5_);
	BIT_VEC cppVar_57606 = (0 << 5) | cppVar_57605;
	cppVar_57606 = (cppVar_57606 & cppMask_un_8_);
	bool cppVar_57608 = (cppVar_57606 == 129);
	BIT_VEC cppVar_57609 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57610 = (cppVar_57609 << 3) | 4;
	cppVar_57610 = (cppVar_57610 & cppMask_un_5_);
	BIT_VEC cppVar_57611 = (0 << 5) | cppVar_57610;
	cppVar_57611 = (cppVar_57611 & cppMask_un_8_);
	bool cppVar_57613 = (cppVar_57611 == 130);
	BIT_VEC cppVar_57614 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57615 = (cppVar_57614 << 3) | 4;
	cppVar_57615 = (cppVar_57615 & cppMask_un_5_);
	BIT_VEC cppVar_57616 = (0 << 5) | cppVar_57615;
	cppVar_57616 = (cppVar_57616 & cppMask_un_8_);
	bool cppVar_57618 = (cppVar_57616 == 131);
	BIT_VEC cppVar_57619 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57620 = (cppVar_57619 << 3) | 4;
	cppVar_57620 = (cppVar_57620 & cppMask_un_5_);
	BIT_VEC cppVar_57621 = (0 << 5) | cppVar_57620;
	cppVar_57621 = (cppVar_57621 & cppMask_un_8_);
	bool cppVar_57623 = (cppVar_57621 == 135);
	BIT_VEC cppVar_57624 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57625 = (cppVar_57624 << 3) | 4;
	cppVar_57625 = (cppVar_57625 & cppMask_un_5_);
	BIT_VEC cppVar_57626 = (0 << 5) | cppVar_57625;
	cppVar_57626 = (cppVar_57626 & cppMask_un_8_);
	bool cppVar_57628 = (cppVar_57626 == 136);
	BIT_VEC cppVar_57629 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57630 = (cppVar_57629 << 3) | 4;
	cppVar_57630 = (cppVar_57630 & cppMask_un_5_);
	BIT_VEC cppVar_57631 = (0 << 5) | cppVar_57630;
	cppVar_57631 = (cppVar_57631 & cppMask_un_8_);
	bool cppVar_57633 = (cppVar_57631 == 137);
	BIT_VEC cppVar_57634 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57635 = (cppVar_57634 << 3) | 4;
	cppVar_57635 = (cppVar_57635 & cppMask_un_5_);
	BIT_VEC cppVar_57636 = (0 << 5) | cppVar_57635;
	cppVar_57636 = (cppVar_57636 & cppMask_un_8_);
	bool cppVar_57638 = (cppVar_57636 == 138);
	BIT_VEC cppVar_57639 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57640 = (cppVar_57639 << 3) | 4;
	cppVar_57640 = (cppVar_57640 & cppMask_un_5_);
	BIT_VEC cppVar_57641 = (0 << 5) | cppVar_57640;
	cppVar_57641 = (cppVar_57641 & cppMask_un_8_);
	bool cppVar_57643 = (cppVar_57641 == 140);
	BIT_VEC cppVar_57644 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57645 = (cppVar_57644 << 3) | 4;
	cppVar_57645 = (cppVar_57645 & cppMask_un_5_);
	BIT_VEC cppVar_57646 = (0 << 5) | cppVar_57645;
	cppVar_57646 = (cppVar_57646 & cppMask_un_8_);
	bool cppVar_57648 = (cppVar_57646 == 139);
	BIT_VEC cppVar_57649 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57650 = (cppVar_57649 << 3) | 4;
	cppVar_57650 = (cppVar_57650 & cppMask_un_5_);
	BIT_VEC cppVar_57651 = (0 << 5) | cppVar_57650;
	cppVar_57651 = (cppVar_57651 & cppMask_un_8_);
	bool cppVar_57653 = (cppVar_57651 == 141);
	BIT_VEC cppVar_57654 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57655 = (cppVar_57654 << 3) | 4;
	cppVar_57655 = (cppVar_57655 & cppMask_un_5_);
	BIT_VEC cppVar_57656 = (0 << 5) | cppVar_57655;
	cppVar_57656 = (cppVar_57656 & cppMask_un_8_);
	bool cppVar_57658 = (cppVar_57656 == 144);
	BIT_VEC cppVar_57659 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57660 = (cppVar_57659 << 3) | 4;
	cppVar_57660 = (cppVar_57660 & cppMask_un_5_);
	BIT_VEC cppVar_57661 = (0 << 5) | cppVar_57660;
	cppVar_57661 = (cppVar_57661 & cppMask_un_8_);
	bool cppVar_57663 = (cppVar_57661 == 152);
	BIT_VEC cppVar_57664 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57665 = (cppVar_57664 << 3) | 4;
	cppVar_57665 = (cppVar_57665 & cppMask_un_5_);
	BIT_VEC cppVar_57666 = (0 << 5) | cppVar_57665;
	cppVar_57666 = (cppVar_57666 & cppMask_un_8_);
	bool cppVar_57668 = (cppVar_57666 == 153);
	BIT_VEC cppVar_57669 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57670 = (cppVar_57669 << 3) | 4;
	cppVar_57670 = (cppVar_57670 & cppMask_un_5_);
	BIT_VEC cppVar_57671 = (0 << 5) | cppVar_57670;
	cppVar_57671 = (cppVar_57671 & cppMask_un_8_);
	bool cppVar_57673 = (cppVar_57671 == 160);
	BIT_VEC cppVar_57674 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57675 = (cppVar_57674 << 3) | 4;
	cppVar_57675 = (cppVar_57675 & cppMask_un_5_);
	BIT_VEC cppVar_57676 = (0 << 5) | cppVar_57675;
	cppVar_57676 = (cppVar_57676 & cppMask_un_8_);
	bool cppVar_57678 = (cppVar_57676 == 168);
	BIT_VEC cppVar_57679 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57680 = (cppVar_57679 << 3) | 4;
	cppVar_57680 = (cppVar_57680 & cppMask_un_5_);
	BIT_VEC cppVar_57681 = (0 << 5) | cppVar_57680;
	cppVar_57681 = (cppVar_57681 & cppMask_un_8_);
	bool cppVar_57683 = (cppVar_57681 == 176);
	BIT_VEC cppVar_57684 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57685 = (cppVar_57684 << 3) | 4;
	cppVar_57685 = (cppVar_57685 & cppMask_un_5_);
	BIT_VEC cppVar_57686 = (0 << 5) | cppVar_57685;
	cppVar_57686 = (cppVar_57686 & cppMask_un_8_);
	bool cppVar_57688 = (cppVar_57686 == 184);
	BIT_VEC cppVar_57689 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57690 = (cppVar_57689 << 3) | 4;
	cppVar_57690 = (cppVar_57690 & cppMask_un_5_);
	BIT_VEC cppVar_57691 = (0 << 5) | cppVar_57690;
	cppVar_57691 = (cppVar_57691 & cppMask_un_8_);
	bool cppVar_57693 = (cppVar_57691 == 208);
	BIT_VEC cppVar_57694 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57695 = (cppVar_57694 << 3) | 4;
	cppVar_57695 = (cppVar_57695 & cppMask_un_5_);
	BIT_VEC cppVar_57696 = (0 << 5) | cppVar_57695;
	cppVar_57696 = (cppVar_57696 & cppMask_un_8_);
	bool cppVar_57698 = (cppVar_57696 == 224);
	BIT_VEC cppVar_57699 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57700 = (cppVar_57699 << 3) | 4;
	cppVar_57700 = (cppVar_57700 & cppMask_un_5_);
	BIT_VEC cppVar_57701 = (0 << 5) | cppVar_57700;
	cppVar_57701 = (cppVar_57701 & cppMask_un_8_);
	bool cppVar_57703 = (cppVar_57701 == 240);
	BIT_VEC cppVar_57705 = (cppVar_57703) ? B : 0;
	BIT_VEC cppVar_57706 = (cppVar_57698) ? ACC : cppVar_57705;
	BIT_VEC cppVar_57707 = (cppVar_57693) ? PSW : cppVar_57706;
	BIT_VEC cppVar_57708 = (cppVar_57688) ? IP : cppVar_57707;
	BIT_VEC cppVar_57709 = (cppVar_57683) ? P3 : cppVar_57708;
	BIT_VEC cppVar_57710 = (cppVar_57678) ? IE : cppVar_57709;
	BIT_VEC cppVar_57711 = (cppVar_57673) ? P2 : cppVar_57710;
	BIT_VEC cppVar_57712 = (cppVar_57668) ? SBUF : cppVar_57711;
	BIT_VEC cppVar_57713 = (cppVar_57663) ? SCON : cppVar_57712;
	BIT_VEC cppVar_57714 = (cppVar_57658) ? P1 : cppVar_57713;
	BIT_VEC cppVar_57715 = (cppVar_57653) ? TH1 : cppVar_57714;
	BIT_VEC cppVar_57716 = (cppVar_57648) ? TL1 : cppVar_57715;
	BIT_VEC cppVar_57717 = (cppVar_57643) ? TH0 : cppVar_57716;
	BIT_VEC cppVar_57718 = (cppVar_57638) ? TL0 : cppVar_57717;
	BIT_VEC cppVar_57719 = (cppVar_57633) ? TMOD : cppVar_57718;
	BIT_VEC cppVar_57720 = (cppVar_57628) ? TCON : cppVar_57719;
	BIT_VEC cppVar_57721 = (cppVar_57623) ? PCON : cppVar_57720;
	BIT_VEC cppVar_57722 = (cppVar_57618) ? DPH : cppVar_57721;
	BIT_VEC cppVar_57723 = (cppVar_57613) ? DPL : cppVar_57722;
	BIT_VEC cppVar_57724 = (cppVar_57608) ? SP : cppVar_57723;
	BIT_VEC cppVar_57725 = (cppVar_57603) ? P0 : cppVar_57724;
	BIT_VEC cppVar_57726 = (cppVar_57594) ? cppVar_57598 : cppVar_57725;
	BIT_VEC cppVar_57727 = (cppVar_57586) ? cppVar_57726 : SBUF;
	BIT_VEC cppVar_57728 = ROM.rd(PC);
	bool cppVar_57730 = (cppVar_57728 == 139);
	BIT_VEC cppVar_57732 = PC + 1;
	cppVar_57732 = (cppVar_57732 & cppMask_un_16_);
	BIT_VEC cppVar_57733 = ROM.rd(cppVar_57732);
	bool cppVar_57735 = (cppVar_57733 == 153);
	BIT_VEC cppVar_57737 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57739 = (cppVar_57737 << 3) | 3;
	cppVar_57739 = (cppVar_57739 & cppMask_un_5_);
	BIT_VEC cppVar_57740 = (0 << 5) | cppVar_57739;
	cppVar_57740 = (cppVar_57740 & cppMask_un_8_);
	BIT_VEC cppVar_57741 = (cppVar_57740 >> 7) & cppMask_un_1_;
	bool cppVar_57743 = (cppVar_57741 == 0);
	BIT_VEC cppVar_57744 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57745 = (cppVar_57744 << 3) | 3;
	cppVar_57745 = (cppVar_57745 & cppMask_un_5_);
	BIT_VEC cppVar_57746 = (0 << 5) | cppVar_57745;
	cppVar_57746 = (cppVar_57746 & cppMask_un_8_);
	BIT_VEC cppVar_57747 = IRAM.rd(cppVar_57746);
	BIT_VEC cppVar_57748 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57749 = (cppVar_57748 << 3) | 3;
	cppVar_57749 = (cppVar_57749 & cppMask_un_5_);
	BIT_VEC cppVar_57750 = (0 << 5) | cppVar_57749;
	cppVar_57750 = (cppVar_57750 & cppMask_un_8_);
	bool cppVar_57752 = (cppVar_57750 == 128);
	BIT_VEC cppVar_57753 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57754 = (cppVar_57753 << 3) | 3;
	cppVar_57754 = (cppVar_57754 & cppMask_un_5_);
	BIT_VEC cppVar_57755 = (0 << 5) | cppVar_57754;
	cppVar_57755 = (cppVar_57755 & cppMask_un_8_);
	bool cppVar_57757 = (cppVar_57755 == 129);
	BIT_VEC cppVar_57758 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57759 = (cppVar_57758 << 3) | 3;
	cppVar_57759 = (cppVar_57759 & cppMask_un_5_);
	BIT_VEC cppVar_57760 = (0 << 5) | cppVar_57759;
	cppVar_57760 = (cppVar_57760 & cppMask_un_8_);
	bool cppVar_57762 = (cppVar_57760 == 130);
	BIT_VEC cppVar_57763 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57764 = (cppVar_57763 << 3) | 3;
	cppVar_57764 = (cppVar_57764 & cppMask_un_5_);
	BIT_VEC cppVar_57765 = (0 << 5) | cppVar_57764;
	cppVar_57765 = (cppVar_57765 & cppMask_un_8_);
	bool cppVar_57767 = (cppVar_57765 == 131);
	BIT_VEC cppVar_57768 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57769 = (cppVar_57768 << 3) | 3;
	cppVar_57769 = (cppVar_57769 & cppMask_un_5_);
	BIT_VEC cppVar_57770 = (0 << 5) | cppVar_57769;
	cppVar_57770 = (cppVar_57770 & cppMask_un_8_);
	bool cppVar_57772 = (cppVar_57770 == 135);
	BIT_VEC cppVar_57773 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57774 = (cppVar_57773 << 3) | 3;
	cppVar_57774 = (cppVar_57774 & cppMask_un_5_);
	BIT_VEC cppVar_57775 = (0 << 5) | cppVar_57774;
	cppVar_57775 = (cppVar_57775 & cppMask_un_8_);
	bool cppVar_57777 = (cppVar_57775 == 136);
	BIT_VEC cppVar_57778 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57779 = (cppVar_57778 << 3) | 3;
	cppVar_57779 = (cppVar_57779 & cppMask_un_5_);
	BIT_VEC cppVar_57780 = (0 << 5) | cppVar_57779;
	cppVar_57780 = (cppVar_57780 & cppMask_un_8_);
	bool cppVar_57782 = (cppVar_57780 == 137);
	BIT_VEC cppVar_57783 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57784 = (cppVar_57783 << 3) | 3;
	cppVar_57784 = (cppVar_57784 & cppMask_un_5_);
	BIT_VEC cppVar_57785 = (0 << 5) | cppVar_57784;
	cppVar_57785 = (cppVar_57785 & cppMask_un_8_);
	bool cppVar_57787 = (cppVar_57785 == 138);
	BIT_VEC cppVar_57788 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57789 = (cppVar_57788 << 3) | 3;
	cppVar_57789 = (cppVar_57789 & cppMask_un_5_);
	BIT_VEC cppVar_57790 = (0 << 5) | cppVar_57789;
	cppVar_57790 = (cppVar_57790 & cppMask_un_8_);
	bool cppVar_57792 = (cppVar_57790 == 140);
	BIT_VEC cppVar_57793 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57794 = (cppVar_57793 << 3) | 3;
	cppVar_57794 = (cppVar_57794 & cppMask_un_5_);
	BIT_VEC cppVar_57795 = (0 << 5) | cppVar_57794;
	cppVar_57795 = (cppVar_57795 & cppMask_un_8_);
	bool cppVar_57797 = (cppVar_57795 == 139);
	BIT_VEC cppVar_57798 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57799 = (cppVar_57798 << 3) | 3;
	cppVar_57799 = (cppVar_57799 & cppMask_un_5_);
	BIT_VEC cppVar_57800 = (0 << 5) | cppVar_57799;
	cppVar_57800 = (cppVar_57800 & cppMask_un_8_);
	bool cppVar_57802 = (cppVar_57800 == 141);
	BIT_VEC cppVar_57803 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57804 = (cppVar_57803 << 3) | 3;
	cppVar_57804 = (cppVar_57804 & cppMask_un_5_);
	BIT_VEC cppVar_57805 = (0 << 5) | cppVar_57804;
	cppVar_57805 = (cppVar_57805 & cppMask_un_8_);
	bool cppVar_57807 = (cppVar_57805 == 144);
	BIT_VEC cppVar_57808 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57809 = (cppVar_57808 << 3) | 3;
	cppVar_57809 = (cppVar_57809 & cppMask_un_5_);
	BIT_VEC cppVar_57810 = (0 << 5) | cppVar_57809;
	cppVar_57810 = (cppVar_57810 & cppMask_un_8_);
	bool cppVar_57812 = (cppVar_57810 == 152);
	BIT_VEC cppVar_57813 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57814 = (cppVar_57813 << 3) | 3;
	cppVar_57814 = (cppVar_57814 & cppMask_un_5_);
	BIT_VEC cppVar_57815 = (0 << 5) | cppVar_57814;
	cppVar_57815 = (cppVar_57815 & cppMask_un_8_);
	bool cppVar_57817 = (cppVar_57815 == 153);
	BIT_VEC cppVar_57818 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57819 = (cppVar_57818 << 3) | 3;
	cppVar_57819 = (cppVar_57819 & cppMask_un_5_);
	BIT_VEC cppVar_57820 = (0 << 5) | cppVar_57819;
	cppVar_57820 = (cppVar_57820 & cppMask_un_8_);
	bool cppVar_57822 = (cppVar_57820 == 160);
	BIT_VEC cppVar_57823 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57824 = (cppVar_57823 << 3) | 3;
	cppVar_57824 = (cppVar_57824 & cppMask_un_5_);
	BIT_VEC cppVar_57825 = (0 << 5) | cppVar_57824;
	cppVar_57825 = (cppVar_57825 & cppMask_un_8_);
	bool cppVar_57827 = (cppVar_57825 == 168);
	BIT_VEC cppVar_57828 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57829 = (cppVar_57828 << 3) | 3;
	cppVar_57829 = (cppVar_57829 & cppMask_un_5_);
	BIT_VEC cppVar_57830 = (0 << 5) | cppVar_57829;
	cppVar_57830 = (cppVar_57830 & cppMask_un_8_);
	bool cppVar_57832 = (cppVar_57830 == 176);
	BIT_VEC cppVar_57833 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57834 = (cppVar_57833 << 3) | 3;
	cppVar_57834 = (cppVar_57834 & cppMask_un_5_);
	BIT_VEC cppVar_57835 = (0 << 5) | cppVar_57834;
	cppVar_57835 = (cppVar_57835 & cppMask_un_8_);
	bool cppVar_57837 = (cppVar_57835 == 184);
	BIT_VEC cppVar_57838 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57839 = (cppVar_57838 << 3) | 3;
	cppVar_57839 = (cppVar_57839 & cppMask_un_5_);
	BIT_VEC cppVar_57840 = (0 << 5) | cppVar_57839;
	cppVar_57840 = (cppVar_57840 & cppMask_un_8_);
	bool cppVar_57842 = (cppVar_57840 == 208);
	BIT_VEC cppVar_57843 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57844 = (cppVar_57843 << 3) | 3;
	cppVar_57844 = (cppVar_57844 & cppMask_un_5_);
	BIT_VEC cppVar_57845 = (0 << 5) | cppVar_57844;
	cppVar_57845 = (cppVar_57845 & cppMask_un_8_);
	bool cppVar_57847 = (cppVar_57845 == 224);
	BIT_VEC cppVar_57848 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57849 = (cppVar_57848 << 3) | 3;
	cppVar_57849 = (cppVar_57849 & cppMask_un_5_);
	BIT_VEC cppVar_57850 = (0 << 5) | cppVar_57849;
	cppVar_57850 = (cppVar_57850 & cppMask_un_8_);
	bool cppVar_57852 = (cppVar_57850 == 240);
	BIT_VEC cppVar_57854 = (cppVar_57852) ? B : 0;
	BIT_VEC cppVar_57855 = (cppVar_57847) ? ACC : cppVar_57854;
	BIT_VEC cppVar_57856 = (cppVar_57842) ? PSW : cppVar_57855;
	BIT_VEC cppVar_57857 = (cppVar_57837) ? IP : cppVar_57856;
	BIT_VEC cppVar_57858 = (cppVar_57832) ? P3 : cppVar_57857;
	BIT_VEC cppVar_57859 = (cppVar_57827) ? IE : cppVar_57858;
	BIT_VEC cppVar_57860 = (cppVar_57822) ? P2 : cppVar_57859;
	BIT_VEC cppVar_57861 = (cppVar_57817) ? SBUF : cppVar_57860;
	BIT_VEC cppVar_57862 = (cppVar_57812) ? SCON : cppVar_57861;
	BIT_VEC cppVar_57863 = (cppVar_57807) ? P1 : cppVar_57862;
	BIT_VEC cppVar_57864 = (cppVar_57802) ? TH1 : cppVar_57863;
	BIT_VEC cppVar_57865 = (cppVar_57797) ? TL1 : cppVar_57864;
	BIT_VEC cppVar_57866 = (cppVar_57792) ? TH0 : cppVar_57865;
	BIT_VEC cppVar_57867 = (cppVar_57787) ? TL0 : cppVar_57866;
	BIT_VEC cppVar_57868 = (cppVar_57782) ? TMOD : cppVar_57867;
	BIT_VEC cppVar_57869 = (cppVar_57777) ? TCON : cppVar_57868;
	BIT_VEC cppVar_57870 = (cppVar_57772) ? PCON : cppVar_57869;
	BIT_VEC cppVar_57871 = (cppVar_57767) ? DPH : cppVar_57870;
	BIT_VEC cppVar_57872 = (cppVar_57762) ? DPL : cppVar_57871;
	BIT_VEC cppVar_57873 = (cppVar_57757) ? SP : cppVar_57872;
	BIT_VEC cppVar_57874 = (cppVar_57752) ? P0 : cppVar_57873;
	BIT_VEC cppVar_57875 = (cppVar_57743) ? cppVar_57747 : cppVar_57874;
	BIT_VEC cppVar_57876 = (cppVar_57735) ? cppVar_57875 : SBUF;
	BIT_VEC cppVar_57877 = ROM.rd(PC);
	bool cppVar_57879 = (cppVar_57877 == 138);
	BIT_VEC cppVar_57881 = PC + 1;
	cppVar_57881 = (cppVar_57881 & cppMask_un_16_);
	BIT_VEC cppVar_57882 = ROM.rd(cppVar_57881);
	bool cppVar_57884 = (cppVar_57882 == 153);
	BIT_VEC cppVar_57886 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57888 = (cppVar_57886 << 3) | 2;
	cppVar_57888 = (cppVar_57888 & cppMask_un_5_);
	BIT_VEC cppVar_57889 = (0 << 5) | cppVar_57888;
	cppVar_57889 = (cppVar_57889 & cppMask_un_8_);
	BIT_VEC cppVar_57890 = (cppVar_57889 >> 7) & cppMask_un_1_;
	bool cppVar_57892 = (cppVar_57890 == 0);
	BIT_VEC cppVar_57893 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57894 = (cppVar_57893 << 3) | 2;
	cppVar_57894 = (cppVar_57894 & cppMask_un_5_);
	BIT_VEC cppVar_57895 = (0 << 5) | cppVar_57894;
	cppVar_57895 = (cppVar_57895 & cppMask_un_8_);
	BIT_VEC cppVar_57896 = IRAM.rd(cppVar_57895);
	BIT_VEC cppVar_57897 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57898 = (cppVar_57897 << 3) | 2;
	cppVar_57898 = (cppVar_57898 & cppMask_un_5_);
	BIT_VEC cppVar_57899 = (0 << 5) | cppVar_57898;
	cppVar_57899 = (cppVar_57899 & cppMask_un_8_);
	bool cppVar_57901 = (cppVar_57899 == 128);
	BIT_VEC cppVar_57902 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57903 = (cppVar_57902 << 3) | 2;
	cppVar_57903 = (cppVar_57903 & cppMask_un_5_);
	BIT_VEC cppVar_57904 = (0 << 5) | cppVar_57903;
	cppVar_57904 = (cppVar_57904 & cppMask_un_8_);
	bool cppVar_57906 = (cppVar_57904 == 129);
	BIT_VEC cppVar_57907 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57908 = (cppVar_57907 << 3) | 2;
	cppVar_57908 = (cppVar_57908 & cppMask_un_5_);
	BIT_VEC cppVar_57909 = (0 << 5) | cppVar_57908;
	cppVar_57909 = (cppVar_57909 & cppMask_un_8_);
	bool cppVar_57911 = (cppVar_57909 == 130);
	BIT_VEC cppVar_57912 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57913 = (cppVar_57912 << 3) | 2;
	cppVar_57913 = (cppVar_57913 & cppMask_un_5_);
	BIT_VEC cppVar_57914 = (0 << 5) | cppVar_57913;
	cppVar_57914 = (cppVar_57914 & cppMask_un_8_);
	bool cppVar_57916 = (cppVar_57914 == 131);
	BIT_VEC cppVar_57917 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57918 = (cppVar_57917 << 3) | 2;
	cppVar_57918 = (cppVar_57918 & cppMask_un_5_);
	BIT_VEC cppVar_57919 = (0 << 5) | cppVar_57918;
	cppVar_57919 = (cppVar_57919 & cppMask_un_8_);
	bool cppVar_57921 = (cppVar_57919 == 135);
	BIT_VEC cppVar_57922 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57923 = (cppVar_57922 << 3) | 2;
	cppVar_57923 = (cppVar_57923 & cppMask_un_5_);
	BIT_VEC cppVar_57924 = (0 << 5) | cppVar_57923;
	cppVar_57924 = (cppVar_57924 & cppMask_un_8_);
	bool cppVar_57926 = (cppVar_57924 == 136);
	BIT_VEC cppVar_57927 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57928 = (cppVar_57927 << 3) | 2;
	cppVar_57928 = (cppVar_57928 & cppMask_un_5_);
	BIT_VEC cppVar_57929 = (0 << 5) | cppVar_57928;
	cppVar_57929 = (cppVar_57929 & cppMask_un_8_);
	bool cppVar_57931 = (cppVar_57929 == 137);
	BIT_VEC cppVar_57932 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57933 = (cppVar_57932 << 3) | 2;
	cppVar_57933 = (cppVar_57933 & cppMask_un_5_);
	BIT_VEC cppVar_57934 = (0 << 5) | cppVar_57933;
	cppVar_57934 = (cppVar_57934 & cppMask_un_8_);
	bool cppVar_57936 = (cppVar_57934 == 138);
	BIT_VEC cppVar_57937 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57938 = (cppVar_57937 << 3) | 2;
	cppVar_57938 = (cppVar_57938 & cppMask_un_5_);
	BIT_VEC cppVar_57939 = (0 << 5) | cppVar_57938;
	cppVar_57939 = (cppVar_57939 & cppMask_un_8_);
	bool cppVar_57941 = (cppVar_57939 == 140);
	BIT_VEC cppVar_57942 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57943 = (cppVar_57942 << 3) | 2;
	cppVar_57943 = (cppVar_57943 & cppMask_un_5_);
	BIT_VEC cppVar_57944 = (0 << 5) | cppVar_57943;
	cppVar_57944 = (cppVar_57944 & cppMask_un_8_);
	bool cppVar_57946 = (cppVar_57944 == 139);
	BIT_VEC cppVar_57947 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57948 = (cppVar_57947 << 3) | 2;
	cppVar_57948 = (cppVar_57948 & cppMask_un_5_);
	BIT_VEC cppVar_57949 = (0 << 5) | cppVar_57948;
	cppVar_57949 = (cppVar_57949 & cppMask_un_8_);
	bool cppVar_57951 = (cppVar_57949 == 141);
	BIT_VEC cppVar_57952 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57953 = (cppVar_57952 << 3) | 2;
	cppVar_57953 = (cppVar_57953 & cppMask_un_5_);
	BIT_VEC cppVar_57954 = (0 << 5) | cppVar_57953;
	cppVar_57954 = (cppVar_57954 & cppMask_un_8_);
	bool cppVar_57956 = (cppVar_57954 == 144);
	BIT_VEC cppVar_57957 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57958 = (cppVar_57957 << 3) | 2;
	cppVar_57958 = (cppVar_57958 & cppMask_un_5_);
	BIT_VEC cppVar_57959 = (0 << 5) | cppVar_57958;
	cppVar_57959 = (cppVar_57959 & cppMask_un_8_);
	bool cppVar_57961 = (cppVar_57959 == 152);
	BIT_VEC cppVar_57962 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57963 = (cppVar_57962 << 3) | 2;
	cppVar_57963 = (cppVar_57963 & cppMask_un_5_);
	BIT_VEC cppVar_57964 = (0 << 5) | cppVar_57963;
	cppVar_57964 = (cppVar_57964 & cppMask_un_8_);
	bool cppVar_57966 = (cppVar_57964 == 153);
	BIT_VEC cppVar_57967 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57968 = (cppVar_57967 << 3) | 2;
	cppVar_57968 = (cppVar_57968 & cppMask_un_5_);
	BIT_VEC cppVar_57969 = (0 << 5) | cppVar_57968;
	cppVar_57969 = (cppVar_57969 & cppMask_un_8_);
	bool cppVar_57971 = (cppVar_57969 == 160);
	BIT_VEC cppVar_57972 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57973 = (cppVar_57972 << 3) | 2;
	cppVar_57973 = (cppVar_57973 & cppMask_un_5_);
	BIT_VEC cppVar_57974 = (0 << 5) | cppVar_57973;
	cppVar_57974 = (cppVar_57974 & cppMask_un_8_);
	bool cppVar_57976 = (cppVar_57974 == 168);
	BIT_VEC cppVar_57977 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57978 = (cppVar_57977 << 3) | 2;
	cppVar_57978 = (cppVar_57978 & cppMask_un_5_);
	BIT_VEC cppVar_57979 = (0 << 5) | cppVar_57978;
	cppVar_57979 = (cppVar_57979 & cppMask_un_8_);
	bool cppVar_57981 = (cppVar_57979 == 176);
	BIT_VEC cppVar_57982 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57983 = (cppVar_57982 << 3) | 2;
	cppVar_57983 = (cppVar_57983 & cppMask_un_5_);
	BIT_VEC cppVar_57984 = (0 << 5) | cppVar_57983;
	cppVar_57984 = (cppVar_57984 & cppMask_un_8_);
	bool cppVar_57986 = (cppVar_57984 == 184);
	BIT_VEC cppVar_57987 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57988 = (cppVar_57987 << 3) | 2;
	cppVar_57988 = (cppVar_57988 & cppMask_un_5_);
	BIT_VEC cppVar_57989 = (0 << 5) | cppVar_57988;
	cppVar_57989 = (cppVar_57989 & cppMask_un_8_);
	bool cppVar_57991 = (cppVar_57989 == 208);
	BIT_VEC cppVar_57992 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57993 = (cppVar_57992 << 3) | 2;
	cppVar_57993 = (cppVar_57993 & cppMask_un_5_);
	BIT_VEC cppVar_57994 = (0 << 5) | cppVar_57993;
	cppVar_57994 = (cppVar_57994 & cppMask_un_8_);
	bool cppVar_57996 = (cppVar_57994 == 224);
	BIT_VEC cppVar_57997 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_57998 = (cppVar_57997 << 3) | 2;
	cppVar_57998 = (cppVar_57998 & cppMask_un_5_);
	BIT_VEC cppVar_57999 = (0 << 5) | cppVar_57998;
	cppVar_57999 = (cppVar_57999 & cppMask_un_8_);
	bool cppVar_58001 = (cppVar_57999 == 240);
	BIT_VEC cppVar_58003 = (cppVar_58001) ? B : 0;
	BIT_VEC cppVar_58004 = (cppVar_57996) ? ACC : cppVar_58003;
	BIT_VEC cppVar_58005 = (cppVar_57991) ? PSW : cppVar_58004;
	BIT_VEC cppVar_58006 = (cppVar_57986) ? IP : cppVar_58005;
	BIT_VEC cppVar_58007 = (cppVar_57981) ? P3 : cppVar_58006;
	BIT_VEC cppVar_58008 = (cppVar_57976) ? IE : cppVar_58007;
	BIT_VEC cppVar_58009 = (cppVar_57971) ? P2 : cppVar_58008;
	BIT_VEC cppVar_58010 = (cppVar_57966) ? SBUF : cppVar_58009;
	BIT_VEC cppVar_58011 = (cppVar_57961) ? SCON : cppVar_58010;
	BIT_VEC cppVar_58012 = (cppVar_57956) ? P1 : cppVar_58011;
	BIT_VEC cppVar_58013 = (cppVar_57951) ? TH1 : cppVar_58012;
	BIT_VEC cppVar_58014 = (cppVar_57946) ? TL1 : cppVar_58013;
	BIT_VEC cppVar_58015 = (cppVar_57941) ? TH0 : cppVar_58014;
	BIT_VEC cppVar_58016 = (cppVar_57936) ? TL0 : cppVar_58015;
	BIT_VEC cppVar_58017 = (cppVar_57931) ? TMOD : cppVar_58016;
	BIT_VEC cppVar_58018 = (cppVar_57926) ? TCON : cppVar_58017;
	BIT_VEC cppVar_58019 = (cppVar_57921) ? PCON : cppVar_58018;
	BIT_VEC cppVar_58020 = (cppVar_57916) ? DPH : cppVar_58019;
	BIT_VEC cppVar_58021 = (cppVar_57911) ? DPL : cppVar_58020;
	BIT_VEC cppVar_58022 = (cppVar_57906) ? SP : cppVar_58021;
	BIT_VEC cppVar_58023 = (cppVar_57901) ? P0 : cppVar_58022;
	BIT_VEC cppVar_58024 = (cppVar_57892) ? cppVar_57896 : cppVar_58023;
	BIT_VEC cppVar_58025 = (cppVar_57884) ? cppVar_58024 : SBUF;
	BIT_VEC cppVar_58026 = ROM.rd(PC);
	bool cppVar_58028 = (cppVar_58026 == 137);
	BIT_VEC cppVar_58030 = PC + 1;
	cppVar_58030 = (cppVar_58030 & cppMask_un_16_);
	BIT_VEC cppVar_58031 = ROM.rd(cppVar_58030);
	bool cppVar_58033 = (cppVar_58031 == 153);
	BIT_VEC cppVar_58035 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58037 = (cppVar_58035 << 3) | 1;
	cppVar_58037 = (cppVar_58037 & cppMask_un_5_);
	BIT_VEC cppVar_58038 = (0 << 5) | cppVar_58037;
	cppVar_58038 = (cppVar_58038 & cppMask_un_8_);
	BIT_VEC cppVar_58039 = (cppVar_58038 >> 7) & cppMask_un_1_;
	bool cppVar_58041 = (cppVar_58039 == 0);
	BIT_VEC cppVar_58042 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58043 = (cppVar_58042 << 3) | 1;
	cppVar_58043 = (cppVar_58043 & cppMask_un_5_);
	BIT_VEC cppVar_58044 = (0 << 5) | cppVar_58043;
	cppVar_58044 = (cppVar_58044 & cppMask_un_8_);
	BIT_VEC cppVar_58045 = IRAM.rd(cppVar_58044);
	BIT_VEC cppVar_58046 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58047 = (cppVar_58046 << 3) | 1;
	cppVar_58047 = (cppVar_58047 & cppMask_un_5_);
	BIT_VEC cppVar_58048 = (0 << 5) | cppVar_58047;
	cppVar_58048 = (cppVar_58048 & cppMask_un_8_);
	bool cppVar_58050 = (cppVar_58048 == 128);
	BIT_VEC cppVar_58051 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58052 = (cppVar_58051 << 3) | 1;
	cppVar_58052 = (cppVar_58052 & cppMask_un_5_);
	BIT_VEC cppVar_58053 = (0 << 5) | cppVar_58052;
	cppVar_58053 = (cppVar_58053 & cppMask_un_8_);
	bool cppVar_58055 = (cppVar_58053 == 129);
	BIT_VEC cppVar_58056 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58057 = (cppVar_58056 << 3) | 1;
	cppVar_58057 = (cppVar_58057 & cppMask_un_5_);
	BIT_VEC cppVar_58058 = (0 << 5) | cppVar_58057;
	cppVar_58058 = (cppVar_58058 & cppMask_un_8_);
	bool cppVar_58060 = (cppVar_58058 == 130);
	BIT_VEC cppVar_58061 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58062 = (cppVar_58061 << 3) | 1;
	cppVar_58062 = (cppVar_58062 & cppMask_un_5_);
	BIT_VEC cppVar_58063 = (0 << 5) | cppVar_58062;
	cppVar_58063 = (cppVar_58063 & cppMask_un_8_);
	bool cppVar_58065 = (cppVar_58063 == 131);
	BIT_VEC cppVar_58066 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58067 = (cppVar_58066 << 3) | 1;
	cppVar_58067 = (cppVar_58067 & cppMask_un_5_);
	BIT_VEC cppVar_58068 = (0 << 5) | cppVar_58067;
	cppVar_58068 = (cppVar_58068 & cppMask_un_8_);
	bool cppVar_58070 = (cppVar_58068 == 135);
	BIT_VEC cppVar_58071 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58072 = (cppVar_58071 << 3) | 1;
	cppVar_58072 = (cppVar_58072 & cppMask_un_5_);
	BIT_VEC cppVar_58073 = (0 << 5) | cppVar_58072;
	cppVar_58073 = (cppVar_58073 & cppMask_un_8_);
	bool cppVar_58075 = (cppVar_58073 == 136);
	BIT_VEC cppVar_58076 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58077 = (cppVar_58076 << 3) | 1;
	cppVar_58077 = (cppVar_58077 & cppMask_un_5_);
	BIT_VEC cppVar_58078 = (0 << 5) | cppVar_58077;
	cppVar_58078 = (cppVar_58078 & cppMask_un_8_);
	bool cppVar_58080 = (cppVar_58078 == 137);
	BIT_VEC cppVar_58081 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58082 = (cppVar_58081 << 3) | 1;
	cppVar_58082 = (cppVar_58082 & cppMask_un_5_);
	BIT_VEC cppVar_58083 = (0 << 5) | cppVar_58082;
	cppVar_58083 = (cppVar_58083 & cppMask_un_8_);
	bool cppVar_58085 = (cppVar_58083 == 138);
	BIT_VEC cppVar_58086 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58087 = (cppVar_58086 << 3) | 1;
	cppVar_58087 = (cppVar_58087 & cppMask_un_5_);
	BIT_VEC cppVar_58088 = (0 << 5) | cppVar_58087;
	cppVar_58088 = (cppVar_58088 & cppMask_un_8_);
	bool cppVar_58090 = (cppVar_58088 == 140);
	BIT_VEC cppVar_58091 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58092 = (cppVar_58091 << 3) | 1;
	cppVar_58092 = (cppVar_58092 & cppMask_un_5_);
	BIT_VEC cppVar_58093 = (0 << 5) | cppVar_58092;
	cppVar_58093 = (cppVar_58093 & cppMask_un_8_);
	bool cppVar_58095 = (cppVar_58093 == 139);
	BIT_VEC cppVar_58096 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58097 = (cppVar_58096 << 3) | 1;
	cppVar_58097 = (cppVar_58097 & cppMask_un_5_);
	BIT_VEC cppVar_58098 = (0 << 5) | cppVar_58097;
	cppVar_58098 = (cppVar_58098 & cppMask_un_8_);
	bool cppVar_58100 = (cppVar_58098 == 141);
	BIT_VEC cppVar_58101 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58102 = (cppVar_58101 << 3) | 1;
	cppVar_58102 = (cppVar_58102 & cppMask_un_5_);
	BIT_VEC cppVar_58103 = (0 << 5) | cppVar_58102;
	cppVar_58103 = (cppVar_58103 & cppMask_un_8_);
	bool cppVar_58105 = (cppVar_58103 == 144);
	BIT_VEC cppVar_58106 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58107 = (cppVar_58106 << 3) | 1;
	cppVar_58107 = (cppVar_58107 & cppMask_un_5_);
	BIT_VEC cppVar_58108 = (0 << 5) | cppVar_58107;
	cppVar_58108 = (cppVar_58108 & cppMask_un_8_);
	bool cppVar_58110 = (cppVar_58108 == 152);
	BIT_VEC cppVar_58111 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58112 = (cppVar_58111 << 3) | 1;
	cppVar_58112 = (cppVar_58112 & cppMask_un_5_);
	BIT_VEC cppVar_58113 = (0 << 5) | cppVar_58112;
	cppVar_58113 = (cppVar_58113 & cppMask_un_8_);
	bool cppVar_58115 = (cppVar_58113 == 153);
	BIT_VEC cppVar_58116 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58117 = (cppVar_58116 << 3) | 1;
	cppVar_58117 = (cppVar_58117 & cppMask_un_5_);
	BIT_VEC cppVar_58118 = (0 << 5) | cppVar_58117;
	cppVar_58118 = (cppVar_58118 & cppMask_un_8_);
	bool cppVar_58120 = (cppVar_58118 == 160);
	BIT_VEC cppVar_58121 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58122 = (cppVar_58121 << 3) | 1;
	cppVar_58122 = (cppVar_58122 & cppMask_un_5_);
	BIT_VEC cppVar_58123 = (0 << 5) | cppVar_58122;
	cppVar_58123 = (cppVar_58123 & cppMask_un_8_);
	bool cppVar_58125 = (cppVar_58123 == 168);
	BIT_VEC cppVar_58126 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58127 = (cppVar_58126 << 3) | 1;
	cppVar_58127 = (cppVar_58127 & cppMask_un_5_);
	BIT_VEC cppVar_58128 = (0 << 5) | cppVar_58127;
	cppVar_58128 = (cppVar_58128 & cppMask_un_8_);
	bool cppVar_58130 = (cppVar_58128 == 176);
	BIT_VEC cppVar_58131 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58132 = (cppVar_58131 << 3) | 1;
	cppVar_58132 = (cppVar_58132 & cppMask_un_5_);
	BIT_VEC cppVar_58133 = (0 << 5) | cppVar_58132;
	cppVar_58133 = (cppVar_58133 & cppMask_un_8_);
	bool cppVar_58135 = (cppVar_58133 == 184);
	BIT_VEC cppVar_58136 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58137 = (cppVar_58136 << 3) | 1;
	cppVar_58137 = (cppVar_58137 & cppMask_un_5_);
	BIT_VEC cppVar_58138 = (0 << 5) | cppVar_58137;
	cppVar_58138 = (cppVar_58138 & cppMask_un_8_);
	bool cppVar_58140 = (cppVar_58138 == 208);
	BIT_VEC cppVar_58141 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58142 = (cppVar_58141 << 3) | 1;
	cppVar_58142 = (cppVar_58142 & cppMask_un_5_);
	BIT_VEC cppVar_58143 = (0 << 5) | cppVar_58142;
	cppVar_58143 = (cppVar_58143 & cppMask_un_8_);
	bool cppVar_58145 = (cppVar_58143 == 224);
	BIT_VEC cppVar_58146 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58147 = (cppVar_58146 << 3) | 1;
	cppVar_58147 = (cppVar_58147 & cppMask_un_5_);
	BIT_VEC cppVar_58148 = (0 << 5) | cppVar_58147;
	cppVar_58148 = (cppVar_58148 & cppMask_un_8_);
	bool cppVar_58150 = (cppVar_58148 == 240);
	BIT_VEC cppVar_58152 = (cppVar_58150) ? B : 0;
	BIT_VEC cppVar_58153 = (cppVar_58145) ? ACC : cppVar_58152;
	BIT_VEC cppVar_58154 = (cppVar_58140) ? PSW : cppVar_58153;
	BIT_VEC cppVar_58155 = (cppVar_58135) ? IP : cppVar_58154;
	BIT_VEC cppVar_58156 = (cppVar_58130) ? P3 : cppVar_58155;
	BIT_VEC cppVar_58157 = (cppVar_58125) ? IE : cppVar_58156;
	BIT_VEC cppVar_58158 = (cppVar_58120) ? P2 : cppVar_58157;
	BIT_VEC cppVar_58159 = (cppVar_58115) ? SBUF : cppVar_58158;
	BIT_VEC cppVar_58160 = (cppVar_58110) ? SCON : cppVar_58159;
	BIT_VEC cppVar_58161 = (cppVar_58105) ? P1 : cppVar_58160;
	BIT_VEC cppVar_58162 = (cppVar_58100) ? TH1 : cppVar_58161;
	BIT_VEC cppVar_58163 = (cppVar_58095) ? TL1 : cppVar_58162;
	BIT_VEC cppVar_58164 = (cppVar_58090) ? TH0 : cppVar_58163;
	BIT_VEC cppVar_58165 = (cppVar_58085) ? TL0 : cppVar_58164;
	BIT_VEC cppVar_58166 = (cppVar_58080) ? TMOD : cppVar_58165;
	BIT_VEC cppVar_58167 = (cppVar_58075) ? TCON : cppVar_58166;
	BIT_VEC cppVar_58168 = (cppVar_58070) ? PCON : cppVar_58167;
	BIT_VEC cppVar_58169 = (cppVar_58065) ? DPH : cppVar_58168;
	BIT_VEC cppVar_58170 = (cppVar_58060) ? DPL : cppVar_58169;
	BIT_VEC cppVar_58171 = (cppVar_58055) ? SP : cppVar_58170;
	BIT_VEC cppVar_58172 = (cppVar_58050) ? P0 : cppVar_58171;
	BIT_VEC cppVar_58173 = (cppVar_58041) ? cppVar_58045 : cppVar_58172;
	BIT_VEC cppVar_58174 = (cppVar_58033) ? cppVar_58173 : SBUF;
	BIT_VEC cppVar_58175 = ROM.rd(PC);
	bool cppVar_58177 = (cppVar_58175 == 136);
	BIT_VEC cppVar_58179 = PC + 1;
	cppVar_58179 = (cppVar_58179 & cppMask_un_16_);
	BIT_VEC cppVar_58180 = ROM.rd(cppVar_58179);
	bool cppVar_58182 = (cppVar_58180 == 153);
	BIT_VEC cppVar_58184 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58186 = (cppVar_58184 << 3) | 0;
	cppVar_58186 = (cppVar_58186 & cppMask_un_5_);
	BIT_VEC cppVar_58187 = (0 << 5) | cppVar_58186;
	cppVar_58187 = (cppVar_58187 & cppMask_un_8_);
	BIT_VEC cppVar_58188 = (cppVar_58187 >> 7) & cppMask_un_1_;
	bool cppVar_58190 = (cppVar_58188 == 0);
	BIT_VEC cppVar_58191 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58192 = (cppVar_58191 << 3) | 0;
	cppVar_58192 = (cppVar_58192 & cppMask_un_5_);
	BIT_VEC cppVar_58193 = (0 << 5) | cppVar_58192;
	cppVar_58193 = (cppVar_58193 & cppMask_un_8_);
	BIT_VEC cppVar_58194 = IRAM.rd(cppVar_58193);
	BIT_VEC cppVar_58195 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58196 = (cppVar_58195 << 3) | 0;
	cppVar_58196 = (cppVar_58196 & cppMask_un_5_);
	BIT_VEC cppVar_58197 = (0 << 5) | cppVar_58196;
	cppVar_58197 = (cppVar_58197 & cppMask_un_8_);
	bool cppVar_58199 = (cppVar_58197 == 128);
	BIT_VEC cppVar_58200 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58201 = (cppVar_58200 << 3) | 0;
	cppVar_58201 = (cppVar_58201 & cppMask_un_5_);
	BIT_VEC cppVar_58202 = (0 << 5) | cppVar_58201;
	cppVar_58202 = (cppVar_58202 & cppMask_un_8_);
	bool cppVar_58204 = (cppVar_58202 == 129);
	BIT_VEC cppVar_58205 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58206 = (cppVar_58205 << 3) | 0;
	cppVar_58206 = (cppVar_58206 & cppMask_un_5_);
	BIT_VEC cppVar_58207 = (0 << 5) | cppVar_58206;
	cppVar_58207 = (cppVar_58207 & cppMask_un_8_);
	bool cppVar_58209 = (cppVar_58207 == 130);
	BIT_VEC cppVar_58210 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58211 = (cppVar_58210 << 3) | 0;
	cppVar_58211 = (cppVar_58211 & cppMask_un_5_);
	BIT_VEC cppVar_58212 = (0 << 5) | cppVar_58211;
	cppVar_58212 = (cppVar_58212 & cppMask_un_8_);
	bool cppVar_58214 = (cppVar_58212 == 131);
	BIT_VEC cppVar_58215 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58216 = (cppVar_58215 << 3) | 0;
	cppVar_58216 = (cppVar_58216 & cppMask_un_5_);
	BIT_VEC cppVar_58217 = (0 << 5) | cppVar_58216;
	cppVar_58217 = (cppVar_58217 & cppMask_un_8_);
	bool cppVar_58219 = (cppVar_58217 == 135);
	BIT_VEC cppVar_58220 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58221 = (cppVar_58220 << 3) | 0;
	cppVar_58221 = (cppVar_58221 & cppMask_un_5_);
	BIT_VEC cppVar_58222 = (0 << 5) | cppVar_58221;
	cppVar_58222 = (cppVar_58222 & cppMask_un_8_);
	bool cppVar_58224 = (cppVar_58222 == 136);
	BIT_VEC cppVar_58225 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58226 = (cppVar_58225 << 3) | 0;
	cppVar_58226 = (cppVar_58226 & cppMask_un_5_);
	BIT_VEC cppVar_58227 = (0 << 5) | cppVar_58226;
	cppVar_58227 = (cppVar_58227 & cppMask_un_8_);
	bool cppVar_58229 = (cppVar_58227 == 137);
	BIT_VEC cppVar_58230 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58231 = (cppVar_58230 << 3) | 0;
	cppVar_58231 = (cppVar_58231 & cppMask_un_5_);
	BIT_VEC cppVar_58232 = (0 << 5) | cppVar_58231;
	cppVar_58232 = (cppVar_58232 & cppMask_un_8_);
	bool cppVar_58234 = (cppVar_58232 == 138);
	BIT_VEC cppVar_58235 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58236 = (cppVar_58235 << 3) | 0;
	cppVar_58236 = (cppVar_58236 & cppMask_un_5_);
	BIT_VEC cppVar_58237 = (0 << 5) | cppVar_58236;
	cppVar_58237 = (cppVar_58237 & cppMask_un_8_);
	bool cppVar_58239 = (cppVar_58237 == 140);
	BIT_VEC cppVar_58240 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58241 = (cppVar_58240 << 3) | 0;
	cppVar_58241 = (cppVar_58241 & cppMask_un_5_);
	BIT_VEC cppVar_58242 = (0 << 5) | cppVar_58241;
	cppVar_58242 = (cppVar_58242 & cppMask_un_8_);
	bool cppVar_58244 = (cppVar_58242 == 139);
	BIT_VEC cppVar_58245 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58246 = (cppVar_58245 << 3) | 0;
	cppVar_58246 = (cppVar_58246 & cppMask_un_5_);
	BIT_VEC cppVar_58247 = (0 << 5) | cppVar_58246;
	cppVar_58247 = (cppVar_58247 & cppMask_un_8_);
	bool cppVar_58249 = (cppVar_58247 == 141);
	BIT_VEC cppVar_58250 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58251 = (cppVar_58250 << 3) | 0;
	cppVar_58251 = (cppVar_58251 & cppMask_un_5_);
	BIT_VEC cppVar_58252 = (0 << 5) | cppVar_58251;
	cppVar_58252 = (cppVar_58252 & cppMask_un_8_);
	bool cppVar_58254 = (cppVar_58252 == 144);
	BIT_VEC cppVar_58255 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58256 = (cppVar_58255 << 3) | 0;
	cppVar_58256 = (cppVar_58256 & cppMask_un_5_);
	BIT_VEC cppVar_58257 = (0 << 5) | cppVar_58256;
	cppVar_58257 = (cppVar_58257 & cppMask_un_8_);
	bool cppVar_58259 = (cppVar_58257 == 152);
	BIT_VEC cppVar_58260 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58261 = (cppVar_58260 << 3) | 0;
	cppVar_58261 = (cppVar_58261 & cppMask_un_5_);
	BIT_VEC cppVar_58262 = (0 << 5) | cppVar_58261;
	cppVar_58262 = (cppVar_58262 & cppMask_un_8_);
	bool cppVar_58264 = (cppVar_58262 == 153);
	BIT_VEC cppVar_58265 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58266 = (cppVar_58265 << 3) | 0;
	cppVar_58266 = (cppVar_58266 & cppMask_un_5_);
	BIT_VEC cppVar_58267 = (0 << 5) | cppVar_58266;
	cppVar_58267 = (cppVar_58267 & cppMask_un_8_);
	bool cppVar_58269 = (cppVar_58267 == 160);
	BIT_VEC cppVar_58270 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58271 = (cppVar_58270 << 3) | 0;
	cppVar_58271 = (cppVar_58271 & cppMask_un_5_);
	BIT_VEC cppVar_58272 = (0 << 5) | cppVar_58271;
	cppVar_58272 = (cppVar_58272 & cppMask_un_8_);
	bool cppVar_58274 = (cppVar_58272 == 168);
	BIT_VEC cppVar_58275 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58276 = (cppVar_58275 << 3) | 0;
	cppVar_58276 = (cppVar_58276 & cppMask_un_5_);
	BIT_VEC cppVar_58277 = (0 << 5) | cppVar_58276;
	cppVar_58277 = (cppVar_58277 & cppMask_un_8_);
	bool cppVar_58279 = (cppVar_58277 == 176);
	BIT_VEC cppVar_58280 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58281 = (cppVar_58280 << 3) | 0;
	cppVar_58281 = (cppVar_58281 & cppMask_un_5_);
	BIT_VEC cppVar_58282 = (0 << 5) | cppVar_58281;
	cppVar_58282 = (cppVar_58282 & cppMask_un_8_);
	bool cppVar_58284 = (cppVar_58282 == 184);
	BIT_VEC cppVar_58285 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58286 = (cppVar_58285 << 3) | 0;
	cppVar_58286 = (cppVar_58286 & cppMask_un_5_);
	BIT_VEC cppVar_58287 = (0 << 5) | cppVar_58286;
	cppVar_58287 = (cppVar_58287 & cppMask_un_8_);
	bool cppVar_58289 = (cppVar_58287 == 208);
	BIT_VEC cppVar_58290 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58291 = (cppVar_58290 << 3) | 0;
	cppVar_58291 = (cppVar_58291 & cppMask_un_5_);
	BIT_VEC cppVar_58292 = (0 << 5) | cppVar_58291;
	cppVar_58292 = (cppVar_58292 & cppMask_un_8_);
	bool cppVar_58294 = (cppVar_58292 == 224);
	BIT_VEC cppVar_58295 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58296 = (cppVar_58295 << 3) | 0;
	cppVar_58296 = (cppVar_58296 & cppMask_un_5_);
	BIT_VEC cppVar_58297 = (0 << 5) | cppVar_58296;
	cppVar_58297 = (cppVar_58297 & cppMask_un_8_);
	bool cppVar_58299 = (cppVar_58297 == 240);
	BIT_VEC cppVar_58301 = (cppVar_58299) ? B : 0;
	BIT_VEC cppVar_58302 = (cppVar_58294) ? ACC : cppVar_58301;
	BIT_VEC cppVar_58303 = (cppVar_58289) ? PSW : cppVar_58302;
	BIT_VEC cppVar_58304 = (cppVar_58284) ? IP : cppVar_58303;
	BIT_VEC cppVar_58305 = (cppVar_58279) ? P3 : cppVar_58304;
	BIT_VEC cppVar_58306 = (cppVar_58274) ? IE : cppVar_58305;
	BIT_VEC cppVar_58307 = (cppVar_58269) ? P2 : cppVar_58306;
	BIT_VEC cppVar_58308 = (cppVar_58264) ? SBUF : cppVar_58307;
	BIT_VEC cppVar_58309 = (cppVar_58259) ? SCON : cppVar_58308;
	BIT_VEC cppVar_58310 = (cppVar_58254) ? P1 : cppVar_58309;
	BIT_VEC cppVar_58311 = (cppVar_58249) ? TH1 : cppVar_58310;
	BIT_VEC cppVar_58312 = (cppVar_58244) ? TL1 : cppVar_58311;
	BIT_VEC cppVar_58313 = (cppVar_58239) ? TH0 : cppVar_58312;
	BIT_VEC cppVar_58314 = (cppVar_58234) ? TL0 : cppVar_58313;
	BIT_VEC cppVar_58315 = (cppVar_58229) ? TMOD : cppVar_58314;
	BIT_VEC cppVar_58316 = (cppVar_58224) ? TCON : cppVar_58315;
	BIT_VEC cppVar_58317 = (cppVar_58219) ? PCON : cppVar_58316;
	BIT_VEC cppVar_58318 = (cppVar_58214) ? DPH : cppVar_58317;
	BIT_VEC cppVar_58319 = (cppVar_58209) ? DPL : cppVar_58318;
	BIT_VEC cppVar_58320 = (cppVar_58204) ? SP : cppVar_58319;
	BIT_VEC cppVar_58321 = (cppVar_58199) ? P0 : cppVar_58320;
	BIT_VEC cppVar_58322 = (cppVar_58190) ? cppVar_58194 : cppVar_58321;
	BIT_VEC cppVar_58323 = (cppVar_58182) ? cppVar_58322 : SBUF;
	BIT_VEC cppVar_58324 = ROM.rd(PC);
	bool cppVar_58326 = (cppVar_58324 == 135);
	BIT_VEC cppVar_58328 = PC + 1;
	cppVar_58328 = (cppVar_58328 & cppMask_un_16_);
	BIT_VEC cppVar_58329 = ROM.rd(cppVar_58328);
	bool cppVar_58331 = (cppVar_58329 == 153);
	BIT_VEC cppVar_58333 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58335 = (cppVar_58333 << 3) | 1;
	cppVar_58335 = (cppVar_58335 & cppMask_un_5_);
	BIT_VEC cppVar_58336 = (0 << 5) | cppVar_58335;
	cppVar_58336 = (cppVar_58336 & cppMask_un_8_);
	BIT_VEC cppVar_58337 = IRAM.rd(cppVar_58336);
	BIT_VEC cppVar_58338 = IRAM.rd(cppVar_58337);
	BIT_VEC cppVar_58339 = (cppVar_58331) ? cppVar_58338 : SBUF;
	BIT_VEC cppVar_58340 = ROM.rd(PC);
	bool cppVar_58342 = (cppVar_58340 == 134);
	BIT_VEC cppVar_58344 = PC + 1;
	cppVar_58344 = (cppVar_58344 & cppMask_un_16_);
	BIT_VEC cppVar_58345 = ROM.rd(cppVar_58344);
	bool cppVar_58347 = (cppVar_58345 == 153);
	BIT_VEC cppVar_58349 = (PSW >> 3) & cppMask_un_2_;
	BIT_VEC cppVar_58351 = (cppVar_58349 << 3) | 0;
	cppVar_58351 = (cppVar_58351 & cppMask_un_5_);
	BIT_VEC cppVar_58352 = (0 << 5) | cppVar_58351;
	cppVar_58352 = (cppVar_58352 & cppMask_un_8_);
	BIT_VEC cppVar_58353 = IRAM.rd(cppVar_58352);
	BIT_VEC cppVar_58354 = IRAM.rd(cppVar_58353);
	BIT_VEC cppVar_58355 = (cppVar_58347) ? cppVar_58354 : SBUF;
	BIT_VEC cppVar_58356 = ROM.rd(PC);
	bool cppVar_58358 = (cppVar_58356 == 133);
	BIT_VEC cppVar_58360 = PC + 2;
	cppVar_58360 = (cppVar_58360 & cppMask_un_16_);
	BIT_VEC cppVar_58361 = ROM.rd(cppVar_58360);
	bool cppVar_58363 = (cppVar_58361 == 153);
	BIT_VEC cppVar_58365 = PC + 1;
	cppVar_58365 = (cppVar_58365 & cppMask_un_16_);
	BIT_VEC cppVar_58366 = ROM.rd(cppVar_58365);
	BIT_VEC cppVar_58367 = (cppVar_58366 >> 7) & cppMask_un_1_;
	bool cppVar_58369 = (cppVar_58367 == 0);
	BIT_VEC cppVar_58370 = PC + 1;
	cppVar_58370 = (cppVar_58370 & cppMask_un_16_);
	BIT_VEC cppVar_58371 = ROM.rd(cppVar_58370);
	BIT_VEC cppVar_58372 = IRAM.rd(cppVar_58371);
	BIT_VEC cppVar_58373 = PC + 1;
	cppVar_58373 = (cppVar_58373 & cppMask_un_16_);
	BIT_VEC cppVar_58374 = ROM.rd(cppVar_58373);
	bool cppVar_58376 = (cppVar_58374 == 128);
	BIT_VEC cppVar_58377 = PC + 1;
	cppVar_58377 = (cppVar_58377 & cppMask_un_16_);
	BIT_VEC cppVar_58378 = ROM.rd(cppVar_58377);
	bool cppVar_58380 = (cppVar_58378 == 129);
	BIT_VEC cppVar_58381 = PC + 1;
	cppVar_58381 = (cppVar_58381 & cppMask_un_16_);
	BIT_VEC cppVar_58382 = ROM.rd(cppVar_58381);
	bool cppVar_58384 = (cppVar_58382 == 130);
	BIT_VEC cppVar_58385 = PC + 1;
	cppVar_58385 = (cppVar_58385 & cppMask_un_16_);
	BIT_VEC cppVar_58386 = ROM.rd(cppVar_58385);
	bool cppVar_58388 = (cppVar_58386 == 131);
	BIT_VEC cppVar_58389 = PC + 1;
	cppVar_58389 = (cppVar_58389 & cppMask_un_16_);
	BIT_VEC cppVar_58390 = ROM.rd(cppVar_58389);
	bool cppVar_58392 = (cppVar_58390 == 135);
	BIT_VEC cppVar_58393 = PC + 1;
	cppVar_58393 = (cppVar_58393 & cppMask_un_16_);
	BIT_VEC cppVar_58394 = ROM.rd(cppVar_58393);
	bool cppVar_58396 = (cppVar_58394 == 136);
	BIT_VEC cppVar_58397 = PC + 1;
	cppVar_58397 = (cppVar_58397 & cppMask_un_16_);
	BIT_VEC cppVar_58398 = ROM.rd(cppVar_58397);
	bool cppVar_58400 = (cppVar_58398 == 137);
	BIT_VEC cppVar_58401 = PC + 1;
	cppVar_58401 = (cppVar_58401 & cppMask_un_16_);
	BIT_VEC cppVar_58402 = ROM.rd(cppVar_58401);
	bool cppVar_58404 = (cppVar_58402 == 138);
	BIT_VEC cppVar_58405 = PC + 1;
	cppVar_58405 = (cppVar_58405 & cppMask_un_16_);
	BIT_VEC cppVar_58406 = ROM.rd(cppVar_58405);
	bool cppVar_58408 = (cppVar_58406 == 140);
	BIT_VEC cppVar_58409 = PC + 1;
	cppVar_58409 = (cppVar_58409 & cppMask_un_16_);
	BIT_VEC cppVar_58410 = ROM.rd(cppVar_58409);
	bool cppVar_58412 = (cppVar_58410 == 139);
	BIT_VEC cppVar_58413 = PC + 1;
	cppVar_58413 = (cppVar_58413 & cppMask_un_16_);
	BIT_VEC cppVar_58414 = ROM.rd(cppVar_58413);
	bool cppVar_58416 = (cppVar_58414 == 141);
	BIT_VEC cppVar_58417 = PC + 1;
	cppVar_58417 = (cppVar_58417 & cppMask_un_16_);
	BIT_VEC cppVar_58418 = ROM.rd(cppVar_58417);
	bool cppVar_58420 = (cppVar_58418 == 144);
	BIT_VEC cppVar_58421 = PC + 1;
	cppVar_58421 = (cppVar_58421 & cppMask_un_16_);
	BIT_VEC cppVar_58422 = ROM.rd(cppVar_58421);
	bool cppVar_58424 = (cppVar_58422 == 152);
	BIT_VEC cppVar_58425 = PC + 1;
	cppVar_58425 = (cppVar_58425 & cppMask_un_16_);
	BIT_VEC cppVar_58426 = ROM.rd(cppVar_58425);
	bool cppVar_58428 = (cppVar_58426 == 153);
	BIT_VEC cppVar_58429 = PC + 1;
	cppVar_58429 = (cppVar_58429 & cppMask_un_16_);
	BIT_VEC cppVar_58430 = ROM.rd(cppVar_58429);
	bool cppVar_58432 = (cppVar_58430 == 160);
	BIT_VEC cppVar_58433 = PC + 1;
	cppVar_58433 = (cppVar_58433 & cppMask_un_16_);
	BIT_VEC cppVar_58434 = ROM.rd(cppVar_58433);
	bool cppVar_58436 = (cppVar_58434 == 168);
	BIT_VEC cppVar_58437 = PC + 1;
	cppVar_58437 = (cppVar_58437 & cppMask_un_16_);
	BIT_VEC cppVar_58438 = ROM.rd(cppVar_58437);
	bool cppVar_58440 = (cppVar_58438 == 176);
	BIT_VEC cppVar_58441 = PC + 1;
	cppVar_58441 = (cppVar_58441 & cppMask_un_16_);
	BIT_VEC cppVar_58442 = ROM.rd(cppVar_58441);
	bool cppVar_58444 = (cppVar_58442 == 184);
	BIT_VEC cppVar_58445 = PC + 1;
	cppVar_58445 = (cppVar_58445 & cppMask_un_16_);
	BIT_VEC cppVar_58446 = ROM.rd(cppVar_58445);
	bool cppVar_58448 = (cppVar_58446 == 208);
	BIT_VEC cppVar_58449 = PC + 1;
	cppVar_58449 = (cppVar_58449 & cppMask_un_16_);
	BIT_VEC cppVar_58450 = ROM.rd(cppVar_58449);
	bool cppVar_58452 = (cppVar_58450 == 224);
	BIT_VEC cppVar_58453 = PC + 1;
	cppVar_58453 = (cppVar_58453 & cppMask_un_16_);
	BIT_VEC cppVar_58454 = ROM.rd(cppVar_58453);
	bool cppVar_58456 = (cppVar_58454 == 240);
	BIT_VEC cppVar_58458 = (cppVar_58456) ? B : 0;
	BIT_VEC cppVar_58459 = (cppVar_58452) ? ACC : cppVar_58458;
	BIT_VEC cppVar_58460 = (cppVar_58448) ? PSW : cppVar_58459;
	BIT_VEC cppVar_58461 = (cppVar_58444) ? IP : cppVar_58460;
	BIT_VEC cppVar_58462 = (cppVar_58440) ? P3 : cppVar_58461;
	BIT_VEC cppVar_58463 = (cppVar_58436) ? IE : cppVar_58462;
	BIT_VEC cppVar_58464 = (cppVar_58432) ? P2 : cppVar_58463;
	BIT_VEC cppVar_58465 = (cppVar_58428) ? SBUF : cppVar_58464;
	BIT_VEC cppVar_58466 = (cppVar_58424) ? SCON : cppVar_58465;
	BIT_VEC cppVar_58467 = (cppVar_58420) ? P1 : cppVar_58466;
	BIT_VEC cppVar_58468 = (cppVar_58416) ? TH1 : cppVar_58467;
	BIT_VEC cppVar_58469 = (cppVar_58412) ? TL1 : cppVar_58468;
	BIT_VEC cppVar_58470 = (cppVar_58408) ? TH0 : cppVar_58469;
	BIT_VEC cppVar_58471 = (cppVar_58404) ? TL0 : cppVar_58470;
	BIT_VEC cppVar_58472 = (cppVar_58400) ? TMOD : cppVar_58471;
	BIT_VEC cppVar_58473 = (cppVar_58396) ? TCON : cppVar_58472;
	BIT_VEC cppVar_58474 = (cppVar_58392) ? PCON : cppVar_58473;
	BIT_VEC cppVar_58475 = (cppVar_58388) ? DPH : cppVar_58474;
	BIT_VEC cppVar_58476 = (cppVar_58384) ? DPL : cppVar_58475;
	BIT_VEC cppVar_58477 = (cppVar_58380) ? SP : cppVar_58476;
	BIT_VEC cppVar_58478 = (cppVar_58376) ? P0 : cppVar_58477;
	BIT_VEC cppVar_58479 = (cppVar_58369) ? cppVar_58372 : cppVar_58478;
	BIT_VEC cppVar_58480 = (cppVar_58363) ? cppVar_58479 : SBUF;
	BIT_VEC cppVar_58481 = ROM.rd(PC);
	bool cppVar_58483 = (cppVar_58481 == 117);
	BIT_VEC cppVar_58485 = PC + 1;
	cppVar_58485 = (cppVar_58485 & cppMask_un_16_);
	BIT_VEC cppVar_58486 = ROM.rd(cppVar_58485);
	bool cppVar_58488 = (cppVar_58486 == 153);
	BIT_VEC cppVar_58490 = PC + 2;
	cppVar_58490 = (cppVar_58490 & cppMask_un_16_);
	BIT_VEC cppVar_58491 = ROM.rd(cppVar_58490);
	BIT_VEC cppVar_58492 = (cppVar_58488) ? cppVar_58491 : SBUF;
	BIT_VEC cppVar_58493 = ROM.rd(PC);
	bool cppVar_58495 = (cppVar_58493 == 99);
	BIT_VEC cppVar_58497 = PC + 1;
	cppVar_58497 = (cppVar_58497 & cppMask_un_16_);
	BIT_VEC cppVar_58498 = ROM.rd(cppVar_58497);
	bool cppVar_58500 = (cppVar_58498 == 153);
	BIT_VEC cppVar_58501 = PC + 1;
	cppVar_58501 = (cppVar_58501 & cppMask_un_16_);
	BIT_VEC cppVar_58502 = ROM.rd(cppVar_58501);
	BIT_VEC cppVar_58503 = (cppVar_58502 >> 7) & cppMask_un_1_;
	bool cppVar_58505 = (cppVar_58503 == 0);
	BIT_VEC cppVar_58506 = PC + 1;
	cppVar_58506 = (cppVar_58506 & cppMask_un_16_);
	BIT_VEC cppVar_58507 = ROM.rd(cppVar_58506);
	BIT_VEC cppVar_58508 = IRAM.rd(cppVar_58507);
	BIT_VEC cppVar_58509 = PC + 1;
	cppVar_58509 = (cppVar_58509 & cppMask_un_16_);
	BIT_VEC cppVar_58510 = ROM.rd(cppVar_58509);
	bool cppVar_58512 = (cppVar_58510 == 128);
	BIT_VEC cppVar_58513 = PC + 1;
	cppVar_58513 = (cppVar_58513 & cppMask_un_16_);
	BIT_VEC cppVar_58514 = ROM.rd(cppVar_58513);
	bool cppVar_58516 = (cppVar_58514 == 129);
	BIT_VEC cppVar_58517 = PC + 1;
	cppVar_58517 = (cppVar_58517 & cppMask_un_16_);
	BIT_VEC cppVar_58518 = ROM.rd(cppVar_58517);
	bool cppVar_58520 = (cppVar_58518 == 130);
	BIT_VEC cppVar_58521 = PC + 1;
	cppVar_58521 = (cppVar_58521 & cppMask_un_16_);
	BIT_VEC cppVar_58522 = ROM.rd(cppVar_58521);
	bool cppVar_58524 = (cppVar_58522 == 131);
	BIT_VEC cppVar_58525 = PC + 1;
	cppVar_58525 = (cppVar_58525 & cppMask_un_16_);
	BIT_VEC cppVar_58526 = ROM.rd(cppVar_58525);
	bool cppVar_58528 = (cppVar_58526 == 135);
	BIT_VEC cppVar_58529 = PC + 1;
	cppVar_58529 = (cppVar_58529 & cppMask_un_16_);
	BIT_VEC cppVar_58530 = ROM.rd(cppVar_58529);
	bool cppVar_58532 = (cppVar_58530 == 136);
	BIT_VEC cppVar_58533 = PC + 1;
	cppVar_58533 = (cppVar_58533 & cppMask_un_16_);
	BIT_VEC cppVar_58534 = ROM.rd(cppVar_58533);
	bool cppVar_58536 = (cppVar_58534 == 137);
	BIT_VEC cppVar_58537 = PC + 1;
	cppVar_58537 = (cppVar_58537 & cppMask_un_16_);
	BIT_VEC cppVar_58538 = ROM.rd(cppVar_58537);
	bool cppVar_58540 = (cppVar_58538 == 138);
	BIT_VEC cppVar_58541 = PC + 1;
	cppVar_58541 = (cppVar_58541 & cppMask_un_16_);
	BIT_VEC cppVar_58542 = ROM.rd(cppVar_58541);
	bool cppVar_58544 = (cppVar_58542 == 140);
	BIT_VEC cppVar_58545 = PC + 1;
	cppVar_58545 = (cppVar_58545 & cppMask_un_16_);
	BIT_VEC cppVar_58546 = ROM.rd(cppVar_58545);
	bool cppVar_58548 = (cppVar_58546 == 139);
	BIT_VEC cppVar_58549 = PC + 1;
	cppVar_58549 = (cppVar_58549 & cppMask_un_16_);
	BIT_VEC cppVar_58550 = ROM.rd(cppVar_58549);
	bool cppVar_58552 = (cppVar_58550 == 141);
	BIT_VEC cppVar_58553 = PC + 1;
	cppVar_58553 = (cppVar_58553 & cppMask_un_16_);
	BIT_VEC cppVar_58554 = ROM.rd(cppVar_58553);
	bool cppVar_58556 = (cppVar_58554 == 144);
	BIT_VEC cppVar_58557 = PC + 1;
	cppVar_58557 = (cppVar_58557 & cppMask_un_16_);
	BIT_VEC cppVar_58558 = ROM.rd(cppVar_58557);
	bool cppVar_58560 = (cppVar_58558 == 152);
	BIT_VEC cppVar_58561 = PC + 1;
	cppVar_58561 = (cppVar_58561 & cppMask_un_16_);
	BIT_VEC cppVar_58562 = ROM.rd(cppVar_58561);
	bool cppVar_58564 = (cppVar_58562 == 153);
	BIT_VEC cppVar_58565 = PC + 1;
	cppVar_58565 = (cppVar_58565 & cppMask_un_16_);
	BIT_VEC cppVar_58566 = ROM.rd(cppVar_58565);
	bool cppVar_58568 = (cppVar_58566 == 160);
	BIT_VEC cppVar_58569 = PC + 1;
	cppVar_58569 = (cppVar_58569 & cppMask_un_16_);
	BIT_VEC cppVar_58570 = ROM.rd(cppVar_58569);
	bool cppVar_58572 = (cppVar_58570 == 168);
	BIT_VEC cppVar_58573 = PC + 1;
	cppVar_58573 = (cppVar_58573 & cppMask_un_16_);
	BIT_VEC cppVar_58574 = ROM.rd(cppVar_58573);
	bool cppVar_58576 = (cppVar_58574 == 176);
	BIT_VEC cppVar_58577 = PC + 1;
	cppVar_58577 = (cppVar_58577 & cppMask_un_16_);
	BIT_VEC cppVar_58578 = ROM.rd(cppVar_58577);
	bool cppVar_58580 = (cppVar_58578 == 184);
	BIT_VEC cppVar_58581 = PC + 1;
	cppVar_58581 = (cppVar_58581 & cppMask_un_16_);
	BIT_VEC cppVar_58582 = ROM.rd(cppVar_58581);
	bool cppVar_58584 = (cppVar_58582 == 208);
	BIT_VEC cppVar_58585 = PC + 1;
	cppVar_58585 = (cppVar_58585 & cppMask_un_16_);
	BIT_VEC cppVar_58586 = ROM.rd(cppVar_58585);
	bool cppVar_58588 = (cppVar_58586 == 224);
	BIT_VEC cppVar_58589 = PC + 1;
	cppVar_58589 = (cppVar_58589 & cppMask_un_16_);
	BIT_VEC cppVar_58590 = ROM.rd(cppVar_58589);
	bool cppVar_58592 = (cppVar_58590 == 240);
	BIT_VEC cppVar_58594 = (cppVar_58592) ? B : 0;
	BIT_VEC cppVar_58595 = (cppVar_58588) ? ACC : cppVar_58594;
	BIT_VEC cppVar_58596 = (cppVar_58584) ? PSW : cppVar_58595;
	BIT_VEC cppVar_58597 = (cppVar_58580) ? IP : cppVar_58596;
	BIT_VEC cppVar_58598 = (cppVar_58576) ? P3 : cppVar_58597;
	BIT_VEC cppVar_58599 = (cppVar_58572) ? IE : cppVar_58598;
	BIT_VEC cppVar_58600 = (cppVar_58568) ? P2 : cppVar_58599;
	BIT_VEC cppVar_58601 = (cppVar_58564) ? SBUF : cppVar_58600;
	BIT_VEC cppVar_58602 = (cppVar_58560) ? SCON : cppVar_58601;
	BIT_VEC cppVar_58603 = (cppVar_58556) ? P1 : cppVar_58602;
	BIT_VEC cppVar_58604 = (cppVar_58552) ? TH1 : cppVar_58603;
	BIT_VEC cppVar_58605 = (cppVar_58548) ? TL1 : cppVar_58604;
	BIT_VEC cppVar_58606 = (cppVar_58544) ? TH0 : cppVar_58605;
	BIT_VEC cppVar_58607 = (cppVar_58540) ? TL0 : cppVar_58606;
	BIT_VEC cppVar_58608 = (cppVar_58536) ? TMOD : cppVar_58607;
	BIT_VEC cppVar_58609 = (cppVar_58532) ? TCON : cppVar_58608;
	BIT_VEC cppVar_58610 = (cppVar_58528) ? PCON : cppVar_58609;
	BIT_VEC cppVar_58611 = (cppVar_58524) ? DPH : cppVar_58610;
	BIT_VEC cppVar_58612 = (cppVar_58520) ? DPL : cppVar_58611;
	BIT_VEC cppVar_58613 = (cppVar_58516) ? SP : cppVar_58612;
	BIT_VEC cppVar_58614 = (cppVar_58512) ? P0 : cppVar_58613;
	BIT_VEC cppVar_58615 = (cppVar_58505) ? cppVar_58508 : cppVar_58614;
	BIT_VEC cppVar_58617 = PC + 2;
	cppVar_58617 = (cppVar_58617 & cppMask_un_16_);
	BIT_VEC cppVar_58618 = ROM.rd(cppVar_58617);
	BIT_VEC cppVar_58619 = cppVar_58615 ^ cppVar_58618;
	BIT_VEC cppVar_58620 = (cppVar_58500) ? cppVar_58619 : SBUF;
	BIT_VEC cppVar_58621 = ROM.rd(PC);
	bool cppVar_58623 = (cppVar_58621 == 98);
	BIT_VEC cppVar_58625 = PC + 1;
	cppVar_58625 = (cppVar_58625 & cppMask_un_16_);
	BIT_VEC cppVar_58626 = ROM.rd(cppVar_58625);
	bool cppVar_58628 = (cppVar_58626 == 153);
	BIT_VEC cppVar_58629 = PC + 1;
	cppVar_58629 = (cppVar_58629 & cppMask_un_16_);
	BIT_VEC cppVar_58630 = ROM.rd(cppVar_58629);
	BIT_VEC cppVar_58631 = (cppVar_58630 >> 7) & cppMask_un_1_;
	bool cppVar_58633 = (cppVar_58631 == 0);
	BIT_VEC cppVar_58634 = PC + 1;
	cppVar_58634 = (cppVar_58634 & cppMask_un_16_);
	BIT_VEC cppVar_58635 = ROM.rd(cppVar_58634);
	BIT_VEC cppVar_58636 = IRAM.rd(cppVar_58635);
	BIT_VEC cppVar_58637 = PC + 1;
	cppVar_58637 = (cppVar_58637 & cppMask_un_16_);
	BIT_VEC cppVar_58638 = ROM.rd(cppVar_58637);
	bool cppVar_58640 = (cppVar_58638 == 128);
	BIT_VEC cppVar_58641 = PC + 1;
	cppVar_58641 = (cppVar_58641 & cppMask_un_16_);
	BIT_VEC cppVar_58642 = ROM.rd(cppVar_58641);
	bool cppVar_58644 = (cppVar_58642 == 129);
	BIT_VEC cppVar_58645 = PC + 1;
	cppVar_58645 = (cppVar_58645 & cppMask_un_16_);
	BIT_VEC cppVar_58646 = ROM.rd(cppVar_58645);
	bool cppVar_58648 = (cppVar_58646 == 130);
	BIT_VEC cppVar_58649 = PC + 1;
	cppVar_58649 = (cppVar_58649 & cppMask_un_16_);
	BIT_VEC cppVar_58650 = ROM.rd(cppVar_58649);
	bool cppVar_58652 = (cppVar_58650 == 131);
	BIT_VEC cppVar_58653 = PC + 1;
	cppVar_58653 = (cppVar_58653 & cppMask_un_16_);
	BIT_VEC cppVar_58654 = ROM.rd(cppVar_58653);
	bool cppVar_58656 = (cppVar_58654 == 135);
	BIT_VEC cppVar_58657 = PC + 1;
	cppVar_58657 = (cppVar_58657 & cppMask_un_16_);
	BIT_VEC cppVar_58658 = ROM.rd(cppVar_58657);
	bool cppVar_58660 = (cppVar_58658 == 136);
	BIT_VEC cppVar_58661 = PC + 1;
	cppVar_58661 = (cppVar_58661 & cppMask_un_16_);
	BIT_VEC cppVar_58662 = ROM.rd(cppVar_58661);
	bool cppVar_58664 = (cppVar_58662 == 137);
	BIT_VEC cppVar_58665 = PC + 1;
	cppVar_58665 = (cppVar_58665 & cppMask_un_16_);
	BIT_VEC cppVar_58666 = ROM.rd(cppVar_58665);
	bool cppVar_58668 = (cppVar_58666 == 138);
	BIT_VEC cppVar_58669 = PC + 1;
	cppVar_58669 = (cppVar_58669 & cppMask_un_16_);
	BIT_VEC cppVar_58670 = ROM.rd(cppVar_58669);
	bool cppVar_58672 = (cppVar_58670 == 140);
	BIT_VEC cppVar_58673 = PC + 1;
	cppVar_58673 = (cppVar_58673 & cppMask_un_16_);
	BIT_VEC cppVar_58674 = ROM.rd(cppVar_58673);
	bool cppVar_58676 = (cppVar_58674 == 139);
	BIT_VEC cppVar_58677 = PC + 1;
	cppVar_58677 = (cppVar_58677 & cppMask_un_16_);
	BIT_VEC cppVar_58678 = ROM.rd(cppVar_58677);
	bool cppVar_58680 = (cppVar_58678 == 141);
	BIT_VEC cppVar_58681 = PC + 1;
	cppVar_58681 = (cppVar_58681 & cppMask_un_16_);
	BIT_VEC cppVar_58682 = ROM.rd(cppVar_58681);
	bool cppVar_58684 = (cppVar_58682 == 144);
	BIT_VEC cppVar_58685 = PC + 1;
	cppVar_58685 = (cppVar_58685 & cppMask_un_16_);
	BIT_VEC cppVar_58686 = ROM.rd(cppVar_58685);
	bool cppVar_58688 = (cppVar_58686 == 152);
	BIT_VEC cppVar_58689 = PC + 1;
	cppVar_58689 = (cppVar_58689 & cppMask_un_16_);
	BIT_VEC cppVar_58690 = ROM.rd(cppVar_58689);
	bool cppVar_58692 = (cppVar_58690 == 153);
	BIT_VEC cppVar_58693 = PC + 1;
	cppVar_58693 = (cppVar_58693 & cppMask_un_16_);
	BIT_VEC cppVar_58694 = ROM.rd(cppVar_58693);
	bool cppVar_58696 = (cppVar_58694 == 160);
	BIT_VEC cppVar_58697 = PC + 1;
	cppVar_58697 = (cppVar_58697 & cppMask_un_16_);
	BIT_VEC cppVar_58698 = ROM.rd(cppVar_58697);
	bool cppVar_58700 = (cppVar_58698 == 168);
	BIT_VEC cppVar_58701 = PC + 1;
	cppVar_58701 = (cppVar_58701 & cppMask_un_16_);
	BIT_VEC cppVar_58702 = ROM.rd(cppVar_58701);
	bool cppVar_58704 = (cppVar_58702 == 176);
	BIT_VEC cppVar_58705 = PC + 1;
	cppVar_58705 = (cppVar_58705 & cppMask_un_16_);
	BIT_VEC cppVar_58706 = ROM.rd(cppVar_58705);
	bool cppVar_58708 = (cppVar_58706 == 184);
	BIT_VEC cppVar_58709 = PC + 1;
	cppVar_58709 = (cppVar_58709 & cppMask_un_16_);
	BIT_VEC cppVar_58710 = ROM.rd(cppVar_58709);
	bool cppVar_58712 = (cppVar_58710 == 208);
	BIT_VEC cppVar_58713 = PC + 1;
	cppVar_58713 = (cppVar_58713 & cppMask_un_16_);
	BIT_VEC cppVar_58714 = ROM.rd(cppVar_58713);
	bool cppVar_58716 = (cppVar_58714 == 224);
	BIT_VEC cppVar_58717 = PC + 1;
	cppVar_58717 = (cppVar_58717 & cppMask_un_16_);
	BIT_VEC cppVar_58718 = ROM.rd(cppVar_58717);
	bool cppVar_58720 = (cppVar_58718 == 240);
	BIT_VEC cppVar_58722 = (cppVar_58720) ? B : 0;
	BIT_VEC cppVar_58723 = (cppVar_58716) ? ACC : cppVar_58722;
	BIT_VEC cppVar_58724 = (cppVar_58712) ? PSW : cppVar_58723;
	BIT_VEC cppVar_58725 = (cppVar_58708) ? IP : cppVar_58724;
	BIT_VEC cppVar_58726 = (cppVar_58704) ? P3 : cppVar_58725;
	BIT_VEC cppVar_58727 = (cppVar_58700) ? IE : cppVar_58726;
	BIT_VEC cppVar_58728 = (cppVar_58696) ? P2 : cppVar_58727;
	BIT_VEC cppVar_58729 = (cppVar_58692) ? SBUF : cppVar_58728;
	BIT_VEC cppVar_58730 = (cppVar_58688) ? SCON : cppVar_58729;
	BIT_VEC cppVar_58731 = (cppVar_58684) ? P1 : cppVar_58730;
	BIT_VEC cppVar_58732 = (cppVar_58680) ? TH1 : cppVar_58731;
	BIT_VEC cppVar_58733 = (cppVar_58676) ? TL1 : cppVar_58732;
	BIT_VEC cppVar_58734 = (cppVar_58672) ? TH0 : cppVar_58733;
	BIT_VEC cppVar_58735 = (cppVar_58668) ? TL0 : cppVar_58734;
	BIT_VEC cppVar_58736 = (cppVar_58664) ? TMOD : cppVar_58735;
	BIT_VEC cppVar_58737 = (cppVar_58660) ? TCON : cppVar_58736;
	BIT_VEC cppVar_58738 = (cppVar_58656) ? PCON : cppVar_58737;
	BIT_VEC cppVar_58739 = (cppVar_58652) ? DPH : cppVar_58738;
	BIT_VEC cppVar_58740 = (cppVar_58648) ? DPL : cppVar_58739;
	BIT_VEC cppVar_58741 = (cppVar_58644) ? SP : cppVar_58740;
	BIT_VEC cppVar_58742 = (cppVar_58640) ? P0 : cppVar_58741;
	BIT_VEC cppVar_58743 = (cppVar_58633) ? cppVar_58636 : cppVar_58742;
	BIT_VEC cppVar_58744 = cppVar_58743 ^ ACC;
	BIT_VEC cppVar_58745 = (cppVar_58628) ? cppVar_58744 : SBUF;
	BIT_VEC cppVar_58746 = ROM.rd(PC);
	bool cppVar_58748 = (cppVar_58746 == 83);
	BIT_VEC cppVar_58750 = PC + 1;
	cppVar_58750 = (cppVar_58750 & cppMask_un_16_);
	BIT_VEC cppVar_58751 = ROM.rd(cppVar_58750);
	bool cppVar_58753 = (cppVar_58751 == 153);
	BIT_VEC cppVar_58754 = PC + 1;
	cppVar_58754 = (cppVar_58754 & cppMask_un_16_);
	BIT_VEC cppVar_58755 = ROM.rd(cppVar_58754);
	BIT_VEC cppVar_58756 = (cppVar_58755 >> 7) & cppMask_un_1_;
	bool cppVar_58758 = (cppVar_58756 == 0);
	BIT_VEC cppVar_58759 = PC + 1;
	cppVar_58759 = (cppVar_58759 & cppMask_un_16_);
	BIT_VEC cppVar_58760 = ROM.rd(cppVar_58759);
	BIT_VEC cppVar_58761 = IRAM.rd(cppVar_58760);
	BIT_VEC cppVar_58762 = PC + 1;
	cppVar_58762 = (cppVar_58762 & cppMask_un_16_);
	BIT_VEC cppVar_58763 = ROM.rd(cppVar_58762);
	bool cppVar_58765 = (cppVar_58763 == 128);
	BIT_VEC cppVar_58766 = PC + 1;
	cppVar_58766 = (cppVar_58766 & cppMask_un_16_);
	BIT_VEC cppVar_58767 = ROM.rd(cppVar_58766);
	bool cppVar_58769 = (cppVar_58767 == 129);
	BIT_VEC cppVar_58770 = PC + 1;
	cppVar_58770 = (cppVar_58770 & cppMask_un_16_);
	BIT_VEC cppVar_58771 = ROM.rd(cppVar_58770);
	bool cppVar_58773 = (cppVar_58771 == 130);
	BIT_VEC cppVar_58774 = PC + 1;
	cppVar_58774 = (cppVar_58774 & cppMask_un_16_);
	BIT_VEC cppVar_58775 = ROM.rd(cppVar_58774);
	bool cppVar_58777 = (cppVar_58775 == 131);
	BIT_VEC cppVar_58778 = PC + 1;
	cppVar_58778 = (cppVar_58778 & cppMask_un_16_);
	BIT_VEC cppVar_58779 = ROM.rd(cppVar_58778);
	bool cppVar_58781 = (cppVar_58779 == 135);
	BIT_VEC cppVar_58782 = PC + 1;
	cppVar_58782 = (cppVar_58782 & cppMask_un_16_);
	BIT_VEC cppVar_58783 = ROM.rd(cppVar_58782);
	bool cppVar_58785 = (cppVar_58783 == 136);
	BIT_VEC cppVar_58786 = PC + 1;
	cppVar_58786 = (cppVar_58786 & cppMask_un_16_);
	BIT_VEC cppVar_58787 = ROM.rd(cppVar_58786);
	bool cppVar_58789 = (cppVar_58787 == 137);
	BIT_VEC cppVar_58790 = PC + 1;
	cppVar_58790 = (cppVar_58790 & cppMask_un_16_);
	BIT_VEC cppVar_58791 = ROM.rd(cppVar_58790);
	bool cppVar_58793 = (cppVar_58791 == 138);
	BIT_VEC cppVar_58794 = PC + 1;
	cppVar_58794 = (cppVar_58794 & cppMask_un_16_);
	BIT_VEC cppVar_58795 = ROM.rd(cppVar_58794);
	bool cppVar_58797 = (cppVar_58795 == 140);
	BIT_VEC cppVar_58798 = PC + 1;
	cppVar_58798 = (cppVar_58798 & cppMask_un_16_);
	BIT_VEC cppVar_58799 = ROM.rd(cppVar_58798);
	bool cppVar_58801 = (cppVar_58799 == 139);
	BIT_VEC cppVar_58802 = PC + 1;
	cppVar_58802 = (cppVar_58802 & cppMask_un_16_);
	BIT_VEC cppVar_58803 = ROM.rd(cppVar_58802);
	bool cppVar_58805 = (cppVar_58803 == 141);
	BIT_VEC cppVar_58806 = PC + 1;
	cppVar_58806 = (cppVar_58806 & cppMask_un_16_);
	BIT_VEC cppVar_58807 = ROM.rd(cppVar_58806);
	bool cppVar_58809 = (cppVar_58807 == 144);
	BIT_VEC cppVar_58810 = PC + 1;
	cppVar_58810 = (cppVar_58810 & cppMask_un_16_);
	BIT_VEC cppVar_58811 = ROM.rd(cppVar_58810);
	bool cppVar_58813 = (cppVar_58811 == 152);
	BIT_VEC cppVar_58814 = PC + 1;
	cppVar_58814 = (cppVar_58814 & cppMask_un_16_);
	BIT_VEC cppVar_58815 = ROM.rd(cppVar_58814);
	bool cppVar_58817 = (cppVar_58815 == 153);
	BIT_VEC cppVar_58818 = PC + 1;
	cppVar_58818 = (cppVar_58818 & cppMask_un_16_);
	BIT_VEC cppVar_58819 = ROM.rd(cppVar_58818);
	bool cppVar_58821 = (cppVar_58819 == 160);
	BIT_VEC cppVar_58822 = PC + 1;
	cppVar_58822 = (cppVar_58822 & cppMask_un_16_);
	BIT_VEC cppVar_58823 = ROM.rd(cppVar_58822);
	bool cppVar_58825 = (cppVar_58823 == 168);
	BIT_VEC cppVar_58826 = PC + 1;
	cppVar_58826 = (cppVar_58826 & cppMask_un_16_);
	BIT_VEC cppVar_58827 = ROM.rd(cppVar_58826);
	bool cppVar_58829 = (cppVar_58827 == 176);
	BIT_VEC cppVar_58830 = PC + 1;
	cppVar_58830 = (cppVar_58830 & cppMask_un_16_);
	BIT_VEC cppVar_58831 = ROM.rd(cppVar_58830);
	bool cppVar_58833 = (cppVar_58831 == 184);
	BIT_VEC cppVar_58834 = PC + 1;
	cppVar_58834 = (cppVar_58834 & cppMask_un_16_);
	BIT_VEC cppVar_58835 = ROM.rd(cppVar_58834);
	bool cppVar_58837 = (cppVar_58835 == 208);
	BIT_VEC cppVar_58838 = PC + 1;
	cppVar_58838 = (cppVar_58838 & cppMask_un_16_);
	BIT_VEC cppVar_58839 = ROM.rd(cppVar_58838);
	bool cppVar_58841 = (cppVar_58839 == 224);
	BIT_VEC cppVar_58842 = PC + 1;
	cppVar_58842 = (cppVar_58842 & cppMask_un_16_);
	BIT_VEC cppVar_58843 = ROM.rd(cppVar_58842);
	bool cppVar_58845 = (cppVar_58843 == 240);
	BIT_VEC cppVar_58847 = (cppVar_58845) ? B : 0;
	BIT_VEC cppVar_58848 = (cppVar_58841) ? ACC : cppVar_58847;
	BIT_VEC cppVar_58849 = (cppVar_58837) ? PSW : cppVar_58848;
	BIT_VEC cppVar_58850 = (cppVar_58833) ? IP : cppVar_58849;
	BIT_VEC cppVar_58851 = (cppVar_58829) ? P3 : cppVar_58850;
	BIT_VEC cppVar_58852 = (cppVar_58825) ? IE : cppVar_58851;
	BIT_VEC cppVar_58853 = (cppVar_58821) ? P2 : cppVar_58852;
	BIT_VEC cppVar_58854 = (cppVar_58817) ? SBUF : cppVar_58853;
	BIT_VEC cppVar_58855 = (cppVar_58813) ? SCON : cppVar_58854;
	BIT_VEC cppVar_58856 = (cppVar_58809) ? P1 : cppVar_58855;
	BIT_VEC cppVar_58857 = (cppVar_58805) ? TH1 : cppVar_58856;
	BIT_VEC cppVar_58858 = (cppVar_58801) ? TL1 : cppVar_58857;
	BIT_VEC cppVar_58859 = (cppVar_58797) ? TH0 : cppVar_58858;
	BIT_VEC cppVar_58860 = (cppVar_58793) ? TL0 : cppVar_58859;
	BIT_VEC cppVar_58861 = (cppVar_58789) ? TMOD : cppVar_58860;
	BIT_VEC cppVar_58862 = (cppVar_58785) ? TCON : cppVar_58861;
	BIT_VEC cppVar_58863 = (cppVar_58781) ? PCON : cppVar_58862;
	BIT_VEC cppVar_58864 = (cppVar_58777) ? DPH : cppVar_58863;
	BIT_VEC cppVar_58865 = (cppVar_58773) ? DPL : cppVar_58864;
	BIT_VEC cppVar_58866 = (cppVar_58769) ? SP : cppVar_58865;
	BIT_VEC cppVar_58867 = (cppVar_58765) ? P0 : cppVar_58866;
	BIT_VEC cppVar_58868 = (cppVar_58758) ? cppVar_58761 : cppVar_58867;
	BIT_VEC cppVar_58870 = PC + 2;
	cppVar_58870 = (cppVar_58870 & cppMask_un_16_);
	BIT_VEC cppVar_58871 = ROM.rd(cppVar_58870);
	BIT_VEC cppVar_58872 = cppVar_58868 & cppVar_58871;
	BIT_VEC cppVar_58873 = (cppVar_58753) ? cppVar_58872 : SBUF;
	BIT_VEC cppVar_58874 = ROM.rd(PC);
	bool cppVar_58876 = (cppVar_58874 == 82);
	BIT_VEC cppVar_58878 = PC + 1;
	cppVar_58878 = (cppVar_58878 & cppMask_un_16_);
	BIT_VEC cppVar_58879 = ROM.rd(cppVar_58878);
	bool cppVar_58881 = (cppVar_58879 == 153);
	BIT_VEC cppVar_58882 = PC + 1;
	cppVar_58882 = (cppVar_58882 & cppMask_un_16_);
	BIT_VEC cppVar_58883 = ROM.rd(cppVar_58882);
	BIT_VEC cppVar_58884 = (cppVar_58883 >> 7) & cppMask_un_1_;
	bool cppVar_58886 = (cppVar_58884 == 0);
	BIT_VEC cppVar_58887 = PC + 1;
	cppVar_58887 = (cppVar_58887 & cppMask_un_16_);
	BIT_VEC cppVar_58888 = ROM.rd(cppVar_58887);
	BIT_VEC cppVar_58889 = IRAM.rd(cppVar_58888);
	BIT_VEC cppVar_58890 = PC + 1;
	cppVar_58890 = (cppVar_58890 & cppMask_un_16_);
	BIT_VEC cppVar_58891 = ROM.rd(cppVar_58890);
	bool cppVar_58893 = (cppVar_58891 == 128);
	BIT_VEC cppVar_58894 = PC + 1;
	cppVar_58894 = (cppVar_58894 & cppMask_un_16_);
	BIT_VEC cppVar_58895 = ROM.rd(cppVar_58894);
	bool cppVar_58897 = (cppVar_58895 == 129);
	BIT_VEC cppVar_58898 = PC + 1;
	cppVar_58898 = (cppVar_58898 & cppMask_un_16_);
	BIT_VEC cppVar_58899 = ROM.rd(cppVar_58898);
	bool cppVar_58901 = (cppVar_58899 == 130);
	BIT_VEC cppVar_58902 = PC + 1;
	cppVar_58902 = (cppVar_58902 & cppMask_un_16_);
	BIT_VEC cppVar_58903 = ROM.rd(cppVar_58902);
	bool cppVar_58905 = (cppVar_58903 == 131);
	BIT_VEC cppVar_58906 = PC + 1;
	cppVar_58906 = (cppVar_58906 & cppMask_un_16_);
	BIT_VEC cppVar_58907 = ROM.rd(cppVar_58906);
	bool cppVar_58909 = (cppVar_58907 == 135);
	BIT_VEC cppVar_58910 = PC + 1;
	cppVar_58910 = (cppVar_58910 & cppMask_un_16_);
	BIT_VEC cppVar_58911 = ROM.rd(cppVar_58910);
	bool cppVar_58913 = (cppVar_58911 == 136);
	BIT_VEC cppVar_58914 = PC + 1;
	cppVar_58914 = (cppVar_58914 & cppMask_un_16_);
	BIT_VEC cppVar_58915 = ROM.rd(cppVar_58914);
	bool cppVar_58917 = (cppVar_58915 == 137);
	BIT_VEC cppVar_58918 = PC + 1;
	cppVar_58918 = (cppVar_58918 & cppMask_un_16_);
	BIT_VEC cppVar_58919 = ROM.rd(cppVar_58918);
	bool cppVar_58921 = (cppVar_58919 == 138);
	BIT_VEC cppVar_58922 = PC + 1;
	cppVar_58922 = (cppVar_58922 & cppMask_un_16_);
	BIT_VEC cppVar_58923 = ROM.rd(cppVar_58922);
	bool cppVar_58925 = (cppVar_58923 == 140);
	BIT_VEC cppVar_58926 = PC + 1;
	cppVar_58926 = (cppVar_58926 & cppMask_un_16_);
	BIT_VEC cppVar_58927 = ROM.rd(cppVar_58926);
	bool cppVar_58929 = (cppVar_58927 == 139);
	BIT_VEC cppVar_58930 = PC + 1;
	cppVar_58930 = (cppVar_58930 & cppMask_un_16_);
	BIT_VEC cppVar_58931 = ROM.rd(cppVar_58930);
	bool cppVar_58933 = (cppVar_58931 == 141);
	BIT_VEC cppVar_58934 = PC + 1;
	cppVar_58934 = (cppVar_58934 & cppMask_un_16_);
	BIT_VEC cppVar_58935 = ROM.rd(cppVar_58934);
	bool cppVar_58937 = (cppVar_58935 == 144);
	BIT_VEC cppVar_58938 = PC + 1;
	cppVar_58938 = (cppVar_58938 & cppMask_un_16_);
	BIT_VEC cppVar_58939 = ROM.rd(cppVar_58938);
	bool cppVar_58941 = (cppVar_58939 == 152);
	BIT_VEC cppVar_58942 = PC + 1;
	cppVar_58942 = (cppVar_58942 & cppMask_un_16_);
	BIT_VEC cppVar_58943 = ROM.rd(cppVar_58942);
	bool cppVar_58945 = (cppVar_58943 == 153);
	BIT_VEC cppVar_58946 = PC + 1;
	cppVar_58946 = (cppVar_58946 & cppMask_un_16_);
	BIT_VEC cppVar_58947 = ROM.rd(cppVar_58946);
	bool cppVar_58949 = (cppVar_58947 == 160);
	BIT_VEC cppVar_58950 = PC + 1;
	cppVar_58950 = (cppVar_58950 & cppMask_un_16_);
	BIT_VEC cppVar_58951 = ROM.rd(cppVar_58950);
	bool cppVar_58953 = (cppVar_58951 == 168);
	BIT_VEC cppVar_58954 = PC + 1;
	cppVar_58954 = (cppVar_58954 & cppMask_un_16_);
	BIT_VEC cppVar_58955 = ROM.rd(cppVar_58954);
	bool cppVar_58957 = (cppVar_58955 == 176);
	BIT_VEC cppVar_58958 = PC + 1;
	cppVar_58958 = (cppVar_58958 & cppMask_un_16_);
	BIT_VEC cppVar_58959 = ROM.rd(cppVar_58958);
	bool cppVar_58961 = (cppVar_58959 == 184);
	BIT_VEC cppVar_58962 = PC + 1;
	cppVar_58962 = (cppVar_58962 & cppMask_un_16_);
	BIT_VEC cppVar_58963 = ROM.rd(cppVar_58962);
	bool cppVar_58965 = (cppVar_58963 == 208);
	BIT_VEC cppVar_58966 = PC + 1;
	cppVar_58966 = (cppVar_58966 & cppMask_un_16_);
	BIT_VEC cppVar_58967 = ROM.rd(cppVar_58966);
	bool cppVar_58969 = (cppVar_58967 == 224);
	BIT_VEC cppVar_58970 = PC + 1;
	cppVar_58970 = (cppVar_58970 & cppMask_un_16_);
	BIT_VEC cppVar_58971 = ROM.rd(cppVar_58970);
	bool cppVar_58973 = (cppVar_58971 == 240);
	BIT_VEC cppVar_58975 = (cppVar_58973) ? B : 0;
	BIT_VEC cppVar_58976 = (cppVar_58969) ? ACC : cppVar_58975;
	BIT_VEC cppVar_58977 = (cppVar_58965) ? PSW : cppVar_58976;
	BIT_VEC cppVar_58978 = (cppVar_58961) ? IP : cppVar_58977;
	BIT_VEC cppVar_58979 = (cppVar_58957) ? P3 : cppVar_58978;
	BIT_VEC cppVar_58980 = (cppVar_58953) ? IE : cppVar_58979;
	BIT_VEC cppVar_58981 = (cppVar_58949) ? P2 : cppVar_58980;
	BIT_VEC cppVar_58982 = (cppVar_58945) ? SBUF : cppVar_58981;
	BIT_VEC cppVar_58983 = (cppVar_58941) ? SCON : cppVar_58982;
	BIT_VEC cppVar_58984 = (cppVar_58937) ? P1 : cppVar_58983;
	BIT_VEC cppVar_58985 = (cppVar_58933) ? TH1 : cppVar_58984;
	BIT_VEC cppVar_58986 = (cppVar_58929) ? TL1 : cppVar_58985;
	BIT_VEC cppVar_58987 = (cppVar_58925) ? TH0 : cppVar_58986;
	BIT_VEC cppVar_58988 = (cppVar_58921) ? TL0 : cppVar_58987;
	BIT_VEC cppVar_58989 = (cppVar_58917) ? TMOD : cppVar_58988;
	BIT_VEC cppVar_58990 = (cppVar_58913) ? TCON : cppVar_58989;
	BIT_VEC cppVar_58991 = (cppVar_58909) ? PCON : cppVar_58990;
	BIT_VEC cppVar_58992 = (cppVar_58905) ? DPH : cppVar_58991;
	BIT_VEC cppVar_58993 = (cppVar_58901) ? DPL : cppVar_58992;
	BIT_VEC cppVar_58994 = (cppVar_58897) ? SP : cppVar_58993;
	BIT_VEC cppVar_58995 = (cppVar_58893) ? P0 : cppVar_58994;
	BIT_VEC cppVar_58996 = (cppVar_58886) ? cppVar_58889 : cppVar_58995;
	BIT_VEC cppVar_58997 = cppVar_58996 & ACC;
	BIT_VEC cppVar_58998 = (cppVar_58881) ? cppVar_58997 : SBUF;
	BIT_VEC cppVar_58999 = ROM.rd(PC);
	bool cppVar_59001 = (cppVar_58999 == 67);
	BIT_VEC cppVar_59003 = PC + 1;
	cppVar_59003 = (cppVar_59003 & cppMask_un_16_);
	BIT_VEC cppVar_59004 = ROM.rd(cppVar_59003);
	bool cppVar_59006 = (cppVar_59004 == 153);
	BIT_VEC cppVar_59007 = PC + 1;
	cppVar_59007 = (cppVar_59007 & cppMask_un_16_);
	BIT_VEC cppVar_59008 = ROM.rd(cppVar_59007);
	BIT_VEC cppVar_59009 = (cppVar_59008 >> 7) & cppMask_un_1_;
	bool cppVar_59011 = (cppVar_59009 == 0);
	BIT_VEC cppVar_59012 = PC + 1;
	cppVar_59012 = (cppVar_59012 & cppMask_un_16_);
	BIT_VEC cppVar_59013 = ROM.rd(cppVar_59012);
	BIT_VEC cppVar_59014 = IRAM.rd(cppVar_59013);
	BIT_VEC cppVar_59015 = PC + 1;
	cppVar_59015 = (cppVar_59015 & cppMask_un_16_);
	BIT_VEC cppVar_59016 = ROM.rd(cppVar_59015);
	bool cppVar_59018 = (cppVar_59016 == 128);
	BIT_VEC cppVar_59019 = PC + 1;
	cppVar_59019 = (cppVar_59019 & cppMask_un_16_);
	BIT_VEC cppVar_59020 = ROM.rd(cppVar_59019);
	bool cppVar_59022 = (cppVar_59020 == 129);
	BIT_VEC cppVar_59023 = PC + 1;
	cppVar_59023 = (cppVar_59023 & cppMask_un_16_);
	BIT_VEC cppVar_59024 = ROM.rd(cppVar_59023);
	bool cppVar_59026 = (cppVar_59024 == 130);
	BIT_VEC cppVar_59027 = PC + 1;
	cppVar_59027 = (cppVar_59027 & cppMask_un_16_);
	BIT_VEC cppVar_59028 = ROM.rd(cppVar_59027);
	bool cppVar_59030 = (cppVar_59028 == 131);
	BIT_VEC cppVar_59031 = PC + 1;
	cppVar_59031 = (cppVar_59031 & cppMask_un_16_);
	BIT_VEC cppVar_59032 = ROM.rd(cppVar_59031);
	bool cppVar_59034 = (cppVar_59032 == 135);
	BIT_VEC cppVar_59035 = PC + 1;
	cppVar_59035 = (cppVar_59035 & cppMask_un_16_);
	BIT_VEC cppVar_59036 = ROM.rd(cppVar_59035);
	bool cppVar_59038 = (cppVar_59036 == 136);
	BIT_VEC cppVar_59039 = PC + 1;
	cppVar_59039 = (cppVar_59039 & cppMask_un_16_);
	BIT_VEC cppVar_59040 = ROM.rd(cppVar_59039);
	bool cppVar_59042 = (cppVar_59040 == 137);
	BIT_VEC cppVar_59043 = PC + 1;
	cppVar_59043 = (cppVar_59043 & cppMask_un_16_);
	BIT_VEC cppVar_59044 = ROM.rd(cppVar_59043);
	bool cppVar_59046 = (cppVar_59044 == 138);
	BIT_VEC cppVar_59047 = PC + 1;
	cppVar_59047 = (cppVar_59047 & cppMask_un_16_);
	BIT_VEC cppVar_59048 = ROM.rd(cppVar_59047);
	bool cppVar_59050 = (cppVar_59048 == 140);
	BIT_VEC cppVar_59051 = PC + 1;
	cppVar_59051 = (cppVar_59051 & cppMask_un_16_);
	BIT_VEC cppVar_59052 = ROM.rd(cppVar_59051);
	bool cppVar_59054 = (cppVar_59052 == 139);
	BIT_VEC cppVar_59055 = PC + 1;
	cppVar_59055 = (cppVar_59055 & cppMask_un_16_);
	BIT_VEC cppVar_59056 = ROM.rd(cppVar_59055);
	bool cppVar_59058 = (cppVar_59056 == 141);
	BIT_VEC cppVar_59059 = PC + 1;
	cppVar_59059 = (cppVar_59059 & cppMask_un_16_);
	BIT_VEC cppVar_59060 = ROM.rd(cppVar_59059);
	bool cppVar_59062 = (cppVar_59060 == 144);
	BIT_VEC cppVar_59063 = PC + 1;
	cppVar_59063 = (cppVar_59063 & cppMask_un_16_);
	BIT_VEC cppVar_59064 = ROM.rd(cppVar_59063);
	bool cppVar_59066 = (cppVar_59064 == 152);
	BIT_VEC cppVar_59067 = PC + 1;
	cppVar_59067 = (cppVar_59067 & cppMask_un_16_);
	BIT_VEC cppVar_59068 = ROM.rd(cppVar_59067);
	bool cppVar_59070 = (cppVar_59068 == 153);
	BIT_VEC cppVar_59071 = PC + 1;
	cppVar_59071 = (cppVar_59071 & cppMask_un_16_);
	BIT_VEC cppVar_59072 = ROM.rd(cppVar_59071);
	bool cppVar_59074 = (cppVar_59072 == 160);
	BIT_VEC cppVar_59075 = PC + 1;
	cppVar_59075 = (cppVar_59075 & cppMask_un_16_);
	BIT_VEC cppVar_59076 = ROM.rd(cppVar_59075);
	bool cppVar_59078 = (cppVar_59076 == 168);
	BIT_VEC cppVar_59079 = PC + 1;
	cppVar_59079 = (cppVar_59079 & cppMask_un_16_);
	BIT_VEC cppVar_59080 = ROM.rd(cppVar_59079);
	bool cppVar_59082 = (cppVar_59080 == 176);
	BIT_VEC cppVar_59083 = PC + 1;
	cppVar_59083 = (cppVar_59083 & cppMask_un_16_);
	BIT_VEC cppVar_59084 = ROM.rd(cppVar_59083);
	bool cppVar_59086 = (cppVar_59084 == 184);
	BIT_VEC cppVar_59087 = PC + 1;
	cppVar_59087 = (cppVar_59087 & cppMask_un_16_);
	BIT_VEC cppVar_59088 = ROM.rd(cppVar_59087);
	bool cppVar_59090 = (cppVar_59088 == 208);
	BIT_VEC cppVar_59091 = PC + 1;
	cppVar_59091 = (cppVar_59091 & cppMask_un_16_);
	BIT_VEC cppVar_59092 = ROM.rd(cppVar_59091);
	bool cppVar_59094 = (cppVar_59092 == 224);
	BIT_VEC cppVar_59095 = PC + 1;
	cppVar_59095 = (cppVar_59095 & cppMask_un_16_);
	BIT_VEC cppVar_59096 = ROM.rd(cppVar_59095);
	bool cppVar_59098 = (cppVar_59096 == 240);
	BIT_VEC cppVar_59100 = (cppVar_59098) ? B : 0;
	BIT_VEC cppVar_59101 = (cppVar_59094) ? ACC : cppVar_59100;
	BIT_VEC cppVar_59102 = (cppVar_59090) ? PSW : cppVar_59101;
	BIT_VEC cppVar_59103 = (cppVar_59086) ? IP : cppVar_59102;
	BIT_VEC cppVar_59104 = (cppVar_59082) ? P3 : cppVar_59103;
	BIT_VEC cppVar_59105 = (cppVar_59078) ? IE : cppVar_59104;
	BIT_VEC cppVar_59106 = (cppVar_59074) ? P2 : cppVar_59105;
	BIT_VEC cppVar_59107 = (cppVar_59070) ? SBUF : cppVar_59106;
	BIT_VEC cppVar_59108 = (cppVar_59066) ? SCON : cppVar_59107;
	BIT_VEC cppVar_59109 = (cppVar_59062) ? P1 : cppVar_59108;
	BIT_VEC cppVar_59110 = (cppVar_59058) ? TH1 : cppVar_59109;
	BIT_VEC cppVar_59111 = (cppVar_59054) ? TL1 : cppVar_59110;
	BIT_VEC cppVar_59112 = (cppVar_59050) ? TH0 : cppVar_59111;
	BIT_VEC cppVar_59113 = (cppVar_59046) ? TL0 : cppVar_59112;
	BIT_VEC cppVar_59114 = (cppVar_59042) ? TMOD : cppVar_59113;
	BIT_VEC cppVar_59115 = (cppVar_59038) ? TCON : cppVar_59114;
	BIT_VEC cppVar_59116 = (cppVar_59034) ? PCON : cppVar_59115;
	BIT_VEC cppVar_59117 = (cppVar_59030) ? DPH : cppVar_59116;
	BIT_VEC cppVar_59118 = (cppVar_59026) ? DPL : cppVar_59117;
	BIT_VEC cppVar_59119 = (cppVar_59022) ? SP : cppVar_59118;
	BIT_VEC cppVar_59120 = (cppVar_59018) ? P0 : cppVar_59119;
	BIT_VEC cppVar_59121 = (cppVar_59011) ? cppVar_59014 : cppVar_59120;
	BIT_VEC cppVar_59123 = PC + 2;
	cppVar_59123 = (cppVar_59123 & cppMask_un_16_);
	BIT_VEC cppVar_59124 = ROM.rd(cppVar_59123);
	BIT_VEC cppVar_59125 = cppVar_59121 | cppVar_59124;
	BIT_VEC cppVar_59126 = (cppVar_59006) ? cppVar_59125 : SBUF;
	BIT_VEC cppVar_59127 = ROM.rd(PC);
	bool cppVar_59129 = (cppVar_59127 == 66);
	BIT_VEC cppVar_59131 = PC + 1;
	cppVar_59131 = (cppVar_59131 & cppMask_un_16_);
	BIT_VEC cppVar_59132 = ROM.rd(cppVar_59131);
	bool cppVar_59134 = (cppVar_59132 == 153);
	BIT_VEC cppVar_59135 = PC + 1;
	cppVar_59135 = (cppVar_59135 & cppMask_un_16_);
	BIT_VEC cppVar_59136 = ROM.rd(cppVar_59135);
	BIT_VEC cppVar_59137 = (cppVar_59136 >> 7) & cppMask_un_1_;
	bool cppVar_59139 = (cppVar_59137 == 0);
	BIT_VEC cppVar_59140 = PC + 1;
	cppVar_59140 = (cppVar_59140 & cppMask_un_16_);
	BIT_VEC cppVar_59141 = ROM.rd(cppVar_59140);
	BIT_VEC cppVar_59142 = IRAM.rd(cppVar_59141);
	BIT_VEC cppVar_59143 = PC + 1;
	cppVar_59143 = (cppVar_59143 & cppMask_un_16_);
	BIT_VEC cppVar_59144 = ROM.rd(cppVar_59143);
	bool cppVar_59146 = (cppVar_59144 == 128);
	BIT_VEC cppVar_59147 = PC + 1;
	cppVar_59147 = (cppVar_59147 & cppMask_un_16_);
	BIT_VEC cppVar_59148 = ROM.rd(cppVar_59147);
	bool cppVar_59150 = (cppVar_59148 == 129);
	BIT_VEC cppVar_59151 = PC + 1;
	cppVar_59151 = (cppVar_59151 & cppMask_un_16_);
	BIT_VEC cppVar_59152 = ROM.rd(cppVar_59151);
	bool cppVar_59154 = (cppVar_59152 == 130);
	BIT_VEC cppVar_59155 = PC + 1;
	cppVar_59155 = (cppVar_59155 & cppMask_un_16_);
	BIT_VEC cppVar_59156 = ROM.rd(cppVar_59155);
	bool cppVar_59158 = (cppVar_59156 == 131);
	BIT_VEC cppVar_59159 = PC + 1;
	cppVar_59159 = (cppVar_59159 & cppMask_un_16_);
	BIT_VEC cppVar_59160 = ROM.rd(cppVar_59159);
	bool cppVar_59162 = (cppVar_59160 == 135);
	BIT_VEC cppVar_59163 = PC + 1;
	cppVar_59163 = (cppVar_59163 & cppMask_un_16_);
	BIT_VEC cppVar_59164 = ROM.rd(cppVar_59163);
	bool cppVar_59166 = (cppVar_59164 == 136);
	BIT_VEC cppVar_59167 = PC + 1;
	cppVar_59167 = (cppVar_59167 & cppMask_un_16_);
	BIT_VEC cppVar_59168 = ROM.rd(cppVar_59167);
	bool cppVar_59170 = (cppVar_59168 == 137);
	BIT_VEC cppVar_59171 = PC + 1;
	cppVar_59171 = (cppVar_59171 & cppMask_un_16_);
	BIT_VEC cppVar_59172 = ROM.rd(cppVar_59171);
	bool cppVar_59174 = (cppVar_59172 == 138);
	BIT_VEC cppVar_59175 = PC + 1;
	cppVar_59175 = (cppVar_59175 & cppMask_un_16_);
	BIT_VEC cppVar_59176 = ROM.rd(cppVar_59175);
	bool cppVar_59178 = (cppVar_59176 == 140);
	BIT_VEC cppVar_59179 = PC + 1;
	cppVar_59179 = (cppVar_59179 & cppMask_un_16_);
	BIT_VEC cppVar_59180 = ROM.rd(cppVar_59179);
	bool cppVar_59182 = (cppVar_59180 == 139);
	BIT_VEC cppVar_59183 = PC + 1;
	cppVar_59183 = (cppVar_59183 & cppMask_un_16_);
	BIT_VEC cppVar_59184 = ROM.rd(cppVar_59183);
	bool cppVar_59186 = (cppVar_59184 == 141);
	BIT_VEC cppVar_59187 = PC + 1;
	cppVar_59187 = (cppVar_59187 & cppMask_un_16_);
	BIT_VEC cppVar_59188 = ROM.rd(cppVar_59187);
	bool cppVar_59190 = (cppVar_59188 == 144);
	BIT_VEC cppVar_59191 = PC + 1;
	cppVar_59191 = (cppVar_59191 & cppMask_un_16_);
	BIT_VEC cppVar_59192 = ROM.rd(cppVar_59191);
	bool cppVar_59194 = (cppVar_59192 == 152);
	BIT_VEC cppVar_59195 = PC + 1;
	cppVar_59195 = (cppVar_59195 & cppMask_un_16_);
	BIT_VEC cppVar_59196 = ROM.rd(cppVar_59195);
	bool cppVar_59198 = (cppVar_59196 == 153);
	BIT_VEC cppVar_59199 = PC + 1;
	cppVar_59199 = (cppVar_59199 & cppMask_un_16_);
	BIT_VEC cppVar_59200 = ROM.rd(cppVar_59199);
	bool cppVar_59202 = (cppVar_59200 == 160);
	BIT_VEC cppVar_59203 = PC + 1;
	cppVar_59203 = (cppVar_59203 & cppMask_un_16_);
	BIT_VEC cppVar_59204 = ROM.rd(cppVar_59203);
	bool cppVar_59206 = (cppVar_59204 == 168);
	BIT_VEC cppVar_59207 = PC + 1;
	cppVar_59207 = (cppVar_59207 & cppMask_un_16_);
	BIT_VEC cppVar_59208 = ROM.rd(cppVar_59207);
	bool cppVar_59210 = (cppVar_59208 == 176);
	BIT_VEC cppVar_59211 = PC + 1;
	cppVar_59211 = (cppVar_59211 & cppMask_un_16_);
	BIT_VEC cppVar_59212 = ROM.rd(cppVar_59211);
	bool cppVar_59214 = (cppVar_59212 == 184);
	BIT_VEC cppVar_59215 = PC + 1;
	cppVar_59215 = (cppVar_59215 & cppMask_un_16_);
	BIT_VEC cppVar_59216 = ROM.rd(cppVar_59215);
	bool cppVar_59218 = (cppVar_59216 == 208);
	BIT_VEC cppVar_59219 = PC + 1;
	cppVar_59219 = (cppVar_59219 & cppMask_un_16_);
	BIT_VEC cppVar_59220 = ROM.rd(cppVar_59219);
	bool cppVar_59222 = (cppVar_59220 == 224);
	BIT_VEC cppVar_59223 = PC + 1;
	cppVar_59223 = (cppVar_59223 & cppMask_un_16_);
	BIT_VEC cppVar_59224 = ROM.rd(cppVar_59223);
	bool cppVar_59226 = (cppVar_59224 == 240);
	BIT_VEC cppVar_59228 = (cppVar_59226) ? B : 0;
	BIT_VEC cppVar_59229 = (cppVar_59222) ? ACC : cppVar_59228;
	BIT_VEC cppVar_59230 = (cppVar_59218) ? PSW : cppVar_59229;
	BIT_VEC cppVar_59231 = (cppVar_59214) ? IP : cppVar_59230;
	BIT_VEC cppVar_59232 = (cppVar_59210) ? P3 : cppVar_59231;
	BIT_VEC cppVar_59233 = (cppVar_59206) ? IE : cppVar_59232;
	BIT_VEC cppVar_59234 = (cppVar_59202) ? P2 : cppVar_59233;
	BIT_VEC cppVar_59235 = (cppVar_59198) ? SBUF : cppVar_59234;
	BIT_VEC cppVar_59236 = (cppVar_59194) ? SCON : cppVar_59235;
	BIT_VEC cppVar_59237 = (cppVar_59190) ? P1 : cppVar_59236;
	BIT_VEC cppVar_59238 = (cppVar_59186) ? TH1 : cppVar_59237;
	BIT_VEC cppVar_59239 = (cppVar_59182) ? TL1 : cppVar_59238;
	BIT_VEC cppVar_59240 = (cppVar_59178) ? TH0 : cppVar_59239;
	BIT_VEC cppVar_59241 = (cppVar_59174) ? TL0 : cppVar_59240;
	BIT_VEC cppVar_59242 = (cppVar_59170) ? TMOD : cppVar_59241;
	BIT_VEC cppVar_59243 = (cppVar_59166) ? TCON : cppVar_59242;
	BIT_VEC cppVar_59244 = (cppVar_59162) ? PCON : cppVar_59243;
	BIT_VEC cppVar_59245 = (cppVar_59158) ? DPH : cppVar_59244;
	BIT_VEC cppVar_59246 = (cppVar_59154) ? DPL : cppVar_59245;
	BIT_VEC cppVar_59247 = (cppVar_59150) ? SP : cppVar_59246;
	BIT_VEC cppVar_59248 = (cppVar_59146) ? P0 : cppVar_59247;
	BIT_VEC cppVar_59249 = (cppVar_59139) ? cppVar_59142 : cppVar_59248;
	BIT_VEC cppVar_59250 = cppVar_59249 | ACC;
	BIT_VEC cppVar_59251 = (cppVar_59134) ? cppVar_59250 : SBUF;
	BIT_VEC cppVar_59252 = ROM.rd(PC);
	bool cppVar_59254 = (cppVar_59252 == 213);
	BIT_VEC cppVar_59255 = ROM.rd(PC);
	bool cppVar_59257 = (cppVar_59255 == 21);
	bool cppVar_59258 = cppVar_59254 || cppVar_59257;
	BIT_VEC cppVar_59260 = PC + 1;
	cppVar_59260 = (cppVar_59260 & cppMask_un_16_);
	BIT_VEC cppVar_59261 = ROM.rd(cppVar_59260);
	bool cppVar_59263 = (cppVar_59261 == 153);
	BIT_VEC cppVar_59264 = PC + 1;
	cppVar_59264 = (cppVar_59264 & cppMask_un_16_);
	BIT_VEC cppVar_59265 = ROM.rd(cppVar_59264);
	BIT_VEC cppVar_59266 = (cppVar_59265 >> 7) & cppMask_un_1_;
	bool cppVar_59268 = (cppVar_59266 == 0);
	BIT_VEC cppVar_59269 = PC + 1;
	cppVar_59269 = (cppVar_59269 & cppMask_un_16_);
	BIT_VEC cppVar_59270 = ROM.rd(cppVar_59269);
	BIT_VEC cppVar_59271 = IRAM.rd(cppVar_59270);
	BIT_VEC cppVar_59272 = PC + 1;
	cppVar_59272 = (cppVar_59272 & cppMask_un_16_);
	BIT_VEC cppVar_59273 = ROM.rd(cppVar_59272);
	bool cppVar_59275 = (cppVar_59273 == 128);
	BIT_VEC cppVar_59276 = PC + 1;
	cppVar_59276 = (cppVar_59276 & cppMask_un_16_);
	BIT_VEC cppVar_59277 = ROM.rd(cppVar_59276);
	bool cppVar_59279 = (cppVar_59277 == 129);
	BIT_VEC cppVar_59280 = PC + 1;
	cppVar_59280 = (cppVar_59280 & cppMask_un_16_);
	BIT_VEC cppVar_59281 = ROM.rd(cppVar_59280);
	bool cppVar_59283 = (cppVar_59281 == 130);
	BIT_VEC cppVar_59284 = PC + 1;
	cppVar_59284 = (cppVar_59284 & cppMask_un_16_);
	BIT_VEC cppVar_59285 = ROM.rd(cppVar_59284);
	bool cppVar_59287 = (cppVar_59285 == 131);
	BIT_VEC cppVar_59288 = PC + 1;
	cppVar_59288 = (cppVar_59288 & cppMask_un_16_);
	BIT_VEC cppVar_59289 = ROM.rd(cppVar_59288);
	bool cppVar_59291 = (cppVar_59289 == 135);
	BIT_VEC cppVar_59292 = PC + 1;
	cppVar_59292 = (cppVar_59292 & cppMask_un_16_);
	BIT_VEC cppVar_59293 = ROM.rd(cppVar_59292);
	bool cppVar_59295 = (cppVar_59293 == 136);
	BIT_VEC cppVar_59296 = PC + 1;
	cppVar_59296 = (cppVar_59296 & cppMask_un_16_);
	BIT_VEC cppVar_59297 = ROM.rd(cppVar_59296);
	bool cppVar_59299 = (cppVar_59297 == 137);
	BIT_VEC cppVar_59300 = PC + 1;
	cppVar_59300 = (cppVar_59300 & cppMask_un_16_);
	BIT_VEC cppVar_59301 = ROM.rd(cppVar_59300);
	bool cppVar_59303 = (cppVar_59301 == 138);
	BIT_VEC cppVar_59304 = PC + 1;
	cppVar_59304 = (cppVar_59304 & cppMask_un_16_);
	BIT_VEC cppVar_59305 = ROM.rd(cppVar_59304);
	bool cppVar_59307 = (cppVar_59305 == 140);
	BIT_VEC cppVar_59308 = PC + 1;
	cppVar_59308 = (cppVar_59308 & cppMask_un_16_);
	BIT_VEC cppVar_59309 = ROM.rd(cppVar_59308);
	bool cppVar_59311 = (cppVar_59309 == 139);
	BIT_VEC cppVar_59312 = PC + 1;
	cppVar_59312 = (cppVar_59312 & cppMask_un_16_);
	BIT_VEC cppVar_59313 = ROM.rd(cppVar_59312);
	bool cppVar_59315 = (cppVar_59313 == 141);
	BIT_VEC cppVar_59316 = PC + 1;
	cppVar_59316 = (cppVar_59316 & cppMask_un_16_);
	BIT_VEC cppVar_59317 = ROM.rd(cppVar_59316);
	bool cppVar_59319 = (cppVar_59317 == 144);
	BIT_VEC cppVar_59320 = PC + 1;
	cppVar_59320 = (cppVar_59320 & cppMask_un_16_);
	BIT_VEC cppVar_59321 = ROM.rd(cppVar_59320);
	bool cppVar_59323 = (cppVar_59321 == 152);
	BIT_VEC cppVar_59324 = PC + 1;
	cppVar_59324 = (cppVar_59324 & cppMask_un_16_);
	BIT_VEC cppVar_59325 = ROM.rd(cppVar_59324);
	bool cppVar_59327 = (cppVar_59325 == 153);
	BIT_VEC cppVar_59328 = PC + 1;
	cppVar_59328 = (cppVar_59328 & cppMask_un_16_);
	BIT_VEC cppVar_59329 = ROM.rd(cppVar_59328);
	bool cppVar_59331 = (cppVar_59329 == 160);
	BIT_VEC cppVar_59332 = PC + 1;
	cppVar_59332 = (cppVar_59332 & cppMask_un_16_);
	BIT_VEC cppVar_59333 = ROM.rd(cppVar_59332);
	bool cppVar_59335 = (cppVar_59333 == 168);
	BIT_VEC cppVar_59336 = PC + 1;
	cppVar_59336 = (cppVar_59336 & cppMask_un_16_);
	BIT_VEC cppVar_59337 = ROM.rd(cppVar_59336);
	bool cppVar_59339 = (cppVar_59337 == 176);
	BIT_VEC cppVar_59340 = PC + 1;
	cppVar_59340 = (cppVar_59340 & cppMask_un_16_);
	BIT_VEC cppVar_59341 = ROM.rd(cppVar_59340);
	bool cppVar_59343 = (cppVar_59341 == 184);
	BIT_VEC cppVar_59344 = PC + 1;
	cppVar_59344 = (cppVar_59344 & cppMask_un_16_);
	BIT_VEC cppVar_59345 = ROM.rd(cppVar_59344);
	bool cppVar_59347 = (cppVar_59345 == 208);
	BIT_VEC cppVar_59348 = PC + 1;
	cppVar_59348 = (cppVar_59348 & cppMask_un_16_);
	BIT_VEC cppVar_59349 = ROM.rd(cppVar_59348);
	bool cppVar_59351 = (cppVar_59349 == 224);
	BIT_VEC cppVar_59352 = PC + 1;
	cppVar_59352 = (cppVar_59352 & cppMask_un_16_);
	BIT_VEC cppVar_59353 = ROM.rd(cppVar_59352);
	bool cppVar_59355 = (cppVar_59353 == 240);
	BIT_VEC cppVar_59357 = (cppVar_59355) ? B : 0;
	BIT_VEC cppVar_59358 = (cppVar_59351) ? ACC : cppVar_59357;
	BIT_VEC cppVar_59359 = (cppVar_59347) ? PSW : cppVar_59358;
	BIT_VEC cppVar_59360 = (cppVar_59343) ? IP : cppVar_59359;
	BIT_VEC cppVar_59361 = (cppVar_59339) ? P3 : cppVar_59360;
	BIT_VEC cppVar_59362 = (cppVar_59335) ? IE : cppVar_59361;
	BIT_VEC cppVar_59363 = (cppVar_59331) ? P2 : cppVar_59362;
	BIT_VEC cppVar_59364 = (cppVar_59327) ? SBUF : cppVar_59363;
	BIT_VEC cppVar_59365 = (cppVar_59323) ? SCON : cppVar_59364;
	BIT_VEC cppVar_59366 = (cppVar_59319) ? P1 : cppVar_59365;
	BIT_VEC cppVar_59367 = (cppVar_59315) ? TH1 : cppVar_59366;
	BIT_VEC cppVar_59368 = (cppVar_59311) ? TL1 : cppVar_59367;
	BIT_VEC cppVar_59369 = (cppVar_59307) ? TH0 : cppVar_59368;
	BIT_VEC cppVar_59370 = (cppVar_59303) ? TL0 : cppVar_59369;
	BIT_VEC cppVar_59371 = (cppVar_59299) ? TMOD : cppVar_59370;
	BIT_VEC cppVar_59372 = (cppVar_59295) ? TCON : cppVar_59371;
	BIT_VEC cppVar_59373 = (cppVar_59291) ? PCON : cppVar_59372;
	BIT_VEC cppVar_59374 = (cppVar_59287) ? DPH : cppVar_59373;
	BIT_VEC cppVar_59375 = (cppVar_59283) ? DPL : cppVar_59374;
	BIT_VEC cppVar_59376 = (cppVar_59279) ? SP : cppVar_59375;
	BIT_VEC cppVar_59377 = (cppVar_59275) ? P0 : cppVar_59376;
	BIT_VEC cppVar_59378 = (cppVar_59268) ? cppVar_59271 : cppVar_59377;
	BIT_VEC cppVar_59380 = cppVar_59378 - 1;
	cppVar_59380 = (cppVar_59380 & cppMask_un_8_);
	BIT_VEC cppVar_59381 = (cppVar_59263) ? cppVar_59380 : SBUF;
	BIT_VEC cppVar_59382 = ROM.rd(PC);
	bool cppVar_59384 = (cppVar_59382 == 5);
	BIT_VEC cppVar_59386 = PC + 1;
	cppVar_59386 = (cppVar_59386 & cppMask_un_16_);
	BIT_VEC cppVar_59387 = ROM.rd(cppVar_59386);
	bool cppVar_59389 = (cppVar_59387 == 153);
	BIT_VEC cppVar_59390 = PC + 1;
	cppVar_59390 = (cppVar_59390 & cppMask_un_16_);
	BIT_VEC cppVar_59391 = ROM.rd(cppVar_59390);
	BIT_VEC cppVar_59392 = (cppVar_59391 >> 7) & cppMask_un_1_;
	bool cppVar_59394 = (cppVar_59392 == 0);
	BIT_VEC cppVar_59395 = PC + 1;
	cppVar_59395 = (cppVar_59395 & cppMask_un_16_);
	BIT_VEC cppVar_59396 = ROM.rd(cppVar_59395);
	BIT_VEC cppVar_59397 = IRAM.rd(cppVar_59396);
	BIT_VEC cppVar_59398 = PC + 1;
	cppVar_59398 = (cppVar_59398 & cppMask_un_16_);
	BIT_VEC cppVar_59399 = ROM.rd(cppVar_59398);
	bool cppVar_59401 = (cppVar_59399 == 128);
	BIT_VEC cppVar_59402 = PC + 1;
	cppVar_59402 = (cppVar_59402 & cppMask_un_16_);
	BIT_VEC cppVar_59403 = ROM.rd(cppVar_59402);
	bool cppVar_59405 = (cppVar_59403 == 129);
	BIT_VEC cppVar_59406 = PC + 1;
	cppVar_59406 = (cppVar_59406 & cppMask_un_16_);
	BIT_VEC cppVar_59407 = ROM.rd(cppVar_59406);
	bool cppVar_59409 = (cppVar_59407 == 130);
	BIT_VEC cppVar_59410 = PC + 1;
	cppVar_59410 = (cppVar_59410 & cppMask_un_16_);
	BIT_VEC cppVar_59411 = ROM.rd(cppVar_59410);
	bool cppVar_59413 = (cppVar_59411 == 131);
	BIT_VEC cppVar_59414 = PC + 1;
	cppVar_59414 = (cppVar_59414 & cppMask_un_16_);
	BIT_VEC cppVar_59415 = ROM.rd(cppVar_59414);
	bool cppVar_59417 = (cppVar_59415 == 135);
	BIT_VEC cppVar_59418 = PC + 1;
	cppVar_59418 = (cppVar_59418 & cppMask_un_16_);
	BIT_VEC cppVar_59419 = ROM.rd(cppVar_59418);
	bool cppVar_59421 = (cppVar_59419 == 136);
	BIT_VEC cppVar_59422 = PC + 1;
	cppVar_59422 = (cppVar_59422 & cppMask_un_16_);
	BIT_VEC cppVar_59423 = ROM.rd(cppVar_59422);
	bool cppVar_59425 = (cppVar_59423 == 137);
	BIT_VEC cppVar_59426 = PC + 1;
	cppVar_59426 = (cppVar_59426 & cppMask_un_16_);
	BIT_VEC cppVar_59427 = ROM.rd(cppVar_59426);
	bool cppVar_59429 = (cppVar_59427 == 138);
	BIT_VEC cppVar_59430 = PC + 1;
	cppVar_59430 = (cppVar_59430 & cppMask_un_16_);
	BIT_VEC cppVar_59431 = ROM.rd(cppVar_59430);
	bool cppVar_59433 = (cppVar_59431 == 140);
	BIT_VEC cppVar_59434 = PC + 1;
	cppVar_59434 = (cppVar_59434 & cppMask_un_16_);
	BIT_VEC cppVar_59435 = ROM.rd(cppVar_59434);
	bool cppVar_59437 = (cppVar_59435 == 139);
	BIT_VEC cppVar_59438 = PC + 1;
	cppVar_59438 = (cppVar_59438 & cppMask_un_16_);
	BIT_VEC cppVar_59439 = ROM.rd(cppVar_59438);
	bool cppVar_59441 = (cppVar_59439 == 141);
	BIT_VEC cppVar_59442 = PC + 1;
	cppVar_59442 = (cppVar_59442 & cppMask_un_16_);
	BIT_VEC cppVar_59443 = ROM.rd(cppVar_59442);
	bool cppVar_59445 = (cppVar_59443 == 144);
	BIT_VEC cppVar_59446 = PC + 1;
	cppVar_59446 = (cppVar_59446 & cppMask_un_16_);
	BIT_VEC cppVar_59447 = ROM.rd(cppVar_59446);
	bool cppVar_59449 = (cppVar_59447 == 152);
	BIT_VEC cppVar_59450 = PC + 1;
	cppVar_59450 = (cppVar_59450 & cppMask_un_16_);
	BIT_VEC cppVar_59451 = ROM.rd(cppVar_59450);
	bool cppVar_59453 = (cppVar_59451 == 153);
	BIT_VEC cppVar_59454 = PC + 1;
	cppVar_59454 = (cppVar_59454 & cppMask_un_16_);
	BIT_VEC cppVar_59455 = ROM.rd(cppVar_59454);
	bool cppVar_59457 = (cppVar_59455 == 160);
	BIT_VEC cppVar_59458 = PC + 1;
	cppVar_59458 = (cppVar_59458 & cppMask_un_16_);
	BIT_VEC cppVar_59459 = ROM.rd(cppVar_59458);
	bool cppVar_59461 = (cppVar_59459 == 168);
	BIT_VEC cppVar_59462 = PC + 1;
	cppVar_59462 = (cppVar_59462 & cppMask_un_16_);
	BIT_VEC cppVar_59463 = ROM.rd(cppVar_59462);
	bool cppVar_59465 = (cppVar_59463 == 176);
	BIT_VEC cppVar_59466 = PC + 1;
	cppVar_59466 = (cppVar_59466 & cppMask_un_16_);
	BIT_VEC cppVar_59467 = ROM.rd(cppVar_59466);
	bool cppVar_59469 = (cppVar_59467 == 184);
	BIT_VEC cppVar_59470 = PC + 1;
	cppVar_59470 = (cppVar_59470 & cppMask_un_16_);
	BIT_VEC cppVar_59471 = ROM.rd(cppVar_59470);
	bool cppVar_59473 = (cppVar_59471 == 208);
	BIT_VEC cppVar_59474 = PC + 1;
	cppVar_59474 = (cppVar_59474 & cppMask_un_16_);
	BIT_VEC cppVar_59475 = ROM.rd(cppVar_59474);
	bool cppVar_59477 = (cppVar_59475 == 224);
	BIT_VEC cppVar_59478 = PC + 1;
	cppVar_59478 = (cppVar_59478 & cppMask_un_16_);
	BIT_VEC cppVar_59479 = ROM.rd(cppVar_59478);
	bool cppVar_59481 = (cppVar_59479 == 240);
	BIT_VEC cppVar_59483 = (cppVar_59481) ? B : 0;
	BIT_VEC cppVar_59484 = (cppVar_59477) ? ACC : cppVar_59483;
	BIT_VEC cppVar_59485 = (cppVar_59473) ? PSW : cppVar_59484;
	BIT_VEC cppVar_59486 = (cppVar_59469) ? IP : cppVar_59485;
	BIT_VEC cppVar_59487 = (cppVar_59465) ? P3 : cppVar_59486;
	BIT_VEC cppVar_59488 = (cppVar_59461) ? IE : cppVar_59487;
	BIT_VEC cppVar_59489 = (cppVar_59457) ? P2 : cppVar_59488;
	BIT_VEC cppVar_59490 = (cppVar_59453) ? SBUF : cppVar_59489;
	BIT_VEC cppVar_59491 = (cppVar_59449) ? SCON : cppVar_59490;
	BIT_VEC cppVar_59492 = (cppVar_59445) ? P1 : cppVar_59491;
	BIT_VEC cppVar_59493 = (cppVar_59441) ? TH1 : cppVar_59492;
	BIT_VEC cppVar_59494 = (cppVar_59437) ? TL1 : cppVar_59493;
	BIT_VEC cppVar_59495 = (cppVar_59433) ? TH0 : cppVar_59494;
	BIT_VEC cppVar_59496 = (cppVar_59429) ? TL0 : cppVar_59495;
	BIT_VEC cppVar_59497 = (cppVar_59425) ? TMOD : cppVar_59496;
	BIT_VEC cppVar_59498 = (cppVar_59421) ? TCON : cppVar_59497;
	BIT_VEC cppVar_59499 = (cppVar_59417) ? PCON : cppVar_59498;
	BIT_VEC cppVar_59500 = (cppVar_59413) ? DPH : cppVar_59499;
	BIT_VEC cppVar_59501 = (cppVar_59409) ? DPL : cppVar_59500;
	BIT_VEC cppVar_59502 = (cppVar_59405) ? SP : cppVar_59501;
	BIT_VEC cppVar_59503 = (cppVar_59401) ? P0 : cppVar_59502;
	BIT_VEC cppVar_59504 = (cppVar_59394) ? cppVar_59397 : cppVar_59503;
	BIT_VEC cppVar_59506 = cppVar_59504 + 1;
	cppVar_59506 = (cppVar_59506 & cppMask_un_8_);
	BIT_VEC cppVar_59507 = (cppVar_59389) ? cppVar_59506 : SBUF;
	BIT_VEC cppVar_59508 = (cppVar_59384) ? cppVar_59507 : SBUF;
	BIT_VEC cppVar_59509 = (cppVar_59258) ? cppVar_59381 : cppVar_59508;
	BIT_VEC cppVar_59510 = (cppVar_59129) ? cppVar_59251 : cppVar_59509;
	BIT_VEC cppVar_59511 = (cppVar_59001) ? cppVar_59126 : cppVar_59510;
	BIT_VEC cppVar_59512 = (cppVar_58876) ? cppVar_58998 : cppVar_59511;
	BIT_VEC cppVar_59513 = (cppVar_58748) ? cppVar_58873 : cppVar_59512;
	BIT_VEC cppVar_59514 = (cppVar_58623) ? cppVar_58745 : cppVar_59513;
	BIT_VEC cppVar_59515 = (cppVar_58495) ? cppVar_58620 : cppVar_59514;
	BIT_VEC cppVar_59516 = (cppVar_58483) ? cppVar_58492 : cppVar_59515;
	BIT_VEC cppVar_59517 = (cppVar_58358) ? cppVar_58480 : cppVar_59516;
	BIT_VEC cppVar_59518 = (cppVar_58342) ? cppVar_58355 : cppVar_59517;
	BIT_VEC cppVar_59519 = (cppVar_58326) ? cppVar_58339 : cppVar_59518;
	BIT_VEC cppVar_59520 = (cppVar_58177) ? cppVar_58323 : cppVar_59519;
	BIT_VEC cppVar_59521 = (cppVar_58028) ? cppVar_58174 : cppVar_59520;
	BIT_VEC cppVar_59522 = (cppVar_57879) ? cppVar_58025 : cppVar_59521;
	BIT_VEC cppVar_59523 = (cppVar_57730) ? cppVar_57876 : cppVar_59522;
	BIT_VEC cppVar_59524 = (cppVar_57581) ? cppVar_57727 : cppVar_59523;
	BIT_VEC cppVar_59525 = (cppVar_57432) ? cppVar_57578 : cppVar_59524;
	BIT_VEC cppVar_59526 = (cppVar_57283) ? cppVar_57429 : cppVar_59525;
	BIT_VEC cppVar_59527 = (cppVar_57134) ? cppVar_57280 : cppVar_59526;
	BIT_VEC cppVar_59528 = (cppVar_57125) ? cppVar_57131 : cppVar_59527;
	BIT_VEC cppVar_59529 = (cppVar_57111) ? cppVar_57118 : cppVar_59528;
	return cppVar_59529;
}
