fetch valid: (arg1_valid == 1) || (arg0_ready == 1)

write instruction: 
    store the 1x1 byte into 2-D line buffer
    export 1x9 slice into 1-D line buffer (abstract slice stream)
    export 9x9 stencil to stencil buffer (abstract stencil stream)

    assumption: (arg1_ready == 1)
    (arg1_valid == 1) 
    (*) buffer index should help partition the instruction space, but different 
        implementations have different buffer index.

read instruction:
    apply gaussain operation on the stencil and output to the port

    (arg_0_ready == 1)

inputs:
    arg_0_TREADY    -- output stream ready
    arg_1_TVALID    -- input stream valid
    arg_1_TDATA     -- input stream data

arch states:
    arg_0_TVALID    -- output stream valid
    arg_0_TDATA     -- output stream data
    arg_1_TREADY    -- input stream ready

    LB2D_buff[0~7]  -- eight 488x1 bytes buffer in 2-D line buffer
    LB2D_x_idx      -- x counter in 2-D line buffer
    LB2D_y_idx      -- y counter in 2-D line buffer
    slice_buff      -- one 1x9 bytes slice in slice stream
    LB2D_sift[0~7]  -- eight 1x9 bytes slice in 1-D line buffer
    stencil_buff    -- one 9x9 stencil in stencil stream
    stencil_full    -- stencil stream status

possible child states:
    SW: internal states in line buffer, buffer index
    HW: internal states in line buffer, fsm state
