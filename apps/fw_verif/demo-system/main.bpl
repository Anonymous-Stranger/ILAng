// generated by SMACK version 1.8.0 for corral
// via /home/byhuang/workspace/packages/smack/build/bin/smack --pthread --context-bound 3 --bit-precise -v /home/byhuang/workspace/ILA/apps/fw_verif/demo-system/llvmtar/fabric.ll /home/byhuang/workspace/ILA/apps/fw_verif/demo-system/llvmtar/main.ll /home/byhuang/workspace/ILA/apps/fw_verif/demo-system/llvmtar/mb.ll /home/byhuang/workspace/ILA/apps/fw_verif/demo-system/llvmtar/mst.ll /home/byhuang/workspace/ILA/apps/fw_verif/demo-system/llvmtar/slv.ll -t -bpl main.bpl

// Basic types
type i1 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type ref = i64;
type float = bv32;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $2.ref: ref;
axiom ($2.ref == 2);
const $3.ref: ref;
axiom ($3.ref == 3);
const $4.ref: ref;
axiom ($4.ref == 4);
const $5.ref: ref;
axiom ($5.ref == 5);
const $6.ref: ref;
axiom ($6.ref == 6);
const $7.ref: ref;
axiom ($7.ref == 7);
const $8.ref: ref;
axiom ($8.ref == 8);
const $9.ref: ref;
axiom ($9.ref == 9);
const $10.ref: ref;
axiom ($10.ref == 10);
const $11.ref: ref;
axiom ($11.ref == 11);
const $12.ref: ref;
axiom ($12.ref == 12);
const $13.ref: ref;
axiom ($13.ref == 13);
const $14.ref: ref;
axiom ($14.ref == 14);
const $1024.ref: ref;
axiom ($1024.ref == 1024);

// Memory maps (38 regions)
var $M.0: bv32;
var $M.1: bv32;
var $M.2: bv32;
var $M.3: bv32;
var $M.4: bv32;
var $M.5: bv32;
var $M.6: bv32;
var $M.7: bv32;
var $M.8: bv32;
var $M.9: bv8;
var $M.10: [ref] bv32;
var $M.11: [ref] bv8;
var $M.12: [ref] bv8;
var $M.13: [ref] bv32;
var $M.14: [ref] bv8;
var $M.15: bv8;
var $M.16: [ref] bv32;
var $M.17: [ref] bv32;
var $M.18: bv32;
var $M.19: bv32;
var $M.20: bv32;
var $M.21: bv32;
var $M.22: bv32;
var $M.23: bv8;
var $M.24: bv32;
var $M.25: bv32;
var $M.26: bv32;
var $M.27: bv32;
var $M.28: [ref] bv8;
var $M.29: [ref] ref;
var $M.30: [ref] bv32;
var $M.31: [ref] bv32;
var $M.32: [ref] bv32;
var $M.33: [ref] bv32;
var $M.34: [ref] bv32;
var $M.35: [ref] bv32;
var $M.36: [ref] bv32;
var $M.37: bv32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 120871));
axiom ($EXTERNS_BOTTOM == $sub.ref(0, 32776));
axiom ($MALLOC_TOP == 2136997887);

// Bitstd::vector-integer conversions
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);

// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, v: ref)returns ([ref] bv8) { $store.bytes.bv64(M,p,$p2i.ref.bv64(v)) }
// Pointer-number conversions
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { if $eq.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { if $ne.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { if $ugt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { if $uge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { if $ult.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { if $ule.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { if $sgt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { if $sge.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { if $slt.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { if $sle.i64.bool(p1, p2) then 1bv1 else 0bv1 }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

const reg_msg_mst2slv_db: ref;
axiom (reg_msg_mst2slv_db == $sub.ref(0, 1028));
const reg_msg_mst2slv_dbm: ref;
axiom (reg_msg_mst2slv_dbm == $sub.ref(0, 2056));
const reg_msg_mst2slv_dat0: ref;
axiom (reg_msg_mst2slv_dat0 == $sub.ref(0, 3084));
const reg_msg_mst2slv_dat1: ref;
axiom (reg_msg_mst2slv_dat1 == $sub.ref(0, 4112));
const reg_msg_slv2mst_db: ref;
axiom (reg_msg_slv2mst_db == $sub.ref(0, 5140));
const reg_msg_slv2mst_dbm: ref;
axiom (reg_msg_slv2mst_dbm == $sub.ref(0, 6168));
const reg_msg_slv2mst_dat0: ref;
axiom (reg_msg_slv2mst_dat0 == $sub.ref(0, 7196));
const reg_msg_slv2mst_dat1: ref;
axiom (reg_msg_slv2mst_dat1 == $sub.ref(0, 8224));
const mstCpl: ref;
axiom (mstCpl == $sub.ref(0, 9249));
const slvCpl: ref;
axiom (slvCpl == $sub.ref(0, 10274));
const intCpl: ref;
axiom (intCpl == $sub.ref(0, 11299));
const int_lock: ref;
axiom (int_lock == $sub.ref(0, 12347));
const fab_lock: ref;
axiom (fab_lock == $sub.ref(0, 13395));
const reg_slv_int: ref;
axiom (reg_slv_int == $sub.ref(0, 14423));
const {:count 32} mst_sram: ref;
axiom (mst_sram == $sub.ref(0, 15479));
const hw_reg_MB: ref;
axiom (hw_reg_MB == $sub.ref(0, 16543));
const {:count 2} gSlvFlag: ref;
axiom (gSlvFlag == $sub.ref(0, 17575));
const {:count 8} gMbCtx: ref;
axiom (gMbCtx == $sub.ref(0, 18631));
const reg_MB: ref;
axiom (reg_MB == $sub.ref(0, 32776));
const {:count 14} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 19669));
const {:count 14} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 20707));
const {:count 49} .str.17.1429: ref;
axiom (.str.17.1429 == $sub.ref(0, 21780));
const {:count 27} .str.18.1430: ref;
axiom (.str.18.1430 == $sub.ref(0, 22831));
const FAB_REG_LOCK: ref;
axiom (FAB_REG_LOCK == $sub.ref(0, 23863));
procedure  FAB_REG_LOCK()
{
  var $i0: bv32;
$bb0:
  call $i0 := pthread_mutex_lock(fab_lock);
  $exn := false;
  return;
}
const FAB_REG_UNLOCK: ref;
axiom (FAB_REG_UNLOCK == $sub.ref(0, 24895));
procedure  FAB_REG_UNLOCK()
{
  var $i0: bv32;
$bb0:
  call $i0 := pthread_mutex_unlock(fab_lock);
  $exn := false;
  return;
}
const HW_REG_WRITE: ref;
axiom (HW_REG_WRITE == $sub.ref(0, 25927));
procedure  HW_REG_WRITE(addr: bv32, val: bv32)
{
  var $i0: bv1;
  var $i1: bv1;
  var $i2: bv1;
  var $i3: bv1;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv1;
$bb0:
  call FAB_REG_LOCK();
  goto $bb1;
$bb1:
  $i0 := $slt.bv32(addr, $sub.bv32(0bv32, 65532bv32));
  assume {:branchcond $i0} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i0 == 1bv1);
  $i5 := $slt.bv32(addr, $sub.bv32(0bv32, 65534bv32));
  assume {:branchcond $i5} true;
  goto $bb13, $bb14;
$bb3:
  assume !(($i0 == 1bv1));
  $i1 := $slt.bv32(addr, $sub.bv32(0bv32, 65530bv32));
  assume {:branchcond $i1} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i1 == 1bv1);
  $i4 := $slt.bv32(addr, $sub.bv32(0bv32, 65531bv32));
  assume {:branchcond $i4} true;
  goto $bb11, $bb12;
$bb5:
  assume !(($i1 == 1bv1));
  $i2 := $slt.bv32(addr, $sub.bv32(0bv32, 65529bv32));
  assume {:branchcond $i2} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i2 == 1bv1);
  call write_reg_msg_slv2mst_dat0(val);
  goto $bb21;
$bb7:
  assume !(($i2 == 1bv1));
  $i3 := $eq.bv32(addr, $sub.bv32(0bv32, 65529bv32));
  assume {:branchcond $i3} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i3 == 1bv1);
  call write_reg_msg_slv2mst_dat1(val);
  goto $bb21;
$bb9:
  assume !(($i3 == 1bv1));
  goto $bb10;
$bb10:
  goto $bb22;
$bb11:
  assume ($i4 == 1bv1);
  call write_reg_msg_mst2slv_dbm(val);
  goto $bb21;
$bb12:
  assume !(($i4 == 1bv1));
  call write_reg_msg_slv2mst_db(val);
  goto $bb21;
$bb13:
  assume ($i5 == 1bv1);
  $i7 := $slt.bv32(addr, $sub.bv32(0bv32, 65535bv32));
  assume {:branchcond $i7} true;
  goto $bb17, $bb18;
$bb14:
  assume !(($i5 == 1bv1));
  $i6 := $slt.bv32(addr, $sub.bv32(0bv32, 65533bv32));
  assume {:branchcond $i6} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i6 == 1bv1);
  call write_reg_msg_mst2slv_dat0(val);
  goto $bb21;
$bb16:
  assume !(($i6 == 1bv1));
  call write_reg_msg_mst2slv_dat1(val);
  goto $bb21;
$bb17:
  assume ($i7 == 1bv1);
  $i8 := $eq.bv32(addr, $sub.bv32(0bv32, 65536bv32));
  assume {:branchcond $i8} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i7 == 1bv1));
  call write_reg_msg_mst2slv_db(val);
  goto $bb21;
$bb19:
  assume ($i8 == 1bv1);
  call write_reg_msg_slv2mst_dbm(val);
  goto $bb21;
$bb20:
  assume !(($i8 == 1bv1));
  goto $bb10;
$bb21:
  call FAB_REG_UNLOCK();
  $exn := false;
  return;
$bb22:
  call __VERIFIER_assert(0bv32);
  goto $bb21;
}
const write_reg_msg_slv2mst_dbm: ref;
axiom (write_reg_msg_slv2mst_dbm == $sub.ref(0, 26959));
procedure  write_reg_msg_slv2mst_dbm(val: bv32)
{
$bb0:
  $exn := false;
  return;
}
const write_reg_msg_mst2slv_db: ref;
axiom (write_reg_msg_mst2slv_db == $sub.ref(0, 27991));
procedure  write_reg_msg_mst2slv_db(val: bv32)
{
  var $i0: bv1;
  var $i1: bv32;
  var $i2: bv1;
$bb0:
  $i0 := $ne.bv32(val, 0bv32);
  assume {:branchcond $i0} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i0 == 1bv1);
  goto $bb4;
$bb2:
  assume !(($i0 == 1bv1));
  goto $bb3;
$bb3:
  $M.1 := val;
  call {:cexpr "reg_msg_mst2slv_db"} boogie_si_record_bv32(val);
  $M.2 := val;
  call {:cexpr "reg_msg_mst2slv_dbm"} boogie_si_record_bv32(val);
  $M.0 := 1bv32;
  call {:cexpr "reg_slv_int"} boogie_si_record_bv32(1bv32);
  $exn := false;
  return;
$bb4:
  $i1 := $M.0;
  $i2 := $ne.bv32($i1, 0bv32);
  assume {:branchcond $i2} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i2 == 1bv1);
  goto $bb4;
$bb6:
  assume !(($i2 == 1bv1));
  goto $bb3;
}
const write_reg_msg_mst2slv_dat0: ref;
axiom (write_reg_msg_mst2slv_dat0 == $sub.ref(0, 29023));
procedure  write_reg_msg_mst2slv_dat0(val: bv32)
{
$bb0:
  $M.3 := val;
  call {:cexpr "reg_msg_mst2slv_dat0"} boogie_si_record_bv32(val);
  $exn := false;
  return;
}
const write_reg_msg_mst2slv_dat1: ref;
axiom (write_reg_msg_mst2slv_dat1 == $sub.ref(0, 30055));
procedure  write_reg_msg_mst2slv_dat1(val: bv32)
{
$bb0:
  $M.4 := val;
  call {:cexpr "reg_msg_mst2slv_dat1"} boogie_si_record_bv32(val);
  $exn := false;
  return;
}
const write_reg_msg_mst2slv_dbm: ref;
axiom (write_reg_msg_mst2slv_dbm == $sub.ref(0, 31087));
procedure  write_reg_msg_mst2slv_dbm(val: bv32)
{
$bb0:
  $exn := false;
  return;
}
const write_reg_msg_slv2mst_db: ref;
axiom (write_reg_msg_slv2mst_db == $sub.ref(0, 32119));
procedure  write_reg_msg_slv2mst_db(val: bv32)
{
$bb0:
  $M.5 := val;
  call {:cexpr "reg_msg_slv2mst_db"} boogie_si_record_bv32(val);
  $M.6 := val;
  call {:cexpr "reg_msg_slv2mst_dbm"} boogie_si_record_bv32(val);
  $exn := false;
  return;
}
const write_reg_msg_slv2mst_dat0: ref;
axiom (write_reg_msg_slv2mst_dat0 == $sub.ref(0, 33151));
procedure  write_reg_msg_slv2mst_dat0(val: bv32)
{
$bb0:
  $M.7 := val;
  call {:cexpr "reg_msg_slv2mst_dat0"} boogie_si_record_bv32(val);
  $exn := false;
  return;
}
const write_reg_msg_slv2mst_dat1: ref;
axiom (write_reg_msg_slv2mst_dat1 == $sub.ref(0, 34183));
procedure  write_reg_msg_slv2mst_dat1(val: bv32)
{
$bb0:
  $M.8 := val;
  call {:cexpr "reg_msg_slv2mst_dat1"} boogie_si_record_bv32(val);
  $exn := false;
  return;
}
const HW_REG_READ: ref;
axiom (HW_REG_READ == $sub.ref(0, 35215));
procedure  HW_REG_READ(addr: bv32)
  returns ($r: bv32)
{
  var $i0: bv1;
  var $i1: bv1;
  var $i2: bv1;
  var $i3: bv1;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv1;
  var $i9: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i10: bv32;
$bb0:
  call FAB_REG_LOCK();
  goto $bb1;
$bb1:
  $i0 := $slt.bv32(addr, $sub.bv32(0bv32, 65532bv32));
  assume {:branchcond $i0} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i0 == 1bv1);
  $i5 := $slt.bv32(addr, $sub.bv32(0bv32, 65534bv32));
  assume {:branchcond $i5} true;
  goto $bb13, $bb14;
$bb3:
  assume !(($i0 == 1bv1));
  $i1 := $slt.bv32(addr, $sub.bv32(0bv32, 65530bv32));
  assume {:branchcond $i1} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i1 == 1bv1);
  $i4 := $slt.bv32(addr, $sub.bv32(0bv32, 65531bv32));
  assume {:branchcond $i4} true;
  goto $bb11, $bb12;
$bb5:
  assume !(($i1 == 1bv1));
  $i2 := $slt.bv32(addr, $sub.bv32(0bv32, 65529bv32));
  assume {:branchcond $i2} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i2 == 1bv1);
  call $i16 := read_reg_msg_slv2mst_dat0();
  $i10 := $i16;
  goto $bb21;
$bb7:
  assume !(($i2 == 1bv1));
  $i3 := $eq.bv32(addr, $sub.bv32(0bv32, 65529bv32));
  assume {:branchcond $i3} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i3 == 1bv1);
  call $i17 := read_reg_msg_slv2mst_dat1();
  $i10 := $i17;
  goto $bb21;
$bb9:
  assume !(($i3 == 1bv1));
  goto $bb10;
$bb10:
  goto $bb22;
$bb11:
  assume ($i4 == 1bv1);
  call $i14 := read_reg_msg_mst2slv_dbm();
  $i10 := $i14;
  goto $bb21;
$bb12:
  assume !(($i4 == 1bv1));
  call $i15 := read_reg_msg_slv2mst_db();
  $i10 := $i15;
  goto $bb21;
$bb13:
  assume ($i5 == 1bv1);
  $i7 := $slt.bv32(addr, $sub.bv32(0bv32, 65535bv32));
  assume {:branchcond $i7} true;
  goto $bb17, $bb18;
$bb14:
  assume !(($i5 == 1bv1));
  $i6 := $slt.bv32(addr, $sub.bv32(0bv32, 65533bv32));
  assume {:branchcond $i6} true;
  goto $bb15, $bb16;
$bb15:
  assume ($i6 == 1bv1);
  call $i12 := read_reg_msg_mst2slv_dat0();
  $i10 := $i12;
  goto $bb21;
$bb16:
  assume !(($i6 == 1bv1));
  call $i13 := read_reg_msg_mst2slv_dat1();
  $i10 := $i13;
  goto $bb21;
$bb17:
  assume ($i7 == 1bv1);
  $i8 := $eq.bv32(addr, $sub.bv32(0bv32, 65536bv32));
  assume {:branchcond $i8} true;
  goto $bb19, $bb20;
$bb18:
  assume !(($i7 == 1bv1));
  call $i11 := read_reg_msg_mst2slv_db();
  $i10 := $i11;
  goto $bb21;
$bb19:
  assume ($i8 == 1bv1);
  call $i9 := read_reg_msg_slv2mst_dbm();
  $i10 := $i9;
  goto $bb21;
$bb20:
  assume !(($i8 == 1bv1));
  goto $bb10;
$bb21:
  call FAB_REG_UNLOCK();
  $r := $i10;
  $exn := false;
  return;
$bb22:
  call __VERIFIER_assert(0bv32);
  $i10 := 0bv32;
  goto $bb21;
}
const read_reg_msg_slv2mst_dbm: ref;
axiom (read_reg_msg_slv2mst_dbm == $sub.ref(0, 36247));
procedure  read_reg_msg_slv2mst_dbm()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.6;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_mst2slv_db: ref;
axiom (read_reg_msg_mst2slv_db == $sub.ref(0, 37279));
procedure  read_reg_msg_mst2slv_db()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.1;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_mst2slv_dat0: ref;
axiom (read_reg_msg_mst2slv_dat0 == $sub.ref(0, 38311));
procedure  read_reg_msg_mst2slv_dat0()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.3;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_mst2slv_dat1: ref;
axiom (read_reg_msg_mst2slv_dat1 == $sub.ref(0, 39343));
procedure  read_reg_msg_mst2slv_dat1()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.4;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_mst2slv_dbm: ref;
axiom (read_reg_msg_mst2slv_dbm == $sub.ref(0, 40375));
procedure  read_reg_msg_mst2slv_dbm()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.2;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_slv2mst_db: ref;
axiom (read_reg_msg_slv2mst_db == $sub.ref(0, 41407));
procedure  read_reg_msg_slv2mst_db()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.5;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_slv2mst_dat0: ref;
axiom (read_reg_msg_slv2mst_dat0 == $sub.ref(0, 42439));
procedure  read_reg_msg_slv2mst_dat0()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.7;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_msg_slv2mst_dat1: ref;
axiom (read_reg_msg_slv2mst_dat1 == $sub.ref(0, 43471));
procedure  read_reg_msg_slv2mst_dat1()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.8;
  $r := $i0;
  $exn := false;
  return;
}
const entryMst: ref;
axiom (entryMst == $sub.ref(0, 44503));
procedure  entryMst(in: ref)
  returns ($r: ref)
{
$bb0:
  call mainMst();
  $M.9 := 1bv8;
  call {:cexpr "mstCpl"} boogie_si_record_bv8(1bv8);
  $r := in;
  $exn := false;
  return;
}
const mainMst: ref;
axiom (mainMst == $sub.ref(0, 45535));
procedure  mainMst()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv8;
  var $i7: bv32;
  var $i8: bv1;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $p12: ref;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv64;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv64;
  var $p20: ref;
$bb0:
  call $p0 := $alloc($mul.ref(4, $bv2int.64($zext.bv32.bv64(1bv32))));
  call $p1 := $alloc($mul.ref(8, $bv2int.64($zext.bv32.bv64(1bv32))));
  call $p2 := $alloc($mul.ref(1, $bv2int.64($zext.bv32.bv64(1bv32))));
  call $p3 := $alloc($mul.ref(4, $bv2int.64($zext.bv32.bv64(1bv32))));
  call sendMsgMst2Slv(1bv32, $0.ref, 0bv8);
  $M.10 := $store.bv32($M.10, $p0, 0bv32);
  $p4 := $bitcast.ref.ref($p1);
  call $M.11 := $memset.bv8($M.11, $p4, 0bv8, $bv2int.64(8bv64), $bv2int.64($zext.bv32.bv64(4bv32)), (0bv1 == 1bv1));
  $M.12 := $store.bytes.bv8($M.12, $p2, 0bv8);
  $p5 := $p1;
  call receiveMsgSlv2Mst($p0, $p5, $p2);
  $i6 := $load.bytes.bv8($M.12, $p2);
  $i7 := $zext.bv8.bv32($i6);
  $i8 := $sge.bv32($i7, 1bv32);
  assume {:branchcond $i8} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i8 == 1bv1);
  $p9 := $p1;
  $i10 := $load.bytes.bv32($M.11, $p9);
  $i11 := $ule.bv32($i10, 32bv32);
  assume {:branchcond $i11} true;
  goto $bb4, $bb5;
$bb2:
  assume !(($i8 == 1bv1));
  goto $bb3;
$bb3:
  $i14 := 32bv32;
  goto $bb6;
$bb4:
  assume ($i11 == 1bv1);
  $p12 := $p1;
  $i13 := $load.bytes.bv32($M.11, $p12);
  $i14 := $i13;
  goto $bb6;
$bb5:
  assume !(($i11 == 1bv1));
  goto $bb3;
$bb6:
  $M.13 := $store.bv32($M.13, $p3, $i14);
  $i15 := $load.bv32($M.13, $p3);
  $i16 := $zext.bv32.bv64($i15);
  call $p17 := calloc(1bv64, $i16);
  $i18 := $load.bv32($M.13, $p3);
  $i19 := $zext.bv32.bv64($i18);
  call $M.14 := $memcpy.bv8($M.14, $M.14, mst_sram, $p17, $bv2int.64($i19), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  call sendMsgMst2Slv(3bv32, $p3, 1bv8);
  $p20 := $p1;
  call receiveMsgSlv2Mst($p0, $p20, $p2);
  call free_($p17);
  $exn := false;
  return;
}
const sendMsgMst2Slv: ref;
axiom (sendMsgMst2Slv == $sub.ref(0, 46567));
procedure  sendMsgMst2Slv(cmd: bv32, data: ref, dataSize: bv8)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv8;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv1;
  var $i7: bv32;
  var $i8: bv1;
  var $i6: bv1;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv64;
  var $p12: ref;
  var $i13: bv32;
  var $i14: bv8;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
$bb0:
  goto $bb1;
$bb1:
  call $i0 := HW_REG_READ($sub.bv32(0bv32, 65532bv32));
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1bv1);
  goto $bb1;
$bb3:
  assume !(($i1 == 1bv1));
  $i2 := 0bv8;
  goto $bb4;
$bb4:
  $i3 := $zext.bv8.bv32($i2);
  $i4 := $zext.bv8.bv32(dataSize);
  $i5 := $slt.bv32($i3, $i4);
  $i6 := 0bv1;
  assume {:branchcond $i5} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i5 == 1bv1);
  $i7 := $zext.bv8.bv32($i2);
  $i8 := $slt.bv32($i7, 2bv32);
  $i6 := $i8;
  goto $bb7;
$bb6:
  assume !(($i5 == 1bv1));
  goto $bb7;
$bb7:
  assume {:branchcond $i6} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i6 == 1bv1);
  $i9 := $zext.bv8.bv32($i2);
  $i10 := $add.bv32($sub.bv32(0bv32, 65534bv32), $i9);
  $i11 := $zext.bv8.bv64($i2);
  $p12 := $add.ref(data, $mul.ref($bv2int.64($i11), 4));
  $i13 := $load.bv32($M.13, $p12);
  call HW_REG_WRITE($i10, $i13);
  goto $bb10;
$bb9:
  assume !(($i6 == 1bv1));
  $i15 := $shl.bv32(cmd, 9bv32);
  $i16 := $zext.bv8.bv32(dataSize);
  $i17 := $shl.bv32($i16, 1bv32);
  $i18 := $or.bv32($i15, $i17);
  $i19 := $or.bv32($i18, 1bv32);
  call HW_REG_WRITE($sub.bv32(0bv32, 65535bv32), $i19);
  $exn := false;
  return;
$bb10:
  $i14 := $add.bv8($i2, 1bv8);
  $i2 := $i14;
  goto $bb4;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 47599));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: bv8, $i2: bv64, $i3: bv32, $i4: bv1);
const receiveMsgSlv2Mst: ref;
axiom (receiveMsgSlv2Mst == $sub.ref(0, 48631));
procedure  receiveMsgSlv2Mst(cmd: ref, data: ref, dataSize: ref)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv8;
  var $i7: bv8;
  var $i8: bv32;
  var $i9: bv8;
  var $i10: bv32;
  var $i11: bv1;
  var $i13: bv32;
  var $i14: bv1;
  var $i12: bv1;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv64;
  var $p19: ref;
  var $i20: bv8;
$bb0:
  goto $bb1;
$bb1:
  call $i0 := HW_REG_READ($sub.bv32(0bv32, 65531bv32));
  $i1 := $eq.bv32($i0, 0bv32);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1bv1);
  goto $bb1;
$bb3:
  assume !(($i1 == 1bv1));
  call $i2 := HW_REG_READ($sub.bv32(0bv32, 65531bv32));
  $i3 := $lshr.bv32($i2, 9bv32);
  $M.10 := $store.bv32($M.10, cmd, $i3);
  $i4 := $lshr.bv32($i2, 1bv32);
  $i5 := $and.bv32($i4, 255bv32);
  $i6 := $trunc.bv32.bv8($i5);
  $M.12 := $store.bytes.bv8($M.12, dataSize, $i6);
  $i7 := 0bv8;
  goto $bb4;
$bb4:
  $i8 := $zext.bv8.bv32($i7);
  $i9 := $load.bytes.bv8($M.12, dataSize);
  $i10 := $zext.bv8.bv32($i9);
  $i11 := $slt.bv32($i8, $i10);
  $i12 := 0bv1;
  assume {:branchcond $i11} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i11 == 1bv1);
  $i13 := $zext.bv8.bv32($i7);
  $i14 := $slt.bv32($i13, 2bv32);
  $i12 := $i14;
  goto $bb7;
$bb6:
  assume !(($i11 == 1bv1));
  goto $bb7;
$bb7:
  assume {:branchcond $i12} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i12 == 1bv1);
  $i15 := $zext.bv8.bv32($i7);
  $i16 := $add.bv32($sub.bv32(0bv32, 65530bv32), $i15);
  call $i17 := HW_REG_READ($i16);
  $i18 := $zext.bv8.bv64($i7);
  $p19 := $add.ref(data, $mul.ref($bv2int.64($i18), 4));
  $M.11 := $store.bytes.bv32($M.11, $p19, $i17);
  goto $bb10;
$bb9:
  assume !(($i12 == 1bv1));
  call HW_REG_WRITE($sub.bv32(0bv32, 65531bv32), 0bv32);
  $exn := false;
  return;
$bb10:
  $i20 := $add.bv8($i7, 1bv8);
  $i7 := $i20;
  goto $bb4;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 49663));
procedure  llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: bv64, $i3: bv32, $i4: bv1);
const free_: ref;
axiom (free_ == $sub.ref(0, 50695));
procedure  free_($p0: ref)
{
  call $free($p0);
}
const entrySlv: ref;
axiom (entrySlv == $sub.ref(0, 51727));
procedure  entrySlv(in: ref)
  returns ($r: ref)
{
$bb0:
  call mainSlv();
  $M.15 := 1bv8;
  call {:cexpr "slvCpl"} boogie_si_record_bv8(1bv8);
  $r := in;
  $exn := false;
  return;
}
const mainSlv: ref;
axiom (mainSlv == $sub.ref(0, 52759));
procedure  mainSlv()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv64;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv64;
  var $i8: bv32;
  var $i9: bv1;
  var $i10: bv32;
$bb0:
  goto $bb1;
$bb1:
  $i0 := $load.bv32($M.16, gSlvFlag);
  $i1 := $ne.bv32($i0, 0bv32);
  $i2 := $xor.bv1($i1, 1bv1);
  assume {:branchcond $i2} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i2 == 1bv1);
  goto $bb1;
$bb3:
  assume !(($i2 == 1bv1));
  $i3 := $load.bv32($M.16, $add.ref(gSlvFlag, 4));
  $i4 := $zext.bv32.bv64($i3);
  call $p5 := malloc($i4);
  $i6 := $load.bv32($M.16, $add.ref(gSlvFlag, 4));
  $i7 := $zext.bv32.bv64($i6);
  call $M.14 := $memcpy.bv8($M.14, $M.14, $p5, mst_sram, $bv2int.64($i7), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  $i8 := $load.bv32($M.16, $add.ref(gSlvFlag, 4));
  $i9 := $ule.bv32($i8, 32bv32);
  $i10 := $zext.bv1.bv32($i9);
  call __VERIFIER_assert($i10);
  $M.17 := $store.bv32($M.17, gMbCtx, 4bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 12), 0bv32);
  call sendMsgSlv2Mst();
  call free_($p5);
  $exn := false;
  return;
}
const malloc: ref;
axiom (malloc == $sub.ref(0, 53791));
procedure  malloc($i0: bv64)
  returns ($r: ref)
{
  call $r := $malloc($bv2int.64($i0));
}
const sendMsgSlv2Mst: ref;
axiom (sendMsgSlv2Mst == $sub.ref(0, 54823));
procedure  sendMsgSlv2Mst()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
$bb0:
  goto $bb1;
$bb1:
  call $i0 := read_reg_MB_STS_busy();
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1bv1);
  goto $bb1;
$bb3:
  assume !(($i1 == 1bv1));
  $i2 := $load.bv32($M.17, $add.ref(gMbCtx, 4));
  call write_reg_MB_S_DAT0($i2);
  $i3 := $load.bv32($M.17, $add.ref(gMbCtx, 8));
  call write_reg_MB_S_DAT1($i3);
  $i4 := $load.bv32($M.17, $add.ref(gMbCtx, 12));
  call write_reg_MB_S_SIZE($i4);
  $i5 := $load.bv32($M.17, gMbCtx);
  call write_reg_MB_S_CMD($i5);
  $exn := false;
  return;
}
const read_reg_MB_STS_busy: ref;
axiom (read_reg_MB_STS_busy == $sub.ref(0, 55855));
procedure  read_reg_MB_STS_busy()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
$bb0:
  $i0 := $M.18;
  $i1 := $lshr.bv32($i0, 31bv32);
  $r := $i1;
  $exn := false;
  return;
}
const write_reg_MB_S_DAT0: ref;
axiom (write_reg_MB_S_DAT0 == $sub.ref(0, 56887));
procedure  write_reg_MB_S_DAT0(val: bv32)
{
$bb0:
  $M.19 := val;
  $exn := false;
  return;
}
const write_reg_MB_S_DAT1: ref;
axiom (write_reg_MB_S_DAT1 == $sub.ref(0, 57919));
procedure  write_reg_MB_S_DAT1(val: bv32)
{
$bb0:
  $M.20 := val;
  $exn := false;
  return;
}
const write_reg_MB_S_SIZE: ref;
axiom (write_reg_MB_S_SIZE == $sub.ref(0, 58951));
procedure  write_reg_MB_S_SIZE(val: bv32)
{
$bb0:
  $M.21 := val;
  $exn := false;
  return;
}
const write_reg_MB_S_CMD: ref;
axiom (write_reg_MB_S_CMD == $sub.ref(0, 59983));
procedure  write_reg_MB_S_CMD(val: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
$bb0:
  $i0 := $M.18;
  $i1 := $and.bv32($i0, 2147483647bv32);
  $i2 := $or.bv32($i1, $sub.bv32(0bv32, 2147483648bv32));
  $M.18 := $i2;
  $M.22 := val;
  goto $bb1;
$bb1:
  call $i3 := read_reg_msg_slv2mst_dbm();
  $i4 := $ne.bv32($i3, 0bv32);
  assume {:branchcond $i4} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i4 == 1bv1);
  goto $bb1;
$bb3:
  assume !(($i4 == 1bv1));
  $i5 := $M.19;
  call write_reg_msg_slv2mst_dat0($i5);
  $i6 := $M.20;
  call write_reg_msg_slv2mst_dat1($i6);
  $i7 := $M.22;
  $i8 := $shl.bv32($i7, 9bv32);
  $i9 := $M.21;
  $i10 := $shl.bv32($i9, 1bv32);
  $i11 := $or.bv32($i8, $i10);
  $i12 := $or.bv32($i11, 1bv32);
  call write_reg_msg_slv2mst_db($i12);
  $i13 := $M.18;
  $i14 := $and.bv32($i13, 2147483647bv32);
  $M.18 := $i14;
  $exn := false;
  return;
}
const entryHdl: ref;
axiom (entryHdl == $sub.ref(0, 61015));
procedure  entryHdl(in: ref)
  returns ($r: ref)
{
  var $i0: bv8;
  var $i1: bv1;
  var $i3: bv8;
  var $i4: bv1;
  var $i5: bv1;
  var $i2: bv1;
  var $i6: bv32;
  var $i7: bv32;
$bb0:
  goto $bb1;
$bb1:
  $i0 := $M.9;
  $i1 := $ne.bv8($i0, 0bv8);
  $i2 := 1bv1;
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1bv1);
  $i3 := $M.15;
  $i4 := $ne.bv8($i3, 0bv8);
  $i5 := $xor.bv1($i4, 1bv1);
  $i2 := $i5;
  goto $bb4;
$bb3:
  assume !(($i1 == 1bv1));
  goto $bb4;
$bb4:
  assume {:branchcond $i2} true;
  goto $bb5, $bb6;
$bb5:
  assume ($i2 == 1bv1);
  call $i6 := pthread_mutex_lock(int_lock);
  call intHdl();
  call $i7 := pthread_mutex_unlock(int_lock);
  goto $bb1;
$bb6:
  assume !(($i2 == 1bv1));
  $M.23 := 1bv8;
  call {:cexpr "intCpl"} boogie_si_record_bv8(1bv8);
  $r := in;
  $exn := false;
  return;
}
const intHdl: ref;
axiom (intHdl == $sub.ref(0, 62047));
procedure  intHdl()
{
  var $i0: bv32;
  var $i1: bv1;
$bb0:
  $i0 := $M.0;
  $i1 := $eq.bv32($i0, 0bv32);
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  call getMbCtx();
  call handleCmd();
  $M.0 := 0bv32;
  call {:cexpr "reg_slv_int"} boogie_si_record_bv32(0bv32);
  goto $bb3;
$bb3:
  $exn := false;
  return;
}
const getMbCtx: ref;
axiom (getMbCtx == $sub.ref(0, 63079));
procedure  getMbCtx()
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv32;
$bb0:
  call write_reg_MB_ACK(1bv32);
  call $i0 := read_reg_MB_R_CMD();
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 16), $i0);
  call $i1 := read_reg_MB_R_DAT0();
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 20), $i1);
  call $i2 := read_reg_MB_R_DAT1();
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 24), $i2);
  call $i3 := read_reg_MB_R_SIZE();
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 28), $i3);
  $exn := false;
  return;
}
const write_reg_MB_ACK: ref;
axiom (write_reg_MB_ACK == $sub.ref(0, 64111));
procedure  write_reg_MB_ACK(val: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
$bb0:
  call $i0 := read_reg_msg_mst2slv_db();
  $i1 := $lshr.bv32($i0, 9bv32);
  $M.24 := $i1;
  $i2 := $lshr.bv32($i0, 1bv32);
  $i3 := $and.bv32($i2, 255bv32);
  $M.25 := $i3;
  call $i4 := read_reg_msg_mst2slv_dat0();
  $M.26 := $i4;
  call $i5 := read_reg_msg_mst2slv_dat1();
  $M.27 := $i5;
  call write_reg_msg_mst2slv_db(0bv32);
  $exn := false;
  return;
}
const read_reg_MB_R_CMD: ref;
axiom (read_reg_MB_R_CMD == $sub.ref(0, 65143));
procedure  read_reg_MB_R_CMD()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.24;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_MB_R_DAT0: ref;
axiom (read_reg_MB_R_DAT0 == $sub.ref(0, 66175));
procedure  read_reg_MB_R_DAT0()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.26;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_MB_R_DAT1: ref;
axiom (read_reg_MB_R_DAT1 == $sub.ref(0, 67207));
procedure  read_reg_MB_R_DAT1()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.27;
  $r := $i0;
  $exn := false;
  return;
}
const read_reg_MB_R_SIZE: ref;
axiom (read_reg_MB_R_SIZE == $sub.ref(0, 68239));
procedure  read_reg_MB_R_SIZE()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  $i0 := $M.25;
  $r := $i0;
  $exn := false;
  return;
}
const handleCmd: ref;
axiom (handleCmd == $sub.ref(0, 69271));
procedure  handleCmd()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv1;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv32;
  var $i7: bv32;
$bb0:
  $i0 := $load.bv32($M.17, $add.ref(gMbCtx, 16));
  goto $bb1;
$bb1:
  $i1 := $slt.bv32($i0, 3bv32);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1bv1);
  $i3 := $eq.bv32($i0, 1bv32);
  assume {:branchcond $i3} true;
  goto $bb7, $bb8;
$bb3:
  assume !(($i1 == 1bv1));
  $i2 := $eq.bv32($i0, 3bv32);
  assume {:branchcond $i2} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i2 == 1bv1);
  $i4 := $load.bv32($M.17, $add.ref(gMbCtx, 28));
  $i5 := $eq.bv32($i4, 1bv32);
  $i6 := $zext.bv1.bv32($i5);
  call __VERIFIER_assert($i6);
  $i7 := $load.bv32($M.17, $add.ref(gMbCtx, 20));
  $M.16 := $store.bv32($M.16, $add.ref(gSlvFlag, 4), $i7);
  $M.16 := $store.bv32($M.16, gSlvFlag, 1bv32);
  goto $bb9;
$bb5:
  assume !(($i2 == 1bv1));
  goto $bb6;
$bb6:
  goto $bb10;
$bb7:
  assume ($i3 == 1bv1);
  $M.17 := $store.bv32($M.17, gMbCtx, 2bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 4), 4bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 12), 1bv32);
  call sendMsgSlv2Mst();
  goto $bb9;
$bb8:
  assume !(($i3 == 1bv1));
  goto $bb6;
$bb9:
  $exn := false;
  return;
$bb10:
  goto $bb9;
}
const main: ref;
axiom (main == $sub.ref(0, 70303));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
$bb0:
  call $initialize();
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  call $p0 := $alloc($mul.ref(4, $bv2int.64($zext.bv32.bv64(1bv32))));
  call $p1 := $alloc($mul.ref(4, $bv2int.64($zext.bv32.bv64(1bv32))));
  call $p2 := $alloc($mul.ref(4, $bv2int.64($zext.bv32.bv64(1bv32))));
  call initHW();
  $M.23 := 0bv8;
  call {:cexpr "intCpl"} boogie_si_record_bv8(0bv8);
  $M.15 := 0bv8;
  call {:cexpr "slvCpl"} boogie_si_record_bv8(0bv8);
  $M.9 := 0bv8;
  call {:cexpr "mstCpl"} boogie_si_record_bv8(0bv8);
  call $i3 := pthread_mutex_init(int_lock, $0.ref);
  call $i4 := pthread_mutex_init(fab_lock, $0.ref);
  call $i5 := pthread_create($p0, $0.ref, entryMst, $0.ref);
  call $i6 := pthread_create($p1, $0.ref, entrySlv, $0.ref);
  call $i7 := pthread_create($p2, $0.ref, entryHdl, $0.ref);
  $i8 := $load.bytes.bv32($M.28, $p0);
  call $i9 := pthread_join($i8, $0.ref);
  $i10 := $load.bytes.bv32($M.28, $p1);
  call $i11 := pthread_join($i10, $0.ref);
  $i12 := $load.bytes.bv32($M.28, $p2);
  call $i13 := pthread_join($i12, $0.ref);
  call $i14 := pthread_mutex_destroy(int_lock);
  call $i15 := pthread_mutex_destroy(fab_lock);
  $r := 0bv32;
  $exn := false;
  return;
}
const initHW: ref;
axiom (initHW == $sub.ref(0, 71335));
procedure  initHW()
{
$bb0:
  $M.1 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_db"} boogie_si_record_bv32(0bv32);
  $M.2 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_dbm"} boogie_si_record_bv32(0bv32);
  $M.5 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_db"} boogie_si_record_bv32(0bv32);
  $M.6 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_dbm"} boogie_si_record_bv32(0bv32);
  $M.18 := 0bv32;
  $M.24 := 0bv32;
  $M.22 := 0bv32;
  $M.0 := 0bv32;
  call {:cexpr "reg_slv_int"} boogie_si_record_bv32(0bv32);
  $M.16 := $store.bv32($M.16, gSlvFlag, 0bv32);
  $M.17 := $store.bv32($M.17, gMbCtx, 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 16), 0bv32);
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 72367));
procedure  __VERIFIER_assume(x: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %x, i64 0, metadata !193, metadata !194), !dbg !195
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 713, 3} true;
  assume true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 34, 21} true;
  assume x != $0;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 35, 1} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 73399));
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
procedure  __SMACK_code.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref);
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.ref.bv32($p0: ref, p.1: ref, p.2: bv32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 74431));
procedure  __SMACK_dummy(v: bv32)
{
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 713, 3} true;
  assume true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 714, 1} true;
  $exn := false;
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 75463));
procedure  __VERIFIER_assert(x: bv32)
{
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i32 %x, i64 0, metadata !206, metadata !194), !dbg !207
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 713, 3} true;
  assume true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 40, 21} true;
  assert x != $0;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 42, 1} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 76495));
procedure  __SMACK_nondet_char()
  returns ($r: bv8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 77527));
procedure  __SMACK_nondet_signed_char()
  returns ($r: bv8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 78559));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: bv8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 79591));
procedure  __SMACK_nondet_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 80623));
procedure  __SMACK_nondet_signed_short()
  returns ($r: bv16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 81655));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 82687));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: bv16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 83719));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: bv16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 84751));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 120, 11} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %call = call i32 (...) @__SMACK_nondet_int(), !dbg !193
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 23} true;
  $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 34} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 39} true;
  $i3 := $sle.bv32($i0, 2147483647bv32);
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 34} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 34} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 121, 3} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 122, 3} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 85783));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 86815));
procedure  __SMACK_nondet_signed_int()
  returns ($r: bv32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 87847));
procedure  __SMACK_nondet_unsigned()
  returns ($r: bv32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 88879));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __VERIFIER_nondet_long: ref;
axiom (__VERIFIER_nondet_long == $sub.ref(0, 89911));
procedure  __VERIFIER_nondet_long()
  returns ($r: bv64)
{
  var $i0: bv64;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 144, 12} true;
  call $i0 := __SMACK_nondet_long();
  call {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_bv64($i0);
  // WARNING: %call = call i64 (...) @__SMACK_nondet_long(), !dbg !193
  call {:cexpr "x"} boogie_si_record_bv64($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 23} true;
  $i1 := $sge.bv64($i0, $sub.bv64(0bv64, 9223372036854775808bv64));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 35} true;
  $i2 := 0bv1;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 40} true;
  $i3 := $sle.bv64($i0, 9223372036854775807bv64);
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 35} true;
  assume !(($i1 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 35} true;
  $i4 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 145, 3} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 146, 3} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 90943));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 91975));
procedure  __SMACK_nondet_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 93007));
procedure  __SMACK_nondet_signed_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 94039));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 95071));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 96103));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: bv64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 97135));
procedure  __SMACK_nondet_long_long()
  returns ($r: bv64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 98167));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 99199));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: bv64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 100231));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 101263));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: bv64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 102295));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: bv64);
const calloc: ref;
axiom (calloc == $sub.ref(0, 103327));
procedure  calloc(num: bv64, size: bv64)
  returns ($r: ref)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv64;
  var $p4: ref;
  var $i5: bv64;
  var $p2: ref;
$bb0:
  // WARNING: call void @llvm.dbg.value(metadata i64 %num, i64 0, metadata !236, metadata !194), !dbg !237
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 248, 7} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 248, 7} true;
  $i1 := $ne.bv32($i0, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 248, 7} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 250, 3} true;
  $p2 := $0.ref;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 251, 22} true;
  $i3 := $mul.bv64(num, size);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 251, 11} true;
  call $p4 := malloc($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 252, 24} true;
  $i5 := $mul.bv64(num, size);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 252, 5} true;
  call $M.14 := $memset.bv8($M.14, $p4, 0bv8, $bv2int.64($i5), $bv2int.64($zext.bv32.bv64(1bv32)), (0bv1 == 1bv1));
  $p2 := $p4;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 254, 3} true;
  $r := $p2;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 104359));
function {:inline} $bitcast.ref.ref(i: ref) returns (ref) {i}
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $min.bv128(i1: bv128, i2: bv128) returns (bv128) {if $slt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv96(i1: bv96, i2: bv96) returns (bv96) {if $slt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv88(i1: bv88, i2: bv88) returns (bv88) {if $slt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv64(i1: bv64, i2: bv64) returns (bv64) {if $slt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv56(i1: bv56, i2: bv56) returns (bv56) {if $slt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv48(i1: bv48, i2: bv48) returns (bv48) {if $slt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv40(i1: bv40, i2: bv40) returns (bv40) {if $slt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv32(i1: bv32, i2: bv32) returns (bv32) {if $slt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv24(i1: bv24, i2: bv24) returns (bv24) {if $slt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv16(i1: bv16, i2: bv16) returns (bv16) {if $slt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv8(i1: bv8, i2: bv8) returns (bv8) {if $slt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $min.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv128(i1: bv128, i2: bv128) returns (bv128) {if $sgt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv96(i1: bv96, i2: bv96) returns (bv96) {if $sgt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv88(i1: bv88, i2: bv88) returns (bv88) {if $sgt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv64(i1: bv64, i2: bv64) returns (bv64) {if $sgt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv56(i1: bv56, i2: bv56) returns (bv56) {if $sgt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv48(i1: bv48, i2: bv48) returns (bv48) {if $sgt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv40(i1: bv40, i2: bv40) returns (bv40) {if $sgt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv32(i1: bv32, i2: bv32) returns (bv32) {if $sgt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv24(i1: bv24, i2: bv24) returns (bv24) {if $sgt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv16(i1: bv16, i2: bv16) returns (bv16) {if $sgt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv8(i1: bv8, i2: bv8) returns (bv8) {if $sgt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $max.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ult.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ult.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ult.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ult.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ult.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ult.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ult.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ult.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ult.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ult.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ult.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) {if $ugt.bv128.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) {if $ugt.bv96.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) {if $ugt.bv88.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) {if $ugt.bv64.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) {if $ugt.bv56.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) {if $ugt.bv48.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) {if $ugt.bv40.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) {if $ugt.bv32.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) {if $ugt.bv24.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) {if $ugt.bv16.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) {if $ugt.bv8.bool(i1,i2) then i1 else i2}
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then i1 else i2}
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 == i2} function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 == i2} function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 == i2} function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 == i2} function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 == i2} function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 == i2} function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 == i2} function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 == i2} function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 == i2} function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 == i2} function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 == i2} function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 == i2} function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 == i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) {i1 != i2} function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) {i1 != i2} function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) {i1 != i2} function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) {i1 != i2} function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) {i1 != i2} function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) {i1 != i2} function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) {i1 != i2} function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) {i1 != i2} function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) {i1 != i2} function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) {i1 != i2} function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) {i1 != i2} function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) {i1 != i2} function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) {if i1 != i2 then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ule.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ule.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ule.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ule.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ule.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ule.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ule.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ule.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ule.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ule.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ule.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ule.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ult.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ult.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ult.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ult.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ult.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ult.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ult.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ult.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ult.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ult.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ult.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ult.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $uge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $uge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $uge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $uge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $uge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $uge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $uge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $uge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $uge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $uge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $uge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $uge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $ugt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $ugt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $ugt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $ugt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $ugt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $ugt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $ugt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $ugt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $ugt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $ugt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $ugt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $ugt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sle.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sle.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sle.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sle.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sle.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sle.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sle.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sle.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sle.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sle.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sle.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sle.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $slt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $slt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $slt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $slt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $slt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $slt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $slt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $slt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $slt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $slt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $slt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $slt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sge.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sge.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sge.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sge.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sge.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sge.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sge.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sge.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sge.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sge.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sge.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sge.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool); function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) {if $sgt.bv128.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool); function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) {if $sgt.bv96.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool); function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) {if $sgt.bv88.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool); function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) {if $sgt.bv64.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool); function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) {if $sgt.bv56.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool); function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) {if $sgt.bv48.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool); function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) {if $sgt.bv40.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool); function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) {if $sgt.bv32.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool); function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) {if $sgt.bv24.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool); function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) {if $sgt.bv16.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool); function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) {if $sgt.bv8.bool(i1,i2) then 1bv1 else 0bv1}
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool); function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) {if $sgt.bv1.bool(i1,i2) then 1bv1 else 0bv1}
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) {i[96:0]}
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) {i[88:0]}
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) {i[64:0]}
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) {i[56:0]}
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) {i[48:0]}
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) {i[40:0]}
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) {i[32:0]}
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) {i[24:0]}
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) {i[16:0]}
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) {i[8:0]}
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) {i[1:0]}
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) {i[1:0]}
function {:inline} $zext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 1bv8}
function {:inline} $zext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 1bv16}
function {:inline} $zext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 1bv24}
function {:inline} $zext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 1bv32}
function {:inline} $zext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1bv40}
function {:inline} $zext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 1bv48}
function {:inline} $zext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 1bv56}
function {:inline} $zext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 1bv64}
function {:inline} $zext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 1bv88}
function {:inline} $zext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 1bv96}
function {:inline} $zext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 1bv128}
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $sext.bv1.bv8(i: bv1) returns (bv8) {if i == 0bv1 then 0bv8 else 255bv8}
function {:inline} $sext.bv1.bv16(i: bv1) returns (bv16) {if i == 0bv1 then 0bv16 else 65535bv16}
function {:inline} $sext.bv1.bv24(i: bv1) returns (bv24) {if i == 0bv1 then 0bv24 else 16777215bv24}
function {:inline} $sext.bv1.bv32(i: bv1) returns (bv32) {if i == 0bv1 then 0bv32 else 4294967295bv32}
function {:inline} $sext.bv1.bv40(i: bv1) returns (bv40) {if i == 0bv1 then 0bv40 else 1099511627775bv40}
function {:inline} $sext.bv1.bv48(i: bv1) returns (bv48) {if i == 0bv1 then 0bv48 else 281474976710655bv48}
function {:inline} $sext.bv1.bv56(i: bv1) returns (bv56) {if i == 0bv1 then 0bv56 else 72057594037927935bv56}
function {:inline} $sext.bv1.bv64(i: bv1) returns (bv64) {if i == 0bv1 then 0bv64 else 18446744073709551615bv64}
function {:inline} $sext.bv1.bv88(i: bv1) returns (bv88) {if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88}
function {:inline} $sext.bv1.bv96(i: bv1) returns (bv96) {if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96}
function {:inline} $sext.bv1.bv128(i: bv1) returns (bv128) {if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128}
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) {i1 + i2}
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) {i1 + i2}
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) {i1 + i2}
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) {i1 + i2}
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) {i1 + i2}
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) {i1 + i2}
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) {i1 + i2}
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) {i1 + i2}
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) {i1 + i2}
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) {i1 + i2}
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) {i1 + i2}
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) {i1 + i2}
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) {i1 - i2}
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) {i1 - i2}
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) {i1 - i2}
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) {i1 - i2}
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) {i1 - i2}
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) {i1 - i2}
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) {i1 - i2}
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) {i1 - i2}
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) {i1 - i2}
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) {i1 - i2}
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) {i1 - i2}
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) {i1 - i2}
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) {i1 * i2}
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) {i1 * i2}
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) {i1 * i2}
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) {i1 * i2}
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) {i1 * i2}
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) {i1 * i2}
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) {i1 * i2}
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) {i1 * i2}
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) {i1 * i2}
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) {i1 * i2}
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) {i1 * i2}
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) {i1 * i2}
function {:builtin "div"} $div(i1: int, i2: int) returns (int);
function {:builtin "mod"} $mod(i1: int, i2: int) returns (int);
function {:builtin "rem"} $rem(i1: int, i2: int) returns (int);
function {:inline} $min(i1: int, i2: int) returns (int) {if i1 < i2 then i1 else i2}
function {:inline} $max(i1: int, i2: int) returns (int) {if i1 > i2 then i1 else i2}
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) {$min(i1,i2)}
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) {$min(i1,i2)}
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) {$min(i1,i2)}
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) {$min(i1,i2)}
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) {$min(i1,i2)}
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) {$min(i1,i2)}
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) {$min(i1,i2)}
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) {$min(i1,i2)}
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) {$min(i1,i2)}
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) {$min(i1,i2)}
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) {$min(i1,i2)}
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) {$min(i1,i2)}
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) {$max(i1,i2)}
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) {$max(i1,i2)}
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) {$max(i1,i2)}
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) {$max(i1,i2)}
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) {$max(i1,i2)}
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) {$max(i1,i2)}
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) {$max(i1,i2)}
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) {$max(i1,i2)}
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) {$max(i1,i2)}
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) {$max(i1,i2)}
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) {$max(i1,i2)}
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) {$max(i1,i2)}
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $not.i128(i: i128) returns (i128);
function $not.i96(i: i96) returns (i96);
function $not.i88(i: i88) returns (i88);
function $not.i64(i: i64) returns (i64);
function $not.i56(i: i56) returns (i56);
function $not.i48(i: i48) returns (i48);
function $not.i40(i: i40) returns (i40);
function $not.i32(i: i32) returns (i32);
function $not.i24(i: i24) returns (i24);
function $not.i16(i: i16) returns (i16);
function $not.i8(i: i8) returns (i8);
function $not.i1(i: i1) returns (i1);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) {i1 == i2} function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) {i1 == i2} function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) {i1 == i2} function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) {i1 == i2} function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) {i1 == i2} function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) {i1 == i2} function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) {i1 == i2} function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) {i1 == i2} function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) {i1 == i2} function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) {i1 == i2} function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) {i1 == i2} function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) {i1 == i2} function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) {if i1 == i2 then 1 else 0}
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) {i1 != i2} function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) {i1 != i2} function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) {i1 != i2} function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) {i1 != i2} function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) {i1 != i2} function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) {i1 != i2} function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) {i1 != i2} function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) {i1 != i2} function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) {i1 != i2} function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) {i1 != i2} function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) {i1 != i2} function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) {i1 != i2} function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) {if i1 != i2 then 1 else 0}
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) {i1 <= i2} function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) {i1 <= i2} function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) {i1 <= i2} function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) {i1 <= i2} function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) {i1 <= i2} function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) {i1 <= i2} function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) {i1 <= i2} function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) {i1 <= i2} function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) {i1 <= i2} function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) {i1 <= i2} function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) {i1 <= i2} function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) {i1 <= i2} function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) {if i1 <= i2 then 1 else 0}
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 < i2} function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 < i2} function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 < i2} function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 < i2} function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 < i2} function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 < i2} function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 < i2} function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 < i2} function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 < i2} function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 < i2} function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 < i2} function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 < i2} function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) {if i1 < i2 then 1 else 0}
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) {i1 >= i2} function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) {i1 >= i2} function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) {i1 >= i2} function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) {i1 >= i2} function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) {i1 >= i2} function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) {i1 >= i2} function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) {i1 >= i2} function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) {i1 >= i2} function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) {i1 >= i2} function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) {i1 >= i2} function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) {i1 >= i2} function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) {i1 >= i2} function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) {if i1 >= i2 then 1 else 0}
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) {i1 > i2} function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) {i1 > i2} function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) {i1 > i2} function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) {i1 > i2} function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) {i1 > i2} function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) {i1 > i2} function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) {i1 > i2} function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) {i1 > i2} function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) {i1 > i2} function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) {i1 > i2} function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) {i1 > i2} function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) {if i1 > i2 then 1 else 0}
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) {i1 > i2} function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) {if i1 > i2 then 1 else 0}
axiom $and.i1(0,0) == 0;
axiom $and.i1(0,1) == 0;
axiom $and.i1(1,0) == 0;
axiom $and.i1(1,1) == 1;
axiom $or.i1(0,0) == 0;
axiom $or.i1(0,1) == 1;
axiom $or.i1(1,0) == 1;
axiom $or.i1(1,1) == 1;
axiom $xor.i1(0,0) == 0;
axiom $xor.i1(0,1) == 1;
axiom $xor.i1(1,0) == 1;
axiom $xor.i1(1,1) == 0;
axiom($and.i32(32, 16) == 0);
function {:inline} $trunc.i128.i96(i: i128) returns (i96) {i}
function {:inline} $trunc.i128.i88(i: i128) returns (i88) {i}
function {:inline} $trunc.i128.i64(i: i128) returns (i64) {i}
function {:inline} $trunc.i128.i56(i: i128) returns (i56) {i}
function {:inline} $trunc.i128.i48(i: i128) returns (i48) {i}
function {:inline} $trunc.i128.i40(i: i128) returns (i40) {i}
function {:inline} $trunc.i128.i32(i: i128) returns (i32) {i}
function {:inline} $trunc.i128.i24(i: i128) returns (i24) {i}
function {:inline} $trunc.i128.i16(i: i128) returns (i16) {i}
function {:inline} $trunc.i128.i8(i: i128) returns (i8) {i}
function {:inline} $trunc.i128.i1(i: i128) returns (i1) {i}
function {:inline} $trunc.i96.i64(i: i96) returns (i64) {i}
function {:inline} $trunc.i96.i88(i: i96) returns (i88) {i}
function {:inline} $trunc.i96.i56(i: i96) returns (i56) {i}
function {:inline} $trunc.i96.i48(i: i96) returns (i48) {i}
function {:inline} $trunc.i96.i40(i: i96) returns (i40) {i}
function {:inline} $trunc.i96.i32(i: i96) returns (i32) {i}
function {:inline} $trunc.i96.i24(i: i96) returns (i24) {i}
function {:inline} $trunc.i96.i16(i: i96) returns (i16) {i}
function {:inline} $trunc.i96.i8(i: i96) returns (i8) {i}
function {:inline} $trunc.i96.i1(i: i96) returns (i1) {i}
function {:inline} $trunc.i88.i64(i: i88) returns (i64) {i}
function {:inline} $trunc.i88.i88(i: i88) returns (i88) {i}
function {:inline} $trunc.i88.i56(i: i88) returns (i56) {i}
function {:inline} $trunc.i88.i48(i: i88) returns (i48) {i}
function {:inline} $trunc.i88.i40(i: i88) returns (i40) {i}
function {:inline} $trunc.i88.i32(i: i88) returns (i32) {i}
function {:inline} $trunc.i88.i24(i: i88) returns (i24) {i}
function {:inline} $trunc.i88.i16(i: i88) returns (i16) {i}
function {:inline} $trunc.i88.i8(i: i88) returns (i8) {i}
function {:inline} $trunc.i88.i1(i: i88) returns (i1) {i}
function {:inline} $trunc.i64.i56(i: i64) returns (i56) {i}
function {:inline} $trunc.i64.i48(i: i64) returns (i48) {i}
function {:inline} $trunc.i64.i40(i: i64) returns (i40) {i}
function {:inline} $trunc.i64.i32(i: i64) returns (i32) {i}
function {:inline} $trunc.i64.i24(i: i64) returns (i24) {i}
function {:inline} $trunc.i64.i16(i: i64) returns (i16) {i}
function {:inline} $trunc.i64.i8(i: i64) returns (i8) {i}
function {:inline} $trunc.i64.i1(i: i64) returns (i1) {i}
function {:inline} $trunc.i56.i48(i: i56) returns (i48) {i}
function {:inline} $trunc.i56.i40(i: i56) returns (i40) {i}
function {:inline} $trunc.i56.i32(i: i56) returns (i32) {i}
function {:inline} $trunc.i56.i24(i: i56) returns (i24) {i}
function {:inline} $trunc.i56.i16(i: i56) returns (i16) {i}
function {:inline} $trunc.i56.i8(i: i56) returns (i8) {i}
function {:inline} $trunc.i56.i1(i: i56) returns (i1) {i}
function {:inline} $trunc.i48.i40(i: i48) returns (i40) {i}
function {:inline} $trunc.i48.i32(i: i48) returns (i32) {i}
function {:inline} $trunc.i48.i24(i: i48) returns (i24) {i}
function {:inline} $trunc.i48.i16(i: i48) returns (i16) {i}
function {:inline} $trunc.i48.i8(i: i48) returns (i8) {i}
function {:inline} $trunc.i48.i1(i: i48) returns (i1) {i}
function {:inline} $trunc.i40.i32(i: i40) returns (i32) {i}
function {:inline} $trunc.i40.i24(i: i40) returns (i24) {i}
function {:inline} $trunc.i40.i16(i: i40) returns (i16) {i}
function {:inline} $trunc.i40.i8(i: i40) returns (i8) {i}
function {:inline} $trunc.i40.i1(i: i40) returns (i1) {i}
function {:inline} $trunc.i32.i24(i: i32) returns (i24) {i}
function {:inline} $trunc.i32.i16(i: i32) returns (i16) {i}
function {:inline} $trunc.i32.i8(i: i32) returns (i8) {i}
function {:inline} $trunc.i32.i1(i: i32) returns (i1) {i}
function {:inline} $trunc.i24.i16(i: i24) returns (i16) {i}
function {:inline} $trunc.i24.i8(i: i24) returns (i8) {i}
function {:inline} $trunc.i24.i1(i: i24) returns (i1) {i}
function {:inline} $trunc.i16.i8(i: i16) returns (i8) {i}
function {:inline} $trunc.i16.i1(i: i16) returns (i1) {i}
function {:inline} $trunc.i8.i1(i: i8) returns (i1) {i}
function {:inline} $zext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $zext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $zext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $zext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $zext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $zext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $zext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $zext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $zext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $zext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $zext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $zext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $zext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $zext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $zext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $zext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $zext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $zext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $zext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $zext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $zext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $zext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $zext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $zext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $zext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $zext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $zext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $zext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $zext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $zext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $zext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $zext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $zext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $zext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $zext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $zext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $zext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $zext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $zext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $zext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $zext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $zext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $zext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $zext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $zext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $zext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $zext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $zext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $zext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $zext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $zext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $zext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $zext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $zext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $zext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $zext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $zext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $zext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $zext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $zext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $zext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $zext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $zext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $zext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $zext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $zext.i96.i128(i: i96) returns (i128) {i}
function {:inline} $sext.i1.i8(i: i1) returns (i8) {i}
function {:inline} $sext.i1.i16(i: i1) returns (i16) {i}
function {:inline} $sext.i1.i24(i: i1) returns (i24) {i}
function {:inline} $sext.i1.i32(i: i1) returns (i32) {i}
function {:inline} $sext.i1.i40(i: i1) returns (i40) {i}
function {:inline} $sext.i1.i48(i: i1) returns (i48) {i}
function {:inline} $sext.i1.i56(i: i1) returns (i56) {i}
function {:inline} $sext.i1.i64(i: i1) returns (i64) {i}
function {:inline} $sext.i1.i88(i: i1) returns (i88) {i}
function {:inline} $sext.i1.i96(i: i1) returns (i96) {i}
function {:inline} $sext.i1.i128(i: i1) returns (i128) {i}
function {:inline} $sext.i8.i16(i: i8) returns (i16) {i}
function {:inline} $sext.i8.i24(i: i8) returns (i24) {i}
function {:inline} $sext.i8.i32(i: i8) returns (i32) {i}
function {:inline} $sext.i8.i40(i: i8) returns (i40) {i}
function {:inline} $sext.i8.i48(i: i8) returns (i48) {i}
function {:inline} $sext.i8.i56(i: i8) returns (i56) {i}
function {:inline} $sext.i8.i64(i: i8) returns (i64) {i}
function {:inline} $sext.i8.i88(i: i8) returns (i88) {i}
function {:inline} $sext.i8.i96(i: i8) returns (i96) {i}
function {:inline} $sext.i8.i128(i: i8) returns (i128) {i}
function {:inline} $sext.i16.i24(i: i16) returns (i24) {i}
function {:inline} $sext.i16.i32(i: i16) returns (i32) {i}
function {:inline} $sext.i16.i40(i: i16) returns (i40) {i}
function {:inline} $sext.i16.i48(i: i16) returns (i48) {i}
function {:inline} $sext.i16.i56(i: i16) returns (i56) {i}
function {:inline} $sext.i16.i64(i: i16) returns (i64) {i}
function {:inline} $sext.i16.i88(i: i16) returns (i88) {i}
function {:inline} $sext.i16.i96(i: i16) returns (i96) {i}
function {:inline} $sext.i16.i128(i: i16) returns (i128) {i}
function {:inline} $sext.i24.i32(i: i24) returns (i32) {i}
function {:inline} $sext.i24.i40(i: i24) returns (i40) {i}
function {:inline} $sext.i24.i48(i: i24) returns (i48) {i}
function {:inline} $sext.i24.i56(i: i24) returns (i56) {i}
function {:inline} $sext.i24.i64(i: i24) returns (i64) {i}
function {:inline} $sext.i24.i88(i: i24) returns (i88) {i}
function {:inline} $sext.i24.i96(i: i24) returns (i96) {i}
function {:inline} $sext.i24.i128(i: i24) returns (i128) {i}
function {:inline} $sext.i32.i40(i: i32) returns (i40) {i}
function {:inline} $sext.i32.i48(i: i32) returns (i48) {i}
function {:inline} $sext.i32.i56(i: i32) returns (i56) {i}
function {:inline} $sext.i32.i64(i: i32) returns (i64) {i}
function {:inline} $sext.i32.i88(i: i32) returns (i88) {i}
function {:inline} $sext.i32.i96(i: i32) returns (i96) {i}
function {:inline} $sext.i32.i128(i: i32) returns (i128) {i}
function {:inline} $sext.i40.i48(i: i40) returns (i48) {i}
function {:inline} $sext.i40.i56(i: i40) returns (i56) {i}
function {:inline} $sext.i40.i64(i: i40) returns (i64) {i}
function {:inline} $sext.i40.i88(i: i40) returns (i88) {i}
function {:inline} $sext.i40.i96(i: i40) returns (i96) {i}
function {:inline} $sext.i40.i128(i: i40) returns (i128) {i}
function {:inline} $sext.i48.i56(i: i48) returns (i56) {i}
function {:inline} $sext.i48.i64(i: i48) returns (i64) {i}
function {:inline} $sext.i48.i88(i: i48) returns (i88) {i}
function {:inline} $sext.i48.i96(i: i48) returns (i96) {i}
function {:inline} $sext.i48.i128(i: i48) returns (i128) {i}
function {:inline} $sext.i56.i64(i: i56) returns (i64) {i}
function {:inline} $sext.i56.i88(i: i56) returns (i88) {i}
function {:inline} $sext.i56.i96(i: i56) returns (i96) {i}
function {:inline} $sext.i56.i128(i: i56) returns (i128) {i}
function {:inline} $sext.i64.i88(i: i64) returns (i88) {i}
function {:inline} $sext.i64.i96(i: i64) returns (i96) {i}
function {:inline} $sext.i64.i128(i: i64) returns (i128) {i}
function {:inline} $sext.i88.i96(i: i88) returns (i96) {i}
function {:inline} $sext.i88.i128(i: i88) returns (i128) {i}
function {:inline} $sext.i96.i128(i: i96) returns (i128) {i}
function $fp(ipart:int, fpart:int, epart:int) returns (float);
function $fadd.float(f1:float, f2:float) returns (float);
function $fsub.float(f1:float, f2:float) returns (float);
function $fmul.float(f1:float, f2:float) returns (float);
function $fdiv.float(f1:float, f2:float) returns (float);
function $frem.float(f1:float, f2:float) returns (float);
function $ffalse.float(f1:float, f2:float) returns (i1);
function $ftrue.float(f1:float, f2:float) returns (i1);
function {:inline} $foeq.float(f1:float, f2:float) returns (i1) { if $foeq.bool(f1,f2) then 1 else 0 }
function $foeq.bool(f1:float, f2:float) returns (bool);
function $foge.float(f1:float, f2:float) returns (i1);
function $fogt.float(f1:float, f2:float) returns (i1);
function $fole.float(f1:float, f2:float) returns (i1);
function $folt.float(f1:float, f2:float) returns (i1);
function $fone.float(f1:float, f2:float) returns (i1);
function $ford.float(f1:float, f2:float) returns (i1);
function $fueq.float(f1:float, f2:float) returns (i1);
function $fuge.float(f1:float, f2:float) returns (i1);
function $fugt.float(f1:float, f2:float) returns (i1);
function $fule.float(f1:float, f2:float) returns (i1);
function $fult.float(f1:float, f2:float) returns (i1);
function $fune.float(f1:float, f2:float) returns (i1);
function $funo.float(f1:float, f2:float) returns (i1);
function $fp2si.float.i128(f:float) returns (i128);
function $fp2ui.float.i128(f:float) returns (i128);
function $si2fp.i128.float(i:i128) returns (float);
function $ui2fp.i128.float(i:i128) returns (float);
function $fp2si.float.i96(f:float) returns (i96);
function $fp2ui.float.i96(f:float) returns (i96);
function $si2fp.i96.float(i:i96) returns (float);
function $ui2fp.i96.float(i:i96) returns (float);
function $fp2si.float.i88(f:float) returns (i88);
function $fp2ui.float.i88(f:float) returns (i88);
function $si2fp.i88.float(i:i88) returns (float);
function $ui2fp.i88.float(i:i88) returns (float);
function $fp2si.float.i64(f:float) returns (i64);
function $fp2ui.float.i64(f:float) returns (i64);
function $si2fp.i64.float(i:i64) returns (float);
function $ui2fp.i64.float(i:i64) returns (float);
function $fp2si.float.i56(f:float) returns (i56);
function $fp2ui.float.i56(f:float) returns (i56);
function $si2fp.i56.float(i:i56) returns (float);
function $ui2fp.i56.float(i:i56) returns (float);
function $fp2si.float.i48(f:float) returns (i48);
function $fp2ui.float.i48(f:float) returns (i48);
function $si2fp.i48.float(i:i48) returns (float);
function $ui2fp.i48.float(i:i48) returns (float);
function $fp2si.float.i40(f:float) returns (i40);
function $fp2ui.float.i40(f:float) returns (i40);
function $si2fp.i40.float(i:i40) returns (float);
function $ui2fp.i40.float(i:i40) returns (float);
function $fp2si.float.i32(f:float) returns (i32);
function $fp2ui.float.i32(f:float) returns (i32);
function $si2fp.i32.float(i:i32) returns (float);
function $ui2fp.i32.float(i:i32) returns (float);
function $fp2si.float.i24(f:float) returns (i24);
function $fp2ui.float.i24(f:float) returns (i24);
function $si2fp.i24.float(i:i24) returns (float);
function $ui2fp.i24.float(i:i24) returns (float);
function $fp2si.float.i16(f:float) returns (i16);
function $fp2ui.float.i16(f:float) returns (i16);
function $si2fp.i16.float(i:i16) returns (float);
function $ui2fp.i16.float(i:i16) returns (float);
function $fp2si.float.i8(f:float) returns (i8);
function $fp2ui.float.i8(f:float) returns (i8);
function $si2fp.i8.float(i:i8) returns (float);
function $ui2fp.i8.float(i:i8) returns (float);
function $fptrunc.float.float(f:float) returns (float);
function $fpext.float.float(f:float) returns (float);
function $fp2si.float.bv128(f:float) returns (bv128);
function $fp2ui.float.bv128(f:float) returns (bv128);
function $si2fp.bv128.float(i:bv128) returns (float);
function $ui2fp.bv128.float(i:bv128) returns (float);
function $fp2si.float.bv96(f:float) returns (bv96);
function $fp2ui.float.bv96(f:float) returns (bv96);
function $si2fp.bv96.float(i:bv96) returns (float);
function $ui2fp.bv96.float(i:bv96) returns (float);
function $fp2si.float.bv88(f:float) returns (bv88);
function $fp2ui.float.bv88(f:float) returns (bv88);
function $si2fp.bv88.float(i:bv88) returns (float);
function $ui2fp.bv88.float(i:bv88) returns (float);
function $fp2si.float.bv64(f:float) returns (bv64);
function $fp2ui.float.bv64(f:float) returns (bv64);
function $si2fp.bv64.float(i:bv64) returns (float);
function $ui2fp.bv64.float(i:bv64) returns (float);
function $fp2si.float.bv56(f:float) returns (bv56);
function $fp2ui.float.bv56(f:float) returns (bv56);
function $si2fp.bv56.float(i:bv56) returns (float);
function $ui2fp.bv56.float(i:bv56) returns (float);
function $fp2si.float.bv48(f:float) returns (bv48);
function $fp2ui.float.bv48(f:float) returns (bv48);
function $si2fp.bv48.float(i:bv48) returns (float);
function $ui2fp.bv48.float(i:bv48) returns (float);
function $fp2si.float.bv40(f:float) returns (bv40);
function $fp2ui.float.bv40(f:float) returns (bv40);
function $si2fp.bv40.float(i:bv40) returns (float);
function $ui2fp.bv40.float(i:bv40) returns (float);
function $fp2si.float.bv32(f:float) returns (bv32);
function $fp2ui.float.bv32(f:float) returns (bv32);
function $si2fp.bv32.float(i:bv32) returns (float);
function $ui2fp.bv32.float(i:bv32) returns (float);
function $fp2si.float.bv24(f:float) returns (bv24);
function $fp2ui.float.bv24(f:float) returns (bv24);
function $si2fp.bv24.float(i:bv24) returns (float);
function $ui2fp.bv24.float(i:bv24) returns (float);
function $fp2si.float.bv16(f:float) returns (bv16);
function $fp2ui.float.bv16(f:float) returns (bv16);
function $si2fp.bv16.float(i:bv16) returns (float);
function $ui2fp.bv16.float(i:bv16) returns (float);
function $fp2si.float.bv8(f:float) returns (bv8);
function $fp2ui.float.bv8(f:float) returns (bv8);
function $si2fp.bv8.float(i:bv8) returns (float);
function $ui2fp.bv8.float(i:bv8) returns (float);
axiom (forall f1, f2: float :: f1 != f2 || $foeq.bool(f1,f2));
axiom (forall i: i128 :: $fp2ui.float.i128($ui2fp.i128.float(i)) == i);
axiom (forall f: float :: $ui2fp.i128.float($fp2ui.float.i128(f)) == f);
axiom (forall i: i128 :: $fp2si.float.i128($si2fp.i128.float(i)) == i);
axiom (forall f: float :: $si2fp.i128.float($fp2si.float.i128(f)) == f);
axiom (forall i: i96 :: $fp2ui.float.i96($ui2fp.i96.float(i)) == i);
axiom (forall f: float :: $ui2fp.i96.float($fp2ui.float.i96(f)) == f);
axiom (forall i: i96 :: $fp2si.float.i96($si2fp.i96.float(i)) == i);
axiom (forall f: float :: $si2fp.i96.float($fp2si.float.i96(f)) == f);
axiom (forall i: i88 :: $fp2ui.float.i88($ui2fp.i88.float(i)) == i);
axiom (forall f: float :: $ui2fp.i88.float($fp2ui.float.i88(f)) == f);
axiom (forall i: i88 :: $fp2si.float.i88($si2fp.i88.float(i)) == i);
axiom (forall f: float :: $si2fp.i88.float($fp2si.float.i88(f)) == f);
axiom (forall i: i64 :: $fp2ui.float.i64($ui2fp.i64.float(i)) == i);
axiom (forall f: float :: $ui2fp.i64.float($fp2ui.float.i64(f)) == f);
axiom (forall i: i64 :: $fp2si.float.i64($si2fp.i64.float(i)) == i);
axiom (forall f: float :: $si2fp.i64.float($fp2si.float.i64(f)) == f);
axiom (forall i: i56 :: $fp2ui.float.i56($ui2fp.i56.float(i)) == i);
axiom (forall f: float :: $ui2fp.i56.float($fp2ui.float.i56(f)) == f);
axiom (forall i: i56 :: $fp2si.float.i56($si2fp.i56.float(i)) == i);
axiom (forall f: float :: $si2fp.i56.float($fp2si.float.i56(f)) == f);
axiom (forall i: i48 :: $fp2ui.float.i48($ui2fp.i48.float(i)) == i);
axiom (forall f: float :: $ui2fp.i48.float($fp2ui.float.i48(f)) == f);
axiom (forall i: i48 :: $fp2si.float.i48($si2fp.i48.float(i)) == i);
axiom (forall f: float :: $si2fp.i48.float($fp2si.float.i48(f)) == f);
axiom (forall i: i40 :: $fp2ui.float.i40($ui2fp.i40.float(i)) == i);
axiom (forall f: float :: $ui2fp.i40.float($fp2ui.float.i40(f)) == f);
axiom (forall i: i40 :: $fp2si.float.i40($si2fp.i40.float(i)) == i);
axiom (forall f: float :: $si2fp.i40.float($fp2si.float.i40(f)) == f);
axiom (forall i: i32 :: $fp2ui.float.i32($ui2fp.i32.float(i)) == i);
axiom (forall f: float :: $ui2fp.i32.float($fp2ui.float.i32(f)) == f);
axiom (forall i: i32 :: $fp2si.float.i32($si2fp.i32.float(i)) == i);
axiom (forall f: float :: $si2fp.i32.float($fp2si.float.i32(f)) == f);
axiom (forall i: i24 :: $fp2ui.float.i24($ui2fp.i24.float(i)) == i);
axiom (forall f: float :: $ui2fp.i24.float($fp2ui.float.i24(f)) == f);
axiom (forall i: i24 :: $fp2si.float.i24($si2fp.i24.float(i)) == i);
axiom (forall f: float :: $si2fp.i24.float($fp2si.float.i24(f)) == f);
axiom (forall i: i16 :: $fp2ui.float.i16($ui2fp.i16.float(i)) == i);
axiom (forall f: float :: $ui2fp.i16.float($fp2ui.float.i16(f)) == f);
axiom (forall i: i16 :: $fp2si.float.i16($si2fp.i16.float(i)) == i);
axiom (forall f: float :: $si2fp.i16.float($fp2si.float.i16(f)) == f);
axiom (forall i: i8 :: $fp2ui.float.i8($ui2fp.i8.float(i)) == i);
axiom (forall f: float :: $ui2fp.i8.float($fp2ui.float.i8(f)) == f);
axiom (forall i: i8 :: $fp2si.float.i8($si2fp.i8.float(i)) == i);
axiom (forall f: float :: $si2fp.i8.float($fp2si.float.i8(f)) == f);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
function {:inline} $isExternal(p: ref) returns (bool) {$slt.ref.bool(p,$EXTERNS_BOTTOM)}
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128){ $load.bytes.bv64(M, $add.ref(p, $8.ref)) ++ $load.bytes.bv64(M, p) }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96){ $load.bytes.bv64(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88){ $load.bytes.bv56(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64){ $load.bytes.bv32(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56){ $load.bytes.bv24(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48){ $load.bytes.bv16(M, $add.ref(p, $4.ref)) ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40){ M[$add.ref(p, $4.ref)] ++ $load.bytes.bv32(M, p) }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32){ M[$add.ref(p, $3.ref)] ++ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24){ M[$add.ref(p, $2.ref)] ++ M[$add.ref(p, $1.ref)]++M[p] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16){ M[$add.ref(p, $1.ref)] ++ M[p] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, v: i128) returns ([ref] i128) { M[p := v] }
function {:inline} $store.i96(M: [ref] i96, p: ref, v: i96) returns ([ref] i96) { M[p := v] }
function {:inline} $store.i88(M: [ref] i88, p: ref, v: i88) returns ([ref] i88) { M[p := v] }
function {:inline} $store.i64(M: [ref] i64, p: ref, v: i64) returns ([ref] i64) { M[p := v] }
function {:inline} $store.i56(M: [ref] i56, p: ref, v: i56) returns ([ref] i56) { M[p := v] }
function {:inline} $store.i48(M: [ref] i48, p: ref, v: i48) returns ([ref] i48) { M[p := v] }
function {:inline} $store.i40(M: [ref] i40, p: ref, v: i40) returns ([ref] i40) { M[p := v] }
function {:inline} $store.i32(M: [ref] i32, p: ref, v: i32) returns ([ref] i32) { M[p := v] }
function {:inline} $store.i24(M: [ref] i24, p: ref, v: i24) returns ([ref] i24) { M[p := v] }
function {:inline} $store.i16(M: [ref] i16, p: ref, v: i16) returns ([ref] i16) { M[p := v] }
function {:inline} $store.i8(M: [ref] i8, p: ref, v: i8) returns ([ref] i8) { M[p := v] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, v: bv128) returns ([ref] bv128) { M[p := v] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, v: bv96) returns ([ref] bv96) { M[p := v] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, v: bv88) returns ([ref] bv88) { M[p := v] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, v: bv64) returns ([ref] bv64) { M[p := v] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, v: bv56) returns ([ref] bv56) { M[p := v] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, v: bv48) returns ([ref] bv48) { M[p := v] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, v: bv40) returns ([ref] bv40) { M[p := v] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, v: bv32) returns ([ref] bv32) { M[p := v] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, v: bv24) returns ([ref] bv24) { M[p := v] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, v: bv16) returns ([ref] bv16) { M[p := v] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, v: bv8) returns ([ref] bv8) { M[p := v] }
function {:inline} $store.bytes.bv128(M:[ref]bv8, p:ref, v:bv128) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]][$add.ref(p, $11.ref) := v[104:96]][$add.ref(p, $12.ref) := v[112:104]][$add.ref(p, $13.ref) := v[120:112]][$add.ref(p, $14.ref) := v[128:120]]}
function {:inline} $store.bytes.bv96(M:[ref]bv8, p:ref, v:bv96) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]][$add.ref(p, $10.ref) := v[96:88]]}
function {:inline} $store.bytes.bv88(M:[ref]bv8, p:ref, v:bv88) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]][$add.ref(p, $7.ref) := v[72:64]][$add.ref(p, $8.ref) := v[80:72]][$add.ref(p, $9.ref) := v[88:80]]}
function {:inline} $store.bytes.bv64(M:[ref]bv8, p:ref, v:bv64) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]][$add.ref(p, $7.ref) := v[64:56]]}
function {:inline} $store.bytes.bv56(M:[ref]bv8, p:ref, v:bv56) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]][$add.ref(p, $6.ref) := v[56:48]]}
function {:inline} $store.bytes.bv48(M:[ref]bv8, p:ref, v:bv48) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]][$add.ref(p, $5.ref) := v[48:40]]}
function {:inline} $store.bytes.bv40(M:[ref]bv8, p:ref, v:bv40) returns ([ref]bv8){M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]][$add.ref(p, $4.ref) := v[40:32]]}
function {:inline} $store.bytes.bv32(M:[ref]bv8, p:ref, v:bv32) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]][$add.ref(p, $3.ref) := v[32:24]]}
function {:inline} $store.bytes.bv24(M:[ref]bv8, p:ref, v:bv24) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]][$add.ref(p, $2.ref) := v[24:16]]}
function {:inline} $store.bytes.bv16(M:[ref]bv8, p:ref, v:bv16) returns ([ref]bv8) {M[p := v[8:0]][$add.ref(p, $1.ref) := v[16:8]]}
function {:inline} $store.bytes.bv8(M:[ref]bv8, p:ref, v:bv8) returns ([ref]bv8) {M[p := v]}
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, v: ref) returns ([ref] ref) { M[p := v] }
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, v: float) returns ([ref] float) { M[p := v] }
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
procedure  boogie_si_record_bool(i: bool);
procedure  boogie_si_record_i1(i: i1);
procedure  boogie_si_record_i8(i: i8);
procedure  boogie_si_record_i16(i: i16);
procedure  boogie_si_record_i24(i: i24);
procedure  boogie_si_record_i32(i: i32);
procedure  boogie_si_record_i40(i: i40);
procedure  boogie_si_record_i48(i: i48);
procedure  boogie_si_record_i56(i: i56);
procedure  boogie_si_record_i64(i: i64);
procedure  boogie_si_record_i88(i: i88);
procedure  boogie_si_record_i96(i: i96);
procedure  boogie_si_record_i128(i: i128);
procedure  boogie_si_record_bv1(i: bv1);
procedure  boogie_si_record_bv8(i: bv8);
procedure  boogie_si_record_bv16(i: bv16);
procedure  boogie_si_record_bv24(i: bv24);
procedure  boogie_si_record_bv32(i: bv32);
procedure  boogie_si_record_bv40(i: bv40);
procedure  boogie_si_record_bv48(i: bv48);
procedure  boogie_si_record_bv56(i: bv56);
procedure  boogie_si_record_bv64(i: bv64);
procedure  boogie_si_record_bv88(i: bv88);
procedure  boogie_si_record_bv96(i: bv96);
procedure  boogie_si_record_bv128(i: bv128);
procedure  boogie_si_record_ref(i: ref);
procedure  boogie_si_record_float(i: float);
var $exn: bool;
var $exnv: int;
function $extractvalue(p: int, i: int) returns (int);

procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  p := $CurrAddr;
  havoc $CurrAddr;
  if ($sgt.ref.bool(n, $0.ref)) {
    assume $sle.ref.bool($add.ref(p, n), $CurrAddr);
  } else {
    assume $sle.ref.bool($add.ref(p, $1.ref), $CurrAddr);
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 105391));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 106423));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 2228, 3} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/smack.c", 2233, 1} true;
  $exn := false;
  return;
}
const __SMACK_init_func_corral_primitives: ref;
axiom (__SMACK_init_func_corral_primitives == $sub.ref(0, 107455));
procedure  __SMACK_init_func_corral_primitives()
{
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 6, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 7, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 8, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 9, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 10, 1} true;
  $exn := false;
  return;
}
procedure  corral_getThreadID() returns (x:int);
procedure  corral_getChildThreadID() returns (x:int);
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
const __SMACK_init_func_thread: ref;
axiom (__SMACK_init_func_thread == $sub.ref(0, 108487));
procedure  __SMACK_init_func_thread()
{
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 14, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 15, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 16, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 17, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 18, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 19, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 20, 3} true;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 22, 3} true;
  assume (forall i:int :: $pthreadStatus[i][0] == $pthread_uninitialized);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 23, 1} true;
  $exn := false;
  return;
}
//dim0=tid, dim1= idx 0 gets status, 1 gets return value
var $pthreadStatus: [int][int]int;
const unique $pthread_uninitialized: int;
const unique $pthread_initialized: int;
const unique $pthread_waiting: int;
const unique $pthread_running: int;
const unique $pthread_stopped: int;
const pthread_self: ref;
axiom (pthread_self == $sub.ref(0, 109519));
procedure  pthread_self()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 34, 17} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %call = call i32 (...) bitcast (i32 ()* @__VERIFIER_nondet_int to i32 (...)*)(), !dbg !193
  call {:cexpr "tmp_tid"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 35, 3} true;
  call $i0 := corral_getThreadID();
  // WARNING: call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14.1424, i32 0, i32 0), i32 %call), !dbg !197
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 40, 3} true;
  $r := $i0;
  $exn := false;
  return;
}
const pthread_join: ref;
axiom (pthread_join == $sub.ref(0, 110551));
procedure  pthread_join(__th: bv32, __thread_return: ref)
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv64;
  var $p4: ref;
  var $i2: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 49, 27} true;
  call $i0 := pthread_self();
  // WARNING: %call = call i32 @pthread_self(), !dbg !198
  call {:cexpr "calling_tid"} boogie_si_record_bv32($i0);
  // WARNING: call void @llvm.dbg.value(metadata i32 %call, i64 0, metadata !1697, metadata !194), !dbg !1698
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 55, 18} true;
  $i1 := $eq.bv32($i0, __th);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 55, 6} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 56, 5} true;
  $i2 := 35bv32;
  goto $bb3;
$bb2:
  assume !(($i1 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 59, 3} true;
  assume $pthreadStatus[__th][0] == $pthread_stopped;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 62, 44} true;
  call $i3 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_bv64($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 62, 37} true;
  $p4 := $i2p.bv64.ref($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 63, 3} true;
  $p4 := $pthreadStatus[__th][1];
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 64, 20} true;
  $M.29 := $store.ref($M.29, __thread_return, $p4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 69, 3} true;
  $i2 := 0bv32;
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 70, 1} true;
  $r := $i2;
  $exn := false;
  return;
}
const pthread_mutexattr_init: ref;
axiom (pthread_mutexattr_init == $sub.ref(0, 111583));
procedure  pthread_mutexattr_init(attr: ref)
  returns ($r: bv32)
{
  var $p0: ref;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 92, 9} true;
  $p0 := $add.ref(attr, 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 92, 14} true;
  $M.30 := $store.bv32($M.30, $p0, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 93, 3} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const pthread_mutex_init: ref;
axiom (pthread_mutex_init == $sub.ref(0, 112615));
procedure  pthread_mutex_init(mutex: ref, attr: ref)
  returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: bv1;
  var $p3: ref;
  var $i4: bv32;
  var $p5: ref;
  var $i6: bv32;
  var $p7: ref;
  var $p8: ref;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 104, 10} true;
  $p0 := mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 104, 15} true;
  $M.31 := $store.bv32($M.31, $p0, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 105, 10} true;
  $p1 := $add.ref(mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 105, 15} true;
  $M.32 := $store.bv32($M.32, $p1, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 106, 11} true;
  $i2 := $eq.ref(attr, $0.ref);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 106, 6} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 107, 36} true;
  $p3 := $add.ref(mutex, 8);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 107, 5} true;
  call $i4 := pthread_mutexattr_init($p3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 108, 3} true;
  goto $bb3;
$bb2:
  assume !(($i2 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 109, 30} true;
  $p5 := $add.ref(attr, 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 109, 30} true;
  $i6 := $load.bv32($M.33, $p5);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 109, 12} true;
  $p7 := $add.ref(mutex, 8);
  $p8 := $add.ref($add.ref(mutex, 8), 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 109, 22} true;
  $M.30 := $store.bv32($M.30, $p8, $i6);
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 114, 3} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const pthread_mutex_lock: ref;
axiom (pthread_mutex_lock == $sub.ref(0, 113647));
procedure  pthread_mutex_lock(__mutex: ref)
  returns ($r: bv32)
{
  var $i0: bv32;
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv32;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv1;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv1;
  var $p21: ref;
  var $i22: bv32;
  var $i23: bv1;
  var $p24: ref;
  var $i25: bv32;
  var $i26: bv1;
  var $i27: bv32;
  var $p28: ref;
  var $i20: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 118, 18} true;
  call $i0 := pthread_self();
  // WARNING: %call = call i32 @pthread_self(), !dbg !196
  call {:cexpr "tid"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 120, 15} true;
  $p1 := $add.ref(__mutex, 8);
  $p2 := $add.ref($add.ref(__mutex, 8), 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 120, 20} true;
  $i3 := $load.bv32($M.30, $p2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 120, 24} true;
  $i4 := $eq.bv32($i3, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 120, 6} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 122, 5} true;
  $p5 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 122, 5} true;
  $i6 := $load.bv32($M.32, $p5);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 122, 5} true;
  $i7 := $eq.bv32($i6, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 122, 5} true;
  $i8 := $zext.bv1.bv32($i7);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 122, 5} true;
  call __VERIFIER_assert($i8);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 123, 5} true;
  $p9 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 123, 5} true;
  $i10 := $load.bv32($M.31, $p9);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 123, 5} true;
  $i11 := $ne.bv32($i10, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 123, 5} true;
  $i12 := $zext.bv1.bv32($i11);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 123, 5} true;
  call __VERIFIER_assert($i12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 125, 3} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 125, 22} true;
  $p13 := $add.ref(__mutex, 8);
  $p14 := $add.ref($add.ref(__mutex, 8), 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 125, 27} true;
  $i15 := $load.bv32($M.30, $p14);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 125, 31} true;
  $i16 := $eq.bv32($i15, 2bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 125, 13} true;
  assume {:branchcond $i16} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 136, 3} true;
  call corral_atomic_begin();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 138, 30} true;
  $p24 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 138, 30} true;
  $i25 := $load.bv32($M.31, $p24);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 138, 35} true;
  $i26 := $eq.bv32($i25, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 138, 35} true;
  $i27 := $zext.bv1.bv32($i26);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 138, 3} true;
  call __VERIFIER_assume($i27);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 139, 12} true;
  $p28 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 139, 17} true;
  $M.31 := $store.bv32($M.31, $p28, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 140, 3} true;
  call corral_atomic_end();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 141, 3} true;
  $i20 := 0bv32;
  goto $bb8;
$bb4:
  assume ($i16 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 126, 17} true;
  $p17 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 126, 17} true;
  $i18 := $load.bv32($M.32, $p17);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 126, 22} true;
  $i19 := $ne.bv32($i18, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 126, 8} true;
  assume {:branchcond $i19} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i16 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 133, 5} true;
  call __VERIFIER_assert(0bv32);
  goto $bb11;
$bb6:
  assume ($i19 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 127, 7} true;
  $i20 := 22bv32;
  goto $bb8;
$bb7:
  assume !(($i19 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 128, 17} true;
  $p21 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 128, 17} true;
  $i22 := $load.bv32($M.31, $p21);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 128, 22} true;
  $i23 := $eq.bv32($i22, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 128, 8} true;
  assume {:branchcond $i23} true;
  goto $bb9, $bb10;
$bb8:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 142, 1} true;
  $r := $i20;
  $exn := false;
  return;
$bb9:
  assume ($i23 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 129, 7} true;
  $i20 := 35bv32;
  goto $bb8;
$bb10:
  assume !(($i23 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 130, 3} true;
  goto $bb11;
$bb11:
  goto $bb3;
}
const pthread_mutex_unlock: ref;
axiom (pthread_mutex_unlock == $sub.ref(0, 114679));
procedure  pthread_mutex_unlock(__mutex: ref)
  returns ($r: bv32)
{
  var $i0: bv32;
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv32;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv1;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv1;
  var $p21: ref;
  var $i22: bv32;
  var $i23: bv1;
  var $p24: ref;
  var $i20: bv32;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 145, 18} true;
  call $i0 := pthread_self();
  // WARNING: %call = call i32 @pthread_self(), !dbg !196
  call {:cexpr "tid"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 147, 15} true;
  $p1 := $add.ref(__mutex, 8);
  $p2 := $add.ref($add.ref(__mutex, 8), 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 147, 20} true;
  $i3 := $load.bv32($M.30, $p2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 147, 24} true;
  $i4 := $eq.bv32($i3, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 147, 6} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 149, 5} true;
  $p5 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 149, 5} true;
  $i6 := $load.bv32($M.32, $p5);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 149, 5} true;
  $i7 := $eq.bv32($i6, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 149, 5} true;
  $i8 := $zext.bv1.bv32($i7);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 149, 5} true;
  call __VERIFIER_assert($i8);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 150, 5} true;
  $p9 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 150, 5} true;
  $i10 := $load.bv32($M.31, $p9);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 150, 5} true;
  $i11 := $eq.bv32($i10, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 150, 5} true;
  $i12 := $zext.bv1.bv32($i11);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 150, 5} true;
  call __VERIFIER_assert($i12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 152, 3} true;
  goto $bb3;
$bb2:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 152, 22} true;
  $p13 := $add.ref(__mutex, 8);
  $p14 := $add.ref($add.ref(__mutex, 8), 12);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 152, 27} true;
  $i15 := $load.bv32($M.30, $p14);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 152, 31} true;
  $i16 := $eq.bv32($i15, 2bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 152, 13} true;
  assume {:branchcond $i16} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 163, 3} true;
  call corral_atomic_begin();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 164, 12} true;
  $p24 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 164, 17} true;
  $M.31 := $store.bv32($M.31, $p24, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 165, 3} true;
  call corral_atomic_end();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 166, 3} true;
  $i20 := 0bv32;
  goto $bb8;
$bb4:
  assume ($i16 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 153, 17} true;
  $p17 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 153, 17} true;
  $i18 := $load.bv32($M.32, $p17);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 153, 22} true;
  $i19 := $ne.bv32($i18, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 153, 8} true;
  assume {:branchcond $i19} true;
  goto $bb6, $bb7;
$bb5:
  assume !(($i16 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 160, 5} true;
  call __VERIFIER_assert(0bv32);
  goto $bb11;
$bb6:
  assume ($i19 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 154, 7} true;
  $i20 := 22bv32;
  goto $bb8;
$bb7:
  assume !(($i19 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 155, 17} true;
  $p21 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 155, 17} true;
  $i22 := $load.bv32($M.31, $p21);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 155, 22} true;
  $i23 := $ne.bv32($i22, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 155, 8} true;
  assume {:branchcond $i23} true;
  goto $bb9, $bb10;
$bb8:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 167, 1} true;
  $r := $i20;
  $exn := false;
  return;
$bb9:
  assume ($i23 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 156, 7} true;
  $i20 := 1bv32;
  goto $bb8;
$bb10:
  assume !(($i23 == 1bv1));
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 157, 3} true;
  goto $bb11;
$bb11:
  goto $bb3;
}
const pthread_mutex_destroy: ref;
axiom (pthread_mutex_destroy == $sub.ref(0, 115711));
procedure  pthread_mutex_destroy(__mutex: ref)
  returns ($r: bv32)
{
  var $p0: ref;
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv32;
  var $p4: ref;
  var $i5: bv32;
  var $i6: bv1;
  var $i7: bv32;
  var $p8: ref;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 172, 3} true;
  $p0 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 172, 3} true;
  $i1 := $load.bv32($M.32, $p0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 172, 3} true;
  $i2 := $eq.bv32($i1, 1bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 172, 3} true;
  $i3 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 172, 3} true;
  call __VERIFIER_assert($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 173, 3} true;
  $p4 := __mutex;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 173, 3} true;
  $i5 := $load.bv32($M.31, $p4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 173, 3} true;
  $i6 := $eq.bv32($i5, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 173, 3} true;
  $i7 := $zext.bv1.bv32($i6);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 173, 3} true;
  call __VERIFIER_assert($i7);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 175, 3} true;
  call corral_atomic_begin();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 176, 12} true;
  $p8 := $add.ref(__mutex, 4);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 176, 17} true;
  $M.32 := $store.bv32($M.32, $p8, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 177, 3} true;
  call corral_atomic_end();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 178, 3} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const __call_wrapper: ref;
axiom (__call_wrapper == $sub.ref(0, 116743));
procedure  __call_wrapper(__newthread: ref, __start_routine: ref, __arg: ref)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv32;
  var $p4: ref;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 253, 20} true;
  call $i0 := pthread_self();
  // WARNING: %call = call i32 @pthread_self(), !dbg !200
  call {:cexpr "ctid"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 255, 29} true;
  $i1 := $load.bytes.bv32($M.28, __newthread);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 255, 26} true;
  $i2 := $eq.bv32($i0, $i1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 255, 26} true;
  $i3 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 255, 3} true;
  call __VERIFIER_assume($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 259, 3} true;
  $pthreadStatus[$i0][0] := $pthread_waiting;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 260, 3} true;
  $pthreadStatus[$i0][0] := $pthread_running;
  call $p4 := devirtbounce(__start_routine, __arg);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 262, 3} true;
  $pthreadStatus[$i0][0] := $pthread_stopped;
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 263, 1} true;
  $exn := false;
  return;
}
const pthread_create: ref;
axiom (pthread_create == $sub.ref(0, 117775));
procedure  pthread_create(__newthread: ref, __attr: ref, __start_routine: ref, __arg: ref)
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv1;
$bb0:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 270, 19} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i0);
  // WARNING: %call = call i32 (...) bitcast (i32 ()* @__VERIFIER_nondet_int to i32 (...)*)(), !dbg !202
  call {:cexpr "tmp"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 274, 11} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
  // WARNING: %call2 = call i32 (...) bitcast (i32 ()* @__VERIFIER_nondet_int to i32 (...)*)(), !dbg !205
  call {:cexpr "x"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 275, 23} true;
  $i2 := $eq.bv32($i1, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 275, 23} true;
  $i3 := $zext.bv1.bv32($i2);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 275, 3} true;
  call __VERIFIER_assume($i3);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 276, 6} true;
  $i4 := $ne.bv32($i1, 0bv32);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 276, 6} true;
  assume {:branchcond $i4} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i4 == 1bv1);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 276, 9} true;
  call __call_wrapper(__newthread, __start_routine, __arg);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 276, 9} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 276, 6} true;
  assume !(($i4 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 278, 3} true;
  async call __call_wrapper(__newthread, __start_routine, __arg);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 281, 3} true;
  call $i0 := corral_getChildThreadID();
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 282, 16} true;
  $M.28 := $store.bytes.bv32($M.28, __newthread, $i0);
  assume {:sourceloc "/home/byhuang/workspace/packages/smack/build/share/smack/lib/pthread.c", 284, 3} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 118807));
procedure  llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 119839));
procedure  __SMACK_static_init()
{
$bb0:
  $M.1 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_db"} boogie_si_record_bv32(0bv32);
  $M.2 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_dbm"} boogie_si_record_bv32(0bv32);
  $M.3 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_dat0"} boogie_si_record_bv32(0bv32);
  $M.4 := 0bv32;
  call {:cexpr "reg_msg_mst2slv_dat1"} boogie_si_record_bv32(0bv32);
  $M.5 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_db"} boogie_si_record_bv32(0bv32);
  $M.6 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_dbm"} boogie_si_record_bv32(0bv32);
  $M.7 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_dat0"} boogie_si_record_bv32(0bv32);
  $M.8 := 0bv32;
  call {:cexpr "reg_msg_slv2mst_dat1"} boogie_si_record_bv32(0bv32);
  $M.9 := 0bv8;
  call {:cexpr "mstCpl"} boogie_si_record_bv8(0bv8);
  $M.15 := 0bv8;
  call {:cexpr "slvCpl"} boogie_si_record_bv8(0bv8);
  $M.23 := 0bv8;
  call {:cexpr "intCpl"} boogie_si_record_bv8(0bv8);
  $M.31 := $store.bv32($M.31, int_lock, 0bv32);
  $M.32 := $store.bv32($M.32, $add.ref(int_lock, 4), 0bv32);
  $M.34 := $store.bv32($M.34, $add.ref(int_lock, 8), 0bv32);
  $M.35 := $store.bv32($M.35, $add.ref($add.ref(int_lock, 8), 4), 0bv32);
  $M.36 := $store.bv32($M.36, $add.ref($add.ref(int_lock, 8), 8), 0bv32);
  $M.30 := $store.bv32($M.30, $add.ref($add.ref(int_lock, 8), 12), 0bv32);
  $M.31 := $store.bv32($M.31, fab_lock, 0bv32);
  $M.32 := $store.bv32($M.32, $add.ref(fab_lock, 4), 0bv32);
  $M.34 := $store.bv32($M.34, $add.ref(fab_lock, 8), 0bv32);
  $M.35 := $store.bv32($M.35, $add.ref($add.ref(fab_lock, 8), 4), 0bv32);
  $M.36 := $store.bv32($M.36, $add.ref($add.ref(fab_lock, 8), 8), 0bv32);
  $M.30 := $store.bv32($M.30, $add.ref($add.ref(fab_lock, 8), 12), 0bv32);
  $M.0 := 0bv32;
  call {:cexpr "reg_slv_int"} boogie_si_record_bv32(0bv32);
  $M.14 := $store.bytes.bv8($M.14, mst_sram, 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 1), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 2), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 3), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 4), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 5), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 6), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 7), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 8), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 9), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 10), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 11), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 12), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 13), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 14), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 15), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 16), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 17), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 18), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 19), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 20), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 21), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 22), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 23), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 24), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 25), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 26), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 27), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 28), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 29), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 30), 0bv8);
  $M.14 := $store.bytes.bv8($M.14, $add.ref(mst_sram, 31), 0bv8);
  $M.18 := 0bv32;
  $M.24 := 0bv32;
  $M.26 := 0bv32;
  $M.27 := 0bv32;
  $M.25 := 0bv32;
  $M.22 := 0bv32;
  $M.19 := 0bv32;
  $M.20 := 0bv32;
  $M.21 := 0bv32;
  $M.37 := 0bv32;
  $M.16 := $store.bv32($M.16, gSlvFlag, 0bv32);
  $M.16 := $store.bv32($M.16, $add.ref(gSlvFlag, 4), 0bv32);
  $M.17 := $store.bv32($M.17, gMbCtx, 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 4), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 8), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 12), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 16), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 20), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 24), 0bv32);
  $M.17 := $store.bv32($M.17, $add.ref(gMbCtx, 28), 0bv32);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 120871));
procedure  devirtbounce(funcPtr: ref, arg: ref)
  returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i6 := $eq.ref(entryHdl, $p0);
  assume {:branchcond $i6} true;
  goto $bb4, $bb7;
$bb2:
  assume ($i4 == 1bv1);
  call $p1 := entryMst(arg);
  $r := $p1;
  $exn := false;
  return;
$bb3:
  assume ($i5 == 1bv1);
  call $p2 := entrySlv(arg);
  $r := $p2;
  $exn := false;
  return;
$bb4:
  assume ($i6 == 1bv1);
  call $p3 := entryHdl(arg);
  $r := $p3;
  $exn := false;
  return;
$bb5:
  assume !(($i4 == 1bv1));
  assume false;
$bb6:
  assume !(($i5 == 1bv1));
  $i4 := $eq.ref(entryMst, $p0);
  assume {:branchcond $i4} true;
  goto $bb2, $bb5;
$bb7:
  assume !(($i6 == 1bv1));
  $i5 := $eq.ref(entrySlv, $p0);
  assume {:branchcond $i5} true;
  goto $bb3, $bb6;
}
procedure  $memcpy.bv8(M.dst: [ref] bv8, M.src: [ref] bv8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] bv8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure  $memset.bv8(M: [ref] bv8, dst: ref, val: bv8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref] bv8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  call __SMACK_init_func_corral_primitives();
  call __SMACK_init_func_thread();
  return;
}
